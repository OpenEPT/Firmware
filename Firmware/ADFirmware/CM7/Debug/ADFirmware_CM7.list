
ADFirmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c424  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c8  0801c6c4  0801c6c4  0002c6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb8c  0801fb8c  00030154  2**0
                  CONTENTS
  4 .ARM          00000000  0801fb8c  0801fb8c  00030154  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801fb8c  0801fb8c  00030154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb8c  0801fb8c  0002fb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb90  0801fb90  0002fb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  0801fb94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000094  0801fc28  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f4  0801fc88  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c9e0  24000154  0801fce8  00030154  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400cb34  0801fce8  0003cb34  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 15 .debug_info   00036789  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008499  00000000  00000000  0006694e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002820  00000000  00000000  0006ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f59  00000000  00000000  00071608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004c83b  00000000  00000000  00073561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000413c0  00000000  00000000  000bfd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001b67cf  00000000  00000000  0010115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000af7c  00000000  00000000  002b792c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  002c28a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c6ac 	.word	0x0801c6ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	0801c6ac 	.word	0x0801c6ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b2:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <main+0x178>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d11b      	bne.n	80004f6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004be:	f3bf 8f4f 	dsb	sy
}
 80004c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
}
 80004c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ca:	4b56      	ldr	r3, [pc, #344]	; (8000624 <main+0x178>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004d2:	f3bf 8f4f 	dsb	sy
}
 80004d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d8:	f3bf 8f6f 	isb	sy
}
 80004dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004de:	4b51      	ldr	r3, [pc, #324]	; (8000624 <main+0x178>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a50      	ldr	r2, [pc, #320]	; (8000624 <main+0x178>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ea:	f3bf 8f4f 	dsb	sy
}
 80004ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f0:	f3bf 8f6f 	isb	sy
}
 80004f4:	e000      	b.n	80004f8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004f8:	4b4a      	ldr	r3, [pc, #296]	; (8000624 <main+0x178>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d138      	bne.n	8000576 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000504:	4b47      	ldr	r3, [pc, #284]	; (8000624 <main+0x178>)
 8000506:	2200      	movs	r2, #0
 8000508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
}
 8000510:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000512:	4b44      	ldr	r3, [pc, #272]	; (8000624 <main+0x178>)
 8000514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000518:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	0b5b      	lsrs	r3, r3, #13
 800051e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000522:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800052c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	015a      	lsls	r2, r3, #5
 8000532:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000536:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800053c:	4939      	ldr	r1, [pc, #228]	; (8000624 <main+0x178>)
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ef      	bne.n	800052e <main+0x82>
    } while(sets-- != 0U);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	60fa      	str	r2, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1e5      	bne.n	8000524 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
}
 800055c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <main+0x178>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a30      	ldr	r2, [pc, #192]	; (8000624 <main+0x178>)
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
}
 8000574:	e000      	b.n	8000578 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000576:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057c:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800057e:	bf00      	nop
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <main+0x17c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d004      	beq.n	8000596 <main+0xea>
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	1e5a      	subs	r2, r3, #1
 8000590:	617a      	str	r2, [r7, #20]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dcf4      	bgt.n	8000580 <main+0xd4>
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 ff05 	bl	80013a4 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800059a:	f000 fa91 	bl	8000ac0 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f84b 	bl	8000638 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x17c>)
 80005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <main+0x17c>)
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0x17c>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f005 fdd7 	bl	8006174 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f005 fded 	bl	80061a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d2:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005d4:	bf00      	nop
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <main+0x17c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d104      	bne.n	80005ec <main+0x140>
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	617a      	str	r2, [r7, #20]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dcf4      	bgt.n	80005d6 <main+0x12a>
if ( timeout < 0 )
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da01      	bge.n	80005f6 <main+0x14a>
{
Error_Handler();
 80005f2:	f000 fa91 	bl	8000b18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f9e5 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 f9c3 	bl	8000984 <MX_DMA_Init>
  MX_USART3_Init();
 80005fe:	f000 f975 	bl	80008ec <MX_USART3_Init>
  MX_ADC1_Init();
 8000602:	f000 f8c9 	bl	8000798 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000606:	f000 f93f 	bl	8000888 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060a:	f00a ff55 	bl	800b4b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <main+0x180>)
 8000610:	2100      	movs	r1, #0
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x184>)
 8000614:	f00a ffaf 	bl	800b576 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <main+0x188>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f00a ff6f 	bl	800b500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x176>
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	58024400 	.word	0x58024400
 800062c:	0801f92c 	.word	0x0801f92c
 8000630:	08000aad 	.word	0x08000aad
 8000634:	240002c0 	.word	0x240002c0

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09e      	sub	sp, #120	; 0x78
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000642:	224c      	movs	r2, #76	; 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f01b f983 	bl	801b952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f01b f97c 	bl	801b952 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065a:	2002      	movs	r0, #2
 800065c:	f005 fdb8 	bl	80061d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b49      	ldr	r3, [pc, #292]	; (800078c <SystemClock_Config+0x154>)
 8000666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000668:	4a48      	ldr	r2, [pc, #288]	; (800078c <SystemClock_Config+0x154>)
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000670:	4b46      	ldr	r3, [pc, #280]	; (800078c <SystemClock_Config+0x154>)
 8000672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b45      	ldr	r3, [pc, #276]	; (8000790 <SystemClock_Config+0x158>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a44      	ldr	r2, [pc, #272]	; (8000790 <SystemClock_Config+0x158>)
 8000680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <SystemClock_Config+0x158>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000692:	bf00      	nop
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <SystemClock_Config+0x158>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a0:	d1f8      	bne.n	8000694 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <SystemClock_Config+0x15c>)
 80006a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemClock_Config+0x15c>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <SystemClock_Config+0x15c>)
 80006b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <SystemClock_Config+0x158>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a31      	ldr	r2, [pc, #196]	; (8000790 <SystemClock_Config+0x158>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <SystemClock_Config+0x158>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemClock_Config+0x154>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	4a2b      	ldr	r2, [pc, #172]	; (800078c <SystemClock_Config+0x154>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemClock_Config+0x154>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0x158>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000700:	d1f8      	bne.n	80006f4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000706:	2301      	movs	r3, #1
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000712:	2300      	movs	r3, #0
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800071a:	233c      	movs	r3, #60	; 0x3c
 800071c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000722:	230f      	movs	r3, #15
 8000724:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800072a:	230c      	movs	r3, #12
 800072c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800072e:	2300      	movs	r3, #0
 8000730:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fda2 	bl	8006284 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000746:	f000 f9e7 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	233f      	movs	r3, #63	; 0x3f
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000756:	2308      	movs	r3, #8
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f006 f9e0 	bl	8006b38 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800077e:	f000 f9cb 	bl	8000b18 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3778      	adds	r7, #120	; 0x78
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58000400 	.word	0x58000400
 8000790:	58024800 	.word	0x58024800
 8000794:	58024400 	.word	0x58024400

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_ADC1_Init+0xe4>)
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <MX_ADC1_Init+0xe8>)
 80007c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_ADC1_Init+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC1_Init+0xe4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_ADC1_Init+0xe4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC1_Init+0xe4>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_ADC1_Init+0xe4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_ADC1_Init+0xe4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_ADC1_Init+0xe4>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_ADC1_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC1_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_ADC1_Init+0xe4>)
 800081a:	f001 f825 	bl	8001868 <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 f978 	bl	8000b18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_ADC1_Init+0xe4>)
 8000834:	f001 fe3c 	bl	80024b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800083e:	f000 f96b 	bl	8000b18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ADC1_Init+0xec>)
 8000844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000846:	2306      	movs	r3, #6
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000854:	2304      	movs	r3, #4
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC1_Init+0xe4>)
 8000866:	f001 f9a1 	bl	8001bac <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000870:	f000 f952 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000170 	.word	0x24000170
 8000880:	40022000 	.word	0x40022000
 8000884:	08600004 	.word	0x08600004

08000888 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2224      	movs	r2, #36	; 0x24
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f01b f85c 	bl	801b952 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_DAC1_Init+0x5c>)
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_DAC1_Init+0x60>)
 800089e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_DAC1_Init+0x5c>)
 80008a2:	f002 f86f 	bl	8002984 <HAL_DAC_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008ac:	f000 f934 	bl	8000b18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_DAC1_Init+0x5c>)
 80008cc:	f002 f87c 	bl	80029c8 <HAL_DAC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f91f 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2400024c 	.word	0x2400024c
 80008e8:	40007400 	.word	0x40007400

080008ec <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_USART3_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <MX_USART3_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_USART3_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_USART3_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_USART3_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_USART3_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_USART3_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_USART3_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_USART3_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_USART3_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART3_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART3_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_USART3_Init+0x90>)
 8000936:	f009 f989 	bl	8009c4c <HAL_USART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000940:	f000 f8ea 	bl	8000b18 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_USART3_Init+0x90>)
 8000948:	f009 ff9c 	bl	800a884 <HAL_USARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f8e1 	bl	8000b18 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <MX_USART3_Init+0x90>)
 800095a:	f009 ffd1 	bl	800a900 <HAL_USARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f8d8 	bl	8000b18 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_USART3_Init+0x90>)
 800096a:	f009 ff52 	bl	800a812 <HAL_USARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f8d0 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000260 	.word	0x24000260
 8000980:	40004800 	.word	0x40004800

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_DMA_Init+0x3c>)
 800098c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <MX_DMA_Init+0x3c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_DMA_Init+0x3c>)
 800099c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2105      	movs	r1, #5
 80009ac:	200b      	movs	r0, #11
 80009ae:	f001 ff38 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009b2:	200b      	movs	r0, #11
 80009b4:	f001 ff4f 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58024400 	.word	0x58024400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a2e      	ldr	r2, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	58024400 	.word	0x58024400

08000aac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ab4:	f009 ffac 	bl	800aa10 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f00a fdee 	bl	800b69a <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartDefaultTask+0xc>

08000ac0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ad2:	f001 fedb 	bl	800288c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aee:	2300      	movs	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b02:	463b      	mov	r3, r7
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fef9 	bl	80028fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF_NONE);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f001 fed6 	bl	80028bc <HAL_MPU_Enable>

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x38>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x38>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x38>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f06f 0001 	mvn.w	r0, #1
 8000b50:	f001 fe67 	bl	8002822 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0bc      	sub	sp, #240	; 0xf0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	22c0      	movs	r2, #192	; 0xc0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f01a fee6 	bl	801b952 <memset>
  if(hadc->Instance==ADC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_ADC_MspInit+0x17c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	f040 80a1 	bne.w	8000cd4 <HAL_ADC_MspInit+0x174>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000ba2:	2309      	movs	r3, #9
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bb2:	23c0      	movs	r3, #192	; 0xc0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8000bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fb40 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000bd6:	f7ff ff9f 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bda:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be0:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bea:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a30      	ldr	r2, [pc, #192]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000c1e:	f043 0320 	orr.w	r3, r3, #32
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <HAL_ADC_MspInit+0x180>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c34:	2340      	movs	r3, #64	; 0x40
 8000c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <HAL_ADC_MspInit+0x184>)
 8000c4e:	f005 f8e1 	bl	8005e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <HAL_ADC_MspInit+0x188>)
 8000c6e:	f005 f8d1 	bl	8005e14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_ADC_MspInit+0x190>)
 8000c76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c7a:	2209      	movs	r2, #9
 8000c7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000cac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000cba:	f001 ffc3 	bl	8002c44 <HAL_DMA_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_ADC_MspInit+0x168>
    {
      Error_Handler();
 8000cc4:	f7ff ff28 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000ccc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_ADC_MspInit+0x18c>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37f0      	adds	r7, #240	; 0xf0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	58021400 	.word	0x58021400
 8000cec:	240001d4 	.word	0x240001d4
 8000cf0:	40020010 	.word	0x40020010

08000cf4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_DAC_MspInit+0x80>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d129      	bne.n	8000d6a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d1c:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_DAC_MspInit+0x84>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d52:	2310      	movs	r3, #16
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_DAC_MspInit+0x88>)
 8000d66:	f005 f855 	bl	8005e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40007400 	.word	0x40007400
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020000 	.word	0x58020000

08000d80 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0bc      	sub	sp, #240	; 0xf0
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	22c0      	movs	r2, #192	; 0xc0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f01a fdd6 	bl	801b952 <memset>
  if(husart->Instance==USART3)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <HAL_USART_MspInit+0x110>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d16b      	bne.n	8000e88 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000db0:	f04f 0202 	mov.w	r2, #2
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 fa42 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8000dd2:	f7ff fea1 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_USART_MspInit+0x114>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e54:	4619      	mov	r1, r3
 8000e56:	4810      	ldr	r0, [pc, #64]	; (8000e98 <HAL_USART_MspInit+0x118>)
 8000e58:	f004 ffdc 	bl	8005e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e76:	2307      	movs	r3, #7
 8000e78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_USART_MspInit+0x11c>)
 8000e84:	f004 ffc6 	bl	8005e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	37f0      	adds	r7, #240	; 0xf0
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004800 	.word	0x40004800
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58020c00 	.word	0x58020c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 fada 	bl	8001488 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ed4:	f00d fb84 	bl	800e5e0 <xTaskGetSchedulerState>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ede:	f00b fbeb 	bl	800c6b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Stream0_IRQHandler+0x10>)
 8000eee:	f002 fa05 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	240001d4 	.word	0x240001d4

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_kill>:

int _kill(int pid, int sig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <_kill+0x20>)
 8000f18:	2216      	movs	r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	2400c974 	.word	0x2400c974

08000f30 <_exit>:

void _exit (int status)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe5 	bl	8000f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f42:	e7fe      	b.n	8000f42 <_exit+0x12>

08000f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00a      	b.n	8000f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf0      	blt.n	8000f56 <_read+0x12>
  }

  return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e009      	b.n	8000fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf1      	blt.n	8000f90 <_write+0x12>
  }
  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_close>:

int _close(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d205      	bcs.n	800105c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <_sbrk+0x6c>)
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	24080000 	.word	0x24080000
 8001080:	00000400 	.word	0x00000400
 8001084:	240002c4 	.word	0x240002c4
 8001088:	2400cb38 	.word	0x2400cb38
 800108c:	2400c974 	.word	0x2400c974

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff f974 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f01a fc97 	bl	801b9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff f9f3 	bl	80004ac <main>
  bx  lr
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d0:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80010d4:	0801fb94 	.word	0x0801fb94
  ldr r2, =_sbss
 80010d8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 80010dc:	2400cb34 	.word	0x2400cb34

080010e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC3_IRQHandler>

080010e2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <LAN8742_RegisterBusIO+0x28>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <LAN8742_RegisterBusIO+0x28>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <LAN8742_RegisterBusIO+0x28>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e014      	b.n	800113a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d17c      	bne.n	8001260 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e01c      	b.n	80011ba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2112      	movs	r1, #18
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	da03      	bge.n	800119c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001194:	f06f 0304 	mvn.w	r3, #4
 8001198:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800119a:	e00b      	b.n	80011b4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d105      	bne.n	80011b4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
         break;
 80011b2:	e005      	b.n	80011c0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	d9df      	bls.n	8001180 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d902      	bls.n	80011ce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011c8:	f06f 0302 	mvn.w	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d145      	bne.n	8001260 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6810      	ldr	r0, [r2, #0]
 80011dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e0:	2100      	movs	r1, #0
 80011e2:	4798      	blx	r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db37      	blt.n	800125a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6810      	ldr	r0, [r2, #0]
 80011f2:	f107 0208 	add.w	r2, r7, #8
 80011f6:	2100      	movs	r1, #0
 80011f8:	4798      	blx	r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db28      	blt.n	8001252 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4798      	blx	r3
 8001206:	4603      	mov	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800120a:	e01c      	b.n	8001246 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4798      	blx	r3
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121e:	d80e      	bhi.n	800123e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6810      	ldr	r0, [r2, #0]
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	2100      	movs	r1, #0
 800122e:	4798      	blx	r3
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	da07      	bge.n	8001246 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001236:	f06f 0304 	mvn.w	r3, #4
 800123a:	613b      	str	r3, [r7, #16]
                 break;
 800123c:	e010      	b.n	8001260 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800123e:	f06f 0301 	mvn.w	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
               break;
 8001244:	e00c      	b.n	8001260 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1dd      	bne.n	800120c <LAN8742_Init+0xc6>
 8001250:	e006      	b.n	8001260 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001252:	f06f 0304 	mvn.w	r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	e002      	b.n	8001260 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800125a:	f06f 0303 	mvn.w	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d112      	bne.n	800128c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4798      	blx	r3
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001270:	bf00      	nop
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4798      	blx	r3
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001284:	d9f5      	bls.n	8001272 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800128c:	693b      	ldr	r3, [r7, #16]
 }
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	2101      	movs	r1, #1
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da02      	bge.n	80012be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b8:	f06f 0304 	mvn.w	r3, #4
 80012bc:	e06e      	b.n	800139c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6810      	ldr	r0, [r2, #0]
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	2101      	movs	r1, #1
 80012cc:	4798      	blx	r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da02      	bge.n	80012da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012d4:	f06f 0304 	mvn.w	r3, #4
 80012d8:	e060      	b.n	800139c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012e4:	2301      	movs	r3, #1
 80012e6:	e059      	b.n	800139c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6810      	ldr	r0, [r2, #0]
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	2100      	movs	r1, #0
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da02      	bge.n	8001304 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012fe:	f06f 0304 	mvn.w	r3, #4
 8001302:	e04b      	b.n	800139c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11b      	bne.n	8001346 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <LAN8742_GetLinkState+0x90>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001322:	2302      	movs	r3, #2
 8001324:	e03a      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001330:	2303      	movs	r3, #3
 8001332:	e033      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800133e:	2304      	movs	r3, #4
 8001340:	e02c      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001342:	2305      	movs	r3, #5
 8001344:	e02a      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6810      	ldr	r0, [r2, #0]
 800134e:	f107 020c 	add.w	r2, r7, #12
 8001352:	211f      	movs	r1, #31
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	da02      	bge.n	8001362 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800135c:	f06f 0304 	mvn.w	r3, #4
 8001360:	e01c      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800136c:	2306      	movs	r3, #6
 800136e:	e015      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 031c 	and.w	r3, r3, #28
 8001376:	2b18      	cmp	r3, #24
 8001378:	d101      	bne.n	800137e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800137a:	2302      	movs	r3, #2
 800137c:	e00e      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 031c 	and.w	r3, r3, #28
 8001384:	2b08      	cmp	r3, #8
 8001386:	d101      	bne.n	800138c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001388:	2303      	movs	r3, #3
 800138a:	e007      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 031c 	and.w	r3, r3, #28
 8001392:	2b14      	cmp	r3, #20
 8001394:	d101      	bne.n	800139a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001396:	2304      	movs	r3, #4
 8001398:	e000      	b.n	800139c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800139a:	2305      	movs	r3, #5
    }				
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f001 fa2e 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013b0:	f005 fd78 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_Init+0x68>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	4913      	ldr	r1, [pc, #76]	; (8001410 <HAL_Init+0x6c>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_Init+0x68>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_Init+0x6c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_Init+0x70>)
 80013e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_Init+0x74>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f814 	bl	800141c <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e002      	b.n	8001404 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013fe:	f7ff fb91 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024400 	.word	0x58024400
 8001410:	0801f91c 	.word	0x0801f91c
 8001414:	24000004 	.word	0x24000004
 8001418:	24000000 	.word	0x24000000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_InitTick+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e021      	b.n	8001474 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_InitTick+0x64>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_InitTick+0x60>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fa13 	bl	8002872 <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f001 f9dd 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x68>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2400000c 	.word	0x2400000c
 8001480:	24000000 	.word	0x24000000
 8001484:	24000008 	.word	0x24000008

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2400000c 	.word	0x2400000c
 80014ac:	240002c8 	.word	0x240002c8

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	240002c8 	.word	0x240002c8

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff ffee 	bl	80014b0 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_Delay+0x44>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ee:	bf00      	nop
 80014f0:	f7ff ffde 	bl	80014b0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
  {
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2400000c 	.word	0x2400000c

08001510 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetREVID+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0c1b      	lsrs	r3, r3, #16
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	5c001000 	.word	0x5c001000

08001528 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	58000400 	.word	0x58000400

08001550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3360      	adds	r3, #96	; 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	611a      	str	r2, [r3, #16]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3360      	adds	r3, #96	; 0x60
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
  }
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	211f      	movs	r1, #31
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0e9b      	lsrs	r3, r3, #26
 8001698:	f003 011f 	and.w	r1, r3, #31
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	431a      	orrs	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3314      	adds	r3, #20
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0e5b      	lsrs	r3, r3, #25
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0d1b      	lsrs	r3, r3, #20
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2107      	movs	r1, #7
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	401a      	ands	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0d1b      	lsrs	r3, r3, #20
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0318 	and.w	r3, r3, #24
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001734:	40d9      	lsrs	r1, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	400b      	ands	r3, r1
 800173a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800173e:	431a      	orrs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	000fffff 	.word	0x000fffff

08001758 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6093      	str	r3, [r2, #8]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	5fffffc0 	.word	0x5fffffc0

0800177c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800178c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001790:	d101      	bne.n	8001796 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	6fffffc0 	.word	0x6fffffc0

080017cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <LL_ADC_IsEnabled+0x18>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_IsEnabled+0x1a>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b04      	cmp	r3, #4
 800182c:	d101      	bne.n	8001832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b08      	cmp	r3, #8
 8001852:	d101      	bne.n	8001858 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e18f      	b.n	8001ba2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff f965 	bl	8000b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff67 	bl	800177c <LL_ADC_IsDeepPowerDownEnabled>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff4d 	bl	8001758 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff82 	bl	80017cc <LL_ADC_IsInternalRegulatorEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d114      	bne.n	80018f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff66 	bl	80017a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018d8:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <HAL_ADC_Init+0x290>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	4a87      	ldr	r2, [pc, #540]	; (8001afc <HAL_ADC_Init+0x294>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff65 	bl	80017cc <LL_ADC_IsInternalRegulatorEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0210 	orr.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff76 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 800192e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 8129 	bne.w	8001b90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8125 	bne.w	8001b90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff4a 	bl	80017f4 <LL_ADC_IsEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d136      	bne.n	80019d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_ADC_Init+0x298>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d004      	beq.n	800197a <HAL_ADC_Init+0x112>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_ADC_Init+0x29c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10e      	bne.n	8001998 <HAL_ADC_Init+0x130>
 800197a:	4861      	ldr	r0, [pc, #388]	; (8001b00 <HAL_ADC_Init+0x298>)
 800197c:	f7ff ff3a 	bl	80017f4 <LL_ADC_IsEnabled>
 8001980:	4604      	mov	r4, r0
 8001982:	4860      	ldr	r0, [pc, #384]	; (8001b04 <HAL_ADC_Init+0x29c>)
 8001984:	f7ff ff36 	bl	80017f4 <LL_ADC_IsEnabled>
 8001988:	4603      	mov	r3, r0
 800198a:	4323      	orrs	r3, r4
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e008      	b.n	80019aa <HAL_ADC_Init+0x142>
 8001998:	485b      	ldr	r0, [pc, #364]	; (8001b08 <HAL_ADC_Init+0x2a0>)
 800199a:	f7ff ff2b 	bl	80017f4 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <HAL_ADC_Init+0x298>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d004      	beq.n	80019c2 <HAL_ADC_Init+0x15a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <HAL_ADC_Init+0x29c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x15e>
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_ADC_Init+0x2a4>)
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_Init+0x160>
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_ADC_Init+0x2a8>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7ff fdbe 	bl	8001550 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019d4:	f7ff fd9c 	bl	8001510 <HAL_GetREVID>
 80019d8:	4603      	mov	r3, r0
 80019da:	f241 0203 	movw	r2, #4099	; 0x1003
 80019de:	4293      	cmp	r3, r2
 80019e0:	d914      	bls.n	8001a0c <HAL_ADC_Init+0x1a4>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d110      	bne.n	8001a0c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7d5b      	ldrb	r3, [r3, #21]
 80019ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7f1b      	ldrb	r3, [r3, #28]
 8001a00:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a02:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a04:	f043 030c 	orr.w	r3, r3, #12
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	e00d      	b.n	8001a28 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7d5b      	ldrb	r3, [r3, #21]
 8001a10:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a16:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a1c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7f1b      	ldrb	r3, [r3, #28]
 8001a22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7f1b      	ldrb	r3, [r3, #28]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	045b      	lsls	r3, r3, #17
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_ADC_Init+0x2ac>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fed1 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001a78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fede 	bl	8001840 <LL_ADC_INJ_IsConversionOngoing>
 8001a84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d15f      	bne.n	8001b4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d15c      	bne.n	8001b4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7d1b      	ldrb	r3, [r3, #20]
 8001a96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_ADC_Init+0x2b0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d130      	bne.n	8001b20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_ADC_Init+0x2b4>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	0411      	lsls	r1, r2, #16
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	e01c      	b.n	8001b30 <HAL_ADC_Init+0x2c8>
 8001af6:	bf00      	nop
 8001af8:	24000000 	.word	0x24000000
 8001afc:	053e2d63 	.word	0x053e2d63
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40022100 	.word	0x40022100
 8001b08:	58026000 	.word	0x58026000
 8001b0c:	40022300 	.word	0x40022300
 8001b10:	58026300 	.word	0x58026300
 8001b14:	fff0c003 	.word	0xfff0c003
 8001b18:	ffffbffc 	.word	0xffffbffc
 8001b1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fb80 	bl	800224c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10c      	bne.n	8001b6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f023 010f 	bic.w	r1, r3, #15
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6c:	e007      	b.n	8001b7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 020f 	bic.w	r2, r2, #15
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b8e:	e007      	b.n	8001ba0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop

08001bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b0a1      	sub	sp, #132	; 0x84
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a9d      	ldr	r2, [pc, #628]	; (8001e3c <HAL_ADC_ConfigChannel+0x290>)
 8001bc6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x2a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e321      	b.n	800221a <HAL_ADC_ConfigChannel+0x66e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fe19 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 8306 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x62>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2201      	movs	r2, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	e016      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x90>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2201      	movs	r2, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	69d1      	ldr	r1, [r2, #28]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7ff fd02 	bl	8001660 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fdda 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001c66:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fde7 	bl	8001840 <LL_ADC_INJ_IsConversionOngoing>
 8001c72:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 80b3 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 80af 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f7ff fd11 	bl	80016b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_ADC_ConfigChannel+0x294>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x110>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	e01d      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x14c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x136>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	e00a      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x14c>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d027      	beq.n	8001d52 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6919      	ldr	r1, [r3, #16]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	f7ff fc52 	bl	80015b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6919      	ldr	r1, [r3, #16]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7e5b      	ldrb	r3, [r3, #25]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x17e>
 8001d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d28:	e000      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x180>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f7ff fc7c 	bl	800162a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	7e1b      	ldrb	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x19c>
 8001d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d46:	e000      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x19e>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f7ff fc54 	bl	80015f8 <LL_ADC_SetDataRightShift>
 8001d50:	e047      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	069b      	lsls	r3, r3, #26
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d107      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d74:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	069b      	lsls	r3, r3, #26
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d107      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d98:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d107      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	069b      	lsls	r3, r3, #26
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d107      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001de0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fd04 	bl	80017f4 <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 820d 	bne.w	800220e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fc85 	bl	8001710 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_ADC_ConfigChannel+0x290>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 8133 	bne.w	8002078 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d110      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x298>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	bf94      	ite	ls
 8001e32:	2301      	movls	r3, #1
 8001e34:	2300      	movhi	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e01e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x2cc>
 8001e3a:	bf00      	nop
 8001e3c:	47ff0000 	.word	0x47ff0000
 8001e40:	5c001000 	.word	0x5c001000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e003      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	bf94      	ite	ls
 8001e72:	2301      	movls	r3, #1
 8001e74:	2300      	movhi	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d079      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x2ec>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e96:	e015      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x318>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	069b      	lsls	r3, r3, #26
 8001ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x338>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	e017      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x368>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	ea42 0103 	orr.w	r1, r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x38e>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	051b      	lsls	r3, r3, #20
 8001f38:	e018      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x3c0>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e003      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	e07e      	b.n	800206e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x3e0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	3301      	adds	r3, #1
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	e015      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x40c>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x42c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	e017      	b.n	8002008 <HAL_ADC_ConfigChannel+0x45c>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	61bb      	str	r3, [r7, #24]
  return result;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e003      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	ea42 0103 	orr.w	r1, r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x488>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	3301      	adds	r3, #1
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	3b1e      	subs	r3, #30
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	e01b      	b.n	800206c <HAL_ADC_ConfigChannel+0x4c0>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	60fb      	str	r3, [r7, #12]
  return result;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e003      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	3b1e      	subs	r3, #30
 8002066:	051b      	lsls	r3, r3, #20
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206c:	430b      	orrs	r3, r1
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6892      	ldr	r2, [r2, #8]
 8002072:	4619      	mov	r1, r3
 8002074:	f7ff fb20 	bl	80016b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f280 80c6 	bge.w	800220e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a67      	ldr	r2, [pc, #412]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x4ea>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x4ee>
 8002096:	4b65      	ldr	r3, [pc, #404]	; (800222c <HAL_ADC_ConfigChannel+0x680>)
 8002098:	e000      	b.n	800209c <HAL_ADC_ConfigChannel+0x4f0>
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_ADC_ConfigChannel+0x684>)
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fa7d 	bl	800159c <LL_ADC_GetCommonPathInternalCh>
 80020a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x50c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10e      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x52a>
 80020b8:	485a      	ldr	r0, [pc, #360]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 80020ba:	f7ff fb9b 	bl	80017f4 <LL_ADC_IsEnabled>
 80020be:	4604      	mov	r4, r0
 80020c0:	4859      	ldr	r0, [pc, #356]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 80020c2:	f7ff fb97 	bl	80017f4 <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4323      	orrs	r3, r4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e008      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x53c>
 80020d6:	4857      	ldr	r0, [pc, #348]	; (8002234 <HAL_ADC_ConfigChannel+0x688>)
 80020d8:	f7ff fb8c 	bl	80017f4 <LL_ADC_IsEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07d      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_ADC_ConfigChannel+0x68c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d130      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x5ac>
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12b      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4b      	ldr	r2, [pc, #300]	; (8002234 <HAL_ADC_ConfigChannel+0x688>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8081 	bne.w	800220e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a44      	ldr	r2, [pc, #272]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x574>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x578>
 8002120:	4a42      	ldr	r2, [pc, #264]	; (800222c <HAL_ADC_ConfigChannel+0x680>)
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x57a>
 8002124:	4a42      	ldr	r2, [pc, #264]	; (8002230 <HAL_ADC_ConfigChannel+0x684>)
 8002126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f7ff fa21 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_ADC_ConfigChannel+0x690>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	4a41      	ldr	r2, [pc, #260]	; (8002240 <HAL_ADC_ConfigChannel+0x694>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	3301      	adds	r3, #1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002148:	e002      	b.n	8002150 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3b01      	subs	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002156:	e05a      	b.n	800220e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a39      	ldr	r2, [pc, #228]	; (8002244 <HAL_ADC_ConfigChannel+0x698>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11e      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d119      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_ADC_ConfigChannel+0x688>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d14b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_ADC_ConfigChannel+0x5de>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x5e2>
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_ADC_ConfigChannel+0x680>)
 800218c:	e000      	b.n	8002190 <HAL_ADC_ConfigChannel+0x5e4>
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_ADC_ConfigChannel+0x684>)
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7ff f9ec 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800219e:	e036      	b.n	800220e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_ADC_ConfigChannel+0x69c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d131      	bne.n	800220e <HAL_ADC_ConfigChannel+0x662>
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12c      	bne.n	800220e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_ADC_ConfigChannel+0x688>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d127      	bne.n	800220e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_ADC_ConfigChannel+0x678>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x626>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_ADC_ConfigChannel+0x67c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x62a>
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_ADC_ConfigChannel+0x680>)
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x62c>
 80021d6:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_ADC_ConfigChannel+0x684>)
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7ff f9c8 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
 80021e6:	e012      	b.n	800220e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021fa:	e008      	b.n	800220e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002216:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800221a:	4618      	mov	r0, r3
 800221c:	3784      	adds	r7, #132	; 0x84
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	40022000 	.word	0x40022000
 8002228:	40022100 	.word	0x40022100
 800222c:	40022300 	.word	0x40022300
 8002230:	58026300 	.word	0x58026300
 8002234:	58026000 	.word	0x58026000
 8002238:	cb840000 	.word	0xcb840000
 800223c:	24000000 	.word	0x24000000
 8002240:	053e2d63 	.word	0x053e2d63
 8002244:	c7520000 	.word	0xc7520000
 8002248:	cfb80000 	.word	0xcfb80000

0800224c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <ADC_ConfigureBoostMode+0x1f8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <ADC_ConfigureBoostMode+0x1c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <ADC_ConfigureBoostMode+0x1fc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d109      	bne.n	800227c <ADC_ConfigureBoostMode+0x30>
 8002268:	4b78      	ldr	r3, [pc, #480]	; (800244c <ADC_ConfigureBoostMode+0x200>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e008      	b.n	800228e <ADC_ConfigureBoostMode+0x42>
 800227c:	4b74      	ldr	r3, [pc, #464]	; (8002450 <ADC_ConfigureBoostMode+0x204>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002292:	f004 ff81 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 8002296:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022a0:	d010      	beq.n	80022c4 <ADC_ConfigureBoostMode+0x78>
 80022a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022a6:	d873      	bhi.n	8002390 <ADC_ConfigureBoostMode+0x144>
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d002      	beq.n	80022b4 <ADC_ConfigureBoostMode+0x68>
 80022ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022b2:	d16d      	bne.n	8002390 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	60fb      	str	r3, [r7, #12]
        break;
 80022c2:	e068      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
        break;
 80022ca:	e064      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80022cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	f006 f9c6 	bl	8008664 <HAL_RCCEx_GetPeriphCLKFreq>
 80022d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022e2:	d051      	beq.n	8002388 <ADC_ConfigureBoostMode+0x13c>
 80022e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022e8:	d854      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 80022ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022ee:	d047      	beq.n	8002380 <ADC_ConfigureBoostMode+0x134>
 80022f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022f4:	d84e      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 80022f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022fa:	d03d      	beq.n	8002378 <ADC_ConfigureBoostMode+0x12c>
 80022fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002300:	d848      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d033      	beq.n	8002370 <ADC_ConfigureBoostMode+0x124>
 8002308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230c:	d842      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 800230e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002312:	d029      	beq.n	8002368 <ADC_ConfigureBoostMode+0x11c>
 8002314:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002318:	d83c      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 800231a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800231e:	d01a      	beq.n	8002356 <ADC_ConfigureBoostMode+0x10a>
 8002320:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002324:	d836      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 8002326:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800232a:	d014      	beq.n	8002356 <ADC_ConfigureBoostMode+0x10a>
 800232c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002330:	d830      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 8002332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002336:	d00e      	beq.n	8002356 <ADC_ConfigureBoostMode+0x10a>
 8002338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800233c:	d82a      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 800233e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002342:	d008      	beq.n	8002356 <ADC_ConfigureBoostMode+0x10a>
 8002344:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002348:	d824      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x148>
 800234a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800234e:	d002      	beq.n	8002356 <ADC_ConfigureBoostMode+0x10a>
 8002350:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002354:	d11e      	bne.n	8002394 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	60fb      	str	r3, [r7, #12]
        break;
 8002366:	e016      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
        break;
 800236e:	e012      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	60fb      	str	r3, [r7, #12]
        break;
 8002376:	e00e      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	60fb      	str	r3, [r7, #12]
        break;
 800237e:	e00a      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	09db      	lsrs	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
        break;
 8002386:	e006      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	60fb      	str	r3, [r7, #12]
        break;
 800238e:	e002      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002394:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002396:	f7ff f8bb 	bl	8001510 <HAL_GetREVID>
 800239a:	4603      	mov	r3, r0
 800239c:	f241 0203 	movw	r2, #4099	; 0x1003
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d815      	bhi.n	80023d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <ADC_ConfigureBoostMode+0x208>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d908      	bls.n	80023be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80023bc:	e03e      	b.n	800243c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	609a      	str	r2, [r3, #8]
}
 80023ce:	e035      	b.n	800243c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <ADC_ConfigureBoostMode+0x20c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d808      	bhi.n	80023f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023ec:	609a      	str	r2, [r3, #8]
}
 80023ee:	e025      	b.n	800243c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <ADC_ConfigureBoostMode+0x210>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d80a      	bhi.n	800240e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	e016      	b.n	800243c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <ADC_ConfigureBoostMode+0x214>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d80a      	bhi.n	800242c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	e007      	b.n	800243c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40022000 	.word	0x40022000
 8002448:	40022100 	.word	0x40022100
 800244c:	40022300 	.word	0x40022300
 8002450:	58026300 	.word	0x58026300
 8002454:	01312d00 	.word	0x01312d00
 8002458:	005f5e10 	.word	0x005f5e10
 800245c:	00bebc20 	.word	0x00bebc20
 8002460:	017d7840 	.word	0x017d7840

08002464 <LL_ADC_IsEnabled>:
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <LL_ADC_IsEnabled+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_IsEnabled+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_REG_IsConversionOngoing>:
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d101      	bne.n	80024a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b09f      	sub	sp, #124	; 0x7c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0be      	b.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80024da:	2300      	movs	r3, #0
 80024dc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024e8:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	e001      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e09d      	b.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ffb9 	bl	800248a <LL_ADC_REG_IsConversionOngoing>
 8002518:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffb3 	bl	800248a <LL_ADC_REG_IsConversionOngoing>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d17f      	bne.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800252a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252c:	2b00      	cmp	r3, #0
 800252e:	d17c      	bne.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a46      	ldr	r2, [pc, #280]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002546:	e000      	b.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002548:	4b45      	ldr	r3, [pc, #276]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800254a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d039      	beq.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	431a      	orrs	r2, r3
 8002562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002564:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10e      	bne.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800257a:	4836      	ldr	r0, [pc, #216]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800257c:	f7ff ff72 	bl	8002464 <LL_ADC_IsEnabled>
 8002580:	4604      	mov	r4, r0
 8002582:	4835      	ldr	r0, [pc, #212]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002584:	f7ff ff6e 	bl	8002464 <LL_ADC_IsEnabled>
 8002588:	4603      	mov	r3, r0
 800258a:	4323      	orrs	r3, r4
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e008      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002598:	4832      	ldr	r0, [pc, #200]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800259a:	f7ff ff63 	bl	8002464 <LL_ADC_IsEnabled>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d047      	beq.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	430a      	orrs	r2, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025c6:	e03a      	b.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10e      	bne.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80025e8:	481a      	ldr	r0, [pc, #104]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025ea:	f7ff ff3b 	bl	8002464 <LL_ADC_IsEnabled>
 80025ee:	4604      	mov	r4, r0
 80025f0:	4819      	ldr	r0, [pc, #100]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025f2:	f7ff ff37 	bl	8002464 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4323      	orrs	r3, r4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e008      	b.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002606:	4817      	ldr	r0, [pc, #92]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002608:	f7ff ff2c 	bl	8002464 <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002622:	4013      	ands	r3, r2
 8002624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002626:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002628:	e009      	b.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800263c:	e000      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800263e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002648:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800264c:	4618      	mov	r0, r3
 800264e:	377c      	adds	r7, #124	; 0x7c
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40022000 	.word	0x40022000
 8002658:	40022100 	.word	0x40022100
 800265c:	40022300 	.word	0x40022300
 8002660:	58026300 	.word	0x58026300
 8002664:	58026000 	.word	0x58026000
 8002668:	fffff0e0 	.word	0xfffff0e0

0800266c <__NVIC_SetPriorityGrouping>:
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <__NVIC_SetPriorityGrouping+0x40>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	4313      	orrs	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x40>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	05fa0000 	.word	0x05fa0000

080026b4 <__NVIC_GetPriorityGrouping>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff40 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff33 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa4 	bl	80027c8 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002890:	f3bf 8f5f 	dmb	sy
}
 8002894:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_MPU_Disable+0x28>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_MPU_Disable+0x28>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_MPU_Disable+0x2c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	605a      	str	r2, [r3, #4]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00
 80028b8:	e000ed90 	.word	0xe000ed90

080028bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028c4:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_MPU_Enable+0x38>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_MPU_Enable+0x3c>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_MPU_Enable+0x3c>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028da:	f3bf 8f4f 	dsb	sy
}
 80028de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028e0:	f3bf 8f6f 	isb	sy
}
 80028e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed90 	.word	0xe000ed90
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	785a      	ldrb	r2, [r3, #1]
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_MPU_ConfigRegion+0x84>)
 800290a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d029      	beq.n	8002968 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <HAL_MPU_ConfigRegion+0x84>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7b1b      	ldrb	r3, [r3, #12]
 8002920:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7adb      	ldrb	r3, [r3, #11]
 8002926:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002928:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7a9b      	ldrb	r3, [r3, #10]
 800292e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002930:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7b5b      	ldrb	r3, [r3, #13]
 8002936:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002938:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7b9b      	ldrb	r3, [r3, #14]
 800293e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002940:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7bdb      	ldrb	r3, [r3, #15]
 8002946:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002948:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7a5b      	ldrb	r3, [r3, #9]
 800294e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002950:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7a1b      	ldrb	r3, [r3, #8]
 8002956:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002958:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002962:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002964:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002966:	e005      	b.n	8002974 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_MPU_ConfigRegion+0x84>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_MPU_ConfigRegion+0x84>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed90 	.word	0xe000ed90

08002984 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e014      	b.n	80029c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f9a4 	bl	8000cf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	795b      	ldrb	r3, [r3, #5]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_DAC_ConfigChannel+0x18>
 80029dc:	2302      	movs	r3, #2
 80029de:	e12a      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x26e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2202      	movs	r2, #2
 80029ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	f040 8081 	bne.w	8002af8 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80029f6:	f7fe fd5b 	bl	80014b0 <HAL_GetTick>
 80029fa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d140      	bne.n	8002a84 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a02:	e018      	b.n	8002a36 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a04:	f7fe fd54 	bl	80014b0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d911      	bls.n	8002a36 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_DAC_ConfigChannel+0x278>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f043 0208 	orr.w	r2, r3, #8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0ff      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <HAL_DAC_ConfigChannel+0x278>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1df      	bne.n	8002a04 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002a44:	2001      	movs	r0, #1
 8002a46:	f7fe fd3f 	bl	80014c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	6992      	ldr	r2, [r2, #24]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
 8002a54:	e023      	b.n	8002a9e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a56:	f7fe fd2b 	bl	80014b0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d90f      	bls.n	8002a84 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da0a      	bge.n	8002a84 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0d8      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dbe3      	blt.n	8002a56 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7fe fd1a 	bl	80014c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	6992      	ldr	r2, [r2, #24]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	ea02 0103 	and.w	r1, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	21ff      	movs	r1, #255	; 0xff
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	ea02 0103 	and.w	r1, r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d11d      	bne.n	8002b3c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	221f      	movs	r2, #31
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4013      	ands	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	e00f      	b.n	8002b86 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d102      	bne.n	8002b74 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e008      	b.n	8002b86 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	e001      	b.n	8002b86 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	22c0      	movs	r2, #192	; 0xc0
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	400a      	ands	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20008000 	.word	0x20008000

08002c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7fe fc30 	bl	80014b0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e316      	b.n	800328a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_DMA_Init+0x1b8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d04a      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_DMA_Init+0x1bc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d045      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a63      	ldr	r2, [pc, #396]	; (8002e04 <HAL_DMA_Init+0x1c0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d040      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a62      	ldr	r2, [pc, #392]	; (8002e08 <HAL_DMA_Init+0x1c4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d03b      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_DMA_Init+0x1c8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d036      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5f      	ldr	r2, [pc, #380]	; (8002e10 <HAL_DMA_Init+0x1cc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d031      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <HAL_DMA_Init+0x1d0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02c      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5c      	ldr	r2, [pc, #368]	; (8002e18 <HAL_DMA_Init+0x1d4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d027      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_DMA_Init+0x1d8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d022      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_DMA_Init+0x1dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d01d      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_DMA_Init+0x1e0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d018      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a56      	ldr	r2, [pc, #344]	; (8002e28 <HAL_DMA_Init+0x1e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <HAL_DMA_Init+0x1e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a53      	ldr	r2, [pc, #332]	; (8002e30 <HAL_DMA_Init+0x1ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a51      	ldr	r2, [pc, #324]	; (8002e34 <HAL_DMA_Init+0x1f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_Init+0xb8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a50      	ldr	r2, [pc, #320]	; (8002e38 <HAL_DMA_Init+0x1f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_DMA_Init+0xbc>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_DMA_Init+0xbe>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 813b 	beq.w	8002f7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <HAL_DMA_Init+0x1b8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d04a      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	; (8002e00 <HAL_DMA_Init+0x1bc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d045      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <HAL_DMA_Init+0x1c0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d040      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_DMA_Init+0x1c4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d03b      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_DMA_Init+0x1c8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d036      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <HAL_DMA_Init+0x1cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d031      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2e      	ldr	r2, [pc, #184]	; (8002e14 <HAL_DMA_Init+0x1d0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02c      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2d      	ldr	r2, [pc, #180]	; (8002e18 <HAL_DMA_Init+0x1d4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d027      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <HAL_DMA_Init+0x1d8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d022      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_DMA_Init+0x1dc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01d      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <HAL_DMA_Init+0x1e0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d018      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_DMA_Init+0x1e4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <HAL_DMA_Init+0x1e8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00e      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_DMA_Init+0x1ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_DMA_Init+0x1f0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_DMA_Init+0x174>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_DMA_Init+0x1f4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <HAL_DMA_Init+0x186>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e007      	b.n	8002dda <HAL_DMA_Init+0x196>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dda:	e02f      	b.n	8002e3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ddc:	f7fe fb68 	bl	80014b0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d928      	bls.n	8002e3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2203      	movs	r2, #3
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e246      	b.n	800328a <HAL_DMA_Init+0x646>
 8002dfc:	40020010 	.word	0x40020010
 8002e00:	40020028 	.word	0x40020028
 8002e04:	40020040 	.word	0x40020040
 8002e08:	40020058 	.word	0x40020058
 8002e0c:	40020070 	.word	0x40020070
 8002e10:	40020088 	.word	0x40020088
 8002e14:	400200a0 	.word	0x400200a0
 8002e18:	400200b8 	.word	0x400200b8
 8002e1c:	40020410 	.word	0x40020410
 8002e20:	40020428 	.word	0x40020428
 8002e24:	40020440 	.word	0x40020440
 8002e28:	40020458 	.word	0x40020458
 8002e2c:	40020470 	.word	0x40020470
 8002e30:	40020488 	.word	0x40020488
 8002e34:	400204a0 	.word	0x400204a0
 8002e38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1c8      	bne.n	8002ddc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4b83      	ldr	r3, [pc, #524]	; (8003064 <HAL_DMA_Init+0x420>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d107      	bne.n	8002ea0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ea0:	4b71      	ldr	r3, [pc, #452]	; (8003068 <HAL_DMA_Init+0x424>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b71      	ldr	r3, [pc, #452]	; (800306c <HAL_DMA_Init+0x428>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d328      	bcc.n	8002f00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b28      	cmp	r3, #40	; 0x28
 8002eb4:	d903      	bls.n	8002ebe <HAL_DMA_Init+0x27a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b2e      	cmp	r3, #46	; 0x2e
 8002ebc:	d917      	bls.n	8002eee <HAL_DMA_Init+0x2aa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ec4:	d903      	bls.n	8002ece <HAL_DMA_Init+0x28a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b42      	cmp	r3, #66	; 0x42
 8002ecc:	d90f      	bls.n	8002eee <HAL_DMA_Init+0x2aa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b46      	cmp	r3, #70	; 0x46
 8002ed4:	d903      	bls.n	8002ede <HAL_DMA_Init+0x29a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b48      	cmp	r3, #72	; 0x48
 8002edc:	d907      	bls.n	8002eee <HAL_DMA_Init+0x2aa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ee4:	d905      	bls.n	8002ef2 <HAL_DMA_Init+0x2ae>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b52      	cmp	r3, #82	; 0x52
 8002eec:	d801      	bhi.n	8002ef2 <HAL_DMA_Init+0x2ae>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_DMA_Init+0x2b0>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002efe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d117      	bne.n	8002f5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 f9b9 	bl	80042b4 <DMA_CheckFifoParam>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e197      	b.n	800328a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f001 f8f4 	bl	8004150 <DMA_CalcBaseAndBitshift>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e0cd      	b.n	800311a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	; (8003070 <HAL_DMA_Init+0x42c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a39      	ldr	r2, [pc, #228]	; (8003074 <HAL_DMA_Init+0x430>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a38      	ldr	r2, [pc, #224]	; (8003078 <HAL_DMA_Init+0x434>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a36      	ldr	r2, [pc, #216]	; (800307c <HAL_DMA_Init+0x438>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_DMA_Init+0x43c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_DMA_Init+0x440>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a32      	ldr	r2, [pc, #200]	; (8003088 <HAL_DMA_Init+0x444>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Init+0x38a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a30      	ldr	r2, [pc, #192]	; (800308c <HAL_DMA_Init+0x448>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Init+0x38e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_Init+0x390>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8097 	beq.w	8003108 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <HAL_DMA_Init+0x42c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d021      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_DMA_Init+0x430>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01c      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <HAL_DMA_Init+0x434>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d017      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_DMA_Init+0x438>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d012      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_DMA_Init+0x43c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00d      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_DMA_Init+0x440>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d008      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_DMA_Init+0x444>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <HAL_DMA_Init+0x3e4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_DMA_Init+0x448>)
 8003026:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_DMA_Init+0x44c>)
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d021      	beq.n	8003094 <HAL_DMA_Init+0x450>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d102      	bne.n	800305e <HAL_DMA_Init+0x41a>
 8003058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800305c:	e01b      	b.n	8003096 <HAL_DMA_Init+0x452>
 800305e:	2300      	movs	r3, #0
 8003060:	e019      	b.n	8003096 <HAL_DMA_Init+0x452>
 8003062:	bf00      	nop
 8003064:	fe10803f 	.word	0xfe10803f
 8003068:	5c001000 	.word	0x5c001000
 800306c:	ffff0000 	.word	0xffff0000
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494
 8003090:	fffe000f 	.word	0xfffe000f
 8003094:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800309c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4b6e      	ldr	r3, [pc, #440]	; (8003294 <HAL_DMA_Init+0x650>)
 80030dc:	4413      	add	r3, r2
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_DMA_Init+0x654>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	009a      	lsls	r2, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f001 f82f 	bl	8004150 <DMA_CalcBaseAndBitshift>
 80030f2:	4603      	mov	r3, r0
 80030f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2201      	movs	r2, #1
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	e008      	b.n	800311a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0b7      	b.n	800328a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5f      	ldr	r2, [pc, #380]	; (800329c <HAL_DMA_Init+0x658>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d072      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5d      	ldr	r2, [pc, #372]	; (80032a0 <HAL_DMA_Init+0x65c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d06d      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_DMA_Init+0x660>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d068      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5a      	ldr	r2, [pc, #360]	; (80032a8 <HAL_DMA_Init+0x664>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d063      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a59      	ldr	r2, [pc, #356]	; (80032ac <HAL_DMA_Init+0x668>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d05e      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a57      	ldr	r2, [pc, #348]	; (80032b0 <HAL_DMA_Init+0x66c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d059      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a56      	ldr	r2, [pc, #344]	; (80032b4 <HAL_DMA_Init+0x670>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d054      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <HAL_DMA_Init+0x674>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04f      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a53      	ldr	r2, [pc, #332]	; (80032bc <HAL_DMA_Init+0x678>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04a      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a51      	ldr	r2, [pc, #324]	; (80032c0 <HAL_DMA_Init+0x67c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d045      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_DMA_Init+0x680>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a4e      	ldr	r2, [pc, #312]	; (80032c8 <HAL_DMA_Init+0x684>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03b      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4d      	ldr	r2, [pc, #308]	; (80032cc <HAL_DMA_Init+0x688>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d036      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <HAL_DMA_Init+0x68c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_DMA_Init+0x690>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02c      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_DMA_Init+0x694>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a47      	ldr	r2, [pc, #284]	; (80032dc <HAL_DMA_Init+0x698>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_DMA_Init+0x69c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_DMA_Init+0x6a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <HAL_DMA_Init+0x6a4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a41      	ldr	r2, [pc, #260]	; (80032ec <HAL_DMA_Init+0x6a8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <HAL_DMA_Init+0x6ac>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a3e      	ldr	r2, [pc, #248]	; (80032f4 <HAL_DMA_Init+0x6b0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Init+0x5c6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_DMA_Init+0x6b4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_DMA_Init+0x5ca>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_DMA_Init+0x5cc>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d032      	beq.n	800327a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f001 f8c9 	bl	80043ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b80      	cmp	r3, #128	; 0x80
 8003220:	d102      	bne.n	8003228 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800323c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_DMA_Init+0x624>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d80c      	bhi.n	8003268 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 f946 	bl	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e008      	b.n	800327a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	a7fdabf8 	.word	0xa7fdabf8
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	40020010 	.word	0x40020010
 80032a0:	40020028 	.word	0x40020028
 80032a4:	40020040 	.word	0x40020040
 80032a8:	40020058 	.word	0x40020058
 80032ac:	40020070 	.word	0x40020070
 80032b0:	40020088 	.word	0x40020088
 80032b4:	400200a0 	.word	0x400200a0
 80032b8:	400200b8 	.word	0x400200b8
 80032bc:	40020410 	.word	0x40020410
 80032c0:	40020428 	.word	0x40020428
 80032c4:	40020440 	.word	0x40020440
 80032c8:	40020458 	.word	0x40020458
 80032cc:	40020470 	.word	0x40020470
 80032d0:	40020488 	.word	0x40020488
 80032d4:	400204a0 	.word	0x400204a0
 80032d8:	400204b8 	.word	0x400204b8
 80032dc:	58025408 	.word	0x58025408
 80032e0:	5802541c 	.word	0x5802541c
 80032e4:	58025430 	.word	0x58025430
 80032e8:	58025444 	.word	0x58025444
 80032ec:	58025458 	.word	0x58025458
 80032f0:	5802546c 	.word	0x5802546c
 80032f4:	58025480 	.word	0x58025480
 80032f8:	58025494 	.word	0x58025494

080032fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003308:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <HAL_DMA_IRQHandler+0x1ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a67      	ldr	r2, [pc, #412]	; (80034ac <HAL_DMA_IRQHandler+0x1b0>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5f      	ldr	r2, [pc, #380]	; (80034b0 <HAL_DMA_IRQHandler+0x1b4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5d      	ldr	r2, [pc, #372]	; (80034b4 <HAL_DMA_IRQHandler+0x1b8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5c      	ldr	r2, [pc, #368]	; (80034b8 <HAL_DMA_IRQHandler+0x1bc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_DMA_IRQHandler+0x1c0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a59      	ldr	r2, [pc, #356]	; (80034c0 <HAL_DMA_IRQHandler+0x1c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a56      	ldr	r2, [pc, #344]	; (80034c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a54      	ldr	r2, [pc, #336]	; (80034cc <HAL_DMA_IRQHandler+0x1d0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a53      	ldr	r2, [pc, #332]	; (80034d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <HAL_DMA_IRQHandler+0x1d8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <HAL_DMA_IRQHandler+0x1dc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <HAL_DMA_IRQHandler+0x1e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4d      	ldr	r2, [pc, #308]	; (80034e0 <HAL_DMA_IRQHandler+0x1e4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <HAL_DMA_IRQHandler+0x1e8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <HAL_DMA_IRQHandler+0x1ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0xd2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a48      	ldr	r2, [pc, #288]	; (80034ec <HAL_DMA_IRQHandler+0x1f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_DMA_IRQHandler+0xd6>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_DMA_IRQHandler+0xd8>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 842b 	beq.w	8003c30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a2 	beq.w	8003534 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2e      	ldr	r2, [pc, #184]	; (80034b0 <HAL_DMA_IRQHandler+0x1b4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d04a      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2d      	ldr	r2, [pc, #180]	; (80034b4 <HAL_DMA_IRQHandler+0x1b8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d045      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <HAL_DMA_IRQHandler+0x1bc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d040      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <HAL_DMA_IRQHandler+0x1c0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d03b      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_DMA_IRQHandler+0x1c4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d036      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d031      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02c      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_DMA_IRQHandler+0x1d0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d027      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_DMA_IRQHandler+0x1d8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01d      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_DMA_IRQHandler+0x1dc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_DMA_IRQHandler+0x1e0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_DMA_IRQHandler+0x1e4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_DMA_IRQHandler+0x1e8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_DMA_IRQHandler+0x1ec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_DMA_IRQHandler+0x194>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_DMA_IRQHandler+0x1f0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d12f      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x1f4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e02e      	b.n	8003504 <HAL_DMA_IRQHandler+0x208>
 80034a6:	bf00      	nop
 80034a8:	24000000 	.word	0x24000000
 80034ac:	1b4e81b5 	.word	0x1b4e81b5
 80034b0:	40020010 	.word	0x40020010
 80034b4:	40020028 	.word	0x40020028
 80034b8:	40020040 	.word	0x40020040
 80034bc:	40020058 	.word	0x40020058
 80034c0:	40020070 	.word	0x40020070
 80034c4:	40020088 	.word	0x40020088
 80034c8:	400200a0 	.word	0x400200a0
 80034cc:	400200b8 	.word	0x400200b8
 80034d0:	40020410 	.word	0x40020410
 80034d4:	40020428 	.word	0x40020428
 80034d8:	40020440 	.word	0x40020440
 80034dc:	40020458 	.word	0x40020458
 80034e0:	40020470 	.word	0x40020470
 80034e4:	40020488 	.word	0x40020488
 80034e8:	400204a0 	.word	0x400204a0
 80034ec:	400204b8 	.word	0x400204b8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2208      	movs	r2, #8
 8003522:	409a      	lsls	r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d06e      	beq.n	8003628 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a69      	ldr	r2, [pc, #420]	; (80036f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04a      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <HAL_DMA_IRQHandler+0x3fc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d045      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a66      	ldr	r2, [pc, #408]	; (80036fc <HAL_DMA_IRQHandler+0x400>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a64      	ldr	r2, [pc, #400]	; (8003700 <HAL_DMA_IRQHandler+0x404>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <HAL_DMA_IRQHandler+0x408>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a61      	ldr	r2, [pc, #388]	; (8003708 <HAL_DMA_IRQHandler+0x40c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a60      	ldr	r2, [pc, #384]	; (800370c <HAL_DMA_IRQHandler+0x410>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_DMA_IRQHandler+0x414>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5d      	ldr	r2, [pc, #372]	; (8003714 <HAL_DMA_IRQHandler+0x418>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_DMA_IRQHandler+0x41c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_DMA_IRQHandler+0x420>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_DMA_IRQHandler+0x424>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_DMA_IRQHandler+0x428>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a55      	ldr	r2, [pc, #340]	; (8003728 <HAL_DMA_IRQHandler+0x42c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_DMA_IRQHandler+0x430>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2ee>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_DMA_IRQHandler+0x434>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10a      	bne.n	8003600 <HAL_DMA_IRQHandler+0x304>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e003      	b.n	8003608 <HAL_DMA_IRQHandler+0x30c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2201      	movs	r2, #1
 8003616:	409a      	lsls	r2, r3
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0202 	orr.w	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2204      	movs	r2, #4
 8003632:	409a      	lsls	r2, r3
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808f 	beq.w	800375c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2a      	ldr	r2, [pc, #168]	; (80036f8 <HAL_DMA_IRQHandler+0x3fc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_DMA_IRQHandler+0x400>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_DMA_IRQHandler+0x404>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a26      	ldr	r2, [pc, #152]	; (8003704 <HAL_DMA_IRQHandler+0x408>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a24      	ldr	r2, [pc, #144]	; (8003708 <HAL_DMA_IRQHandler+0x40c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a23      	ldr	r2, [pc, #140]	; (800370c <HAL_DMA_IRQHandler+0x410>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_DMA_IRQHandler+0x414>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a20      	ldr	r2, [pc, #128]	; (8003714 <HAL_DMA_IRQHandler+0x418>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_DMA_IRQHandler+0x41c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_DMA_IRQHandler+0x420>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_DMA_IRQHandler+0x424>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_DMA_IRQHandler+0x428>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_DMA_IRQHandler+0x42c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_DMA_IRQHandler+0x430>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_IRQHandler+0x3e2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_DMA_IRQHandler+0x434>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d12a      	bne.n	8003734 <HAL_DMA_IRQHandler+0x438>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e023      	b.n	800373c <HAL_DMA_IRQHandler+0x440>
 80036f4:	40020010 	.word	0x40020010
 80036f8:	40020028 	.word	0x40020028
 80036fc:	40020040 	.word	0x40020040
 8003700:	40020058 	.word	0x40020058
 8003704:	40020070 	.word	0x40020070
 8003708:	40020088 	.word	0x40020088
 800370c:	400200a0 	.word	0x400200a0
 8003710:	400200b8 	.word	0x400200b8
 8003714:	40020410 	.word	0x40020410
 8003718:	40020428 	.word	0x40020428
 800371c:	40020440 	.word	0x40020440
 8003720:	40020458 	.word	0x40020458
 8003724:	40020470 	.word	0x40020470
 8003728:	40020488 	.word	0x40020488
 800372c:	400204a0 	.word	0x400204a0
 8003730:	400204b8 	.word	0x400204b8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2204      	movs	r2, #4
 800374a:	409a      	lsls	r2, r3
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2210      	movs	r2, #16
 8003766:	409a      	lsls	r2, r3
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a6 	beq.w	80038be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a85      	ldr	r2, [pc, #532]	; (800398c <HAL_DMA_IRQHandler+0x690>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a83      	ldr	r2, [pc, #524]	; (8003990 <HAL_DMA_IRQHandler+0x694>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a82      	ldr	r2, [pc, #520]	; (8003994 <HAL_DMA_IRQHandler+0x698>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_DMA_IRQHandler+0x69c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7f      	ldr	r2, [pc, #508]	; (800399c <HAL_DMA_IRQHandler+0x6a0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7d      	ldr	r2, [pc, #500]	; (80039a0 <HAL_DMA_IRQHandler+0x6a4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7c      	ldr	r2, [pc, #496]	; (80039a4 <HAL_DMA_IRQHandler+0x6a8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <HAL_DMA_IRQHandler+0x6ac>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a79      	ldr	r2, [pc, #484]	; (80039ac <HAL_DMA_IRQHandler+0x6b0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_DMA_IRQHandler+0x6b4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a76      	ldr	r2, [pc, #472]	; (80039b4 <HAL_DMA_IRQHandler+0x6b8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a74      	ldr	r2, [pc, #464]	; (80039b8 <HAL_DMA_IRQHandler+0x6bc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	; (80039bc <HAL_DMA_IRQHandler+0x6c0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a71      	ldr	r2, [pc, #452]	; (80039c0 <HAL_DMA_IRQHandler+0x6c4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a70      	ldr	r2, [pc, #448]	; (80039c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_IRQHandler+0x516>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6e      	ldr	r2, [pc, #440]	; (80039c8 <HAL_DMA_IRQHandler+0x6cc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10a      	bne.n	8003828 <HAL_DMA_IRQHandler+0x52c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e009      	b.n	800383c <HAL_DMA_IRQHandler+0x540>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03e      	beq.n	80038be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2210      	movs	r2, #16
 800384a:	409a      	lsls	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d024      	beq.n	80038be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
 800387c:	e01f      	b.n	80038be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01b      	beq.n	80038be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
 800388e:	e016      	b.n	80038be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d107      	bne.n	80038ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2220      	movs	r2, #32
 80038c8:	409a      	lsls	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8110 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <HAL_DMA_IRQHandler+0x690>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_DMA_IRQHandler+0x694>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_DMA_IRQHandler+0x698>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a28      	ldr	r2, [pc, #160]	; (8003998 <HAL_DMA_IRQHandler+0x69c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_DMA_IRQHandler+0x6a0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_DMA_IRQHandler+0x6a4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_DMA_IRQHandler+0x6b0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_DMA_IRQHandler+0x6b8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_DMA_IRQHandler+0x6c0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_DMA_IRQHandler+0x6c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x678>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d12b      	bne.n	80039cc <HAL_DMA_IRQHandler+0x6d0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e02a      	b.n	80039e0 <HAL_DMA_IRQHandler+0x6e4>
 800398a:	bf00      	nop
 800398c:	40020010 	.word	0x40020010
 8003990:	40020028 	.word	0x40020028
 8003994:	40020040 	.word	0x40020040
 8003998:	40020058 	.word	0x40020058
 800399c:	40020070 	.word	0x40020070
 80039a0:	40020088 	.word	0x40020088
 80039a4:	400200a0 	.word	0x400200a0
 80039a8:	400200b8 	.word	0x400200b8
 80039ac:	40020410 	.word	0x40020410
 80039b0:	40020428 	.word	0x40020428
 80039b4:	40020440 	.word	0x40020440
 80039b8:	40020458 	.word	0x40020458
 80039bc:	40020470 	.word	0x40020470
 80039c0:	40020488 	.word	0x40020488
 80039c4:	400204a0 	.word	0x400204a0
 80039c8:	400204b8 	.word	0x400204b8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8087 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2220      	movs	r2, #32
 80039f0:	409a      	lsls	r2, r3
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d139      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0216 	bic.w	r2, r2, #22
 8003a10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x736>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0208 	bic.w	r2, r2, #8
 8003a40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	223f      	movs	r2, #63	; 0x3f
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 834a 	beq.w	8004100 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
          }
          return;
 8003a74:	e344      	b.n	8004100 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02c      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
 8003aa2:	e027      	b.n	8003af4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e01e      	b.n	8003af4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0210 	bic.w	r2, r2, #16
 8003ad2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8306 	beq.w	800410a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8088 	beq.w	8003c1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7a      	ldr	r2, [pc, #488]	; (8003d04 <HAL_DMA_IRQHandler+0xa08>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a79      	ldr	r2, [pc, #484]	; (8003d08 <HAL_DMA_IRQHandler+0xa0c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_DMA_IRQHandler+0xa10>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a76      	ldr	r2, [pc, #472]	; (8003d10 <HAL_DMA_IRQHandler+0xa14>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a74      	ldr	r2, [pc, #464]	; (8003d14 <HAL_DMA_IRQHandler+0xa18>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	; (8003d18 <HAL_DMA_IRQHandler+0xa1c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a71      	ldr	r2, [pc, #452]	; (8003d1c <HAL_DMA_IRQHandler+0xa20>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a70      	ldr	r2, [pc, #448]	; (8003d20 <HAL_DMA_IRQHandler+0xa24>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_DMA_IRQHandler+0xa28>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6d      	ldr	r2, [pc, #436]	; (8003d28 <HAL_DMA_IRQHandler+0xa2c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6b      	ldr	r2, [pc, #428]	; (8003d2c <HAL_DMA_IRQHandler+0xa30>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6a      	ldr	r2, [pc, #424]	; (8003d30 <HAL_DMA_IRQHandler+0xa34>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a68      	ldr	r2, [pc, #416]	; (8003d34 <HAL_DMA_IRQHandler+0xa38>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a67      	ldr	r2, [pc, #412]	; (8003d38 <HAL_DMA_IRQHandler+0xa3c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <HAL_DMA_IRQHandler+0xa40>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x8b8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a64      	ldr	r2, [pc, #400]	; (8003d40 <HAL_DMA_IRQHandler+0xa44>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x8ca>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x8da>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d307      	bcc.n	8003bf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f2      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x8da>
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bf2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c0a:	e003      	b.n	8003c14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8272 	beq.w	800410a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
 8003c2e:	e26c      	b.n	800410a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <HAL_DMA_IRQHandler+0xa48>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a42      	ldr	r2, [pc, #264]	; (8003d48 <HAL_DMA_IRQHandler+0xa4c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a40      	ldr	r2, [pc, #256]	; (8003d4c <HAL_DMA_IRQHandler+0xa50>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <HAL_DMA_IRQHandler+0xa54>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	; (8003d54 <HAL_DMA_IRQHandler+0xa58>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_DMA_IRQHandler+0xa5c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_DMA_IRQHandler+0xa60>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x984>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <HAL_DMA_IRQHandler+0xa64>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x988>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_IRQHandler+0x98a>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 823f 	beq.w	800410a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80cd 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xb48>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80c7 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d049      	beq.n	8003d64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8210 	beq.w	8004104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cec:	e20a      	b.n	8004104 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8206 	beq.w	8004104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d00:	e200      	b.n	8004104 <HAL_DMA_IRQHandler+0xe08>
 8003d02:	bf00      	nop
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	58025408 	.word	0x58025408
 8003d48:	5802541c 	.word	0x5802541c
 8003d4c:	58025430 	.word	0x58025430
 8003d50:	58025444 	.word	0x58025444
 8003d54:	58025458 	.word	0x58025458
 8003d58:	5802546c 	.word	0x5802546c
 8003d5c:	58025480 	.word	0x58025480
 8003d60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d160      	bne.n	8003e30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <HAL_DMA_IRQHandler+0xc74>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d04a      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_DMA_IRQHandler+0xc78>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d045      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7c      	ldr	r2, [pc, #496]	; (8003f78 <HAL_DMA_IRQHandler+0xc7c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d040      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_DMA_IRQHandler+0xc80>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d03b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	; (8003f80 <HAL_DMA_IRQHandler+0xc84>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d036      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <HAL_DMA_IRQHandler+0xc88>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d031      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_DMA_IRQHandler+0xc8c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d02c      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_DMA_IRQHandler+0xc90>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d027      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	; (8003f90 <HAL_DMA_IRQHandler+0xc94>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a71      	ldr	r2, [pc, #452]	; (8003f94 <HAL_DMA_IRQHandler+0xc98>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_DMA_IRQHandler+0xc9c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_DMA_IRQHandler+0xca0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6d      	ldr	r2, [pc, #436]	; (8003fa0 <HAL_DMA_IRQHandler+0xca4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_DMA_IRQHandler+0xca8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6a      	ldr	r2, [pc, #424]	; (8003fa8 <HAL_DMA_IRQHandler+0xcac>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xb12>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a68      	ldr	r2, [pc, #416]	; (8003fac <HAL_DMA_IRQHandler+0xcb0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <HAL_DMA_IRQHandler+0xb24>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0208 	bic.w	r2, r2, #8
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e007      	b.n	8003e30 <HAL_DMA_IRQHandler+0xb34>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8165 	beq.w	8004104 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e42:	e15f      	b.n	8004104 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80c5 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0xce8>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80bf 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2202      	movs	r2, #2
 8003e70:	409a      	lsls	r2, r3
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 813a 	beq.w	8004108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e9c:	e134      	b.n	8004108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8130 	beq.w	8004108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb0:	e12a      	b.n	8004108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 8089 	bne.w	8003fd0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <HAL_DMA_IRQHandler+0xc74>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_DMA_IRQHandler+0xc78>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_DMA_IRQHandler+0xc7c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_DMA_IRQHandler+0xc80>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <HAL_DMA_IRQHandler+0xc84>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_DMA_IRQHandler+0xc88>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <HAL_DMA_IRQHandler+0xc8c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_DMA_IRQHandler+0xc90>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <HAL_DMA_IRQHandler+0xc94>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_DMA_IRQHandler+0xc98>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_DMA_IRQHandler+0xc9c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_DMA_IRQHandler+0xca0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_DMA_IRQHandler+0xca4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_DMA_IRQHandler+0xca8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_DMA_IRQHandler+0xcac>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xc62>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <HAL_DMA_IRQHandler+0xcb0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d128      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0xcb4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0214 	bic.w	r2, r2, #20
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e027      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xcc4>
 8003f70:	40020010 	.word	0x40020010
 8003f74:	40020028 	.word	0x40020028
 8003f78:	40020040 	.word	0x40020040
 8003f7c:	40020058 	.word	0x40020058
 8003f80:	40020070 	.word	0x40020070
 8003f84:	40020088 	.word	0x40020088
 8003f88:	400200a0 	.word	0x400200a0
 8003f8c:	400200b8 	.word	0x400200b8
 8003f90:	40020410 	.word	0x40020410
 8003f94:	40020428 	.word	0x40020428
 8003f98:	40020440 	.word	0x40020440
 8003f9c:	40020458 	.word	0x40020458
 8003fa0:	40020470 	.word	0x40020470
 8003fa4:	40020488 	.word	0x40020488
 8003fa8:	400204a0 	.word	0x400204a0
 8003fac:	400204b8 	.word	0x400204b8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020a 	bic.w	r2, r2, #10
 8003fbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8097 	beq.w	8004108 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe2:	e091      	b.n	8004108 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2208      	movs	r2, #8
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8088 	beq.w	800410a <HAL_DMA_IRQHandler+0xe0e>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8082 	beq.w	800410a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a41      	ldr	r2, [pc, #260]	; (8004110 <HAL_DMA_IRQHandler+0xe14>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d04a      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3f      	ldr	r2, [pc, #252]	; (8004114 <HAL_DMA_IRQHandler+0xe18>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d045      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3e      	ldr	r2, [pc, #248]	; (8004118 <HAL_DMA_IRQHandler+0xe1c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d040      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3c      	ldr	r2, [pc, #240]	; (800411c <HAL_DMA_IRQHandler+0xe20>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d03b      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <HAL_DMA_IRQHandler+0xe24>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d036      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a39      	ldr	r2, [pc, #228]	; (8004124 <HAL_DMA_IRQHandler+0xe28>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d031      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a38      	ldr	r2, [pc, #224]	; (8004128 <HAL_DMA_IRQHandler+0xe2c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d02c      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a36      	ldr	r2, [pc, #216]	; (800412c <HAL_DMA_IRQHandler+0xe30>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d027      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a35      	ldr	r2, [pc, #212]	; (8004130 <HAL_DMA_IRQHandler+0xe34>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d022      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a33      	ldr	r2, [pc, #204]	; (8004134 <HAL_DMA_IRQHandler+0xe38>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01d      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a32      	ldr	r2, [pc, #200]	; (8004138 <HAL_DMA_IRQHandler+0xe3c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <HAL_DMA_IRQHandler+0xe40>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <HAL_DMA_IRQHandler+0xe44>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <HAL_DMA_IRQHandler+0xe48>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <HAL_DMA_IRQHandler+0xe4c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xdaa>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_DMA_IRQHandler+0xe50>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <HAL_DMA_IRQHandler+0xdbc>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 021c 	bic.w	r2, r2, #28
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e007      	b.n	80040c8 <HAL_DMA_IRQHandler+0xdcc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 020e 	bic.w	r2, r2, #14
 80040c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2201      	movs	r2, #1
 80040d2:	409a      	lsls	r2, r3
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
 80040fe:	e004      	b.n	800410a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004108:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40020010 	.word	0x40020010
 8004114:	40020028 	.word	0x40020028
 8004118:	40020040 	.word	0x40020040
 800411c:	40020058 	.word	0x40020058
 8004120:	40020070 	.word	0x40020070
 8004124:	40020088 	.word	0x40020088
 8004128:	400200a0 	.word	0x400200a0
 800412c:	400200b8 	.word	0x400200b8
 8004130:	40020410 	.word	0x40020410
 8004134:	40020428 	.word	0x40020428
 8004138:	40020440 	.word	0x40020440
 800413c:	40020458 	.word	0x40020458
 8004140:	40020470 	.word	0x40020470
 8004144:	40020488 	.word	0x40020488
 8004148:	400204a0 	.word	0x400204a0
 800414c:	400204b8 	.word	0x400204b8

08004150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a42      	ldr	r2, [pc, #264]	; (8004268 <DMA_CalcBaseAndBitshift+0x118>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d04a      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a41      	ldr	r2, [pc, #260]	; (800426c <DMA_CalcBaseAndBitshift+0x11c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d045      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3f      	ldr	r2, [pc, #252]	; (8004270 <DMA_CalcBaseAndBitshift+0x120>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d040      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3e      	ldr	r2, [pc, #248]	; (8004274 <DMA_CalcBaseAndBitshift+0x124>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d03b      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3c      	ldr	r2, [pc, #240]	; (8004278 <DMA_CalcBaseAndBitshift+0x128>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d036      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3b      	ldr	r2, [pc, #236]	; (800427c <DMA_CalcBaseAndBitshift+0x12c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d031      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a39      	ldr	r2, [pc, #228]	; (8004280 <DMA_CalcBaseAndBitshift+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02c      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a38      	ldr	r2, [pc, #224]	; (8004284 <DMA_CalcBaseAndBitshift+0x134>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d027      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a36      	ldr	r2, [pc, #216]	; (8004288 <DMA_CalcBaseAndBitshift+0x138>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a35      	ldr	r2, [pc, #212]	; (800428c <DMA_CalcBaseAndBitshift+0x13c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01d      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a33      	ldr	r2, [pc, #204]	; (8004290 <DMA_CalcBaseAndBitshift+0x140>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a32      	ldr	r2, [pc, #200]	; (8004294 <DMA_CalcBaseAndBitshift+0x144>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a30      	ldr	r2, [pc, #192]	; (8004298 <DMA_CalcBaseAndBitshift+0x148>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2f      	ldr	r2, [pc, #188]	; (800429c <DMA_CalcBaseAndBitshift+0x14c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2d      	ldr	r2, [pc, #180]	; (80042a0 <DMA_CalcBaseAndBitshift+0x150>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <DMA_CalcBaseAndBitshift+0x154>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <DMA_CalcBaseAndBitshift+0xac>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <DMA_CalcBaseAndBitshift+0xae>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d024      	beq.n	800424c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3b10      	subs	r3, #16
 800420a:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <DMA_CalcBaseAndBitshift+0x158>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <DMA_CalcBaseAndBitshift+0x15c>)
 800421c:	5cd3      	ldrb	r3, [r2, r3]
 800421e:	461a      	mov	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d908      	bls.n	800423c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004232:	4013      	ands	r3, r2
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	; 0x58
 800423a:	e00d      	b.n	8004258 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
 800424a:	e005      	b.n	8004258 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
 8004278:	40020070 	.word	0x40020070
 800427c:	40020088 	.word	0x40020088
 8004280:	400200a0 	.word	0x400200a0
 8004284:	400200b8 	.word	0x400200b8
 8004288:	40020410 	.word	0x40020410
 800428c:	40020428 	.word	0x40020428
 8004290:	40020440 	.word	0x40020440
 8004294:	40020458 	.word	0x40020458
 8004298:	40020470 	.word	0x40020470
 800429c:	40020488 	.word	0x40020488
 80042a0:	400204a0 	.word	0x400204a0
 80042a4:	400204b8 	.word	0x400204b8
 80042a8:	aaaaaaab 	.word	0xaaaaaaab
 80042ac:	0801f950 	.word	0x0801f950
 80042b0:	fffffc00 	.word	0xfffffc00

080042b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d120      	bne.n	800430a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d858      	bhi.n	8004382 <DMA_CheckFifoParam+0xce>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <DMA_CheckFifoParam+0x24>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042fb 	.word	0x080042fb
 80042e0:	080042e9 	.word	0x080042e9
 80042e4:	08004383 	.word	0x08004383
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d048      	beq.n	8004386 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042f8:	e045      	b.n	8004386 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004302:	d142      	bne.n	800438a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004308:	e03f      	b.n	800438a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	d123      	bne.n	800435c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	2b03      	cmp	r3, #3
 800431a:	d838      	bhi.n	800438e <DMA_CheckFifoParam+0xda>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <DMA_CheckFifoParam+0x70>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004335 	.word	0x08004335
 8004328:	0800433b 	.word	0x0800433b
 800432c:	08004335 	.word	0x08004335
 8004330:	0800434d 	.word	0x0800434d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
        break;
 8004338:	e030      	b.n	800439c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d025      	beq.n	8004392 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800434a:	e022      	b.n	8004392 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004354:	d11f      	bne.n	8004396 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800435a:	e01c      	b.n	8004396 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	2b02      	cmp	r3, #2
 8004362:	d902      	bls.n	800436a <DMA_CheckFifoParam+0xb6>
 8004364:	2b03      	cmp	r3, #3
 8004366:	d003      	beq.n	8004370 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004368:	e018      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
        break;
 800436e:	e015      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
    break;
 8004380:	e00b      	b.n	800439a <DMA_CheckFifoParam+0xe6>
        break;
 8004382:	bf00      	nop
 8004384:	e00a      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        break;
 8004386:	bf00      	nop
 8004388:	e008      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        break;
 800438a:	bf00      	nop
 800438c:	e006      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <DMA_CheckFifoParam+0xe8>
        break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <DMA_CheckFifoParam+0xe8>
    break;
 800439a:	bf00      	nop
    }
  }

  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop

080043ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a38      	ldr	r2, [pc, #224]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a33      	ldr	r2, [pc, #204]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a32      	ldr	r2, [pc, #200]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01a      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	3b08      	subs	r3, #8
 800441c:	4a28      	ldr	r2, [pc, #160]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004438:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2201      	movs	r2, #1
 8004442:	409a      	lsls	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004448:	e024      	b.n	8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3b10      	subs	r3, #16
 8004452:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d806      	bhi.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d902      	bls.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3308      	adds	r3, #8
 8004470:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004484:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	58025408 	.word	0x58025408
 80044a4:	5802541c 	.word	0x5802541c
 80044a8:	58025430 	.word	0x58025430
 80044ac:	58025444 	.word	0x58025444
 80044b0:	58025458 	.word	0x58025458
 80044b4:	5802546c 	.word	0x5802546c
 80044b8:	58025480 	.word	0x58025480
 80044bc:	58025494 	.word	0x58025494
 80044c0:	cccccccd 	.word	0xcccccccd
 80044c4:	16009600 	.word	0x16009600
 80044c8:	58025880 	.word	0x58025880
 80044cc:	aaaaaaab 	.word	0xaaaaaaab
 80044d0:	400204b8 	.word	0x400204b8
 80044d4:	4002040f 	.word	0x4002040f
 80044d8:	10008200 	.word	0x10008200
 80044dc:	40020880 	.word	0x40020880

080044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04a      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d847      	bhi.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004568:	671a      	str	r2, [r3, #112]	; 0x70
 800456a:	e009      	b.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800457e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	58025408 	.word	0x58025408
 800459c:	5802541c 	.word	0x5802541c
 80045a0:	58025430 	.word	0x58025430
 80045a4:	58025444 	.word	0x58025444
 80045a8:	58025458 	.word	0x58025458
 80045ac:	5802546c 	.word	0x5802546c
 80045b0:	58025480 	.word	0x58025480
 80045b4:	58025494 	.word	0x58025494
 80045b8:	1600963f 	.word	0x1600963f
 80045bc:	58025940 	.word	0x58025940
 80045c0:	1000823f 	.word	0x1000823f
 80045c4:	40020940 	.word	0x40020940

080045c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0cf      	b.n	800477a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2223      	movs	r2, #35	; 0x23
 80045e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f006 fce1 	bl	800afb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f2:	4b64      	ldr	r3, [pc, #400]	; (8004784 <HAL_ETH_Init+0x1bc>)
 80045f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f8:	4a62      	ldr	r2, [pc, #392]	; (8004784 <HAL_ETH_Init+0x1bc>)
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004602:	4b60      	ldr	r3, [pc, #384]	; (8004784 <HAL_ETH_Init+0x1bc>)
 8004604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7a1b      	ldrb	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004618:	2000      	movs	r0, #0
 800461a:	f7fc ff85 	bl	8001528 <HAL_SYSCFG_ETHInterfaceSelect>
 800461e:	e003      	b.n	8004628 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004620:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004624:	f7fc ff80 	bl	8001528 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004628:	4b57      	ldr	r3, [pc, #348]	; (8004788 <HAL_ETH_Init+0x1c0>)
 800462a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004642:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004644:	f7fc ff34 	bl	80014b0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800464a:	e011      	b.n	8004670 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800464c:	f7fc ff30 	bl	80014b0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800465a:	d909      	bls.n	8004670 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	22e0      	movs	r2, #224	; 0xe0
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e084      	b.n	800477a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e4      	bne.n	800464c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fdfa 	bl	800527c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004688:	f002 fd86 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 800468c:	4603      	mov	r3, r0
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <HAL_ETH_Init+0x1c4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	0c9a      	lsrs	r2, r3, #18
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3a01      	subs	r2, #1
 800469c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 ffe5 	bl	8005670 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046b2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	22e0      	movs	r2, #224	; 0xe0
 80046de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e049      	b.n	800477a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046f2:	4b27      	ldr	r3, [pc, #156]	; (8004790 <HAL_ETH_Init+0x1c8>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6952      	ldr	r2, [r2, #20]
 80046fa:	0051      	lsls	r1, r2, #1
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	430b      	orrs	r3, r1
 8004702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004706:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 f84d 	bl	80057aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 f893 	bl	800583c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	3305      	adds	r3, #5
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	3303      	adds	r3, #3
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	061a      	lsls	r2, r3, #24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	3302      	adds	r3, #2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	3301      	adds	r3, #1
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004754:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004762:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2210      	movs	r2, #16
 8004774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	58000400 	.word	0x58000400
 800478c:	431bde83 	.word	0x431bde83
 8004790:	ffff8001 	.word	0xffff8001

08004794 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d179      	bne.n	800489a <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2223      	movs	r2, #35	; 0x23
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_ETH_Start_IT+0x110>)
 80047c2:	430b      	orrs	r3, r1
 80047c4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <HAL_ETH_Start_IT+0x114>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9eb 	bl	8004bbe <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0202 	orr.w	r2, r2, #2
 80047f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004824:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004834:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004850:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8004868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800486c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8004884:	430b      	orrs	r3, r1
 8004886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800488a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2223      	movs	r2, #35	; 0x23
 8004892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0c020060 	.word	0x0c020060
 80048a8:	0c20c000 	.word	0x0c20c000

080048ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ba:	2b23      	cmp	r3, #35	; 0x23
 80048bc:	d165      	bne.n	800498a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2223      	movs	r2, #35	; 0x23
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <HAL_ETH_Stop_IT+0xec>)
 80048d8:	400b      	ands	r3, r1
 80048da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004916:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0202 	bic.w	r2, r2, #2
 800494c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e00e      	b.n	8004972 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	3212      	adds	r2, #18
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d9ed      	bls.n	8004954 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2210      	movs	r2, #16
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e000      	b.n	800498c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	ffff2f3e 	.word	0xffff2f3e

0800499c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e03a      	b.n	8004a36 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c6:	2b23      	cmp	r3, #35	; 0x23
 80049c8:	d134      	bne.n	8004a34 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80049d2:	2201      	movs	r2, #1
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ff8e 	bl	80058f8 <ETH_Prepare_Tx_Descriptors>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f043 0202 	orr.w	r2, r3, #2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e01f      	b.n	8004a36 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80049f6:	f3bf 8f4f 	dsb	sy
}
 80049fa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d904      	bls.n	8004a18 <HAL_ETH_Transmit_IT+0x7c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	1f1a      	subs	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3106      	adds	r1, #6
 8004a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a2c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f043 0201 	orr.w	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e0a5      	b.n	8004bb6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a70:	2b23      	cmp	r3, #35	; 0x23
 8004a72:	d001      	beq.n	8004a78 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e09e      	b.n	8004bb6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	3212      	adds	r2, #18
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	f1c3 0304 	rsb	r3, r3, #4
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a94:	e067      	b.n	8004b66 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <HAL_ETH_ReadData+0x88>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d03d      	beq.n	8004b42 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f006 fc21 	bl	800b368 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3301      	adds	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d902      	bls.n	8004b54 <HAL_ETH_ReadData+0x116>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	3212      	adds	r2, #18
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3301      	adds	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db06      	blt.n	8004b7c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d202      	bcs.n	8004b7c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d08c      	beq.n	8004a96 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f814 	bl	8004bbe <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b088      	sub	sp, #32
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	3212      	adds	r2, #18
 8004bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bde:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004be6:	e03b      	b.n	8004c60 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d112      	bne.n	8004c16 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f006 fb87 	bl	800b308 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	74fb      	strb	r3, [r7, #19]
 8004c04:	e007      	b.n	8004c16 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	461a      	mov	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004c16:	7cfb      	ldrb	r3, [r7, #19]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d021      	beq.n	8004c60 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004c1c:	f3bf 8f5f 	dmb	sy
}
 8004c20:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e003      	b.n	8004c3c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004c3a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d902      	bls.n	8004c4e <ETH_UpdateDescriptor+0x90>
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	3212      	adds	r2, #18
 8004c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c58:	617b      	str	r3, [r7, #20]
      desccount--;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <ETH_UpdateDescriptor+0xae>
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1bd      	bne.n	8004be8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d00d      	beq.n	8004c92 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004c92:	bf00      	nop
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3318      	adds	r3, #24
 8004ca6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004cb8:	e03f      	b.n	8004d3a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d028      	beq.n	8004d3a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db1b      	blt.n	8004d36 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3304      	adds	r3, #4
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f006 fb94 	bl	800b438 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3304      	adds	r3, #4
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d34:	e001      	b.n	8004d3a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_ETH_ReleaseTxPacket+0xac>
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1b9      	bne.n	8004cba <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e03e      	b.n	8004df0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d7a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	055b      	lsls	r3, r3, #21
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f043 030c 	orr.w	r3, r3, #12
 8004d9e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004db2:	f7fc fb7d 	bl	80014b0 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004db8:	e009      	b.n	8004dce <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004dba:	f7fc fb79 	bl	80014b0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc8:	d901      	bls.n	8004dce <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e010      	b.n	8004df0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ed      	bne.n	8004dba <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e03c      	b.n	8004e94 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e22:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	055b      	lsls	r3, r3, #21
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 030c 	bic.w	r3, r3, #12
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_ETH_WritePHYRegister+0xa4>)
 8004e5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004e5e:	4a0f      	ldr	r2, [pc, #60]	; (8004e9c <HAL_ETH_WritePHYRegister+0xa4>)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004e66:	f7fc fb23 	bl	80014b0 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004e6c:	e009      	b.n	8004e82 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004e6e:	f7fc fb1f 	bl	80014b0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e7c:	d901      	bls.n	8004e82 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e008      	b.n	8004e94 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ed      	bne.n	8004e6e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40028000 	.word	0x40028000

08004ea0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e1c3      	b.n	800523c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 020c 	and.w	r2, r3, #12
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bf14      	ite	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	2300      	moveq	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800502e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80050c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	0e5b      	lsrs	r3, r3, #25
 80050fe:	f003 021f 	and.w	r2, r3, #31
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf14      	ite	ne
 800513e:	2301      	movne	r3, #1
 8005140:	2300      	moveq	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b29a      	uxth	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80051c8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80051d8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e00b      	b.n	8005274 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	2b10      	cmp	r3, #16
 8005264:	d105      	bne.n	8005272 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f85f 	bl	800532c <ETH_SetMACConfig>

    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800528c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005294:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005296:	f001 ff7f 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 800529a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d908      	bls.n	80052b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d804      	bhi.n	80052b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e027      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d908      	bls.n	80052d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d204      	bcs.n	80052d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e01a      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d303      	bcc.n	80052e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d911      	bls.n	8005304 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d908      	bls.n	80052fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a0f      	ldr	r2, [pc, #60]	; (8005328 <HAL_ETH_SetMDIOClockRange+0xac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d804      	bhi.n	80052fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e005      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e000      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005304:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	01312cff 	.word	0x01312cff
 800531c:	02160ebf 	.word	0x02160ebf
 8005320:	03938700 	.word	0x03938700
 8005324:	05f5e0ff 	.word	0x05f5e0ff
 8005328:	08f0d17f 	.word	0x08f0d17f

0800532c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800533e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005346:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	7b1b      	ldrb	r3, [r3, #12]
 800534c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800534e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	7b5b      	ldrb	r3, [r3, #13]
 8005354:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7b9b      	ldrb	r3, [r3, #14]
 800535c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800535e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	7bdb      	ldrb	r3, [r3, #15]
 8005364:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005366:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	7c12      	ldrb	r2, [r2, #16]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d102      	bne.n	8005376 <ETH_SetMACConfig+0x4a>
 8005370:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005374:	e000      	b.n	8005378 <ETH_SetMACConfig+0x4c>
 8005376:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005378:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	7c52      	ldrb	r2, [r2, #17]
 800537e:	2a00      	cmp	r2, #0
 8005380:	d102      	bne.n	8005388 <ETH_SetMACConfig+0x5c>
 8005382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005386:	e000      	b.n	800538a <ETH_SetMACConfig+0x5e>
 8005388:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800538a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	7c9b      	ldrb	r3, [r3, #18]
 8005390:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005392:	431a      	orrs	r2, r3
               macconf->Speed |
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005398:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800539e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	7f1b      	ldrb	r3, [r3, #28]
 80053a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80053a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	7f5b      	ldrb	r3, [r3, #29]
 80053ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	7f92      	ldrb	r2, [r2, #30]
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d102      	bne.n	80053be <ETH_SetMACConfig+0x92>
 80053b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053bc:	e000      	b.n	80053c0 <ETH_SetMACConfig+0x94>
 80053be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	7fdb      	ldrb	r3, [r3, #31]
 80053c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d102      	bne.n	80053da <ETH_SetMACConfig+0xae>
 80053d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d8:	e000      	b.n	80053dc <ETH_SetMACConfig+0xb0>
 80053da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80053dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80053e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80053ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b56      	ldr	r3, [pc, #344]	; (8005558 <ETH_SetMACConfig+0x22c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	430b      	orrs	r3, r1
 8005408:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005416:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005418:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005420:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800542a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800542c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005434:	2a00      	cmp	r2, #0
 8005436:	d102      	bne.n	800543e <ETH_SetMACConfig+0x112>
 8005438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800543c:	e000      	b.n	8005440 <ETH_SetMACConfig+0x114>
 800543e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005440:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <ETH_SetMACConfig+0x230>)
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	430b      	orrs	r3, r1
 800545c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005464:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <ETH_SetMACConfig+0x234>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	430b      	orrs	r3, r1
 8005480:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005488:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800548e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005496:	2a00      	cmp	r2, #0
 8005498:	d101      	bne.n	800549e <ETH_SetMACConfig+0x172>
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	e000      	b.n	80054a0 <ETH_SetMACConfig+0x174>
 800549e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	430b      	orrs	r3, r1
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80054c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80054d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f023 0103 	bic.w	r1, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80054f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005512:	2a00      	cmp	r2, #0
 8005514:	d101      	bne.n	800551a <ETH_SetMACConfig+0x1ee>
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	e000      	b.n	800551c <ETH_SetMACConfig+0x1f0>
 800551a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800551c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005524:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005526:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800552e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800553c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	430a      	orrs	r2, r1
 8005548:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00048083 	.word	0x00048083
 800555c:	c0f88000 	.word	0xc0f88000
 8005560:	fffffef0 	.word	0xfffffef0

08005564 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b38      	ldr	r3, [pc, #224]	; (800565c <ETH_SetDMAConfig+0xf8>)
 800557a:	4013      	ands	r3, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	6811      	ldr	r1, [r2, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	430b      	orrs	r3, r1
 8005586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800558a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	791b      	ldrb	r3, [r3, #4]
 8005590:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005596:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	7b1b      	ldrb	r3, [r3, #12]
 800559c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <ETH_SetDMAConfig+0xfc>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	430b      	orrs	r3, r1
 80055b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	7b5b      	ldrb	r3, [r3, #13]
 80055c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80055d8:	4b22      	ldr	r3, [pc, #136]	; (8005664 <ETH_SetDMAConfig+0x100>)
 80055da:	4013      	ands	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	7d1b      	ldrb	r3, [r3, #20]
 80055f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80055f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	7f5b      	ldrb	r3, [r3, #29]
 80055fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <ETH_SetDMAConfig+0x104>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	430b      	orrs	r3, r1
 800561a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	7f1b      	ldrb	r3, [r3, #28]
 8005626:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <ETH_SetDMAConfig+0x108>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	430b      	orrs	r3, r1
 8005648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800564c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	ffff87fd 	.word	0xffff87fd
 8005660:	ffff2ffe 	.word	0xffff2ffe
 8005664:	fffec000 	.word	0xfffec000
 8005668:	ffc0efef 	.word	0xffc0efef
 800566c:	7fc0ffff 	.word	0x7fc0ffff

08005670 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0a4      	sub	sp, #144	; 0x90
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800567e:	2300      	movs	r3, #0
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80056ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80056c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80056cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80056ea:	2300      	movs	r3, #0
 80056ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80056f2:	2300      	movs	r3, #0
 80056f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005708:	2320      	movs	r3, #32
 800570a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800571a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800572c:	2302      	movs	r3, #2
 800572e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800574a:	2300      	movs	r3, #0
 800574c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fde6 	bl	800532c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005760:	2301      	movs	r3, #1
 8005762:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005764:	2301      	movs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005772:	2300      	movs	r3, #0
 8005774:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800577a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800577e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005788:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005790:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fee1 	bl	8005564 <ETH_SetDMAConfig>
}
 80057a2:	bf00      	nop
 80057a4:	3790      	adds	r7, #144	; 0x90
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e01d      	b.n	80057f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68d9      	ldr	r1, [r3, #12]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	3206      	adds	r2, #6
 80057ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d9de      	bls.n	80057b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	461a      	mov	r2, r3
 800580a:	2303      	movs	r3, #3
 800580c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e023      	b.n	8005892 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6919      	ldr	r1, [r3, #16]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	440b      	add	r3, r1
 800585a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	3212      	adds	r2, #18
 8005888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d9d8      	bls.n	800584a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058be:	461a      	mov	r2, r3
 80058c0:	2303      	movs	r3, #3
 80058c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b08d      	sub	sp, #52	; 0x34
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3318      	adds	r3, #24
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593a:	d007      	beq.n	800594c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	3304      	adds	r3, #4
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800594c:	2302      	movs	r3, #2
 800594e:	e259      	b.n	8005e04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d044      	beq.n	80059e6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4b75      	ldr	r3, [pc, #468]	; (8005b38 <ETH_Prepare_Tx_Descriptors+0x240>)
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005968:	431a      	orrs	r2, r3
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005988:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d027      	beq.n	80059e6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	b29a      	uxth	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	041b      	lsls	r3, r3, #16
 80059a2:	431a      	orrs	r2, r3
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	431a      	orrs	r2, r3
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059d4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	4b51      	ldr	r3, [pc, #324]	; (8005b3c <ETH_Prepare_Tx_Descriptors+0x244>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	6992      	ldr	r2, [r2, #24]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d036      	beq.n	8005a96 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005a34:	f3bf 8f5f 	dmb	sy
}
 8005a38:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	3301      	adds	r3, #1
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d902      	bls.n	8005a58 <ETH_Prepare_Tx_Descriptors+0x160>
 8005a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a54:	3b04      	subs	r3, #4
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a60:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a74:	d10f      	bne.n	8005a96 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8005a80:	f3bf 8f5f 	dmb	sy
}
 8005a84:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005a92:	2302      	movs	r3, #2
 8005a94:	e1b6      	b.n	8005e04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <ETH_Prepare_Tx_Descriptors+0x244>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	6852      	ldr	r2, [r2, #4]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <ETH_Prepare_Tx_Descriptors+0x248>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	6852      	ldr	r2, [r2, #4]
 8005adc:	0412      	lsls	r2, r2, #16
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	e008      	b.n	8005af8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <ETH_Prepare_Tx_Descriptors+0x248>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d021      	beq.n	8005b48 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	04db      	lsls	r3, r3, #19
 8005b12:	431a      	orrs	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	69d2      	ldr	r2, [r2, #28]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e02e      	b.n	8005b96 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005b38:	ffff0000 	.word	0xffff0000
 8005b3c:	ffffc000 	.word	0xffffc000
 8005b40:	c000ffff 	.word	0xc000ffff
 8005b44:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <ETH_Prepare_Tx_Descriptors+0x444>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	6852      	ldr	r2, [r2, #4]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005bcc:	f3bf 8f5f 	dmb	sy
}
 8005bd0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80da 	beq.w	8005da0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005bfe:	e0cf      	b.n	8005da0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	3301      	adds	r3, #1
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d902      	bls.n	8005c1e <ETH_Prepare_Tx_Descriptors+0x326>
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	3b04      	subs	r3, #4
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c26:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c40:	d007      	beq.n	8005c52 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	3304      	adds	r3, #4
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d029      	beq.n	8005ca6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c64:	e019      	b.n	8005c9a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005c66:	f3bf 8f5f 	dmb	sy
}
 8005c6a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d902      	bls.n	8005c8a <ETH_Prepare_Tx_Descriptors+0x392>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	3b04      	subs	r3, #4
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c92:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	3301      	adds	r3, #1
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3e1      	bcc.n	8005c66 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0ae      	b.n	8005e04 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <ETH_Prepare_Tx_Descriptors+0x448>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	6852      	ldr	r2, [r2, #4]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	6852      	ldr	r2, [r2, #4]
 8005cf2:	0412      	lsls	r2, r2, #16
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	e008      	b.n	8005d0e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d018      	beq.n	8005d4c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	69d2      	ldr	r2, [r2, #28]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	e020      	b.n	8005d7c <ETH_Prepare_Tx_Descriptors+0x484>
 8005d3a:	bf00      	nop
 8005d3c:	ffff8000 	.word	0xffff8000
 8005d40:	ffffc000 	.word	0xffffc000
 8005d44:	c000ffff 	.word	0xc000ffff
 8005d48:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <ETH_Prepare_Tx_Descriptors+0x518>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	6852      	ldr	r2, [r2, #4]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005d82:	f3bf 8f5f 	dmb	sy
}
 8005d86:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f af2b 	bne.w	8005c00 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	e005      	b.n	8005dca <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	3304      	adds	r3, #4
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dec:	b672      	cpsid	i
}
 8005dee:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	4413      	add	r3, r2
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005dfe:	b662      	cpsie	i
}
 8005e00:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3734      	adds	r7, #52	; 0x34
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	ffff8000 	.word	0xffff8000

08005e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e22:	4b89      	ldr	r3, [pc, #548]	; (8006048 <HAL_GPIO_Init+0x234>)
 8005e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e26:	e194      	b.n	8006152 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	4013      	ands	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8186 	beq.w	800614c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d005      	beq.n	8005e58 <HAL_GPIO_Init+0x44>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d130      	bne.n	8005eba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2203      	movs	r2, #3
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e8e:	2201      	movs	r2, #1
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	091b      	lsrs	r3, r3, #4
 8005ea4:	f003 0201 	and.w	r2, r3, #1
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d017      	beq.n	8005ef6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d123      	bne.n	8005f4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	08da      	lsrs	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3208      	adds	r2, #8
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	220f      	movs	r2, #15
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	08da      	lsrs	r2, r3, #3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3208      	adds	r2, #8
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	2203      	movs	r2, #3
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0203 	and.w	r2, r3, #3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80e0 	beq.w	800614c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f8c:	4b2f      	ldr	r3, [pc, #188]	; (800604c <HAL_GPIO_Init+0x238>)
 8005f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f92:	4a2e      	ldr	r2, [pc, #184]	; (800604c <HAL_GPIO_Init+0x238>)
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_GPIO_Init+0x238>)
 8005f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005faa:	4a29      	ldr	r2, [pc, #164]	; (8006050 <HAL_GPIO_Init+0x23c>)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a20      	ldr	r2, [pc, #128]	; (8006054 <HAL_GPIO_Init+0x240>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d052      	beq.n	800607c <HAL_GPIO_Init+0x268>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <HAL_GPIO_Init+0x244>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d031      	beq.n	8006042 <HAL_GPIO_Init+0x22e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_GPIO_Init+0x248>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d02b      	beq.n	800603e <HAL_GPIO_Init+0x22a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <HAL_GPIO_Init+0x24c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d025      	beq.n	800603a <HAL_GPIO_Init+0x226>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a1c      	ldr	r2, [pc, #112]	; (8006064 <HAL_GPIO_Init+0x250>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01f      	beq.n	8006036 <HAL_GPIO_Init+0x222>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <HAL_GPIO_Init+0x254>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d019      	beq.n	8006032 <HAL_GPIO_Init+0x21e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1a      	ldr	r2, [pc, #104]	; (800606c <HAL_GPIO_Init+0x258>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <HAL_GPIO_Init+0x21a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_GPIO_Init+0x25c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00d      	beq.n	800602a <HAL_GPIO_Init+0x216>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_GPIO_Init+0x260>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <HAL_GPIO_Init+0x212>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_GPIO_Init+0x264>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d101      	bne.n	8006022 <HAL_GPIO_Init+0x20e>
 800601e:	2309      	movs	r3, #9
 8006020:	e02d      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006022:	230a      	movs	r3, #10
 8006024:	e02b      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006026:	2308      	movs	r3, #8
 8006028:	e029      	b.n	800607e <HAL_GPIO_Init+0x26a>
 800602a:	2307      	movs	r3, #7
 800602c:	e027      	b.n	800607e <HAL_GPIO_Init+0x26a>
 800602e:	2306      	movs	r3, #6
 8006030:	e025      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006032:	2305      	movs	r3, #5
 8006034:	e023      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006036:	2304      	movs	r3, #4
 8006038:	e021      	b.n	800607e <HAL_GPIO_Init+0x26a>
 800603a:	2303      	movs	r3, #3
 800603c:	e01f      	b.n	800607e <HAL_GPIO_Init+0x26a>
 800603e:	2302      	movs	r3, #2
 8006040:	e01d      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006042:	2301      	movs	r3, #1
 8006044:	e01b      	b.n	800607e <HAL_GPIO_Init+0x26a>
 8006046:	bf00      	nop
 8006048:	58000080 	.word	0x58000080
 800604c:	58024400 	.word	0x58024400
 8006050:	58000400 	.word	0x58000400
 8006054:	58020000 	.word	0x58020000
 8006058:	58020400 	.word	0x58020400
 800605c:	58020800 	.word	0x58020800
 8006060:	58020c00 	.word	0x58020c00
 8006064:	58021000 	.word	0x58021000
 8006068:	58021400 	.word	0x58021400
 800606c:	58021800 	.word	0x58021800
 8006070:	58021c00 	.word	0x58021c00
 8006074:	58022000 	.word	0x58022000
 8006078:	58022400 	.word	0x58022400
 800607c:	2300      	movs	r3, #0
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	f002 0203 	and.w	r2, r2, #3
 8006084:	0092      	lsls	r2, r2, #2
 8006086:	4093      	lsls	r3, r2
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800608e:	4938      	ldr	r1, [pc, #224]	; (8006170 <HAL_GPIO_Init+0x35c>)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	3302      	adds	r3, #2
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800609c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	43db      	mvns	r3, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4013      	ands	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	43db      	mvns	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	43db      	mvns	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	f47f ae63 	bne.w	8005e28 <HAL_GPIO_Init+0x14>
  }
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	3724      	adds	r7, #36	; 0x24
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	58000400 	.word	0x58000400

08006174 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800617c:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <HAL_HSEM_FastTake+0x2c>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3320      	adds	r3, #32
 8006182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006186:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <HAL_HSEM_FastTake+0x30>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	58026400 	.word	0x58026400
 80061a4:	80000300 	.word	0x80000300

080061a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80061b2:	4906      	ldr	r1, [pc, #24]	; (80061cc <HAL_HSEM_Release+0x24>)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	58026400 	.word	0x58026400

080061d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80061d8:	4b29      	ldr	r3, [pc, #164]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d00a      	beq.n	80061fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061e4:	4b26      	ldr	r3, [pc, #152]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d001      	beq.n	80061f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e040      	b.n	8006278 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e03e      	b.n	8006278 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061fa:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006202:	491f      	ldr	r1, [pc, #124]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800620a:	f7fb f951 	bl	80014b0 <HAL_GetTick>
 800620e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006210:	e009      	b.n	8006226 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006212:	f7fb f94d 	bl	80014b0 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006220:	d901      	bls.n	8006226 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e028      	b.n	8006278 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006232:	d1ee      	bne.n	8006212 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b1e      	cmp	r3, #30
 8006238:	d008      	beq.n	800624c <HAL_PWREx_ConfigSupply+0x7c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b2e      	cmp	r3, #46	; 0x2e
 800623e:	d005      	beq.n	800624c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b1d      	cmp	r3, #29
 8006244:	d002      	beq.n	800624c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b2d      	cmp	r3, #45	; 0x2d
 800624a:	d114      	bne.n	8006276 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800624c:	f7fb f930 	bl	80014b0 <HAL_GetTick>
 8006250:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006252:	e009      	b.n	8006268 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006254:	f7fb f92c 	bl	80014b0 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006262:	d901      	bls.n	8006268 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e007      	b.n	8006278 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_PWREx_ConfigSupply+0xb0>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d1ee      	bne.n	8006254 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	58024800 	.word	0x58024800

08006284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08c      	sub	sp, #48	; 0x30
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f000 bc48 	b.w	8006b28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8088 	beq.w	80063b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a6:	4b99      	ldr	r3, [pc, #612]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062b0:	4b96      	ldr	r3, [pc, #600]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d007      	beq.n	80062cc <HAL_RCC_OscConfig+0x48>
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	2b18      	cmp	r3, #24
 80062c0:	d111      	bne.n	80062e6 <HAL_RCC_OscConfig+0x62>
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d10c      	bne.n	80062e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	4b8f      	ldr	r3, [pc, #572]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d06d      	beq.n	80063b4 <HAL_RCC_OscConfig+0x130>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d169      	bne.n	80063b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f000 bc21 	b.w	8006b28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d106      	bne.n	80062fe <HAL_RCC_OscConfig+0x7a>
 80062f0:	4b86      	ldr	r3, [pc, #536]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a85      	ldr	r2, [pc, #532]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80062f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e02e      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCC_OscConfig+0x9c>
 8006306:	4b81      	ldr	r3, [pc, #516]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a80      	ldr	r2, [pc, #512]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800630c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	4b7e      	ldr	r3, [pc, #504]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7d      	ldr	r2, [pc, #500]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0xc0>
 800632a:	4b78      	ldr	r3, [pc, #480]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a77      	ldr	r2, [pc, #476]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b75      	ldr	r3, [pc, #468]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a74      	ldr	r2, [pc, #464]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00b      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 8006344:	4b71      	ldr	r3, [pc, #452]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a70      	ldr	r2, [pc, #448]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b6e      	ldr	r3, [pc, #440]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6d      	ldr	r2, [pc, #436]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fb f8a4 	bl	80014b0 <HAL_GetTick>
 8006368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800636c:	f7fb f8a0 	bl	80014b0 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e3d4      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800637e:	4b63      	ldr	r3, [pc, #396]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0xe8>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fb f890 	bl	80014b0 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006394:	f7fb f88c 	bl	80014b0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e3c0      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063a6:	4b59      	ldr	r3, [pc, #356]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x110>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80ca 	beq.w	8006558 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063c4:	4b51      	ldr	r3, [pc, #324]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ce:	4b4f      	ldr	r3, [pc, #316]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <HAL_RCC_OscConfig+0x166>
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2b18      	cmp	r3, #24
 80063de:	d156      	bne.n	800648e <HAL_RCC_OscConfig+0x20a>
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d151      	bne.n	800648e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ea:	4b48      	ldr	r3, [pc, #288]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_RCC_OscConfig+0x17e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e392      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006402:	4b42      	ldr	r3, [pc, #264]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 0219 	bic.w	r2, r3, #25
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	493f      	ldr	r1, [pc, #252]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb f84c 	bl	80014b0 <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641c:	f7fb f848 	bl	80014b0 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e37c      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800642e:	4b37      	ldr	r3, [pc, #220]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	f7fb f869 	bl	8001510 <HAL_GetREVID>
 800643e:	4603      	mov	r3, r0
 8006440:	f241 0203 	movw	r2, #4099	; 0x1003
 8006444:	4293      	cmp	r3, r2
 8006446:	d817      	bhi.n	8006478 <HAL_RCC_OscConfig+0x1f4>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d108      	bne.n	8006462 <HAL_RCC_OscConfig+0x1de>
 8006450:	4b2e      	ldr	r3, [pc, #184]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006458:	4a2c      	ldr	r2, [pc, #176]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006460:	e07a      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b2a      	ldr	r3, [pc, #168]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	031b      	lsls	r3, r3, #12
 8006470:	4926      	ldr	r1, [pc, #152]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006472:	4313      	orrs	r3, r2
 8006474:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006476:	e06f      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <HAL_RCC_OscConfig+0x288>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	4921      	ldr	r1, [pc, #132]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800648c:	e064      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d047      	beq.n	8006526 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006496:	4b1d      	ldr	r3, [pc, #116]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 0219 	bic.w	r2, r3, #25
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	491a      	ldr	r1, [pc, #104]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fb f802 	bl	80014b0 <HAL_GetTick>
 80064ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b0:	f7fa fffe 	bl	80014b0 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e332      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ce:	f7fb f81f 	bl	8001510 <HAL_GetREVID>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80064d8:	4293      	cmp	r3, r2
 80064da:	d819      	bhi.n	8006510 <HAL_RCC_OscConfig+0x28c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d108      	bne.n	80064f6 <HAL_RCC_OscConfig+0x272>
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80064ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f2:	6053      	str	r3, [r2, #4]
 80064f4:	e030      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_OscConfig+0x288>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	031b      	lsls	r3, r3, #12
 8006504:	4901      	ldr	r1, [pc, #4]	; (800650c <HAL_RCC_OscConfig+0x288>)
 8006506:	4313      	orrs	r3, r2
 8006508:	604b      	str	r3, [r1, #4]
 800650a:	e025      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
 800650c:	58024400 	.word	0x58024400
 8006510:	4b9a      	ldr	r3, [pc, #616]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	4997      	ldr	r1, [pc, #604]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	e018      	b.n	8006558 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006526:	4b95      	ldr	r3, [pc, #596]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a94      	ldr	r2, [pc, #592]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006532:	f7fa ffbd 	bl	80014b0 <HAL_GetTick>
 8006536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653a:	f7fa ffb9 	bl	80014b0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e2ed      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800654c:	4b8b      	ldr	r3, [pc, #556]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f0      	bne.n	800653a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a9 	beq.w	80066b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006566:	4b85      	ldr	r3, [pc, #532]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006570:	4b82      	ldr	r3, [pc, #520]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d007      	beq.n	800658c <HAL_RCC_OscConfig+0x308>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b18      	cmp	r3, #24
 8006580:	d13a      	bne.n	80065f8 <HAL_RCC_OscConfig+0x374>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d135      	bne.n	80065f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800658c:	4b7b      	ldr	r3, [pc, #492]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_OscConfig+0x320>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b80      	cmp	r3, #128	; 0x80
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e2c1      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065a4:	f7fa ffb4 	bl	8001510 <HAL_GetREVID>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d817      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x35e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d108      	bne.n	80065cc <HAL_RCC_OscConfig+0x348>
 80065ba:	4b70      	ldr	r3, [pc, #448]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065c2:	4a6e      	ldr	r2, [pc, #440]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ca:	e075      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065cc:	4b6b      	ldr	r3, [pc, #428]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	069b      	lsls	r3, r3, #26
 80065da:	4968      	ldr	r1, [pc, #416]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065e0:	e06a      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065e2:	4b66      	ldr	r3, [pc, #408]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	061b      	lsls	r3, r3, #24
 80065f0:	4962      	ldr	r1, [pc, #392]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f6:	e05f      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d042      	beq.n	8006686 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006600:	4b5e      	ldr	r3, [pc, #376]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a5d      	ldr	r2, [pc, #372]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fa ff50 	bl	80014b0 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006614:	f7fa ff4c 	bl	80014b0 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e280      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006626:	4b55      	ldr	r3, [pc, #340]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006632:	f7fa ff6d 	bl	8001510 <HAL_GetREVID>
 8006636:	4603      	mov	r3, r0
 8006638:	f241 0203 	movw	r2, #4099	; 0x1003
 800663c:	4293      	cmp	r3, r2
 800663e:	d817      	bhi.n	8006670 <HAL_RCC_OscConfig+0x3ec>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	2b20      	cmp	r3, #32
 8006646:	d108      	bne.n	800665a <HAL_RCC_OscConfig+0x3d6>
 8006648:	4b4c      	ldr	r3, [pc, #304]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006650:	4a4a      	ldr	r2, [pc, #296]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006656:	6053      	str	r3, [r2, #4]
 8006658:	e02e      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
 800665a:	4b48      	ldr	r3, [pc, #288]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	069b      	lsls	r3, r3, #26
 8006668:	4944      	ldr	r1, [pc, #272]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800666a:	4313      	orrs	r3, r2
 800666c:	604b      	str	r3, [r1, #4]
 800666e:	e023      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
 8006670:	4b42      	ldr	r3, [pc, #264]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	493f      	ldr	r1, [pc, #252]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006680:	4313      	orrs	r3, r2
 8006682:	60cb      	str	r3, [r1, #12]
 8006684:	e018      	b.n	80066b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a3c      	ldr	r2, [pc, #240]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800668c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fa ff0d 	bl	80014b0 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800669a:	f7fa ff09 	bl	80014b0 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e23d      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066ac:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f0      	bne.n	800669a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d036      	beq.n	8006732 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d019      	beq.n	8006700 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80066ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d0:	4a2a      	ldr	r2, [pc, #168]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fa feea 	bl	80014b0 <HAL_GetTick>
 80066dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e0:	f7fa fee6 	bl	80014b0 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e21a      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066f2:	4b22      	ldr	r3, [pc, #136]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 80066f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x45c>
 80066fe:	e018      	b.n	8006732 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006704:	4a1d      	ldr	r2, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670c:	f7fa fed0 	bl	80014b0 <HAL_GetTick>
 8006710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006714:	f7fa fecc 	bl	80014b0 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e200      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d039      	beq.n	80067b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01c      	beq.n	8006780 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800674c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006750:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006752:	f7fa fead 	bl	80014b0 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800675a:	f7fa fea9 	bl	80014b0 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e1dd      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <HAL_RCC_OscConfig+0x4f8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x4d6>
 8006778:	e01b      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006780:	4b9b      	ldr	r3, [pc, #620]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a9a      	ldr	r2, [pc, #616]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800678c:	f7fa fe90 	bl	80014b0 <HAL_GetTick>
 8006790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006794:	f7fa fe8c 	bl	80014b0 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1c0      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067a6:	4b92      	ldr	r3, [pc, #584]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8081 	beq.w	80068c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067c0:	4b8c      	ldr	r3, [pc, #560]	; (80069f4 <HAL_RCC_OscConfig+0x770>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a8b      	ldr	r2, [pc, #556]	; (80069f4 <HAL_RCC_OscConfig+0x770>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067cc:	f7fa fe70 	bl	80014b0 <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fa fe6c 	bl	80014b0 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	; 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e1a0      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e6:	4b83      	ldr	r3, [pc, #524]	; (80069f4 <HAL_RCC_OscConfig+0x770>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x584>
 80067fa:	4b7d      	ldr	r3, [pc, #500]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	e02d      	b.n	8006864 <HAL_RCC_OscConfig+0x5e0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x5a6>
 8006810:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a76      	ldr	r2, [pc, #472]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b74      	ldr	r3, [pc, #464]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a73      	ldr	r2, [pc, #460]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	e01c      	b.n	8006864 <HAL_RCC_OscConfig+0x5e0>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d10c      	bne.n	800684c <HAL_RCC_OscConfig+0x5c8>
 8006832:	4b6f      	ldr	r3, [pc, #444]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	4a6e      	ldr	r2, [pc, #440]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	6713      	str	r3, [r2, #112]	; 0x70
 800683e:	4b6c      	ldr	r3, [pc, #432]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4a6b      	ldr	r2, [pc, #428]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	6713      	str	r3, [r2, #112]	; 0x70
 800684a:	e00b      	b.n	8006864 <HAL_RCC_OscConfig+0x5e0>
 800684c:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	4a67      	ldr	r2, [pc, #412]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	6713      	str	r3, [r2, #112]	; 0x70
 8006858:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4a64      	ldr	r2, [pc, #400]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800685e:	f023 0304 	bic.w	r3, r3, #4
 8006862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fa fe20 	bl	80014b0 <HAL_GetTick>
 8006870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006872:	e00a      	b.n	800688a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006874:	f7fa fe1c 	bl	80014b0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e14e      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800688a:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0ee      	beq.n	8006874 <HAL_RCC_OscConfig+0x5f0>
 8006896:	e014      	b.n	80068c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fa fe0a 	bl	80014b0 <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fa fe06 	bl	80014b0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e138      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068b6:	4b4e      	ldr	r3, [pc, #312]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ee      	bne.n	80068a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 812d 	beq.w	8006b26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068cc:	4b48      	ldr	r3, [pc, #288]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d4:	2b18      	cmp	r3, #24
 80068d6:	f000 80bd 	beq.w	8006a54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b02      	cmp	r3, #2
 80068e0:	f040 809e 	bne.w	8006a20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e4:	4b42      	ldr	r3, [pc, #264]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a41      	ldr	r2, [pc, #260]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fa fdde 	bl	80014b0 <HAL_GetTick>
 80068f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f8:	f7fa fdda 	bl	80014b0 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e10e      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800690a:	4b39      	ldr	r3, [pc, #228]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f0      	bne.n	80068f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006916:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <HAL_RCC_OscConfig+0x774>)
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006926:	0112      	lsls	r2, r2, #4
 8006928:	430a      	orrs	r2, r1
 800692a:	4931      	ldr	r1, [pc, #196]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800692c:	4313      	orrs	r3, r2
 800692e:	628b      	str	r3, [r1, #40]	; 0x28
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	3b01      	subs	r3, #1
 8006936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	3b01      	subs	r3, #1
 8006940:	025b      	lsls	r3, r3, #9
 8006942:	b29b      	uxth	r3, r3
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	3b01      	subs	r3, #1
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	3b01      	subs	r3, #1
 800695a:	061b      	lsls	r3, r3, #24
 800695c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006960:	4923      	ldr	r1, [pc, #140]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006966:	4b22      	ldr	r3, [pc, #136]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006976:	4b21      	ldr	r3, [pc, #132]	; (80069fc <HAL_RCC_OscConfig+0x778>)
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800697e:	00d2      	lsls	r2, r2, #3
 8006980:	491b      	ldr	r1, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	f023 020c 	bic.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	4917      	ldr	r1, [pc, #92]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 8006994:	4313      	orrs	r3, r2
 8006996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f023 0202 	bic.w	r2, r3, #2
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a4:	4912      	ldr	r1, [pc, #72]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	4a0d      	ldr	r2, [pc, #52]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069c2:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	4a07      	ldr	r2, [pc, #28]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <HAL_RCC_OscConfig+0x76c>)
 80069e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fa fd63 	bl	80014b0 <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069ec:	e011      	b.n	8006a12 <HAL_RCC_OscConfig+0x78e>
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
 80069f4:	58024800 	.word	0x58024800
 80069f8:	fffffc0c 	.word	0xfffffc0c
 80069fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fa fd56 	bl	80014b0 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e08a      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a12:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x77c>
 8006a1e:	e082      	b.n	8006b26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b43      	ldr	r3, [pc, #268]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a42      	ldr	r2, [pc, #264]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fa fd40 	bl	80014b0 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fa fd3c 	bl	80014b0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e070      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a46:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x7b0>
 8006a52:	e068      	b.n	8006b26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a54:	4b36      	ldr	r3, [pc, #216]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a5a:	4b35      	ldr	r3, [pc, #212]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d031      	beq.n	8006acc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 0203 	and.w	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d12a      	bne.n	8006acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d122      	bne.n	8006acc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d11a      	bne.n	8006acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	0a5b      	lsrs	r3, r3, #9
 8006a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d111      	bne.n	8006acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d108      	bne.n	8006acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	0e1b      	lsrs	r3, r3, #24
 8006abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e02b      	b.n	8006b28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ada:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d01f      	beq.n	8006b26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006ae6:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006af2:	f7fa fcdd 	bl	80014b0 <HAL_GetTick>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006af8:	bf00      	nop
 8006afa:	f7fa fcd9 	bl	80014b0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d0f9      	beq.n	8006afa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <HAL_RCC_OscConfig+0x8b0>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b12:	00d2      	lsls	r2, r2, #3
 8006b14:	4906      	ldr	r1, [pc, #24]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <HAL_RCC_OscConfig+0x8ac>)
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3730      	adds	r7, #48	; 0x30
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400
 8006b34:	ffff0007 	.word	0xffff0007

08006b38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e19c      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b4c:	4b8a      	ldr	r3, [pc, #552]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d910      	bls.n	8006b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5a:	4b87      	ldr	r3, [pc, #540]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 020f 	bic.w	r2, r3, #15
 8006b62:	4985      	ldr	r1, [pc, #532]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	4b83      	ldr	r3, [pc, #524]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d001      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e184      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	4b7b      	ldr	r3, [pc, #492]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d908      	bls.n	8006baa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b98:	4b78      	ldr	r3, [pc, #480]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	4975      	ldr	r1, [pc, #468]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	4b70      	ldr	r3, [pc, #448]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d908      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bc6:	4b6d      	ldr	r3, [pc, #436]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	496a      	ldr	r1, [pc, #424]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	4b64      	ldr	r3, [pc, #400]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d908      	bls.n	8006c06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bf4:	4b61      	ldr	r3, [pc, #388]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	495e      	ldr	r1, [pc, #376]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d010      	beq.n	8006c34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	4b59      	ldr	r3, [pc, #356]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d908      	bls.n	8006c34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c22:	4b56      	ldr	r3, [pc, #344]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4953      	ldr	r1, [pc, #332]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	4b4d      	ldr	r3, [pc, #308]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d908      	bls.n	8006c62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f023 020f 	bic.w	r2, r3, #15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4947      	ldr	r1, [pc, #284]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d055      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c6e:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4940      	ldr	r1, [pc, #256]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c88:	4b3c      	ldr	r3, [pc, #240]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d121      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0f6      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ca0:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d115      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0ea      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cb8:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0de      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cc8:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0d6      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f023 0207 	bic.w	r2, r3, #7
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4925      	ldr	r1, [pc, #148]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cea:	f7fa fbe1 	bl	80014b0 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf0:	e00a      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf2:	f7fa fbdd 	bl	80014b0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0be      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d1eb      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d208      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f023 020f 	bic.w	r2, r3, #15
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	490e      	ldr	r1, [pc, #56]	; (8006d7c <HAL_RCC_ClockConfig+0x244>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d214      	bcs.n	8006d80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d56:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f023 020f 	bic.w	r2, r3, #15
 8006d5e:	4906      	ldr	r1, [pc, #24]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <HAL_RCC_ClockConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e086      	b.n	8006e86 <HAL_RCC_ClockConfig+0x34e>
 8006d78:	52002000 	.word	0x52002000
 8006d7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d010      	beq.n	8006dae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	4b3f      	ldr	r3, [pc, #252]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d208      	bcs.n	8006dae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	4939      	ldr	r1, [pc, #228]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	4b34      	ldr	r3, [pc, #208]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d208      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dca:	4b31      	ldr	r3, [pc, #196]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	492e      	ldr	r1, [pc, #184]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	4b28      	ldr	r3, [pc, #160]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d208      	bcs.n	8006e0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006df8:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4922      	ldr	r1, [pc, #136]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e26:	4b1a      	ldr	r3, [pc, #104]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	4917      	ldr	r1, [pc, #92]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e38:	f000 f834 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	4912      	ldr	r1, [pc, #72]	; (8006e94 <HAL_RCC_ClockConfig+0x35c>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e56:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <HAL_RCC_ClockConfig+0x358>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <HAL_RCC_ClockConfig+0x35c>)
 8006e60:	5cd3      	ldrb	r3, [r2, r3]
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <HAL_RCC_ClockConfig+0x360>)
 8006e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <HAL_RCC_ClockConfig+0x364>)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_RCC_ClockConfig+0x368>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fa face 	bl	800141c <HAL_InitTick>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	0801f91c 	.word	0x0801f91c
 8006e98:	24000004 	.word	0x24000004
 8006e9c:	24000000 	.word	0x24000000
 8006ea0:	24000008 	.word	0x24000008

08006ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eaa:	4bb3      	ldr	r3, [pc, #716]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eb2:	2b18      	cmp	r3, #24
 8006eb4:	f200 8155 	bhi.w	8007162 <HAL_RCC_GetSysClockFreq+0x2be>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08007163 	.word	0x08007163
 8006ec8:	08007163 	.word	0x08007163
 8006ecc:	08007163 	.word	0x08007163
 8006ed0:	08007163 	.word	0x08007163
 8006ed4:	08007163 	.word	0x08007163
 8006ed8:	08007163 	.word	0x08007163
 8006edc:	08007163 	.word	0x08007163
 8006ee0:	08006f4b 	.word	0x08006f4b
 8006ee4:	08007163 	.word	0x08007163
 8006ee8:	08007163 	.word	0x08007163
 8006eec:	08007163 	.word	0x08007163
 8006ef0:	08007163 	.word	0x08007163
 8006ef4:	08007163 	.word	0x08007163
 8006ef8:	08007163 	.word	0x08007163
 8006efc:	08007163 	.word	0x08007163
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08007163 	.word	0x08007163
 8006f08:	08007163 	.word	0x08007163
 8006f0c:	08007163 	.word	0x08007163
 8006f10:	08007163 	.word	0x08007163
 8006f14:	08007163 	.word	0x08007163
 8006f18:	08007163 	.word	0x08007163
 8006f1c:	08007163 	.word	0x08007163
 8006f20:	08006f57 	.word	0x08006f57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f24:	4b94      	ldr	r3, [pc, #592]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f30:	4b91      	ldr	r3, [pc, #580]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	4a90      	ldr	r2, [pc, #576]	; (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f42:	e111      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f44:	4b8d      	ldr	r3, [pc, #564]	; (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f46:	61bb      	str	r3, [r7, #24]
      break;
 8006f48:	e10e      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f4a:	4b8d      	ldr	r3, [pc, #564]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f4c:	61bb      	str	r3, [r7, #24]
      break;
 8006f4e:	e10b      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f50:	4b8c      	ldr	r3, [pc, #560]	; (8007184 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f52:	61bb      	str	r3, [r7, #24]
      break;
 8006f54:	e108      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f56:	4b88      	ldr	r3, [pc, #544]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f60:	4b85      	ldr	r3, [pc, #532]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f6c:	4b82      	ldr	r3, [pc, #520]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f76:	4b80      	ldr	r3, [pc, #512]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80e1 	beq.w	800715c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f000 8083 	beq.w	80070a8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	f200 80a1 	bhi.w	80070ec <HAL_RCC_GetSysClockFreq+0x248>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d056      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fb6:	e099      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb8:	4b6f      	ldr	r3, [pc, #444]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02d      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc4:	4b6c      	ldr	r3, [pc, #432]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	4a6b      	ldr	r2, [pc, #428]	; (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b62      	ldr	r3, [pc, #392]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007002:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800701e:	e087      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800718c <HAL_RCC_GetSysClockFreq+0x2e8>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b51      	ldr	r3, [pc, #324]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a02 	vldr	s12, [r7, #8]
 8007046:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007062:	e065      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b40      	ldr	r3, [pc, #256]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a02 	vldr	s12, [r7, #8]
 800708a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070a6:	e043      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007194 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b2f      	ldr	r3, [pc, #188]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ea:	e021      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fe:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007112:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800712e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	0a5b      	lsrs	r3, r3, #9
 8007136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713a:	3301      	adds	r3, #1
 800713c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007148:	edd7 6a07 	vldr	s13, [r7, #28]
 800714c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007154:	ee17 3a90 	vmov	r3, s15
 8007158:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800715a:	e005      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	61bb      	str	r3, [r7, #24]
      break;
 8007160:	e002      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007162:	4b07      	ldr	r3, [pc, #28]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007164:	61bb      	str	r3, [r7, #24]
      break;
 8007166:	bf00      	nop
  }

  return sysclockfreq;
 8007168:	69bb      	ldr	r3, [r7, #24]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3724      	adds	r7, #36	; 0x24
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	03d09000 	.word	0x03d09000
 8007180:	003d0900 	.word	0x003d0900
 8007184:	007a1200 	.word	0x007a1200
 8007188:	46000000 	.word	0x46000000
 800718c:	4c742400 	.word	0x4c742400
 8007190:	4a742400 	.word	0x4a742400
 8007194:	4af42400 	.word	0x4af42400

08007198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800719e:	f7ff fe81 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	490f      	ldr	r1, [pc, #60]	; (80071ec <HAL_RCC_GetHCLKFreq+0x54>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <HAL_RCC_GetHCLKFreq+0x54>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	4a07      	ldr	r2, [pc, #28]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071d6:	4a07      	ldr	r2, [pc, #28]	; (80071f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071de:	681b      	ldr	r3, [r3, #0]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	58024400 	.word	0x58024400
 80071ec:	0801f91c 	.word	0x0801f91c
 80071f0:	24000004 	.word	0x24000004
 80071f4:	24000000 	.word	0x24000000

080071f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071fc:	f7ff ffcc 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4904      	ldr	r1, [pc, #16]	; (8007220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	58024400 	.word	0x58024400
 8007220:	0801f91c 	.word	0x0801f91c

08007224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007228:	f7ff ffb6 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 800722c:	4602      	mov	r2, r0
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	4904      	ldr	r1, [pc, #16]	; (800724c <HAL_RCC_GetPCLK2Freq+0x28>)
 800723a:	5ccb      	ldrb	r3, [r1, r3]
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007244:	4618      	mov	r0, r3
 8007246:	bd80      	pop	{r7, pc}
 8007248:	58024400 	.word	0x58024400
 800724c:	0801f91c 	.word	0x0801f91c

08007250 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007254:	b0ca      	sub	sp, #296	; 0x128
 8007256:	af00      	add	r7, sp, #0
 8007258:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007274:	2500      	movs	r5, #0
 8007276:	ea54 0305 	orrs.w	r3, r4, r5
 800727a:	d049      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007286:	d02f      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800728c:	d828      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800728e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007292:	d01a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007298:	d822      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800729e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a2:	d007      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072a4:	e01c      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a6:	4bb8      	ldr	r3, [pc, #736]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	4ab7      	ldr	r2, [pc, #732]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072b2:	e01a      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b8:	3308      	adds	r3, #8
 80072ba:	2102      	movs	r1, #2
 80072bc:	4618      	mov	r0, r3
 80072be:	f002 fb61 	bl	8009984 <RCCEx_PLL2_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072c8:	e00f      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ce:	3328      	adds	r3, #40	; 0x28
 80072d0:	2102      	movs	r1, #2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f002 fc08 	bl	8009ae8 <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072f2:	4ba5      	ldr	r3, [pc, #660]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007300:	4aa1      	ldr	r2, [pc, #644]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007302:	430b      	orrs	r3, r1
 8007304:	6513      	str	r3, [r2, #80]	; 0x50
 8007306:	e003      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800730c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800731c:	f04f 0900 	mov.w	r9, #0
 8007320:	ea58 0309 	orrs.w	r3, r8, r9
 8007324:	d047      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732c:	2b04      	cmp	r3, #4
 800732e:	d82a      	bhi.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800734d 	.word	0x0800734d
 800733c:	0800735b 	.word	0x0800735b
 8007340:	08007371 	.word	0x08007371
 8007344:	0800738f 	.word	0x0800738f
 8007348:	0800738f 	.word	0x0800738f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734c:	4b8e      	ldr	r3, [pc, #568]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	4a8d      	ldr	r2, [pc, #564]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007358:	e01a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	3308      	adds	r3, #8
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f002 fb0e 	bl	8009984 <RCCEx_PLL2_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800736e:	e00f      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007374:	3328      	adds	r3, #40	; 0x28
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f002 fbb5 	bl	8009ae8 <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007398:	4b7b      	ldr	r3, [pc, #492]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	f023 0107 	bic.w	r1, r3, #7
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a6:	4a78      	ldr	r2, [pc, #480]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a8:	430b      	orrs	r3, r1
 80073aa:	6513      	str	r3, [r2, #80]	; 0x50
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80073c2:	f04f 0b00 	mov.w	fp, #0
 80073c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80073ca:	d04c      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d6:	d030      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80073d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073dc:	d829      	bhi.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073de:	2bc0      	cmp	r3, #192	; 0xc0
 80073e0:	d02d      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80073e2:	2bc0      	cmp	r3, #192	; 0xc0
 80073e4:	d825      	bhi.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d018      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d821      	bhi.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d007      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80073f6:	e01c      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b63      	ldr	r3, [pc, #396]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a62      	ldr	r2, [pc, #392]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007404:	e01c      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740a:	3308      	adds	r3, #8
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f002 fab8 	bl	8009984 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800741a:	e011      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007420:	3328      	adds	r3, #40	; 0x28
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f002 fb5f 	bl	8009ae8 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007430:	e006      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800743e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007448:	4b4f      	ldr	r3, [pc, #316]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800744a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007456:	4a4c      	ldr	r2, [pc, #304]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6513      	str	r3, [r2, #80]	; 0x50
 800745c:	e003      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007472:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007476:	2300      	movs	r3, #0
 8007478:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800747c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007480:	460b      	mov	r3, r1
 8007482:	4313      	orrs	r3, r2
 8007484:	d053      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800748e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007492:	d035      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007498:	d82e      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800749a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800749e:	d031      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80074a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074a4:	d828      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074aa:	d01a      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80074ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b0:	d822      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80074b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ba:	d007      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80074bc:	e01c      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074be:	4b32      	ldr	r3, [pc, #200]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	4a31      	ldr	r2, [pc, #196]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ca:	e01c      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d0:	3308      	adds	r3, #8
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f002 fa55 	bl	8009984 <RCCEx_PLL2_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074e0:	e011      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e6:	3328      	adds	r3, #40	; 0x28
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f002 fafc 	bl	8009ae8 <RCCEx_PLL3_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f6:	e006      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074fe:	e002      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800750e:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800751e:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007520:	430b      	orrs	r3, r1
 8007522:	6593      	str	r3, [r2, #88]	; 0x58
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800753a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800753e:	2300      	movs	r3, #0
 8007540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007544:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d056      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800755a:	d038      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800755c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007560:	d831      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007566:	d034      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800756c:	d82b      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800756e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007572:	d01d      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007578:	d825      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800757e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007582:	d00a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007584:	e01f      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758c:	4ba2      	ldr	r3, [pc, #648]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	4aa1      	ldr	r2, [pc, #644]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007598:	e01c      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	3308      	adds	r3, #8
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f002 f9ee 	bl	8009984 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075ae:	e011      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	3328      	adds	r3, #40	; 0x28
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f002 fa95 	bl	8009ae8 <RCCEx_PLL3_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c4:	e006      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075cc:	e002      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075dc:	4b8e      	ldr	r3, [pc, #568]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075ec:	4a8a      	ldr	r2, [pc, #552]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ee:	430b      	orrs	r3, r1
 80075f0:	6593      	str	r3, [r2, #88]	; 0x58
 80075f2:	e003      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800760c:	2300      	movs	r3, #0
 800760e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007612:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007616:	460b      	mov	r3, r1
 8007618:	4313      	orrs	r3, r2
 800761a:	d03a      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007622:	2b30      	cmp	r3, #48	; 0x30
 8007624:	d01f      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007626:	2b30      	cmp	r3, #48	; 0x30
 8007628:	d819      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800762a:	2b20      	cmp	r3, #32
 800762c:	d00c      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800762e:	2b20      	cmp	r3, #32
 8007630:	d815      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d019      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007636:	2b10      	cmp	r3, #16
 8007638:	d111      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800763a:	4b77      	ldr	r3, [pc, #476]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	4a76      	ldr	r2, [pc, #472]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007646:	e011      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764c:	3308      	adds	r3, #8
 800764e:	2102      	movs	r1, #2
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f997 	bl	8009984 <RCCEx_PLL2_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800765c:	e006      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800766a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007674:	4b68      	ldr	r3, [pc, #416]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	4a65      	ldr	r2, [pc, #404]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007684:	430b      	orrs	r3, r1
 8007686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800768e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800769e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076a2:	2300      	movs	r3, #0
 80076a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d051      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076bc:	d035      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80076be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076c2:	d82e      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c8:	d031      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80076ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076ce:	d828      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d4:	d01a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80076d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076da:	d822      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d007      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80076e6:	e01c      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e8:	4b4b      	ldr	r3, [pc, #300]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a4a      	ldr	r2, [pc, #296]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076f4:	e01c      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3308      	adds	r3, #8
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f002 f940 	bl	8009984 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800770a:	e011      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	3328      	adds	r3, #40	; 0x28
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f002 f9e7 	bl	8009ae8 <RCCEx_PLL3_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007720:	e006      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007728:	e002      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800772a:	bf00      	nop
 800772c:	e000      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800772e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007738:	4b37      	ldr	r3, [pc, #220]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007746:	4a34      	ldr	r2, [pc, #208]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007748:	430b      	orrs	r3, r1
 800774a:	6513      	str	r3, [r2, #80]	; 0x50
 800774c:	e003      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007766:	2300      	movs	r3, #0
 8007768:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800776c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007770:	460b      	mov	r3, r1
 8007772:	4313      	orrs	r3, r2
 8007774:	d056      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007780:	d033      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007786:	d82c      	bhi.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800778c:	d02f      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800778e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007792:	d826      	bhi.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007798:	d02b      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800779a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800779e:	d820      	bhi.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80077a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a4:	d012      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80077a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077aa:	d81a      	bhi.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d022      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d115      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ba:	3308      	adds	r3, #8
 80077bc:	2101      	movs	r1, #1
 80077be:	4618      	mov	r0, r3
 80077c0:	f002 f8e0 	bl	8009984 <RCCEx_PLL2_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077ca:	e015      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d0:	3328      	adds	r3, #40	; 0x28
 80077d2:	2101      	movs	r1, #1
 80077d4:	4618      	mov	r0, r3
 80077d6:	f002 f987 	bl	8009ae8 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077e0:	e00a      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077e8:	e006      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077ea:	bf00      	nop
 80077ec:	e004      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10d      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800780e:	4a02      	ldr	r2, [pc, #8]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007810:	430b      	orrs	r3, r1
 8007812:	6513      	str	r3, [r2, #80]	; 0x50
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800783a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	d055      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800784c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007850:	d033      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007856:	d82c      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d02f      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007862:	d826      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007868:	d02b      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800786a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800786e:	d820      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d012      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787a:	d81a      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d022      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007884:	d115      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788a:	3308      	adds	r3, #8
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f002 f878 	bl	8009984 <RCCEx_PLL2_Config>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800789a:	e015      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	3328      	adds	r3, #40	; 0x28
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f002 f91f 	bl	8009ae8 <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078b0:	e00a      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078d0:	4ba3      	ldr	r3, [pc, #652]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80078d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078e0:	4a9f      	ldr	r2, [pc, #636]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6593      	str	r3, [r2, #88]	; 0x58
 80078e6:	e003      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007900:	2300      	movs	r3, #0
 8007902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800790a:	460b      	mov	r3, r1
 800790c:	4313      	orrs	r3, r2
 800790e:	d037      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d00e      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800791c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007920:	d816      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d018      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792a:	d111      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4b8c      	ldr	r3, [pc, #560]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a8b      	ldr	r2, [pc, #556]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007938:	e00f      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	3308      	adds	r3, #8
 8007940:	2101      	movs	r1, #1
 8007942:	4618      	mov	r0, r3
 8007944:	f002 f81e 	bl	8009984 <RCCEx_PLL2_Config>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800794e:	e004      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007956:	e000      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007962:	4b7f      	ldr	r3, [pc, #508]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007966:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	4a7b      	ldr	r2, [pc, #492]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007972:	430b      	orrs	r3, r1
 8007974:	6513      	str	r3, [r2, #80]	; 0x50
 8007976:	e003      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800797c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800798c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007990:	2300      	movs	r3, #0
 8007992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007996:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800799a:	460b      	mov	r3, r1
 800799c:	4313      	orrs	r3, r2
 800799e:	d039      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d81c      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	080079c1 	.word	0x080079c1
 80079b8:	080079cf 	.word	0x080079cf
 80079bc:	080079ed 	.word	0x080079ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c0:	4b67      	ldr	r3, [pc, #412]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	4a66      	ldr	r2, [pc, #408]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079cc:	e00f      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d2:	3308      	adds	r3, #8
 80079d4:	2102      	movs	r1, #2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 ffd4 	bl	8009984 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079e2:	e004      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079ea:	e000      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80079ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079f6:	4b5a      	ldr	r3, [pc, #360]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	f023 0103 	bic.w	r1, r3, #3
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a04:	4a56      	ldr	r2, [pc, #344]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a06:	430b      	orrs	r3, r1
 8007a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a0a:	e003      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f000 809f 	beq.w	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a36:	4b4b      	ldr	r3, [pc, #300]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a4a      	ldr	r2, [pc, #296]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a42:	f7f9 fd35 	bl	80014b0 <HAL_GetTick>
 8007a46:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a4a:	e00b      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4c:	f7f9 fd30 	bl	80014b0 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b64      	cmp	r3, #100	; 0x64
 8007a5a:	d903      	bls.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a62:	e005      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a64:	4b3f      	ldr	r3, [pc, #252]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0ed      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d179      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a78:	4b39      	ldr	r3, [pc, #228]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a84:	4053      	eors	r3, r2
 8007a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d015      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a8e:	4b34      	ldr	r3, [pc, #208]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	4a2d      	ldr	r2, [pc, #180]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ab2:	4a2b      	ldr	r2, [pc, #172]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac6:	d118      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7f9 fcf2 	bl	80014b0 <HAL_GetTick>
 8007acc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ad0:	e00d      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7f9 fced 	bl	80014b0 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007adc:	1ad2      	subs	r2, r2, r3
 8007ade:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d903      	bls.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007aec:	e005      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aee:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0eb      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d129      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b12:	d10e      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007b14:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b24:	091a      	lsrs	r2, r3, #4
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6113      	str	r3, [r2, #16]
 8007b30:	e005      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007b32:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b3c:	6113      	str	r3, [r2, #16]
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4e:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6713      	str	r3, [r2, #112]	; 0x70
 8007b54:	e00e      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007b5e:	e009      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007b60:	58024400 	.word	0x58024400
 8007b64:	58024800 	.word	0x58024800
 8007b68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f002 0301 	and.w	r3, r2, #1
 8007b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f000 8089 	beq.w	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9c:	2b28      	cmp	r3, #40	; 0x28
 8007b9e:	d86b      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007c81 	.word	0x08007c81
 8007bac:	08007c79 	.word	0x08007c79
 8007bb0:	08007c79 	.word	0x08007c79
 8007bb4:	08007c79 	.word	0x08007c79
 8007bb8:	08007c79 	.word	0x08007c79
 8007bbc:	08007c79 	.word	0x08007c79
 8007bc0:	08007c79 	.word	0x08007c79
 8007bc4:	08007c79 	.word	0x08007c79
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c79 	.word	0x08007c79
 8007bd0:	08007c79 	.word	0x08007c79
 8007bd4:	08007c79 	.word	0x08007c79
 8007bd8:	08007c79 	.word	0x08007c79
 8007bdc:	08007c79 	.word	0x08007c79
 8007be0:	08007c79 	.word	0x08007c79
 8007be4:	08007c79 	.word	0x08007c79
 8007be8:	08007c63 	.word	0x08007c63
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007c79 	.word	0x08007c79
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c79 	.word	0x08007c79
 8007bfc:	08007c79 	.word	0x08007c79
 8007c00:	08007c79 	.word	0x08007c79
 8007c04:	08007c79 	.word	0x08007c79
 8007c08:	08007c81 	.word	0x08007c81
 8007c0c:	08007c79 	.word	0x08007c79
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c79 	.word	0x08007c79
 8007c1c:	08007c79 	.word	0x08007c79
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c79 	.word	0x08007c79
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	08007c79 	.word	0x08007c79
 8007c3c:	08007c79 	.word	0x08007c79
 8007c40:	08007c79 	.word	0x08007c79
 8007c44:	08007c79 	.word	0x08007c79
 8007c48:	08007c81 	.word	0x08007c81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c50:	3308      	adds	r3, #8
 8007c52:	2101      	movs	r1, #1
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fe95 	bl	8009984 <RCCEx_PLL2_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c60:	e00f      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	3328      	adds	r3, #40	; 0x28
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 ff3c 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c8a:	4bbf      	ldr	r3, [pc, #764]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c98:	4abb      	ldr	r2, [pc, #748]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6553      	str	r3, [r2, #84]	; 0x54
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f002 0302 	and.w	r3, r2, #2
 8007cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	d041      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d824      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007cf1 	.word	0x08007cf1
 8007ce0:	08007d07 	.word	0x08007d07
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fe43 	bl	8009984 <RCCEx_PLL2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d04:	e00f      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	3328      	adds	r3, #40	; 0x28
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 feea 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e004      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d22:	e000      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d2e:	4b96      	ldr	r3, [pc, #600]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f023 0107 	bic.w	r1, r3, #7
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d3c:	4a92      	ldr	r2, [pc, #584]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	6553      	str	r3, [r2, #84]	; 0x54
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f002 0304 	and.w	r3, r2, #4
 8007d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d044      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d74:	2b05      	cmp	r3, #5
 8007d76:	d825      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007dcd 	.word	0x08007dcd
 8007d84:	08007d99 	.word	0x08007d99
 8007d88:	08007daf 	.word	0x08007daf
 8007d8c:	08007dcd 	.word	0x08007dcd
 8007d90:	08007dcd 	.word	0x08007dcd
 8007d94:	08007dcd 	.word	0x08007dcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	2101      	movs	r1, #1
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fdef 	bl	8009984 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dac:	e00f      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db2:	3328      	adds	r3, #40	; 0x28
 8007db4:	2101      	movs	r1, #1
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fe96 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dc2:	e004      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dca:	e000      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd6:	4b6c      	ldr	r3, [pc, #432]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dda:	f023 0107 	bic.w	r1, r3, #7
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007de6:	4a68      	ldr	r2, [pc, #416]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6593      	str	r3, [r2, #88]	; 0x58
 8007dec:	e003      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f002 0320 	and.w	r3, r2, #32
 8007e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e10:	460b      	mov	r3, r1
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d055      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e22:	d033      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e28:	d82c      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d02f      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e34:	d826      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e3a:	d02b      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e40:	d820      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e46:	d012      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d81a      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d022      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e56:	d115      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 fd8f 	bl	8009984 <RCCEx_PLL2_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e015      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e72:	3328      	adds	r3, #40	; 0x28
 8007e74:	2102      	movs	r1, #2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fe36 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e82:	e00a      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e8a:	e006      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e8c:	bf00      	nop
 8007e8e:	e004      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e90:	bf00      	nop
 8007e92:	e002      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ea2:	4b39      	ldr	r3, [pc, #228]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb2:	4a35      	ldr	r2, [pc, #212]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	6553      	str	r3, [r2, #84]	; 0x54
 8007eb8:	e003      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	d058      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eee:	d033      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007ef0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ef4:	d82c      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	d02f      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f00:	d826      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f06:	d02b      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f0c:	d820      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d012      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f18:	d81a      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d022      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d115      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fd29 	bl	8009984 <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f38:	e015      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3e:	3328      	adds	r3, #40	; 0x28
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fdd0 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f4e:	e00a      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f56:	e006      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f58:	bf00      	nop
 8007f5a:	e004      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f5c:	bf00      	nop
 8007f5e:	e002      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f60:	bf00      	nop
 8007f62:	e000      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10e      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f7e:	4a02      	ldr	r2, [pc, #8]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6593      	str	r3, [r2, #88]	; 0x58
 8007f84:	e006      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007faa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d055      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fc0:	d033      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fc6:	d82c      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fcc:	d02f      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd2:	d826      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fd8:	d02b      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fde:	d820      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe4:	d012      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fea:	d81a      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d022      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff4:	d115      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fcc0 	bl	8009984 <RCCEx_PLL2_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800800a:	e015      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	2102      	movs	r1, #2
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fd67 	bl	8009ae8 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008020:	e00a      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008028:	e006      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800802a:	bf00      	nop
 800802c:	e004      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008040:	4ba1      	ldr	r3, [pc, #644]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008044:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008050:	4a9d      	ldr	r2, [pc, #628]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008052:	430b      	orrs	r3, r1
 8008054:	6593      	str	r3, [r2, #88]	; 0x58
 8008056:	e003      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800805c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f002 0308 	and.w	r3, r2, #8
 800806c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008070:	2300      	movs	r3, #0
 8008072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008076:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800807a:	460b      	mov	r3, r1
 800807c:	4313      	orrs	r3, r2
 800807e:	d01e      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808c:	d10c      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008092:	3328      	adds	r3, #40	; 0x28
 8008094:	2102      	movs	r1, #2
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fd26 	bl	8009ae8 <RCCEx_PLL3_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80080a8:	4b87      	ldr	r3, [pc, #540]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b8:	4a83      	ldr	r2, [pc, #524]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ba:	430b      	orrs	r3, r1
 80080bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f002 0310 	and.w	r3, r2, #16
 80080ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ce:	2300      	movs	r3, #0
 80080d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80080d8:	460b      	mov	r3, r1
 80080da:	4313      	orrs	r3, r2
 80080dc:	d01e      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ea:	d10c      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	3328      	adds	r3, #40	; 0x28
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fcf7 	bl	8009ae8 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008106:	4b70      	ldr	r3, [pc, #448]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008116:	4a6c      	ldr	r2, [pc, #432]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008118:	430b      	orrs	r3, r1
 800811a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800812c:	2300      	movs	r3, #0
 800812e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008132:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	d03e      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008148:	d022      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800814a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814e:	d81b      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008158:	d00b      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800815a:	e015      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008160:	3308      	adds	r3, #8
 8008162:	2100      	movs	r1, #0
 8008164:	4618      	mov	r0, r3
 8008166:	f001 fc0d 	bl	8009984 <RCCEx_PLL2_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008170:	e00f      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008176:	3328      	adds	r3, #40	; 0x28
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fcb4 	bl	8009ae8 <RCCEx_PLL3_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008186:	e004      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800818e:	e000      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10b      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800819a:	4b4b      	ldr	r3, [pc, #300]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081aa:	4a47      	ldr	r2, [pc, #284]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ac:	430b      	orrs	r3, r1
 80081ae:	6593      	str	r3, [r2, #88]	; 0x58
 80081b0:	e003      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80081c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80081c8:	2300      	movs	r3, #0
 80081ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80081d0:	460b      	mov	r3, r1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d03b      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081e2:	d01f      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80081e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081e8:	d818      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80081ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ee:	d003      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80081f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081f4:	d007      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80081f6:	e011      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f8:	4b33      	ldr	r3, [pc, #204]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a32      	ldr	r2, [pc, #200]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008204:	e00f      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820a:	3328      	adds	r3, #40	; 0x28
 800820c:	2101      	movs	r1, #1
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fc6a 	bl	8009ae8 <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800821a:	e004      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008222:	e000      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10b      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800822e:	4b26      	ldr	r3, [pc, #152]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008240:	430b      	orrs	r3, r1
 8008242:	6553      	str	r3, [r2, #84]	; 0x54
 8008244:	e003      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800824a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800825a:	673b      	str	r3, [r7, #112]	; 0x70
 800825c:	2300      	movs	r3, #0
 800825e:	677b      	str	r3, [r7, #116]	; 0x74
 8008260:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008264:	460b      	mov	r3, r1
 8008266:	4313      	orrs	r3, r2
 8008268:	d034      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008278:	d007      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800827a:	e011      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800827c:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	4a11      	ldr	r2, [pc, #68]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008288:	e00e      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	3308      	adds	r3, #8
 8008290:	2102      	movs	r1, #2
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fb76 	bl	8009984 <RCCEx_PLL2_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800829e:	e003      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10d      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082be:	4a02      	ldr	r2, [pc, #8]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082c0:	430b      	orrs	r3, r1
 80082c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082c4:	e006      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80082c6:	bf00      	nop
 80082c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80082e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e2:	2300      	movs	r3, #0
 80082e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80082ea:	460b      	mov	r3, r1
 80082ec:	4313      	orrs	r3, r2
 80082ee:	d00c      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f4:	3328      	adds	r3, #40	; 0x28
 80082f6:	2102      	movs	r1, #2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fbf5 	bl	8009ae8 <RCCEx_PLL3_Config>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008316:	663b      	str	r3, [r7, #96]	; 0x60
 8008318:	2300      	movs	r3, #0
 800831a:	667b      	str	r3, [r7, #100]	; 0x64
 800831c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d038      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800832e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008332:	d018      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008338:	d811      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800833a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833e:	d014      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d80b      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008350:	4bc3      	ldr	r3, [pc, #780]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4ac2      	ldr	r2, [pc, #776]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800835c:	e008      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008364:	e004      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008366:	bf00      	nop
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800836a:	bf00      	nop
 800836c:	e000      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800836e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10b      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008378:	4bb9      	ldr	r3, [pc, #740]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008388:	4ab5      	ldr	r2, [pc, #724]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800838a:	430b      	orrs	r3, r1
 800838c:	6553      	str	r3, [r2, #84]	; 0x54
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80083a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80083a6:	2300      	movs	r3, #0
 80083a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80083ae:	460b      	mov	r3, r1
 80083b0:	4313      	orrs	r3, r2
 80083b2:	d009      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083b4:	4baa      	ldr	r3, [pc, #680]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c2:	4aa7      	ldr	r2, [pc, #668]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80083d4:	653b      	str	r3, [r7, #80]	; 0x50
 80083d6:	2300      	movs	r3, #0
 80083d8:	657b      	str	r3, [r7, #84]	; 0x54
 80083da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80083de:	460b      	mov	r3, r1
 80083e0:	4313      	orrs	r3, r2
 80083e2:	d00a      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083e4:	4b9e      	ldr	r3, [pc, #632]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80083ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083f4:	4a9a      	ldr	r2, [pc, #616]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083f6:	430b      	orrs	r3, r1
 80083f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008406:	64bb      	str	r3, [r7, #72]	; 0x48
 8008408:	2300      	movs	r3, #0
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800840c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008410:	460b      	mov	r3, r1
 8008412:	4313      	orrs	r3, r2
 8008414:	d009      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008416:	4b92      	ldr	r3, [pc, #584]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008424:	4a8e      	ldr	r2, [pc, #568]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008426:	430b      	orrs	r3, r1
 8008428:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008436:	643b      	str	r3, [r7, #64]	; 0x40
 8008438:	2300      	movs	r3, #0
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
 800843c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008440:	460b      	mov	r3, r1
 8008442:	4313      	orrs	r3, r2
 8008444:	d00e      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008446:	4b86      	ldr	r3, [pc, #536]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	4a85      	ldr	r2, [pc, #532]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800844c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008450:	6113      	str	r3, [r2, #16]
 8008452:	4b83      	ldr	r3, [pc, #524]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008454:	6919      	ldr	r1, [r3, #16]
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800845e:	4a80      	ldr	r2, [pc, #512]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008460:	430b      	orrs	r3, r1
 8008462:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008476:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800847a:	460b      	mov	r3, r1
 800847c:	4313      	orrs	r3, r2
 800847e:	d009      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008480:	4b77      	ldr	r3, [pc, #476]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008484:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848e:	4a74      	ldr	r2, [pc, #464]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008490:	430b      	orrs	r3, r1
 8008492:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
 80084a2:	2300      	movs	r3, #0
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80084aa:	460b      	mov	r3, r1
 80084ac:	4313      	orrs	r3, r2
 80084ae:	d00a      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084b0:	4b6b      	ldr	r3, [pc, #428]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c0:	4a67      	ldr	r2, [pc, #412]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084c2:	430b      	orrs	r3, r1
 80084c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	2100      	movs	r1, #0
 80084d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80084dc:	460b      	mov	r3, r1
 80084de:	4313      	orrs	r3, r2
 80084e0:	d011      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	3308      	adds	r3, #8
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fa4a 	bl	8009984 <RCCEx_PLL2_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	2100      	movs	r1, #0
 8008510:	6239      	str	r1, [r7, #32]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
 8008518:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800851c:	460b      	mov	r3, r1
 800851e:	4313      	orrs	r3, r2
 8008520:	d011      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008526:	3308      	adds	r3, #8
 8008528:	2101      	movs	r1, #1
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fa2a 	bl	8009984 <RCCEx_PLL2_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	2100      	movs	r1, #0
 8008550:	61b9      	str	r1, [r7, #24]
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800855c:	460b      	mov	r3, r1
 800855e:	4313      	orrs	r3, r2
 8008560:	d011      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008566:	3308      	adds	r3, #8
 8008568:	2102      	movs	r1, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fa0a 	bl	8009984 <RCCEx_PLL2_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	2100      	movs	r1, #0
 8008590:	6139      	str	r1, [r7, #16]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800859c:	460b      	mov	r3, r1
 800859e:	4313      	orrs	r3, r2
 80085a0:	d011      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a6:	3328      	adds	r3, #40	; 0x28
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fa9c 	bl	8009ae8 <RCCEx_PLL3_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80085b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	2100      	movs	r1, #0
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	f003 0310 	and.w	r3, r3, #16
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085dc:	460b      	mov	r3, r1
 80085de:	4313      	orrs	r3, r2
 80085e0:	d011      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e6:	3328      	adds	r3, #40	; 0x28
 80085e8:	2101      	movs	r1, #1
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fa7c 	bl	8009ae8 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	2100      	movs	r1, #0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	e9d7 1200 	ldrd	r1, r2, [r7]
 800861c:	460b      	mov	r3, r1
 800861e:	4313      	orrs	r3, r2
 8008620:	d011      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008626:	3328      	adds	r3, #40	; 0x28
 8008628:	2102      	movs	r1, #2
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fa5c 	bl	8009ae8 <RCCEx_PLL3_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008646:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e000      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
}
 8008654:	4618      	mov	r0, r3
 8008656:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800865a:	46bd      	mov	sp, r7
 800865c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008660:	58024400 	.word	0x58024400

08008664 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b090      	sub	sp, #64	; 0x40
 8008668:	af00      	add	r7, sp, #0
 800866a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800866e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008672:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008676:	430b      	orrs	r3, r1
 8008678:	f040 8094 	bne.w	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800867c:	4b9e      	ldr	r3, [pc, #632]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	2b04      	cmp	r3, #4
 800868a:	f200 8087 	bhi.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086d1 	.word	0x080086d1
 800869c:	080086f9 	.word	0x080086f9
 80086a0:	08008795 	.word	0x08008795
 80086a4:	08008721 	.word	0x08008721
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a8:	4b93      	ldr	r3, [pc, #588]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b4:	d108      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 f810 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c4:	f000 bd45 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086cc:	f000 bd41 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d0:	4b89      	ldr	r3, [pc, #548]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086dc:	d108      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fd54 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	f000 bd31 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f4:	f000 bd2d 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f8:	4b7f      	ldr	r3, [pc, #508]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008704:	d108      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fe94 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008714:	f000 bd1d 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871c:	f000 bd19 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008720:	4b75      	ldr	r3, [pc, #468]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008728:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800872a:	4b73      	ldr	r3, [pc, #460]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d10c      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800873c:	4b6e      	ldr	r3, [pc, #440]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	08db      	lsrs	r3, r3, #3
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	4a6d      	ldr	r2, [pc, #436]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874e:	e01f      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008750:	4b69      	ldr	r3, [pc, #420]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008764:	d102      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008766:	4b66      	ldr	r3, [pc, #408]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876a:	e011      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800876c:	4b62      	ldr	r3, [pc, #392]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008778:	d106      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008780:	d102      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008782:	4b60      	ldr	r3, [pc, #384]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008786:	e003      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800878c:	f000 bce1 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008790:	f000 bcdf 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008794:	4b5c      	ldr	r3, [pc, #368]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	f000 bcdb 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a0:	f000 bcd7 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80087a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80087ac:	430b      	orrs	r3, r1
 80087ae:	f040 80ad 	bne.w	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80087b2:	4b51      	ldr	r3, [pc, #324]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d056      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ca:	f200 8090 	bhi.w	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2bc0      	cmp	r3, #192	; 0xc0
 80087d2:	f000 8088 	beq.w	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	2bc0      	cmp	r3, #192	; 0xc0
 80087da:	f200 8088 	bhi.w	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	d032      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	f200 8081 	bhi.w	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	2b40      	cmp	r3, #64	; 0x40
 80087f6:	d014      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80087f8:	e079      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087fa:	4b3f      	ldr	r3, [pc, #252]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008806:	d108      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800880c:	4618      	mov	r0, r3
 800880e:	f000 ff67 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008816:	f000 bc9c 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881e:	f000 bc98 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008822:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882e:	d108      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008830:	f107 0318 	add.w	r3, r7, #24
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fcab 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883e:	f000 bc88 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008846:	f000 bc84 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800884a:	4b2b      	ldr	r3, [pc, #172]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008856:	d108      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fdeb 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008866:	f000 bc74 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886e:	f000 bc70 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008872:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800887a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800887c:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b04      	cmp	r3, #4
 8008886:	d10c      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888e:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	08db      	lsrs	r3, r3, #3
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	4a18      	ldr	r2, [pc, #96]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800889a:	fa22 f303 	lsr.w	r3, r2, r3
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a0:	e01f      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ae:	d106      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088b6:	d102      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088b8:	4b11      	ldr	r3, [pc, #68]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088bc:	e011      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ca:	d106      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d2:	d102      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d8:	e003      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80088de:	f000 bc38 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088e2:	f000 bc36 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088e6:	4b08      	ldr	r3, [pc, #32]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ea:	f000 bc32 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f2:	f000 bc2e 	b.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
 80088fc:	03d09000 	.word	0x03d09000
 8008900:	003d0900 	.word	0x003d0900
 8008904:	007a1200 	.word	0x007a1200
 8008908:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800890c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008910:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008914:	430b      	orrs	r3, r1
 8008916:	f040 809c 	bne.w	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800891a:	4b9e      	ldr	r3, [pc, #632]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800891c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008922:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800892a:	d054      	beq.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008932:	f200 808b 	bhi.w	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800893c:	f000 8083 	beq.w	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008946:	f200 8081 	bhi.w	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008950:	d02f      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008958:	d878      	bhi.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008966:	d012      	beq.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008968:	e070      	b.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800896a:	4b8a      	ldr	r3, [pc, #552]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008976:	d107      	bne.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800897c:	4618      	mov	r0, r3
 800897e:	f000 feaf 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008986:	e3e4      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800898c:	e3e1      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800898e:	4b81      	ldr	r3, [pc, #516]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899c:	f107 0318 	add.w	r3, r7, #24
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fbf5 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089aa:	e3d2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b0:	e3cf      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089b2:	4b78      	ldr	r3, [pc, #480]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089be:	d107      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c0:	f107 030c 	add.w	r3, r7, #12
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fd37 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ce:	e3c0      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d4:	e3bd      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089d6:	4b6f      	ldr	r3, [pc, #444]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089e0:	4b6c      	ldr	r3, [pc, #432]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	d10c      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80089ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f2:	4b68      	ldr	r3, [pc, #416]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	08db      	lsrs	r3, r3, #3
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	4a66      	ldr	r2, [pc, #408]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a04:	e01e      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a06:	4b63      	ldr	r3, [pc, #396]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a12:	d106      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a1a:	d102      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a1c:	4b5f      	ldr	r3, [pc, #380]	; (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a20:	e010      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a22:	4b5c      	ldr	r3, [pc, #368]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a2e:	d106      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a36:	d102      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a38:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a3c:	e002      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008a42:	e386      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a44:	e385      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a46:	4b57      	ldr	r3, [pc, #348]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4a:	e382      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a50:	e37f      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a56:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	f040 80a7 	bne.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008a60:	4b4c      	ldr	r3, [pc, #304]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a64:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a70:	d055      	beq.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a78:	f200 8096 	bhi.w	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a82:	f000 8084 	beq.w	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a8c:	f200 808c 	bhi.w	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a96:	d030      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a9e:	f200 8083 	bhi.w	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008aae:	d012      	beq.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008ab0:	e07a      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ab2:	4b38      	ldr	r3, [pc, #224]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fe0b 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ace:	e340      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad4:	e33d      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae2:	d107      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae4:	f107 0318 	add.w	r3, r7, #24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fb51 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af2:	e32e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af8:	e32b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008afa:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b06:	d107      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b08:	f107 030c 	add.w	r3, r7, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fc93 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b16:	e31c      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b1c:	e319      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b28:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d10c      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d109      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b3a:	4b16      	ldr	r3, [pc, #88]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	08db      	lsrs	r3, r3, #3
 8008b40:	f003 0303 	and.w	r3, r3, #3
 8008b44:	4a14      	ldr	r2, [pc, #80]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b46:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b4c:	e01e      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	d106      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b62:	d102      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b68:	e010      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b76:	d106      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7e:	d102      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	e002      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b8a:	e2e2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b8c:	e2e1      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b92:	e2de      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	007a1200 	.word	0x007a1200
 8008ba4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bac:	e2d1      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	f040 809c 	bne.w	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008bbc:	4b93      	ldr	r3, [pc, #588]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bcc:	d054      	beq.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd4:	f200 808b 	bhi.w	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bde:	f000 8083 	beq.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008be8:	f200 8081 	bhi.w	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf2:	d02f      	beq.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfa:	d878      	bhi.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d004      	beq.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c08:	d012      	beq.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008c0a:	e070      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c0c:	4b7f      	ldr	r3, [pc, #508]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c18:	d107      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fd5e 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c28:	e293      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2e:	e290      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c30:	4b76      	ldr	r3, [pc, #472]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c3c:	d107      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0318 	add.w	r3, r7, #24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 faa4 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c4c:	e281      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c52:	e27e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c54:	4b6d      	ldr	r3, [pc, #436]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c60:	d107      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fbe6 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c70:	e26f      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c76:	e26c      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c78:	4b64      	ldr	r3, [pc, #400]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c82:	4b62      	ldr	r3, [pc, #392]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c94:	4b5d      	ldr	r3, [pc, #372]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	4a5c      	ldr	r2, [pc, #368]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca6:	e01e      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ca8:	4b58      	ldr	r3, [pc, #352]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb4:	d106      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cbe:	4b55      	ldr	r3, [pc, #340]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc2:	e010      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cc4:	4b51      	ldr	r3, [pc, #324]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd0:	d106      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd8:	d102      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008cda:	4b4f      	ldr	r3, [pc, #316]	; (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cde:	e002      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ce4:	e235      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ce6:	e234      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ce8:	4b4c      	ldr	r3, [pc, #304]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cec:	e231      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf2:	e22e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	f040 808f 	bne.w	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008d02:	4b42      	ldr	r3, [pc, #264]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d06:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d12:	d06b      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d1a:	d874      	bhi.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d22:	d056      	beq.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d2a:	d86c      	bhi.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d32:	d03b      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d3a:	d864      	bhi.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d42:	d021      	beq.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d4a:	d85c      	bhi.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d58:	d004      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008d5a:	e054      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d5c:	f7fe fa4c 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 8008d60:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d62:	e1f6      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d64:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d70:	d107      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d72:	f107 0318 	add.w	r3, r7, #24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fa0a 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d80:	e1e7      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d86:	e1e4      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d88:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d94:	d107      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d96:	f107 030c 	add.w	r3, r7, #12
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fb4c 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da4:	e1d5      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008daa:	e1d2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008dac:	4b17      	ldr	r3, [pc, #92]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d109      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db8:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	08db      	lsrs	r3, r3, #3
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	4a13      	ldr	r2, [pc, #76]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dca:	e1c2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd0:	e1bf      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008dd2:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dde:	d102      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008de0:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de4:	e1b5      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dea:	e1b2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008dec:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df8:	d102      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008dfa:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dfe:	e1a8      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e04:	e1a5      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0a:	e1a2      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	03d09000 	.word	0x03d09000
 8008e14:	003d0900 	.word	0x003d0900
 8008e18:	007a1200 	.word	0x007a1200
 8008e1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e24:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	d173      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e2c:	4b9c      	ldr	r3, [pc, #624]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e3c:	d02f      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e44:	d863      	bhi.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e52:	d012      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008e54:	e05b      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e56:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f991 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e72:	e16e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e78:	e16b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e7a:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e86:	d107      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fad3 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e96:	e15c      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9c:	e159      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea8:	4b7d      	ldr	r3, [pc, #500]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d10c      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eba:	4b79      	ldr	r3, [pc, #484]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	08db      	lsrs	r3, r3, #3
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	4a77      	ldr	r2, [pc, #476]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ecc:	e01e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ece:	4b74      	ldr	r3, [pc, #464]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eda:	d106      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee2:	d102      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ee4:	4b70      	ldr	r3, [pc, #448]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee8:	e010      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eea:	4b6d      	ldr	r3, [pc, #436]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efe:	d102      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f00:	4b6a      	ldr	r3, [pc, #424]	; (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	e002      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f0a:	e122      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f0c:	e121      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f12:	e11e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f18:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	d133      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f20:	4b5f      	ldr	r3, [pc, #380]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f36:	d012      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008f38:	e023      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f3a:	4b59      	ldr	r3, [pc, #356]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f46:	d107      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fbc7 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f56:	e0fc      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5c:	e0f9      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f5e:	4b50      	ldr	r3, [pc, #320]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f6a:	d107      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f6c:	f107 0318 	add.w	r3, r7, #24
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f90d 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f7a:	e0ea      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f80:	e0e7      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f86:	e0e4      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008f90:	430b      	orrs	r3, r1
 8008f92:	f040 808d 	bne.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008f96:	4b42      	ldr	r3, [pc, #264]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008f9e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa6:	d06b      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fae:	d874      	bhi.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d056      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbe:	d86c      	bhi.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fc6:	d03b      	beq.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fce:	d864      	bhi.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd6:	d021      	beq.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fde:	d85c      	bhi.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fec:	d004      	beq.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008fee:	e054      	b.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ff0:	f000 f8b8 	bl	8009164 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ff4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ff6:	e0ac      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff8:	4b29      	ldr	r3, [pc, #164]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009004:	d107      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009006:	f107 0318 	add.w	r3, r7, #24
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f8c0 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009014:	e09d      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800901a:	e09a      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800901c:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d107      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800902a:	f107 030c 	add.w	r3, r7, #12
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fa02 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009038:	e08b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903e:	e088      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009040:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b04      	cmp	r3, #4
 800904a:	d109      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800904c:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	08db      	lsrs	r3, r3, #3
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009058:	fa22 f303 	lsr.w	r3, r2, r3
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905e:	e078      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009064:	e075      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009066:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009072:	d102      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009078:	e06b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800907e:	e068      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800908c:	d102      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009092:	e05e      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009098:	e05b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800909e:	e058      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a0:	58024400 	.word	0x58024400
 80090a4:	03d09000 	.word	0x03d09000
 80090a8:	003d0900 	.word	0x003d0900
 80090ac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80090b8:	430b      	orrs	r3, r1
 80090ba:	d148      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80090bc:	4b27      	ldr	r3, [pc, #156]	; (800915c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d02a      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d4:	d838      	bhi.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e2:	d00d      	beq.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80090e4:	e030      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090e6:	4b1d      	ldr	r3, [pc, #116]	; (800915c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f2:	d102      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80090f4:	4b1a      	ldr	r3, [pc, #104]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f8:	e02b      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090fe:	e028      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009100:	4b16      	ldr	r3, [pc, #88]	; (800915c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800910c:	d107      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800910e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fae4 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911c:	e019      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009122:	e016      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009124:	4b0d      	ldr	r3, [pc, #52]	; (800915c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800912c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009130:	d107      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009132:	f107 0318 	add.w	r3, r7, #24
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f82a 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009140:	e007      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009146:	e004      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800914c:	e001      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009154:	4618      	mov	r0, r3
 8009156:	3740      	adds	r7, #64	; 0x40
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	58024400 	.word	0x58024400
 8009160:	007a1200 	.word	0x007a1200

08009164 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009168:	f7fe f816 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 800916c:	4602      	mov	r2, r0
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	4904      	ldr	r1, [pc, #16]	; (800918c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800917a:	5ccb      	ldrb	r3, [r1, r3]
 800917c:	f003 031f 	and.w	r3, r3, #31
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009184:	4618      	mov	r0, r3
 8009186:	bd80      	pop	{r7, pc}
 8009188:	58024400 	.word	0x58024400
 800918c:	0801f91c 	.word	0x0801f91c

08009190 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	; 0x24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009198:	4ba1      	ldr	r3, [pc, #644]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80091a2:	4b9f      	ldr	r3, [pc, #636]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	0b1b      	lsrs	r3, r3, #12
 80091a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091ae:	4b9c      	ldr	r3, [pc, #624]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	091b      	lsrs	r3, r3, #4
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80091ba:	4b99      	ldr	r3, [pc, #612]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	08db      	lsrs	r3, r3, #3
 80091c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	fb02 f303 	mul.w	r3, r2, r3
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8111 	beq.w	8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	f000 8083 	beq.w	80092ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	f200 80a1 	bhi.w	8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d056      	beq.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091fa:	e099      	b.n	8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091fc:	4b88      	ldr	r3, [pc, #544]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d02d      	beq.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009208:	4b85      	ldr	r3, [pc, #532]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	08db      	lsrs	r3, r3, #3
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	4a84      	ldr	r2, [pc, #528]	; (8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
 8009218:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009232:	4b7b      	ldr	r3, [pc, #492]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009242:	ed97 6a03 	vldr	s12, [r7, #12]
 8009246:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009262:	e087      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800942c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009276:	4b6a      	ldr	r3, [pc, #424]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009286:	ed97 6a03 	vldr	s12, [r7, #12]
 800928a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800928e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a6:	e065      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ba:	4b59      	ldr	r3, [pc, #356]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092ea:	e043      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fe:	4b48      	ldr	r3, [pc, #288]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009312:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800932e:	e021      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800933e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009342:	4b37      	ldr	r3, [pc, #220]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009352:	ed97 6a03 	vldr	s12, [r7, #12]
 8009356:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800935a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009372:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009374:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	0a5b      	lsrs	r3, r3, #9
 800937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800938a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800938e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939a:	ee17 2a90 	vmov	r2, s15
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ac:	ee07 3a90 	vmov	s15, r3
 80093b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c8:	ee17 2a90 	vmov	r2, s15
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80093d0:	4b13      	ldr	r3, [pc, #76]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	0e1b      	lsrs	r3, r3, #24
 80093d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f6:	ee17 2a90 	vmov	r2, s15
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093fe:	e008      	b.n	8009412 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
}
 8009412:	bf00      	nop
 8009414:	3724      	adds	r7, #36	; 0x24
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	03d09000 	.word	0x03d09000
 8009428:	46000000 	.word	0x46000000
 800942c:	4c742400 	.word	0x4c742400
 8009430:	4a742400 	.word	0x4a742400
 8009434:	4af42400 	.word	0x4af42400

08009438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009438:	b480      	push	{r7}
 800943a:	b089      	sub	sp, #36	; 0x24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009440:	4ba1      	ldr	r3, [pc, #644]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800944a:	4b9f      	ldr	r3, [pc, #636]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944e:	0d1b      	lsrs	r3, r3, #20
 8009450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009454:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009456:	4b9c      	ldr	r3, [pc, #624]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009462:	4b99      	ldr	r3, [pc, #612]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	08db      	lsrs	r3, r3, #3
 8009468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8111 	beq.w	80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b02      	cmp	r3, #2
 800948a:	f000 8083 	beq.w	8009594 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b02      	cmp	r3, #2
 8009492:	f200 80a1 	bhi.w	80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d056      	beq.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094a2:	e099      	b.n	80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a4:	4b88      	ldr	r3, [pc, #544]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d02d      	beq.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094b0:	4b85      	ldr	r3, [pc, #532]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	08db      	lsrs	r3, r3, #3
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	4a84      	ldr	r2, [pc, #528]	; (80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
 80094c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	ee07 3a90 	vmov	s15, r3
 80094c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800950a:	e087      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800951a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951e:	4b6a      	ldr	r3, [pc, #424]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954e:	e065      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009562:	4b59      	ldr	r3, [pc, #356]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009572:	ed97 6a03 	vldr	s12, [r7, #12]
 8009576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800957a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009592:	e043      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a6:	4b48      	ldr	r3, [pc, #288]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095d6:	e021      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b37      	ldr	r3, [pc, #220]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800961a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800961c:	4b2a      	ldr	r3, [pc, #168]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	0a5b      	lsrs	r3, r3, #9
 8009622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009636:	edd7 6a07 	vldr	s13, [r7, #28]
 800963a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009642:	ee17 2a90 	vmov	r2, s15
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800964a:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009664:	edd7 6a07 	vldr	s13, [r7, #28]
 8009668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009670:	ee17 2a90 	vmov	r2, s15
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	0e1b      	lsrs	r3, r3, #24
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800968e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009692:	edd7 6a07 	vldr	s13, [r7, #28]
 8009696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800969a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969e:	ee17 2a90 	vmov	r2, s15
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096a6:	e008      	b.n	80096ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	609a      	str	r2, [r3, #8]
}
 80096ba:	bf00      	nop
 80096bc:	3724      	adds	r7, #36	; 0x24
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	58024400 	.word	0x58024400
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	46000000 	.word	0x46000000
 80096d4:	4c742400 	.word	0x4c742400
 80096d8:	4a742400 	.word	0x4a742400
 80096dc:	4af42400 	.word	0x4af42400

080096e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b089      	sub	sp, #36	; 0x24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096e8:	4ba0      	ldr	r3, [pc, #640]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	f003 0303 	and.w	r3, r3, #3
 80096f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80096f2:	4b9e      	ldr	r3, [pc, #632]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	091b      	lsrs	r3, r3, #4
 80096f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096fe:	4b9b      	ldr	r3, [pc, #620]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009708:	4b98      	ldr	r3, [pc, #608]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970c:	08db      	lsrs	r3, r3, #3
 800970e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	fb02 f303 	mul.w	r3, r2, r3
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009720:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8111 	beq.w	800994e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b02      	cmp	r3, #2
 8009730:	f000 8083 	beq.w	800983a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b02      	cmp	r3, #2
 8009738:	f200 80a1 	bhi.w	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d056      	beq.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009748:	e099      	b.n	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800974a:	4b88      	ldr	r3, [pc, #544]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d02d      	beq.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009756:	4b85      	ldr	r3, [pc, #532]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	08db      	lsrs	r3, r3, #3
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	4a83      	ldr	r2, [pc, #524]	; (8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009762:	fa22 f303 	lsr.w	r3, r2, r3
 8009766:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009780:	4b7a      	ldr	r3, [pc, #488]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	ee07 3a90 	vmov	s15, r3
 800978c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009790:	ed97 6a03 	vldr	s12, [r7, #12]
 8009794:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80097b0:	e087      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c4:	4b69      	ldr	r3, [pc, #420]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097cc:	ee07 3a90 	vmov	s15, r3
 80097d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f4:	e065      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	ee07 3a90 	vmov	s15, r3
 80097fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009800:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800997c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009808:	4b58      	ldr	r3, [pc, #352]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009818:	ed97 6a03 	vldr	s12, [r7, #12]
 800981c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009838:	e043      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009844:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009980 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984c:	4b47      	ldr	r3, [pc, #284]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009860:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800987c:	e021      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009888:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800988c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80098c2:	4b2a      	ldr	r3, [pc, #168]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	0a5b      	lsrs	r3, r3, #9
 80098c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e8:	ee17 2a90 	vmov	r2, s15
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80098f0:	4b1e      	ldr	r3, [pc, #120]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990a:	edd7 6a07 	vldr	s13, [r7, #28]
 800990e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800991e:	4b13      	ldr	r3, [pc, #76]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009938:	edd7 6a07 	vldr	s13, [r7, #28]
 800993c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009944:	ee17 2a90 	vmov	r2, s15
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800994c:	e008      	b.n	8009960 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	609a      	str	r2, [r3, #8]
}
 8009960:	bf00      	nop
 8009962:	3724      	adds	r7, #36	; 0x24
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	58024400 	.word	0x58024400
 8009970:	03d09000 	.word	0x03d09000
 8009974:	46000000 	.word	0x46000000
 8009978:	4c742400 	.word	0x4c742400
 800997c:	4a742400 	.word	0x4a742400
 8009980:	4af42400 	.word	0x4af42400

08009984 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009992:	4b53      	ldr	r3, [pc, #332]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b03      	cmp	r3, #3
 800999c:	d101      	bne.n	80099a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e099      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099a2:	4b4f      	ldr	r3, [pc, #316]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a4e      	ldr	r2, [pc, #312]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ae:	f7f7 fd7f 	bl	80014b0 <HAL_GetTick>
 80099b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099b4:	e008      	b.n	80099c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099b6:	f7f7 fd7b 	bl	80014b0 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e086      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c8:	4b45      	ldr	r3, [pc, #276]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f0      	bne.n	80099b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099d4:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	031b      	lsls	r3, r3, #12
 80099e2:	493f      	ldr	r1, [pc, #252]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	628b      	str	r3, [r1, #40]	; 0x28
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	025b      	lsls	r3, r3, #9
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	041b      	lsls	r3, r3, #16
 8009a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	061b      	lsls	r3, r3, #24
 8009a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a18:	4931      	ldr	r1, [pc, #196]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a1e:	4b30      	ldr	r3, [pc, #192]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	492d      	ldr	r1, [pc, #180]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a30:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	f023 0220 	bic.w	r2, r3, #32
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	4928      	ldr	r1, [pc, #160]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a42:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	f023 0310 	bic.w	r3, r3, #16
 8009a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a4e:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <RCCEx_PLL2_Config+0x160>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	69d2      	ldr	r2, [r2, #28]
 8009a5a:	00d2      	lsls	r2, r2, #3
 8009a5c:	4920      	ldr	r1, [pc, #128]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a62:	4b1f      	ldr	r3, [pc, #124]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a68:	f043 0310 	orr.w	r3, r3, #16
 8009a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a74:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a80:	e00f      	b.n	8009aa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d106      	bne.n	8009a96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a88:	4b15      	ldr	r3, [pc, #84]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a14      	ldr	r2, [pc, #80]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a94:	e005      	b.n	8009aa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a11      	ldr	r2, [pc, #68]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aae:	f7f7 fcff 	bl	80014b0 <HAL_GetTick>
 8009ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ab4:	e008      	b.n	8009ac8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ab6:	f7f7 fcfb 	bl	80014b0 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e006      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0f0      	beq.n	8009ab6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	58024400 	.word	0x58024400
 8009ae4:	ffff0007 	.word	0xffff0007

08009ae8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009af6:	4b53      	ldr	r3, [pc, #332]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d101      	bne.n	8009b06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e099      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b06:	4b4f      	ldr	r3, [pc, #316]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4e      	ldr	r2, [pc, #312]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b12:	f7f7 fccd 	bl	80014b0 <HAL_GetTick>
 8009b16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b18:	e008      	b.n	8009b2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b1a:	f7f7 fcc9 	bl	80014b0 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d901      	bls.n	8009b2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e086      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b2c:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1f0      	bne.n	8009b1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b38:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	493f      	ldr	r1, [pc, #252]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	025b      	lsls	r3, r3, #9
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	431a      	orrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	061b      	lsls	r3, r3, #24
 8009b78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b7c:	4931      	ldr	r1, [pc, #196]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b82:	4b30      	ldr	r3, [pc, #192]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	492d      	ldr	r1, [pc, #180]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b94:	4b2b      	ldr	r3, [pc, #172]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	4928      	ldr	r1, [pc, #160]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ba6:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	4a26      	ldr	r2, [pc, #152]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bb2:	4b24      	ldr	r3, [pc, #144]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <RCCEx_PLL3_Config+0x160>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	69d2      	ldr	r2, [r2, #28]
 8009bbe:	00d2      	lsls	r2, r2, #3
 8009bc0:	4920      	ldr	r1, [pc, #128]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009be4:	e00f      	b.n	8009c06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d106      	bne.n	8009bfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bec:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a14      	ldr	r2, [pc, #80]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bf8:	e005      	b.n	8009c06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfe:	4a11      	ldr	r2, [pc, #68]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a0e      	ldr	r2, [pc, #56]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c12:	f7f7 fc4d 	bl	80014b0 <HAL_GetTick>
 8009c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c18:	e008      	b.n	8009c2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c1a:	f7f7 fc49 	bl	80014b0 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e006      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c2c:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0f0      	beq.n	8009c1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	ffff0007 	.word	0xffff0007

08009c4c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e03c      	b.n	8009cd8 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7f7 f884 	bl	8000d80 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0201 	bic.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f85b 	bl	8009d4c <USART_SetConfig>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e01b      	b.n	8009cd8 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009cae:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cbe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f042 0201 	orr.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fd5b 	bl	800a78c <USART_CheckIdleState>
 8009cd6:	4603      	mov	r3, r0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009cf0:	e018      	b.n	8009d24 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf8:	d014      	beq.n	8009d24 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cfa:	f7f7 fbd9 	bl	80014b0 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d302      	bcc.n	8009d10 <USART_WaitOnFlagUntilTimeout+0x30>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e00f      	b.n	8009d44 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69da      	ldr	r2, [r3, #28]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	bf0c      	ite	eq
 8009d34:	2301      	moveq	r3, #1
 8009d36:	2300      	movne	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d0d7      	beq.n	8009cf2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	; 0x38
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4bc9      	ldr	r3, [pc, #804]	; (800a0a0 <USART_SetConfig+0x354>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d84:	430b      	orrs	r3, r1
 8009d86:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d94:	4313      	orrs	r3, r2
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da4:	4313      	orrs	r3, r2
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dae:	4313      	orrs	r3, r2
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4bba      	ldr	r3, [pc, #744]	; (800a0a4 <USART_SetConfig+0x358>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6812      	ldr	r2, [r2, #0]
 8009dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f023 010f 	bic.w	r1, r3, #15
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4ab1      	ldr	r2, [pc, #708]	; (800a0a8 <USART_SetConfig+0x35c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d176      	bne.n	8009ed4 <USART_SetConfig+0x188>
 8009de6:	4bb1      	ldr	r3, [pc, #708]	; (800a0ac <USART_SetConfig+0x360>)
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dee:	2b28      	cmp	r3, #40	; 0x28
 8009df0:	d86c      	bhi.n	8009ecc <USART_SetConfig+0x180>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USART_SetConfig+0xac>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e9d 	.word	0x08009e9d
 8009dfc:	08009ecd 	.word	0x08009ecd
 8009e00:	08009ecd 	.word	0x08009ecd
 8009e04:	08009ecd 	.word	0x08009ecd
 8009e08:	08009ecd 	.word	0x08009ecd
 8009e0c:	08009ecd 	.word	0x08009ecd
 8009e10:	08009ecd 	.word	0x08009ecd
 8009e14:	08009ecd 	.word	0x08009ecd
 8009e18:	08009ea5 	.word	0x08009ea5
 8009e1c:	08009ecd 	.word	0x08009ecd
 8009e20:	08009ecd 	.word	0x08009ecd
 8009e24:	08009ecd 	.word	0x08009ecd
 8009e28:	08009ecd 	.word	0x08009ecd
 8009e2c:	08009ecd 	.word	0x08009ecd
 8009e30:	08009ecd 	.word	0x08009ecd
 8009e34:	08009ecd 	.word	0x08009ecd
 8009e38:	08009ead 	.word	0x08009ead
 8009e3c:	08009ecd 	.word	0x08009ecd
 8009e40:	08009ecd 	.word	0x08009ecd
 8009e44:	08009ecd 	.word	0x08009ecd
 8009e48:	08009ecd 	.word	0x08009ecd
 8009e4c:	08009ecd 	.word	0x08009ecd
 8009e50:	08009ecd 	.word	0x08009ecd
 8009e54:	08009ecd 	.word	0x08009ecd
 8009e58:	08009eb5 	.word	0x08009eb5
 8009e5c:	08009ecd 	.word	0x08009ecd
 8009e60:	08009ecd 	.word	0x08009ecd
 8009e64:	08009ecd 	.word	0x08009ecd
 8009e68:	08009ecd 	.word	0x08009ecd
 8009e6c:	08009ecd 	.word	0x08009ecd
 8009e70:	08009ecd 	.word	0x08009ecd
 8009e74:	08009ecd 	.word	0x08009ecd
 8009e78:	08009ebd 	.word	0x08009ebd
 8009e7c:	08009ecd 	.word	0x08009ecd
 8009e80:	08009ecd 	.word	0x08009ecd
 8009e84:	08009ecd 	.word	0x08009ecd
 8009e88:	08009ecd 	.word	0x08009ecd
 8009e8c:	08009ecd 	.word	0x08009ecd
 8009e90:	08009ecd 	.word	0x08009ecd
 8009e94:	08009ecd 	.word	0x08009ecd
 8009e98:	08009ec5 	.word	0x08009ec5
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ea2:	e112      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009eaa:	e10e      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009eac:	2304      	movs	r3, #4
 8009eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009eb2:	e10a      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009eba:	e106      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ec2:	e102      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009eca:	e0fe      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009ecc:	2340      	movs	r3, #64	; 0x40
 8009ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ed2:	e0fa      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a75      	ldr	r2, [pc, #468]	; (800a0b0 <USART_SetConfig+0x364>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d130      	bne.n	8009f40 <USART_SetConfig+0x1f4>
 8009ede:	4b73      	ldr	r3, [pc, #460]	; (800a0ac <USART_SetConfig+0x360>)
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	2b05      	cmp	r3, #5
 8009ee8:	d826      	bhi.n	8009f38 <USART_SetConfig+0x1ec>
 8009eea:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <USART_SetConfig+0x1a4>)
 8009eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f11 	.word	0x08009f11
 8009ef8:	08009f19 	.word	0x08009f19
 8009efc:	08009f21 	.word	0x08009f21
 8009f00:	08009f29 	.word	0x08009f29
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f0e:	e0dc      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f10:	2302      	movs	r3, #2
 8009f12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f16:	e0d8      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f1e:	e0d4      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f20:	2308      	movs	r3, #8
 8009f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f26:	e0d0      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f2e:	e0cc      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f30:	2320      	movs	r3, #32
 8009f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f36:	e0c8      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f38:	2340      	movs	r3, #64	; 0x40
 8009f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f3e:	e0c4      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a5b      	ldr	r2, [pc, #364]	; (800a0b4 <USART_SetConfig+0x368>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d130      	bne.n	8009fac <USART_SetConfig+0x260>
 8009f4a:	4b58      	ldr	r3, [pc, #352]	; (800a0ac <USART_SetConfig+0x360>)
 8009f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d826      	bhi.n	8009fa4 <USART_SetConfig+0x258>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <USART_SetConfig+0x210>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f75 	.word	0x08009f75
 8009f60:	08009f7d 	.word	0x08009f7d
 8009f64:	08009f85 	.word	0x08009f85
 8009f68:	08009f8d 	.word	0x08009f8d
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f9d 	.word	0x08009f9d
 8009f74:	2300      	movs	r3, #0
 8009f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f7a:	e0a6      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f82:	e0a2      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f8a:	e09e      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f92:	e09a      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f9a:	e096      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009fa2:	e092      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009fa4:	2340      	movs	r3, #64	; 0x40
 8009fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009faa:	e08e      	b.n	800a0ca <USART_SetConfig+0x37e>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a41      	ldr	r2, [pc, #260]	; (800a0b8 <USART_SetConfig+0x36c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	f040 8086 	bne.w	800a0c4 <USART_SetConfig+0x378>
 8009fb8:	4b3c      	ldr	r3, [pc, #240]	; (800a0ac <USART_SetConfig+0x360>)
 8009fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fc0:	2b28      	cmp	r3, #40	; 0x28
 8009fc2:	d87b      	bhi.n	800a0bc <USART_SetConfig+0x370>
 8009fc4:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <USART_SetConfig+0x280>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	0800a071 	.word	0x0800a071
 8009fd0:	0800a0bd 	.word	0x0800a0bd
 8009fd4:	0800a0bd 	.word	0x0800a0bd
 8009fd8:	0800a0bd 	.word	0x0800a0bd
 8009fdc:	0800a0bd 	.word	0x0800a0bd
 8009fe0:	0800a0bd 	.word	0x0800a0bd
 8009fe4:	0800a0bd 	.word	0x0800a0bd
 8009fe8:	0800a0bd 	.word	0x0800a0bd
 8009fec:	0800a079 	.word	0x0800a079
 8009ff0:	0800a0bd 	.word	0x0800a0bd
 8009ff4:	0800a0bd 	.word	0x0800a0bd
 8009ff8:	0800a0bd 	.word	0x0800a0bd
 8009ffc:	0800a0bd 	.word	0x0800a0bd
 800a000:	0800a0bd 	.word	0x0800a0bd
 800a004:	0800a0bd 	.word	0x0800a0bd
 800a008:	0800a0bd 	.word	0x0800a0bd
 800a00c:	0800a081 	.word	0x0800a081
 800a010:	0800a0bd 	.word	0x0800a0bd
 800a014:	0800a0bd 	.word	0x0800a0bd
 800a018:	0800a0bd 	.word	0x0800a0bd
 800a01c:	0800a0bd 	.word	0x0800a0bd
 800a020:	0800a0bd 	.word	0x0800a0bd
 800a024:	0800a0bd 	.word	0x0800a0bd
 800a028:	0800a0bd 	.word	0x0800a0bd
 800a02c:	0800a089 	.word	0x0800a089
 800a030:	0800a0bd 	.word	0x0800a0bd
 800a034:	0800a0bd 	.word	0x0800a0bd
 800a038:	0800a0bd 	.word	0x0800a0bd
 800a03c:	0800a0bd 	.word	0x0800a0bd
 800a040:	0800a0bd 	.word	0x0800a0bd
 800a044:	0800a0bd 	.word	0x0800a0bd
 800a048:	0800a0bd 	.word	0x0800a0bd
 800a04c:	0800a091 	.word	0x0800a091
 800a050:	0800a0bd 	.word	0x0800a0bd
 800a054:	0800a0bd 	.word	0x0800a0bd
 800a058:	0800a0bd 	.word	0x0800a0bd
 800a05c:	0800a0bd 	.word	0x0800a0bd
 800a060:	0800a0bd 	.word	0x0800a0bd
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0bd 	.word	0x0800a0bd
 800a06c:	0800a099 	.word	0x0800a099
 800a070:	2301      	movs	r3, #1
 800a072:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a076:	e028      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a078:	2302      	movs	r3, #2
 800a07a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a07e:	e024      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a080:	2304      	movs	r3, #4
 800a082:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a086:	e020      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a088:	2308      	movs	r3, #8
 800a08a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a08e:	e01c      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a090:	2310      	movs	r3, #16
 800a092:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a096:	e018      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a098:	2320      	movs	r3, #32
 800a09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a09e:	e014      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a0a0:	cfff69f3 	.word	0xcfff69f3
 800a0a4:	ffffc0f6 	.word	0xffffc0f6
 800a0a8:	40011000 	.word	0x40011000
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	40004400 	.word	0x40004400
 800a0b4:	40004800 	.word	0x40004800
 800a0b8:	40011400 	.word	0x40011400
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0c2:	e002      	b.n	800a0ca <USART_SetConfig+0x37e>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800a0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	f200 8329 	bhi.w	800a726 <USART_SetConfig+0x9da>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USART_SetConfig+0x390>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a161 	.word	0x0800a161
 800a0e0:	0800a217 	.word	0x0800a217
 800a0e4:	0800a2cd 	.word	0x0800a2cd
 800a0e8:	0800a727 	.word	0x0800a727
 800a0ec:	0800a387 	.word	0x0800a387
 800a0f0:	0800a727 	.word	0x0800a727
 800a0f4:	0800a727 	.word	0x0800a727
 800a0f8:	0800a727 	.word	0x0800a727
 800a0fc:	0800a441 	.word	0x0800a441
 800a100:	0800a727 	.word	0x0800a727
 800a104:	0800a727 	.word	0x0800a727
 800a108:	0800a727 	.word	0x0800a727
 800a10c:	0800a727 	.word	0x0800a727
 800a110:	0800a727 	.word	0x0800a727
 800a114:	0800a727 	.word	0x0800a727
 800a118:	0800a727 	.word	0x0800a727
 800a11c:	0800a5b9 	.word	0x0800a5b9
 800a120:	0800a727 	.word	0x0800a727
 800a124:	0800a727 	.word	0x0800a727
 800a128:	0800a727 	.word	0x0800a727
 800a12c:	0800a727 	.word	0x0800a727
 800a130:	0800a727 	.word	0x0800a727
 800a134:	0800a727 	.word	0x0800a727
 800a138:	0800a727 	.word	0x0800a727
 800a13c:	0800a727 	.word	0x0800a727
 800a140:	0800a727 	.word	0x0800a727
 800a144:	0800a727 	.word	0x0800a727
 800a148:	0800a727 	.word	0x0800a727
 800a14c:	0800a727 	.word	0x0800a727
 800a150:	0800a727 	.word	0x0800a727
 800a154:	0800a727 	.word	0x0800a727
 800a158:	0800a727 	.word	0x0800a727
 800a15c:	0800a675 	.word	0x0800a675
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800a160:	f7fd f84a 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 800a164:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d044      	beq.n	800a1f8 <USART_SetConfig+0x4ac>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	2b01      	cmp	r3, #1
 800a174:	d03e      	beq.n	800a1f4 <USART_SetConfig+0x4a8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d038      	beq.n	800a1f0 <USART_SetConfig+0x4a4>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b03      	cmp	r3, #3
 800a184:	d032      	beq.n	800a1ec <USART_SetConfig+0x4a0>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d02c      	beq.n	800a1e8 <USART_SetConfig+0x49c>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	2b05      	cmp	r3, #5
 800a194:	d026      	beq.n	800a1e4 <USART_SetConfig+0x498>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d020      	beq.n	800a1e0 <USART_SetConfig+0x494>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	2b07      	cmp	r3, #7
 800a1a4:	d01a      	beq.n	800a1dc <USART_SetConfig+0x490>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	2b08      	cmp	r3, #8
 800a1ac:	d014      	beq.n	800a1d8 <USART_SetConfig+0x48c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	2b09      	cmp	r3, #9
 800a1b4:	d00e      	beq.n	800a1d4 <USART_SetConfig+0x488>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	2b0a      	cmp	r3, #10
 800a1bc:	d008      	beq.n	800a1d0 <USART_SetConfig+0x484>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	2b0b      	cmp	r3, #11
 800a1c4:	d102      	bne.n	800a1cc <USART_SetConfig+0x480>
 800a1c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1ca:	e016      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e014      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	e012      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	e010      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	e00e      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	e00c      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	e00a      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1e4:	230a      	movs	r3, #10
 800a1e6:	e008      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	e006      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1ec:	2306      	movs	r3, #6
 800a1ee:	e004      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	e002      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e000      	b.n	800a1fa <USART_SetConfig+0x4ae>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a200:	005a      	lsls	r2, r3, #1
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	085b      	lsrs	r3, r3, #1
 800a208:	441a      	add	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a212:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a214:	e28b      	b.n	800a72e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800a216:	f7fd f805 	bl	8007224 <HAL_RCC_GetPCLK2Freq>
 800a21a:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	d044      	beq.n	800a2ae <USART_SetConfig+0x562>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d03e      	beq.n	800a2aa <USART_SetConfig+0x55e>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	2b02      	cmp	r3, #2
 800a232:	d038      	beq.n	800a2a6 <USART_SetConfig+0x55a>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d032      	beq.n	800a2a2 <USART_SetConfig+0x556>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	2b04      	cmp	r3, #4
 800a242:	d02c      	beq.n	800a29e <USART_SetConfig+0x552>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d026      	beq.n	800a29a <USART_SetConfig+0x54e>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b06      	cmp	r3, #6
 800a252:	d020      	beq.n	800a296 <USART_SetConfig+0x54a>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b07      	cmp	r3, #7
 800a25a:	d01a      	beq.n	800a292 <USART_SetConfig+0x546>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b08      	cmp	r3, #8
 800a262:	d014      	beq.n	800a28e <USART_SetConfig+0x542>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d00e      	beq.n	800a28a <USART_SetConfig+0x53e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b0a      	cmp	r3, #10
 800a272:	d008      	beq.n	800a286 <USART_SetConfig+0x53a>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b0b      	cmp	r3, #11
 800a27a:	d102      	bne.n	800a282 <USART_SetConfig+0x536>
 800a27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a280:	e016      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a282:	2301      	movs	r3, #1
 800a284:	e014      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a286:	2380      	movs	r3, #128	; 0x80
 800a288:	e012      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a28a:	2340      	movs	r3, #64	; 0x40
 800a28c:	e010      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a28e:	2320      	movs	r3, #32
 800a290:	e00e      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a292:	2310      	movs	r3, #16
 800a294:	e00c      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a296:	230c      	movs	r3, #12
 800a298:	e00a      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a29a:	230a      	movs	r3, #10
 800a29c:	e008      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a29e:	2308      	movs	r3, #8
 800a2a0:	e006      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a2a2:	2306      	movs	r3, #6
 800a2a4:	e004      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a2a6:	2304      	movs	r3, #4
 800a2a8:	e002      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	e000      	b.n	800a2b0 <USART_SetConfig+0x564>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b6:	005a      	lsls	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	441a      	add	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a2ca:	e230      	b.n	800a72e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2cc:	f107 0318 	add.w	r3, r7, #24
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe ff5d 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d044      	beq.n	800a36a <USART_SetConfig+0x61e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d03e      	beq.n	800a366 <USART_SetConfig+0x61a>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d038      	beq.n	800a362 <USART_SetConfig+0x616>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d032      	beq.n	800a35e <USART_SetConfig+0x612>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d02c      	beq.n	800a35a <USART_SetConfig+0x60e>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	2b05      	cmp	r3, #5
 800a306:	d026      	beq.n	800a356 <USART_SetConfig+0x60a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	2b06      	cmp	r3, #6
 800a30e:	d020      	beq.n	800a352 <USART_SetConfig+0x606>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	2b07      	cmp	r3, #7
 800a316:	d01a      	beq.n	800a34e <USART_SetConfig+0x602>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d014      	beq.n	800a34a <USART_SetConfig+0x5fe>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b09      	cmp	r3, #9
 800a326:	d00e      	beq.n	800a346 <USART_SetConfig+0x5fa>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	2b0a      	cmp	r3, #10
 800a32e:	d008      	beq.n	800a342 <USART_SetConfig+0x5f6>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2b0b      	cmp	r3, #11
 800a336:	d102      	bne.n	800a33e <USART_SetConfig+0x5f2>
 800a338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a33c:	e016      	b.n	800a36c <USART_SetConfig+0x620>
 800a33e:	2301      	movs	r3, #1
 800a340:	e014      	b.n	800a36c <USART_SetConfig+0x620>
 800a342:	2380      	movs	r3, #128	; 0x80
 800a344:	e012      	b.n	800a36c <USART_SetConfig+0x620>
 800a346:	2340      	movs	r3, #64	; 0x40
 800a348:	e010      	b.n	800a36c <USART_SetConfig+0x620>
 800a34a:	2320      	movs	r3, #32
 800a34c:	e00e      	b.n	800a36c <USART_SetConfig+0x620>
 800a34e:	2310      	movs	r3, #16
 800a350:	e00c      	b.n	800a36c <USART_SetConfig+0x620>
 800a352:	230c      	movs	r3, #12
 800a354:	e00a      	b.n	800a36c <USART_SetConfig+0x620>
 800a356:	230a      	movs	r3, #10
 800a358:	e008      	b.n	800a36c <USART_SetConfig+0x620>
 800a35a:	2308      	movs	r3, #8
 800a35c:	e006      	b.n	800a36c <USART_SetConfig+0x620>
 800a35e:	2306      	movs	r3, #6
 800a360:	e004      	b.n	800a36c <USART_SetConfig+0x620>
 800a362:	2304      	movs	r3, #4
 800a364:	e002      	b.n	800a36c <USART_SetConfig+0x620>
 800a366:	2302      	movs	r3, #2
 800a368:	e000      	b.n	800a36c <USART_SetConfig+0x620>
 800a36a:	2301      	movs	r3, #1
 800a36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a370:	005a      	lsls	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a384:	e1d3      	b.n	800a72e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a386:	f107 030c 	add.w	r3, r7, #12
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff f854 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	d044      	beq.n	800a424 <USART_SetConfig+0x6d8>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d03e      	beq.n	800a420 <USART_SetConfig+0x6d4>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d038      	beq.n	800a41c <USART_SetConfig+0x6d0>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d032      	beq.n	800a418 <USART_SetConfig+0x6cc>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	d02c      	beq.n	800a414 <USART_SetConfig+0x6c8>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2b05      	cmp	r3, #5
 800a3c0:	d026      	beq.n	800a410 <USART_SetConfig+0x6c4>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b06      	cmp	r3, #6
 800a3c8:	d020      	beq.n	800a40c <USART_SetConfig+0x6c0>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2b07      	cmp	r3, #7
 800a3d0:	d01a      	beq.n	800a408 <USART_SetConfig+0x6bc>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b08      	cmp	r3, #8
 800a3d8:	d014      	beq.n	800a404 <USART_SetConfig+0x6b8>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b09      	cmp	r3, #9
 800a3e0:	d00e      	beq.n	800a400 <USART_SetConfig+0x6b4>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b0a      	cmp	r3, #10
 800a3e8:	d008      	beq.n	800a3fc <USART_SetConfig+0x6b0>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b0b      	cmp	r3, #11
 800a3f0:	d102      	bne.n	800a3f8 <USART_SetConfig+0x6ac>
 800a3f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f6:	e016      	b.n	800a426 <USART_SetConfig+0x6da>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e014      	b.n	800a426 <USART_SetConfig+0x6da>
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	e012      	b.n	800a426 <USART_SetConfig+0x6da>
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	e010      	b.n	800a426 <USART_SetConfig+0x6da>
 800a404:	2320      	movs	r3, #32
 800a406:	e00e      	b.n	800a426 <USART_SetConfig+0x6da>
 800a408:	2310      	movs	r3, #16
 800a40a:	e00c      	b.n	800a426 <USART_SetConfig+0x6da>
 800a40c:	230c      	movs	r3, #12
 800a40e:	e00a      	b.n	800a426 <USART_SetConfig+0x6da>
 800a410:	230a      	movs	r3, #10
 800a412:	e008      	b.n	800a426 <USART_SetConfig+0x6da>
 800a414:	2308      	movs	r3, #8
 800a416:	e006      	b.n	800a426 <USART_SetConfig+0x6da>
 800a418:	2306      	movs	r3, #6
 800a41a:	e004      	b.n	800a426 <USART_SetConfig+0x6da>
 800a41c:	2304      	movs	r3, #4
 800a41e:	e002      	b.n	800a426 <USART_SetConfig+0x6da>
 800a420:	2302      	movs	r3, #2
 800a422:	e000      	b.n	800a426 <USART_SetConfig+0x6da>
 800a424:	2301      	movs	r3, #1
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	005a      	lsls	r2, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	441a      	add	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43c:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a43e:	e176      	b.n	800a72e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a440:	4b89      	ldr	r3, [pc, #548]	; (800a668 <USART_SetConfig+0x91c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d05d      	beq.n	800a508 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800a44c:	4b86      	ldr	r3, [pc, #536]	; (800a668 <USART_SetConfig+0x91c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	08db      	lsrs	r3, r3, #3
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	4a85      	ldr	r2, [pc, #532]	; (800a66c <USART_SetConfig+0x920>)
 800a458:	40da      	lsrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d044      	beq.n	800a4ec <USART_SetConfig+0x7a0>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	2b01      	cmp	r3, #1
 800a468:	d03e      	beq.n	800a4e8 <USART_SetConfig+0x79c>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d038      	beq.n	800a4e4 <USART_SetConfig+0x798>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b03      	cmp	r3, #3
 800a478:	d032      	beq.n	800a4e0 <USART_SetConfig+0x794>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d02c      	beq.n	800a4dc <USART_SetConfig+0x790>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b05      	cmp	r3, #5
 800a488:	d026      	beq.n	800a4d8 <USART_SetConfig+0x78c>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2b06      	cmp	r3, #6
 800a490:	d020      	beq.n	800a4d4 <USART_SetConfig+0x788>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b07      	cmp	r3, #7
 800a498:	d01a      	beq.n	800a4d0 <USART_SetConfig+0x784>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b08      	cmp	r3, #8
 800a4a0:	d014      	beq.n	800a4cc <USART_SetConfig+0x780>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b09      	cmp	r3, #9
 800a4a8:	d00e      	beq.n	800a4c8 <USART_SetConfig+0x77c>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b0a      	cmp	r3, #10
 800a4b0:	d008      	beq.n	800a4c4 <USART_SetConfig+0x778>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b0b      	cmp	r3, #11
 800a4b8:	d102      	bne.n	800a4c0 <USART_SetConfig+0x774>
 800a4ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4be:	e016      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e014      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	e012      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4c8:	2340      	movs	r3, #64	; 0x40
 800a4ca:	e010      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	e00e      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	e00c      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	e00a      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4d8:	230a      	movs	r3, #10
 800a4da:	e008      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4dc:	2308      	movs	r3, #8
 800a4de:	e006      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4e0:	2306      	movs	r3, #6
 800a4e2:	e004      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	e002      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e000      	b.n	800a4ee <USART_SetConfig+0x7a2>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f2:	005a      	lsls	r2, r3, #1
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	085b      	lsrs	r3, r3, #1
 800a4fa:	441a      	add	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	fbb2 f3f3 	udiv	r3, r2, r3
 800a504:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800a506:	e112      	b.n	800a72e <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d044      	beq.n	800a59a <USART_SetConfig+0x84e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b01      	cmp	r3, #1
 800a516:	d03e      	beq.n	800a596 <USART_SetConfig+0x84a>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d038      	beq.n	800a592 <USART_SetConfig+0x846>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b03      	cmp	r3, #3
 800a526:	d032      	beq.n	800a58e <USART_SetConfig+0x842>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d02c      	beq.n	800a58a <USART_SetConfig+0x83e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b05      	cmp	r3, #5
 800a536:	d026      	beq.n	800a586 <USART_SetConfig+0x83a>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b06      	cmp	r3, #6
 800a53e:	d020      	beq.n	800a582 <USART_SetConfig+0x836>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b07      	cmp	r3, #7
 800a546:	d01a      	beq.n	800a57e <USART_SetConfig+0x832>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d014      	beq.n	800a57a <USART_SetConfig+0x82e>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b09      	cmp	r3, #9
 800a556:	d00e      	beq.n	800a576 <USART_SetConfig+0x82a>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b0a      	cmp	r3, #10
 800a55e:	d008      	beq.n	800a572 <USART_SetConfig+0x826>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b0b      	cmp	r3, #11
 800a566:	d102      	bne.n	800a56e <USART_SetConfig+0x822>
 800a568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a56c:	e016      	b.n	800a59c <USART_SetConfig+0x850>
 800a56e:	2301      	movs	r3, #1
 800a570:	e014      	b.n	800a59c <USART_SetConfig+0x850>
 800a572:	2380      	movs	r3, #128	; 0x80
 800a574:	e012      	b.n	800a59c <USART_SetConfig+0x850>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	e010      	b.n	800a59c <USART_SetConfig+0x850>
 800a57a:	2320      	movs	r3, #32
 800a57c:	e00e      	b.n	800a59c <USART_SetConfig+0x850>
 800a57e:	2310      	movs	r3, #16
 800a580:	e00c      	b.n	800a59c <USART_SetConfig+0x850>
 800a582:	230c      	movs	r3, #12
 800a584:	e00a      	b.n	800a59c <USART_SetConfig+0x850>
 800a586:	230a      	movs	r3, #10
 800a588:	e008      	b.n	800a59c <USART_SetConfig+0x850>
 800a58a:	2308      	movs	r3, #8
 800a58c:	e006      	b.n	800a59c <USART_SetConfig+0x850>
 800a58e:	2306      	movs	r3, #6
 800a590:	e004      	b.n	800a59c <USART_SetConfig+0x850>
 800a592:	2304      	movs	r3, #4
 800a594:	e002      	b.n	800a59c <USART_SetConfig+0x850>
 800a596:	2302      	movs	r3, #2
 800a598:	e000      	b.n	800a59c <USART_SetConfig+0x850>
 800a59a:	2301      	movs	r3, #1
 800a59c:	4a33      	ldr	r2, [pc, #204]	; (800a66c <USART_SetConfig+0x920>)
 800a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a2:	005a      	lsls	r2, r3, #1
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	085b      	lsrs	r3, r3, #1
 800a5aa:	441a      	add	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a5b6:	e0ba      	b.n	800a72e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d044      	beq.n	800a64a <USART_SetConfig+0x8fe>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d03e      	beq.n	800a646 <USART_SetConfig+0x8fa>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d038      	beq.n	800a642 <USART_SetConfig+0x8f6>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d032      	beq.n	800a63e <USART_SetConfig+0x8f2>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	2b04      	cmp	r3, #4
 800a5de:	d02c      	beq.n	800a63a <USART_SetConfig+0x8ee>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	d026      	beq.n	800a636 <USART_SetConfig+0x8ea>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	2b06      	cmp	r3, #6
 800a5ee:	d020      	beq.n	800a632 <USART_SetConfig+0x8e6>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	2b07      	cmp	r3, #7
 800a5f6:	d01a      	beq.n	800a62e <USART_SetConfig+0x8e2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d014      	beq.n	800a62a <USART_SetConfig+0x8de>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	2b09      	cmp	r3, #9
 800a606:	d00e      	beq.n	800a626 <USART_SetConfig+0x8da>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	d008      	beq.n	800a622 <USART_SetConfig+0x8d6>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	2b0b      	cmp	r3, #11
 800a616:	d102      	bne.n	800a61e <USART_SetConfig+0x8d2>
 800a618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a61c:	e016      	b.n	800a64c <USART_SetConfig+0x900>
 800a61e:	2301      	movs	r3, #1
 800a620:	e014      	b.n	800a64c <USART_SetConfig+0x900>
 800a622:	2380      	movs	r3, #128	; 0x80
 800a624:	e012      	b.n	800a64c <USART_SetConfig+0x900>
 800a626:	2340      	movs	r3, #64	; 0x40
 800a628:	e010      	b.n	800a64c <USART_SetConfig+0x900>
 800a62a:	2320      	movs	r3, #32
 800a62c:	e00e      	b.n	800a64c <USART_SetConfig+0x900>
 800a62e:	2310      	movs	r3, #16
 800a630:	e00c      	b.n	800a64c <USART_SetConfig+0x900>
 800a632:	230c      	movs	r3, #12
 800a634:	e00a      	b.n	800a64c <USART_SetConfig+0x900>
 800a636:	230a      	movs	r3, #10
 800a638:	e008      	b.n	800a64c <USART_SetConfig+0x900>
 800a63a:	2308      	movs	r3, #8
 800a63c:	e006      	b.n	800a64c <USART_SetConfig+0x900>
 800a63e:	2306      	movs	r3, #6
 800a640:	e004      	b.n	800a64c <USART_SetConfig+0x900>
 800a642:	2304      	movs	r3, #4
 800a644:	e002      	b.n	800a64c <USART_SetConfig+0x900>
 800a646:	2302      	movs	r3, #2
 800a648:	e000      	b.n	800a64c <USART_SetConfig+0x900>
 800a64a:	2301      	movs	r3, #1
 800a64c:	4a08      	ldr	r2, [pc, #32]	; (800a670 <USART_SetConfig+0x924>)
 800a64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a652:	005a      	lsls	r2, r3, #1
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	441a      	add	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	fbb2 f3f3 	udiv	r3, r2, r3
 800a664:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a666:	e062      	b.n	800a72e <USART_SetConfig+0x9e2>
 800a668:	58024400 	.word	0x58024400
 800a66c:	03d09000 	.word	0x03d09000
 800a670:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d044      	beq.n	800a706 <USART_SetConfig+0x9ba>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b01      	cmp	r3, #1
 800a682:	d03e      	beq.n	800a702 <USART_SetConfig+0x9b6>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d038      	beq.n	800a6fe <USART_SetConfig+0x9b2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b03      	cmp	r3, #3
 800a692:	d032      	beq.n	800a6fa <USART_SetConfig+0x9ae>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d02c      	beq.n	800a6f6 <USART_SetConfig+0x9aa>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	d026      	beq.n	800a6f2 <USART_SetConfig+0x9a6>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b06      	cmp	r3, #6
 800a6aa:	d020      	beq.n	800a6ee <USART_SetConfig+0x9a2>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b07      	cmp	r3, #7
 800a6b2:	d01a      	beq.n	800a6ea <USART_SetConfig+0x99e>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d014      	beq.n	800a6e6 <USART_SetConfig+0x99a>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b09      	cmp	r3, #9
 800a6c2:	d00e      	beq.n	800a6e2 <USART_SetConfig+0x996>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	2b0a      	cmp	r3, #10
 800a6ca:	d008      	beq.n	800a6de <USART_SetConfig+0x992>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	2b0b      	cmp	r3, #11
 800a6d2:	d102      	bne.n	800a6da <USART_SetConfig+0x98e>
 800a6d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6d8:	e016      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e014      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6de:	2380      	movs	r3, #128	; 0x80
 800a6e0:	e012      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	e010      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6e6:	2320      	movs	r3, #32
 800a6e8:	e00e      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6ea:	2310      	movs	r3, #16
 800a6ec:	e00c      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	e00a      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	e008      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6f6:	2308      	movs	r3, #8
 800a6f8:	e006      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6fa:	2306      	movs	r3, #6
 800a6fc:	e004      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a6fe:	2304      	movs	r3, #4
 800a700:	e002      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a702:	2302      	movs	r3, #2
 800a704:	e000      	b.n	800a708 <USART_SetConfig+0x9bc>
 800a706:	2301      	movs	r3, #1
 800a708:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a710:	005a      	lsls	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	441a      	add	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a724:	e003      	b.n	800a72e <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800a72c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b0f      	cmp	r3, #15
 800a732:	d916      	bls.n	800a762 <USART_SetConfig+0xa16>
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a73a:	d212      	bcs.n	800a762 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f023 030f 	bic.w	r3, r3, #15
 800a744:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	085b      	lsrs	r3, r3, #1
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	b29a      	uxth	r2, r3
 800a752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a754:	4313      	orrs	r3, r2
 800a756:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a75e:	60da      	str	r2, [r3, #12]
 800a760:	e002      	b.n	800a768 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800a780:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800a784:	4618      	mov	r0, r3
 800a786:	3738      	adds	r7, #56	; 0x38
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af02      	add	r7, sp, #8
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a79a:	f7f6 fe89 	bl	80014b0 <HAL_GetTick>
 800a79e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0308 	and.w	r3, r3, #8
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d10e      	bne.n	800a7cc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a7ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff fa8f 	bl	8009ce0 <USART_WaitOnFlagUntilTimeout>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e01e      	b.n	800a80a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d10e      	bne.n	800a7f8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a7da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fa79 	bl	8009ce0 <USART_WaitOnFlagUntilTimeout>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e008      	b.n	800a80a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_USARTEx_DisableFifoMode+0x16>
 800a824:	2302      	movs	r3, #2
 800a826:	e027      	b.n	800a878 <HAL_USARTEx_DisableFifoMode+0x66>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a856:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800a898:	2302      	movs	r3, #2
 800a89a:	e02d      	b.n	800a8f8 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0201 	bic.w	r2, r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f84f 	bl	800a97c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800a914:	2302      	movs	r3, #2
 800a916:	e02d      	b.n	800a974 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f811 	bl	800a97c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a998:	e02f      	b.n	800a9fa <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a99a:	2310      	movs	r3, #16
 800a99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a99e:	2310      	movs	r3, #16
 800a9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800a9a8:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800a9b8:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	7b3a      	ldrb	r2, [r7, #12]
 800a9c6:	4910      	ldr	r1, [pc, #64]	; (800aa08 <USARTEx_SetNbDataToProcess+0x8c>)
 800a9c8:	5c8a      	ldrb	r2, [r1, r2]
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800a9ce:	7b3a      	ldrb	r2, [r7, #12]
 800a9d0:	490e      	ldr	r1, [pc, #56]	; (800aa0c <USARTEx_SetNbDataToProcess+0x90>)
 800a9d2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	7b7a      	ldrb	r2, [r7, #13]
 800a9e2:	4909      	ldr	r1, [pc, #36]	; (800aa08 <USARTEx_SetNbDataToProcess+0x8c>)
 800a9e4:	5c8a      	ldrb	r2, [r1, r2]
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800a9ea:	7b7a      	ldrb	r2, [r7, #13]
 800a9ec:	4907      	ldr	r1, [pc, #28]	; (800aa0c <USARTEx_SetNbDataToProcess+0x90>)
 800a9ee:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800a9fa:	bf00      	nop
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	0801f958 	.word	0x0801f958
 800aa0c:	0801f960 	.word	0x0801f960

0800aa10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800aa16:	2100      	movs	r1, #0
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f00f ff91 	bl	801a940 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800aa1e:	4b23      	ldr	r3, [pc, #140]	; (800aaac <MX_LWIP_Init+0x9c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800aa24:	4b22      	ldr	r3, [pc, #136]	; (800aab0 <MX_LWIP_Init+0xa0>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800aa2a:	4b22      	ldr	r3, [pc, #136]	; (800aab4 <MX_LWIP_Init+0xa4>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800aa30:	4b21      	ldr	r3, [pc, #132]	; (800aab8 <MX_LWIP_Init+0xa8>)
 800aa32:	9302      	str	r3, [sp, #8]
 800aa34:	4b21      	ldr	r3, [pc, #132]	; (800aabc <MX_LWIP_Init+0xac>)
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <MX_LWIP_Init+0xa4>)
 800aa3e:	4a1c      	ldr	r2, [pc, #112]	; (800aab0 <MX_LWIP_Init+0xa0>)
 800aa40:	491a      	ldr	r1, [pc, #104]	; (800aaac <MX_LWIP_Init+0x9c>)
 800aa42:	481f      	ldr	r0, [pc, #124]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa44:	f009 fad2 	bl	8013fec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800aa48:	481d      	ldr	r0, [pc, #116]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa4a:	f009 fc89 	bl	8014360 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800aa4e:	4b1c      	ldr	r3, [pc, #112]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa54:	089b      	lsrs	r3, r3, #2
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800aa60:	4817      	ldr	r0, [pc, #92]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa62:	f009 fc8d 	bl	8014380 <netif_set_up>
 800aa66:	e002      	b.n	800aa6e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800aa68:	4815      	ldr	r0, [pc, #84]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa6a:	f009 fcf5 	bl	8014458 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800aa6e:	4915      	ldr	r1, [pc, #84]	; (800aac4 <MX_LWIP_Init+0xb4>)
 800aa70:	4813      	ldr	r0, [pc, #76]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa72:	f009 fd8b 	bl	801458c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800aa76:	2224      	movs	r2, #36	; 0x24
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4813      	ldr	r0, [pc, #76]	; (800aac8 <MX_LWIP_Init+0xb8>)
 800aa7c:	f010 ff69 	bl	801b952 <memset>
  attributes.name = "EthLink";
 800aa80:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <MX_LWIP_Init+0xb8>)
 800aa82:	4a12      	ldr	r2, [pc, #72]	; (800aacc <MX_LWIP_Init+0xbc>)
 800aa84:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800aa86:	4b10      	ldr	r3, [pc, #64]	; (800aac8 <MX_LWIP_Init+0xb8>)
 800aa88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa8c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <MX_LWIP_Init+0xb8>)
 800aa90:	2210      	movs	r2, #16
 800aa92:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800aa94:	4a0c      	ldr	r2, [pc, #48]	; (800aac8 <MX_LWIP_Init+0xb8>)
 800aa96:	490a      	ldr	r1, [pc, #40]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aa98:	480d      	ldr	r0, [pc, #52]	; (800aad0 <MX_LWIP_Init+0xc0>)
 800aa9a:	f000 fd6c 	bl	800b576 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800aa9e:	4808      	ldr	r0, [pc, #32]	; (800aac0 <MX_LWIP_Init+0xb0>)
 800aaa0:	f004 fe76 	bl	800f790 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aaa4:	bf00      	nop
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	24000304 	.word	0x24000304
 800aab0:	24000308 	.word	0x24000308
 800aab4:	2400030c 	.word	0x2400030c
 800aab8:	0801a87d 	.word	0x0801a87d
 800aabc:	0800af09 	.word	0x0800af09
 800aac0:	240002cc 	.word	0x240002cc
 800aac4:	0800aad5 	.word	0x0800aad5
 800aac8:	24000310 	.word	0x24000310
 800aacc:	0801c6d0 	.word	0x0801c6d0
 800aad0:	0800b1ed 	.word	0x0800b1ed

0800aad4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b0aa      	sub	sp, #168	; 0xa8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	2264      	movs	r2, #100	; 0x64
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f010 ff21 	bl	801b952 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ab10:	4b85      	ldr	r3, [pc, #532]	; (800ad28 <low_level_init+0x240>)
 800ab12:	4a86      	ldr	r2, [pc, #536]	; (800ad2c <low_level_init+0x244>)
 800ab14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ab16:	2300      	movs	r3, #0
 800ab18:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ab1e:	23e1      	movs	r3, #225	; 0xe1
 800ab20:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ab22:	2300      	movs	r3, #0
 800ab24:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ab26:	2300      	movs	r3, #0
 800ab28:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ab2e:	4a7e      	ldr	r2, [pc, #504]	; (800ad28 <low_level_init+0x240>)
 800ab30:	f107 0308 	add.w	r3, r7, #8
 800ab34:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ab36:	4b7c      	ldr	r3, [pc, #496]	; (800ad28 <low_level_init+0x240>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ab3c:	4b7a      	ldr	r3, [pc, #488]	; (800ad28 <low_level_init+0x240>)
 800ab3e:	4a7c      	ldr	r2, [pc, #496]	; (800ad30 <low_level_init+0x248>)
 800ab40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ab42:	4b79      	ldr	r3, [pc, #484]	; (800ad28 <low_level_init+0x240>)
 800ab44:	4a7b      	ldr	r2, [pc, #492]	; (800ad34 <low_level_init+0x24c>)
 800ab46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ab48:	4b77      	ldr	r3, [pc, #476]	; (800ad28 <low_level_init+0x240>)
 800ab4a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ab4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ab50:	4875      	ldr	r0, [pc, #468]	; (800ad28 <low_level_init+0x240>)
 800ab52:	f7f9 fd39 	bl	80045c8 <HAL_ETH_Init>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ab5c:	2238      	movs	r2, #56	; 0x38
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4875      	ldr	r0, [pc, #468]	; (800ad38 <low_level_init+0x250>)
 800ab62:	f010 fef6 	bl	801b952 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ab66:	4b74      	ldr	r3, [pc, #464]	; (800ad38 <low_level_init+0x250>)
 800ab68:	2221      	movs	r2, #33	; 0x21
 800ab6a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ab6c:	4b72      	ldr	r3, [pc, #456]	; (800ad38 <low_level_init+0x250>)
 800ab6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ab72:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ab74:	4b70      	ldr	r3, [pc, #448]	; (800ad38 <low_level_init+0x250>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ab7a:	4870      	ldr	r0, [pc, #448]	; (800ad3c <low_level_init+0x254>)
 800ab7c:	f009 f8f0 	bl	8013d60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2206      	movs	r2, #6
 800ab84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ab88:	4b67      	ldr	r3, [pc, #412]	; (800ad28 <low_level_init+0x240>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ab94:	4b64      	ldr	r3, [pc, #400]	; (800ad28 <low_level_init+0x240>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	785a      	ldrb	r2, [r3, #1]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aba0:	4b61      	ldr	r3, [pc, #388]	; (800ad28 <low_level_init+0x240>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	789a      	ldrb	r2, [r3, #2]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800abac:	4b5e      	ldr	r3, [pc, #376]	; (800ad28 <low_level_init+0x240>)
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	78da      	ldrb	r2, [r3, #3]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800abb8:	4b5b      	ldr	r3, [pc, #364]	; (800ad28 <low_level_init+0x240>)
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	791a      	ldrb	r2, [r3, #4]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800abc4:	4b58      	ldr	r3, [pc, #352]	; (800ad28 <low_level_init+0x240>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	795a      	ldrb	r2, [r3, #5]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800abd6:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abde:	f043 030a 	orr.w	r3, r3, #10
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800abea:	2200      	movs	r2, #0
 800abec:	2101      	movs	r1, #1
 800abee:	2001      	movs	r0, #1
 800abf0:	f000 fe7c 	bl	800b8ec <osSemaphoreNew>
 800abf4:	4603      	mov	r3, r0
 800abf6:	4a52      	ldr	r2, [pc, #328]	; (800ad40 <low_level_init+0x258>)
 800abf8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800abfa:	2200      	movs	r2, #0
 800abfc:	2101      	movs	r1, #1
 800abfe:	2001      	movs	r0, #1
 800ac00:	f000 fe74 	bl	800b8ec <osSemaphoreNew>
 800ac04:	4603      	mov	r3, r0
 800ac06:	4a4f      	ldr	r2, [pc, #316]	; (800ad44 <low_level_init+0x25c>)
 800ac08:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800ac0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ac0e:	2224      	movs	r2, #36	; 0x24
 800ac10:	2100      	movs	r1, #0
 800ac12:	4618      	mov	r0, r3
 800ac14:	f010 fe9d 	bl	801b952 <memset>
  attributes.name = "EthIf";
 800ac18:	4b4b      	ldr	r3, [pc, #300]	; (800ad48 <low_level_init+0x260>)
 800ac1a:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ac1c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800ac20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800ac24:	2330      	movs	r3, #48	; 0x30
 800ac26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800ac2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	4846      	ldr	r0, [pc, #280]	; (800ad4c <low_level_init+0x264>)
 800ac34:	f000 fc9f 	bl	800b576 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ac38:	4945      	ldr	r1, [pc, #276]	; (800ad50 <low_level_init+0x268>)
 800ac3a:	4846      	ldr	r0, [pc, #280]	; (800ad54 <low_level_init+0x26c>)
 800ac3c:	f7f6 fa51 	bl	80010e2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ac40:	4844      	ldr	r0, [pc, #272]	; (800ad54 <low_level_init+0x26c>)
 800ac42:	f7f6 fa80 	bl	8001146 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ac46:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d165      	bne.n	800ad1a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ac4e:	4841      	ldr	r0, [pc, #260]	; (800ad54 <low_level_init+0x26c>)
 800ac50:	f7f6 fb21 	bl	8001296 <LAN8742_GetLinkState>
 800ac54:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800ac58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	dc06      	bgt.n	800ac6e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f009 fc63 	bl	801452c <netif_set_link_down>
      netif_set_down(netif);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f009 fbf6 	bl	8014458 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ac6c:	e057      	b.n	800ad1e <low_level_init+0x236>
      switch (PHYLinkState)
 800ac6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac72:	3b02      	subs	r3, #2
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d82b      	bhi.n	800acd0 <low_level_init+0x1e8>
 800ac78:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <low_level_init+0x198>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800ac91 	.word	0x0800ac91
 800ac84:	0800aca3 	.word	0x0800aca3
 800ac88:	0800acb3 	.word	0x0800acb3
 800ac8c:	0800acc3 	.word	0x0800acc3
        duplex = ETH_FULLDUPLEX_MODE;
 800ac90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800ac98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800aca0:	e01f      	b.n	800ace2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800aca8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800acb0:	e017      	b.n	800ace2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800acb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800acba:	2300      	movs	r3, #0
 800acbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800acc0:	e00f      	b.n	800ace2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800acc8:	2300      	movs	r3, #0
 800acca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800acce:	e008      	b.n	800ace2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800acd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800acd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800ace0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ace2:	f107 0310 	add.w	r3, r7, #16
 800ace6:	4619      	mov	r1, r3
 800ace8:	480f      	ldr	r0, [pc, #60]	; (800ad28 <low_level_init+0x240>)
 800acea:	f7fa f8d9 	bl	8004ea0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800acee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acf2:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800acf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800acfa:	f107 0310 	add.w	r3, r7, #16
 800acfe:	4619      	mov	r1, r3
 800ad00:	4809      	ldr	r0, [pc, #36]	; (800ad28 <low_level_init+0x240>)
 800ad02:	f7fa faa1 	bl	8005248 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800ad06:	4808      	ldr	r0, [pc, #32]	; (800ad28 <low_level_init+0x240>)
 800ad08:	f7f9 fd44 	bl	8004794 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f009 fb37 	bl	8014380 <netif_set_up>
    netif_set_link_up(netif);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f009 fbd2 	bl	80144bc <netif_set_link_up>
}
 800ad18:	e001      	b.n	800ad1e <low_level_init+0x236>
    Error_Handler();
 800ad1a:	f7f5 fefd 	bl	8000b18 <Error_Handler>
}
 800ad1e:	bf00      	nop
 800ad20:	37a8      	adds	r7, #168	; 0xa8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	24004cc8 	.word	0x24004cc8
 800ad2c:	40028000 	.word	0x40028000
 800ad30:	240000f4 	.word	0x240000f4
 800ad34:	24000094 	.word	0x24000094
 800ad38:	24004d78 	.word	0x24004d78
 800ad3c:	0801f968 	.word	0x0801f968
 800ad40:	24004cc0 	.word	0x24004cc0
 800ad44:	24004cc4 	.word	0x24004cc4
 800ad48:	0801c6d8 	.word	0x0801c6d8
 800ad4c:	0800aeb5 	.word	0x0800aeb5
 800ad50:	24000010 	.word	0x24000010
 800ad54:	24004db0 	.word	0x24004db0

0800ad58 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b092      	sub	sp, #72	; 0x48
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	2230      	movs	r2, #48	; 0x30
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f010 fdea 	bl	801b952 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	2230      	movs	r2, #48	; 0x30
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f010 fde3 	bl	801b952 <memset>

  for(q = p; q != NULL; q = q->next)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad90:	e045      	b.n	800ae1e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ad92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d902      	bls.n	800ad9e <low_level_output+0x46>
      return ERR_IF;
 800ad98:	f06f 030b 	mvn.w	r3, #11
 800ad9c:	e065      	b.n	800ae6a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800ad9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada0:	6859      	ldr	r1, [r3, #4]
 800ada2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada4:	4613      	mov	r3, r2
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	3348      	adds	r3, #72	; 0x48
 800adae:	443b      	add	r3, r7
 800adb0:	3b3c      	subs	r3, #60	; 0x3c
 800adb2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800adb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb6:	895b      	ldrh	r3, [r3, #10]
 800adb8:	4619      	mov	r1, r3
 800adba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adbc:	4613      	mov	r3, r2
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	3348      	adds	r3, #72	; 0x48
 800adc6:	443b      	add	r3, r7
 800adc8:	3b38      	subs	r3, #56	; 0x38
 800adca:	6019      	str	r1, [r3, #0]

    if(i>0)
 800adcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adce:	2b00      	cmp	r3, #0
 800add0:	d011      	beq.n	800adf6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800add2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	f107 000c 	add.w	r0, r7, #12
 800adda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800addc:	460b      	mov	r3, r1
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	440b      	add	r3, r1
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	18c1      	adds	r1, r0, r3
 800ade6:	4613      	mov	r3, r2
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	3348      	adds	r3, #72	; 0x48
 800adf0:	443b      	add	r3, r7
 800adf2:	3b34      	subs	r3, #52	; 0x34
 800adf4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800adf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800adfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae00:	4613      	mov	r3, r2
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	3348      	adds	r3, #72	; 0x48
 800ae0a:	443b      	add	r3, r7
 800ae0c:	3b34      	subs	r3, #52	; 0x34
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ae12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae14:	3301      	adds	r3, #1
 800ae16:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1b6      	bne.n	800ad92 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	891b      	ldrh	r3, [r3, #8]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <low_level_output+0x11c>)
 800ae2c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ae2e:	4a11      	ldr	r2, [pc, #68]	; (800ae74 <low_level_output+0x11c>)
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ae36:	4a0f      	ldr	r2, [pc, #60]	; (800ae74 <low_level_output+0x11c>)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800ae3c:	6838      	ldr	r0, [r7, #0]
 800ae3e:	f009 fff9 	bl	8014e34 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800ae42:	490c      	ldr	r1, [pc, #48]	; (800ae74 <low_level_output+0x11c>)
 800ae44:	480c      	ldr	r0, [pc, #48]	; (800ae78 <low_level_output+0x120>)
 800ae46:	f7f9 fda9 	bl	800499c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800ae4a:	bf00      	nop
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <low_level_output+0x124>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f04f 31ff 	mov.w	r1, #4294967295
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fdd3 	bl	800ba00 <osSemaphoreAcquire>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1f5      	bne.n	800ae4c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800ae60:	4805      	ldr	r0, [pc, #20]	; (800ae78 <low_level_output+0x120>)
 800ae62:	f7f9 ff1a 	bl	8004c9a <HAL_ETH_ReleaseTxPacket>

  return errval;
 800ae66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3748      	adds	r7, #72	; 0x48
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	24004d78 	.word	0x24004d78
 800ae78:	24004cc8 	.word	0x24004cc8
 800ae7c:	24004cc4 	.word	0x24004cc4

0800ae80 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ae8c:	4b07      	ldr	r3, [pc, #28]	; (800aeac <low_level_input+0x2c>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ae94:	f107 030c 	add.w	r3, r7, #12
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4805      	ldr	r0, [pc, #20]	; (800aeb0 <low_level_input+0x30>)
 800ae9c:	f7f9 fdcf 	bl	8004a3e <HAL_ETH_ReadData>
  }

  return p;
 800aea0:	68fb      	ldr	r3, [r7, #12]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	24004cbc 	.word	0x24004cbc
 800aeb0:	24004cc8 	.word	0x24004cc8

0800aeb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aec4:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <ethernetif_input+0x50>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f04f 31ff 	mov.w	r1, #4294967295
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fd97 	bl	800ba00 <osSemaphoreAcquire>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1f5      	bne.n	800aec4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800aed8:	68b8      	ldr	r0, [r7, #8]
 800aeda:	f7ff ffd1 	bl	800ae80 <low_level_input>
 800aede:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	4798      	blx	r3
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f009 fef6 	bl	8014ce8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1ea      	bne.n	800aed8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800af02:	e7df      	b.n	800aec4 <ethernetif_input+0x10>
 800af04:	24004cc0 	.word	0x24004cc0

0800af08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d106      	bne.n	800af24 <ethernetif_init+0x1c>
 800af16:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <ethernetif_init+0x48>)
 800af18:	f240 12f5 	movw	r2, #501	; 0x1f5
 800af1c:	490d      	ldr	r1, [pc, #52]	; (800af54 <ethernetif_init+0x4c>)
 800af1e:	480e      	ldr	r0, [pc, #56]	; (800af58 <ethernetif_init+0x50>)
 800af20:	f010 fcb2 	bl	801b888 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2273      	movs	r2, #115	; 0x73
 800af28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2274      	movs	r2, #116	; 0x74
 800af30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a09      	ldr	r2, [pc, #36]	; (800af5c <ethernetif_init+0x54>)
 800af38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a08      	ldr	r2, [pc, #32]	; (800af60 <ethernetif_init+0x58>)
 800af3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fdd1 	bl	800aae8 <low_level_init>

  return ERR_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	0801c6e0 	.word	0x0801c6e0
 800af54:	0801c6fc 	.word	0x0801c6fc
 800af58:	0801c70c 	.word	0x0801c70c
 800af5c:	0801165d 	.word	0x0801165d
 800af60:	0800ad59 	.word	0x0800ad59

0800af64 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	4809      	ldr	r0, [pc, #36]	; (800af98 <pbuf_free_custom+0x34>)
 800af74:	f008 ffe4 	bl	8013f40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800af78:	4b08      	ldr	r3, [pc, #32]	; (800af9c <pbuf_free_custom+0x38>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d107      	bne.n	800af90 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800af80:	4b06      	ldr	r3, [pc, #24]	; (800af9c <pbuf_free_custom+0x38>)
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800af86:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <pbuf_free_custom+0x3c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fd8a 	bl	800baa4 <osSemaphoreRelease>
  }
}
 800af90:	bf00      	nop
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	0801f968 	.word	0x0801f968
 800af9c:	24004cbc 	.word	0x24004cbc
 800afa0:	24004cc0 	.word	0x24004cc0

0800afa4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800afa8:	f7f6 fa82 	bl	80014b0 <HAL_GetTick>
 800afac:	4603      	mov	r3, r0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	; 0x38
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	605a      	str	r2, [r3, #4]
 800afc6:	609a      	str	r2, [r3, #8]
 800afc8:	60da      	str	r2, [r3, #12]
 800afca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a59      	ldr	r2, [pc, #356]	; (800b138 <HAL_ETH_MspInit+0x184>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	f040 80ab 	bne.w	800b12e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800afd8:	4b58      	ldr	r3, [pc, #352]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800afda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800afde:	4a57      	ldr	r2, [pc, #348]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800afe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afe4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800afe8:	4b54      	ldr	r3, [pc, #336]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800afea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800afee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800aff6:	4b51      	ldr	r3, [pc, #324]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800aff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800affc:	4a4f      	ldr	r2, [pc, #316]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800affe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b002:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b006:	4b4d      	ldr	r3, [pc, #308]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b014:	4b49      	ldr	r3, [pc, #292]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b016:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b01a:	4a48      	ldr	r2, [pc, #288]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b01c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b020:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b024:	4b45      	ldr	r3, [pc, #276]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b02e:	61bb      	str	r3, [r7, #24]
 800b030:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b032:	4b42      	ldr	r3, [pc, #264]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b038:	4a40      	ldr	r2, [pc, #256]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b03a:	f043 0304 	orr.w	r3, r3, #4
 800b03e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b042:	4b3e      	ldr	r3, [pc, #248]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b050:	4b3a      	ldr	r3, [pc, #232]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b056:	4a39      	ldr	r2, [pc, #228]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b060:	4b36      	ldr	r3, [pc, #216]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b06e:	4b33      	ldr	r3, [pc, #204]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b074:	4a31      	ldr	r2, [pc, #196]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b076:	f043 0302 	orr.w	r3, r3, #2
 800b07a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b07e:	4b2f      	ldr	r3, [pc, #188]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b08c:	4b2b      	ldr	r3, [pc, #172]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b08e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b092:	4a2a      	ldr	r2, [pc, #168]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b09c:	4b27      	ldr	r3, [pc, #156]	; (800b13c <HAL_ETH_MspInit+0x188>)
 800b09e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b0aa:	2332      	movs	r3, #50	; 0x32
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b0ba:	230b      	movs	r3, #11
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	481e      	ldr	r0, [pc, #120]	; (800b140 <HAL_ETH_MspInit+0x18c>)
 800b0c6:	f7fa fea5 	bl	8005e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b0ca:	2386      	movs	r3, #134	; 0x86
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b0da:	230b      	movs	r3, #11
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4817      	ldr	r0, [pc, #92]	; (800b144 <HAL_ETH_MspInit+0x190>)
 800b0e6:	f7fa fe95 	bl	8005e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b0ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b0fc:	230b      	movs	r3, #11
 800b0fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b104:	4619      	mov	r1, r3
 800b106:	4810      	ldr	r0, [pc, #64]	; (800b148 <HAL_ETH_MspInit+0x194>)
 800b108:	f7fa fe84 	bl	8005e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b10c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b112:	2302      	movs	r3, #2
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b116:	2300      	movs	r3, #0
 800b118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b11a:	2300      	movs	r3, #0
 800b11c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b11e:	230b      	movs	r3, #11
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b126:	4619      	mov	r1, r3
 800b128:	4808      	ldr	r0, [pc, #32]	; (800b14c <HAL_ETH_MspInit+0x198>)
 800b12a:	f7fa fe73 	bl	8005e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b12e:	bf00      	nop
 800b130:	3738      	adds	r7, #56	; 0x38
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	40028000 	.word	0x40028000
 800b13c:	58024400 	.word	0x58024400
 800b140:	58020800 	.word	0x58020800
 800b144:	58020000 	.word	0x58020000
 800b148:	58020400 	.word	0x58020400
 800b14c:	58021800 	.word	0x58021800

0800b150 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b154:	4802      	ldr	r0, [pc, #8]	; (800b160 <ETH_PHY_IO_Init+0x10>)
 800b156:	f7fa f891 	bl	800527c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	24004cc8 	.word	0x24004cc8

0800b164 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
  return 0;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	4807      	ldr	r0, [pc, #28]	; (800b1a4 <ETH_PHY_IO_ReadReg+0x30>)
 800b188:	f7f9 fde2 	bl	8004d50 <HAL_ETH_ReadPHYRegister>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b192:	f04f 33ff 	mov.w	r3, #4294967295
 800b196:	e000      	b.n	800b19a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	24004cc8 	.word	0x24004cc8

0800b1a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	68f9      	ldr	r1, [r7, #12]
 800b1ba:	4807      	ldr	r0, [pc, #28]	; (800b1d8 <ETH_PHY_IO_WriteReg+0x30>)
 800b1bc:	f7f9 fe1c 	bl	8004df8 <HAL_ETH_WritePHYRegister>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ca:	e000      	b.n	800b1ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	24004cc8 	.word	0x24004cc8

0800b1dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b1e0:	f7f6 f966 	bl	80014b0 <HAL_GetTick>
 800b1e4:	4603      	mov	r3, r0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b0a0      	sub	sp, #128	; 0x80
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b1f4:	f107 0308 	add.w	r3, r7, #8
 800b1f8:	2264      	movs	r2, #100	; 0x64
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f010 fba8 	bl	801b952 <memset>
  int32_t PHYLinkState = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b20a:	2300      	movs	r3, #0
 800b20c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b20e:	2300      	movs	r3, #0
 800b210:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b216:	483a      	ldr	r0, [pc, #232]	; (800b300 <ethernet_link_thread+0x114>)
 800b218:	f7f6 f83d 	bl	8001296 <LAN8742_GetLinkState>
 800b21c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b220:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b224:	089b      	lsrs	r3, r3, #2
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00c      	beq.n	800b24a <ethernet_link_thread+0x5e>
 800b230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b232:	2b01      	cmp	r3, #1
 800b234:	dc09      	bgt.n	800b24a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b236:	4833      	ldr	r0, [pc, #204]	; (800b304 <ethernet_link_thread+0x118>)
 800b238:	f7f9 fb38 	bl	80048ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b23c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b23e:	f009 f90b 	bl	8014458 <netif_set_down>
    netif_set_link_down(netif);
 800b242:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b244:	f009 f972 	bl	801452c <netif_set_link_down>
 800b248:	e055      	b.n	800b2f6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b24c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d14e      	bne.n	800b2f6 <ethernet_link_thread+0x10a>
 800b258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	dd4b      	ble.n	800b2f6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b260:	3b02      	subs	r3, #2
 800b262:	2b03      	cmp	r3, #3
 800b264:	d82a      	bhi.n	800b2bc <ethernet_link_thread+0xd0>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <ethernet_link_thread+0x80>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b28f 	.word	0x0800b28f
 800b274:	0800b29f 	.word	0x0800b29f
 800b278:	0800b2af 	.word	0x0800b2af
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b27c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b280:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b286:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b288:	2301      	movs	r3, #1
 800b28a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b28c:	e017      	b.n	800b2be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b28e:	2300      	movs	r3, #0
 800b290:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b296:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b298:	2301      	movs	r3, #1
 800b29a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b29c:	e00f      	b.n	800b2be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b29e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b2ac:	e007      	b.n	800b2be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b2ba:	e000      	b.n	800b2be <ethernet_link_thread+0xd2>
    default:
      break;
 800b2bc:	bf00      	nop
    }

    if(linkchanged)
 800b2be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d018      	beq.n	800b2f6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b2c4:	f107 0308 	add.w	r3, r7, #8
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	480e      	ldr	r0, [pc, #56]	; (800b304 <ethernet_link_thread+0x118>)
 800b2cc:	f7f9 fde8 	bl	8004ea0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b2d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2d2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2d6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4809      	ldr	r0, [pc, #36]	; (800b304 <ethernet_link_thread+0x118>)
 800b2e0:	f7f9 ffb2 	bl	8005248 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800b2e4:	4807      	ldr	r0, [pc, #28]	; (800b304 <ethernet_link_thread+0x118>)
 800b2e6:	f7f9 fa55 	bl	8004794 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b2ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2ec:	f009 f848 	bl	8014380 <netif_set_up>
      netif_set_link_up(netif);
 800b2f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2f2:	f009 f8e3 	bl	80144bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b2f6:	2064      	movs	r0, #100	; 0x64
 800b2f8:	f000 f9cf 	bl	800b69a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b2fc:	e78b      	b.n	800b216 <ethernet_link_thread+0x2a>
 800b2fe:	bf00      	nop
 800b300:	24004db0 	.word	0x24004db0
 800b304:	24004cc8 	.word	0x24004cc8

0800b308 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b310:	4812      	ldr	r0, [pc, #72]	; (800b35c <HAL_ETH_RxAllocateCallback+0x54>)
 800b312:	f008 fda1 	bl	8013e58 <memp_malloc_pool>
 800b316:	60f8      	str	r0, [r7, #12]
  if (p)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d014      	beq.n	800b348 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f103 0220 	add.w	r2, r3, #32
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4a0d      	ldr	r2, [pc, #52]	; (800b360 <HAL_ETH_RxAllocateCallback+0x58>)
 800b32c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b336:	9201      	str	r2, [sp, #4]
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2241      	movs	r2, #65	; 0x41
 800b33e:	2100      	movs	r1, #0
 800b340:	2000      	movs	r0, #0
 800b342:	f009 fb17 	bl	8014974 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b346:	e005      	b.n	800b354 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]
}
 800b354:	bf00      	nop
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	0801f968 	.word	0x0801f968
 800b360:	0800af65 	.word	0x0800af65
 800b364:	24004cbc 	.word	0x24004cbc

0800b368 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b368:	b480      	push	{r7}
 800b36a:	b08d      	sub	sp, #52	; 0x34
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
 800b374:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3b20      	subs	r3, #32
 800b386:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	2200      	movs	r2, #0
 800b392:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	887a      	ldrh	r2, [r7, #2]
 800b398:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d103      	bne.n	800b3aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e003      	b.n	800b3b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3be:	e009      	b.n	800b3d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	891a      	ldrh	r2, [r3, #8]
 800b3c4:	887b      	ldrh	r3, [r7, #2]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f2      	bne.n	800b3c0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b3da:	887b      	ldrh	r3, [r7, #2]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	623a      	str	r2, [r7, #32]
 800b3e0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dd1d      	ble.n	800b424 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	f003 021f 	and.w	r2, r3, #31
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b3f8:	f3bf 8f4f 	dsb	sy
}
 800b3fc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b3fe:	4a0d      	ldr	r2, [pc, #52]	; (800b434 <HAL_ETH_RxLinkCallback+0xcc>)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3320      	adds	r3, #32
 800b40a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	3b20      	subs	r3, #32
 800b410:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	dcf2      	bgt.n	800b3fe <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800b418:	f3bf 8f4f 	dsb	sy
}
 800b41c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b41e:	f3bf 8f6f 	isb	sy
}
 800b422:	bf00      	nop
}
 800b424:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b426:	bf00      	nop
 800b428:	3734      	adds	r7, #52	; 0x34
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	e000ed00 	.word	0xe000ed00

0800b438 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f009 fc51 	bl	8014ce8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <__NVIC_SetPriority>:
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b45c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	db0a      	blt.n	800b47a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	b2da      	uxtb	r2, r3
 800b468:	490c      	ldr	r1, [pc, #48]	; (800b49c <__NVIC_SetPriority+0x4c>)
 800b46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b46e:	0112      	lsls	r2, r2, #4
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	440b      	add	r3, r1
 800b474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b478:	e00a      	b.n	800b490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	4908      	ldr	r1, [pc, #32]	; (800b4a0 <__NVIC_SetPriority+0x50>)
 800b480:	88fb      	ldrh	r3, [r7, #6]
 800b482:	f003 030f 	and.w	r3, r3, #15
 800b486:	3b04      	subs	r3, #4
 800b488:	0112      	lsls	r2, r2, #4
 800b48a:	b2d2      	uxtb	r2, r2
 800b48c:	440b      	add	r3, r1
 800b48e:	761a      	strb	r2, [r3, #24]
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	e000e100 	.word	0xe000e100
 800b4a0:	e000ed00 	.word	0xe000ed00

0800b4a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f06f 0004 	mvn.w	r0, #4
 800b4ae:	f7ff ffcf 	bl	800b450 <__NVIC_SetPriority>
#endif
}
 800b4b2:	bf00      	nop
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4be:	f3ef 8305 	mrs	r3, IPSR
 800b4c2:	603b      	str	r3, [r7, #0]
  return(result);
 800b4c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4ca:	f06f 0305 	mvn.w	r3, #5
 800b4ce:	607b      	str	r3, [r7, #4]
 800b4d0:	e00c      	b.n	800b4ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <osKernelInitialize+0x44>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4da:	4b08      	ldr	r3, [pc, #32]	; (800b4fc <osKernelInitialize+0x44>)
 800b4dc:	2201      	movs	r2, #1
 800b4de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	607b      	str	r3, [r7, #4]
 800b4e4:	e002      	b.n	800b4ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4ec:	687b      	ldr	r3, [r7, #4]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	24004dd0 	.word	0x24004dd0

0800b500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b506:	f3ef 8305 	mrs	r3, IPSR
 800b50a:	603b      	str	r3, [r7, #0]
  return(result);
 800b50c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b512:	f06f 0305 	mvn.w	r3, #5
 800b516:	607b      	str	r3, [r7, #4]
 800b518:	e010      	b.n	800b53c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <osKernelStart+0x48>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d109      	bne.n	800b536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b522:	f7ff ffbf 	bl	800b4a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b526:	4b08      	ldr	r3, [pc, #32]	; (800b548 <osKernelStart+0x48>)
 800b528:	2202      	movs	r2, #2
 800b52a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b52c:	f002 fbee 	bl	800dd0c <vTaskStartScheduler>
      stat = osOK;
 800b530:	2300      	movs	r3, #0
 800b532:	607b      	str	r3, [r7, #4]
 800b534:	e002      	b.n	800b53c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b536:	f04f 33ff 	mov.w	r3, #4294967295
 800b53a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b53c:	687b      	ldr	r3, [r7, #4]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	24004dd0 	.word	0x24004dd0

0800b54c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b552:	f3ef 8305 	mrs	r3, IPSR
 800b556:	603b      	str	r3, [r7, #0]
  return(result);
 800b558:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b55e:	f002 fcf7 	bl	800df50 <xTaskGetTickCountFromISR>
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	e002      	b.n	800b56c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b566:	f002 fce3 	bl	800df30 <xTaskGetTickCount>
 800b56a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b56c:	687b      	ldr	r3, [r7, #4]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b576:	b580      	push	{r7, lr}
 800b578:	b08e      	sub	sp, #56	; 0x38
 800b57a:	af04      	add	r7, sp, #16
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b586:	f3ef 8305 	mrs	r3, IPSR
 800b58a:	617b      	str	r3, [r7, #20]
  return(result);
 800b58c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d17e      	bne.n	800b690 <osThreadNew+0x11a>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d07b      	beq.n	800b690 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b598:	2380      	movs	r3, #128	; 0x80
 800b59a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b59c:	2318      	movs	r3, #24
 800b59e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d045      	beq.n	800b63c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <osThreadNew+0x48>
        name = attr->name;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <osThreadNew+0x6e>
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	2b38      	cmp	r3, #56	; 0x38
 800b5d6:	d805      	bhi.n	800b5e4 <osThreadNew+0x6e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <osThreadNew+0x72>
        return (NULL);
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e054      	b.n	800b692 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d003      	beq.n	800b5f8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	089b      	lsrs	r3, r3, #2
 800b5f6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00e      	beq.n	800b61e <osThreadNew+0xa8>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b5b      	cmp	r3, #91	; 0x5b
 800b606:	d90a      	bls.n	800b61e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <osThreadNew+0xa8>
        mem = 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	e010      	b.n	800b640 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <osThreadNew+0xca>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <osThreadNew+0xca>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d104      	bne.n	800b640 <osThreadNew+0xca>
          mem = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	61bb      	str	r3, [r7, #24]
 800b63a:	e001      	b.n	800b640 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d110      	bne.n	800b668 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b64e:	9202      	str	r2, [sp, #8]
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	6a3a      	ldr	r2, [r7, #32]
 800b65a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f002 f97f 	bl	800d960 <xTaskCreateStatic>
 800b662:	4603      	mov	r3, r0
 800b664:	613b      	str	r3, [r7, #16]
 800b666:	e013      	b.n	800b690 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d110      	bne.n	800b690 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	b29a      	uxth	r2, r3
 800b672:	f107 0310 	add.w	r3, r7, #16
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f002 f9ca 	bl	800da1a <xTaskCreate>
 800b686:	4603      	mov	r3, r0
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d001      	beq.n	800b690 <osThreadNew+0x11a>
            hTask = NULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b690:	693b      	ldr	r3, [r7, #16]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3728      	adds	r7, #40	; 0x28
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a2:	f3ef 8305 	mrs	r3, IPSR
 800b6a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <osDelay+0x1c>
    stat = osErrorISR;
 800b6ae:	f06f 0305 	mvn.w	r3, #5
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e007      	b.n	800b6c6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f002 faef 	bl	800dca4 <vTaskDelay>
    }
  }

  return (stat);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6dc:	f3ef 8305 	mrs	r3, IPSR
 800b6e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6e2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d174      	bne.n	800b7d2 <osMutexNew+0x102>
    if (attr != NULL) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	61bb      	str	r3, [r7, #24]
 800b6f4:	e001      	b.n	800b6fa <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	f003 0301 	and.w	r3, r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <osMutexNew+0x3a>
      rmtx = 1U;
 800b704:	2301      	movs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e001      	b.n	800b70e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d15c      	bne.n	800b7d2 <osMutexNew+0x102>
      mem = -1;
 800b718:	f04f 33ff 	mov.w	r3, #4294967295
 800b71c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d015      	beq.n	800b750 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d006      	beq.n	800b73a <osMutexNew+0x6a>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2b4f      	cmp	r3, #79	; 0x4f
 800b732:	d902      	bls.n	800b73a <osMutexNew+0x6a>
          mem = 1;
 800b734:	2301      	movs	r3, #1
 800b736:	613b      	str	r3, [r7, #16]
 800b738:	e00c      	b.n	800b754 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d108      	bne.n	800b754 <osMutexNew+0x84>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d104      	bne.n	800b754 <osMutexNew+0x84>
            mem = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	613b      	str	r3, [r7, #16]
 800b74e:	e001      	b.n	800b754 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d112      	bne.n	800b780 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	4619      	mov	r1, r3
 800b766:	2004      	movs	r0, #4
 800b768:	f001 f9a5 	bl	800cab6 <xQueueCreateMutexStatic>
 800b76c:	61f8      	str	r0, [r7, #28]
 800b76e:	e016      	b.n	800b79e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	4619      	mov	r1, r3
 800b776:	2001      	movs	r0, #1
 800b778:	f001 f99d 	bl	800cab6 <xQueueCreateMutexStatic>
 800b77c:	61f8      	str	r0, [r7, #28]
 800b77e:	e00e      	b.n	800b79e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d004      	beq.n	800b796 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b78c:	2004      	movs	r0, #4
 800b78e:	f001 f97a 	bl	800ca86 <xQueueCreateMutex>
 800b792:	61f8      	str	r0, [r7, #28]
 800b794:	e003      	b.n	800b79e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b796:	2001      	movs	r0, #1
 800b798:	f001 f975 	bl	800ca86 <xQueueCreateMutex>
 800b79c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00c      	beq.n	800b7be <osMutexNew+0xee>
        if (attr != NULL) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <osMutexNew+0xe2>
          name = attr->name;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	e001      	b.n	800b7b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b7b6:	68f9      	ldr	r1, [r7, #12]
 800b7b8:	69f8      	ldr	r0, [r7, #28]
 800b7ba:	f002 f849 	bl	800d850 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <osMutexNew+0x102>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	f043 0301 	orr.w	r3, r3, #1
 800b7d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f023 0301 	bic.w	r3, r3, #1
 800b7ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7fa:	f3ef 8305 	mrs	r3, IPSR
 800b7fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800b800:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b806:	f06f 0305 	mvn.w	r3, #5
 800b80a:	617b      	str	r3, [r7, #20]
 800b80c:	e02c      	b.n	800b868 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d103      	bne.n	800b81c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b814:	f06f 0303 	mvn.w	r3, #3
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e025      	b.n	800b868 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f001 f995 	bl	800cb54 <xQueueTakeMutexRecursive>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d01b      	beq.n	800b868 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b836:	f06f 0301 	mvn.w	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e014      	b.n	800b868 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b83e:	f06f 0302 	mvn.w	r3, #2
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	e010      	b.n	800b868 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6938      	ldr	r0, [r7, #16]
 800b84a:	f001 fd29 	bl	800d2a0 <xQueueSemaphoreTake>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b01      	cmp	r3, #1
 800b852:	d009      	beq.n	800b868 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b85a:	f06f 0301 	mvn.w	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e002      	b.n	800b868 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b862:	f06f 0302 	mvn.w	r3, #2
 800b866:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b868:	697b      	ldr	r3, [r7, #20]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b872:	b580      	push	{r7, lr}
 800b874:	b086      	sub	sp, #24
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f023 0301 	bic.w	r3, r3, #1
 800b880:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b88e:	f3ef 8305 	mrs	r3, IPSR
 800b892:	60bb      	str	r3, [r7, #8]
  return(result);
 800b894:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b896:	2b00      	cmp	r3, #0
 800b898:	d003      	beq.n	800b8a2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b89a:	f06f 0305 	mvn.w	r3, #5
 800b89e:	617b      	str	r3, [r7, #20]
 800b8a0:	e01f      	b.n	800b8e2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b8a8:	f06f 0303 	mvn.w	r3, #3
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e018      	b.n	800b8e2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d009      	beq.n	800b8ca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f001 f918 	bl	800caec <xQueueGiveMutexRecursive>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d00f      	beq.n	800b8e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b8c2:	f06f 0302 	mvn.w	r3, #2
 800b8c6:	617b      	str	r3, [r7, #20]
 800b8c8:	e00b      	b.n	800b8e2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	6938      	ldr	r0, [r7, #16]
 800b8d2:	f001 f9df 	bl	800cc94 <xQueueGenericSend>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b8dc:	f06f 0302 	mvn.w	r3, #2
 800b8e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b8e2:	697b      	ldr	r3, [r7, #20]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8fc:	f3ef 8305 	mrs	r3, IPSR
 800b900:	613b      	str	r3, [r7, #16]
  return(result);
 800b902:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b904:	2b00      	cmp	r3, #0
 800b906:	d175      	bne.n	800b9f4 <osSemaphoreNew+0x108>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d072      	beq.n	800b9f4 <osSemaphoreNew+0x108>
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d86e      	bhi.n	800b9f4 <osSemaphoreNew+0x108>
    mem = -1;
 800b916:	f04f 33ff 	mov.w	r3, #4294967295
 800b91a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d015      	beq.n	800b94e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d006      	beq.n	800b938 <osSemaphoreNew+0x4c>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	2b4f      	cmp	r3, #79	; 0x4f
 800b930:	d902      	bls.n	800b938 <osSemaphoreNew+0x4c>
        mem = 1;
 800b932:	2301      	movs	r3, #1
 800b934:	61bb      	str	r3, [r7, #24]
 800b936:	e00c      	b.n	800b952 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d108      	bne.n	800b952 <osSemaphoreNew+0x66>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d104      	bne.n	800b952 <osSemaphoreNew+0x66>
          mem = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	61bb      	str	r3, [r7, #24]
 800b94c:	e001      	b.n	800b952 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b958:	d04c      	beq.n	800b9f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d128      	bne.n	800b9b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d10a      	bne.n	800b97c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	2203      	movs	r2, #3
 800b96c:	9200      	str	r2, [sp, #0]
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	2001      	movs	r0, #1
 800b974:	f000 ff98 	bl	800c8a8 <xQueueGenericCreateStatic>
 800b978:	61f8      	str	r0, [r7, #28]
 800b97a:	e005      	b.n	800b988 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b97c:	2203      	movs	r2, #3
 800b97e:	2100      	movs	r1, #0
 800b980:	2001      	movs	r0, #1
 800b982:	f001 f809 	bl	800c998 <xQueueGenericCreate>
 800b986:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d022      	beq.n	800b9d4 <osSemaphoreNew+0xe8>
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01f      	beq.n	800b9d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b994:	2300      	movs	r3, #0
 800b996:	2200      	movs	r2, #0
 800b998:	2100      	movs	r1, #0
 800b99a:	69f8      	ldr	r0, [r7, #28]
 800b99c:	f001 f97a 	bl	800cc94 <xQueueGenericSend>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d016      	beq.n	800b9d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b9a6:	69f8      	ldr	r0, [r7, #28]
 800b9a8:	f001 fe06 	bl	800d5b8 <vQueueDelete>
            hSemaphore = NULL;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	e010      	b.n	800b9d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d108      	bne.n	800b9ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f001 f8fd 	bl	800cbc0 <xQueueCreateCountingSemaphoreStatic>
 800b9c6:	61f8      	str	r0, [r7, #28]
 800b9c8:	e004      	b.n	800b9d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f001 f92e 	bl	800cc2e <xQueueCreateCountingSemaphore>
 800b9d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00c      	beq.n	800b9f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	617b      	str	r3, [r7, #20]
 800b9e6:	e001      	b.n	800b9ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b9ec:	6979      	ldr	r1, [r7, #20]
 800b9ee:	69f8      	ldr	r0, [r7, #28]
 800b9f0:	f001 ff2e 	bl	800d850 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b9f4:	69fb      	ldr	r3, [r7, #28]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ba18:	f06f 0303 	mvn.w	r3, #3
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	e039      	b.n	800ba94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba20:	f3ef 8305 	mrs	r3, IPSR
 800ba24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d022      	beq.n	800ba72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ba32:	f06f 0303 	mvn.w	r3, #3
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	e02c      	b.n	800ba94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	461a      	mov	r2, r3
 800ba44:	2100      	movs	r1, #0
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f001 fd36 	bl	800d4b8 <xQueueReceiveFromISR>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d003      	beq.n	800ba5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ba52:	f06f 0302 	mvn.w	r3, #2
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	e01c      	b.n	800ba94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d019      	beq.n	800ba94 <osSemaphoreAcquire+0x94>
 800ba60:	4b0f      	ldr	r3, [pc, #60]	; (800baa0 <osSemaphoreAcquire+0xa0>)
 800ba62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	e010      	b.n	800ba94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6938      	ldr	r0, [r7, #16]
 800ba76:	f001 fc13 	bl	800d2a0 <xQueueSemaphoreTake>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d009      	beq.n	800ba94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ba86:	f06f 0301 	mvn.w	r3, #1
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	e002      	b.n	800ba94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ba8e:	f06f 0302 	mvn.w	r3, #2
 800ba92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ba94:	697b      	ldr	r3, [r7, #20]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d103      	bne.n	800bac2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800baba:	f06f 0303 	mvn.w	r3, #3
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e02c      	b.n	800bb1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bac2:	f3ef 8305 	mrs	r3, IPSR
 800bac6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bac8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d01a      	beq.n	800bb04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bace:	2300      	movs	r3, #0
 800bad0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bad2:	f107 0308 	add.w	r3, r7, #8
 800bad6:	4619      	mov	r1, r3
 800bad8:	6938      	ldr	r0, [r7, #16]
 800bada:	f001 fa74 	bl	800cfc6 <xQueueGiveFromISR>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d003      	beq.n	800baec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bae4:	f06f 0302 	mvn.w	r3, #2
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e017      	b.n	800bb1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d014      	beq.n	800bb1c <osSemaphoreRelease+0x78>
 800baf2:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <osSemaphoreRelease+0x84>)
 800baf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	e00b      	b.n	800bb1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6938      	ldr	r0, [r7, #16]
 800bb0c:	f001 f8c2 	bl	800cc94 <xQueueGenericSend>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d002      	beq.n	800bb1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bb16:	f06f 0302 	mvn.w	r3, #2
 800bb1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bb1c:	697b      	ldr	r3, [r7, #20]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb3c:	f3ef 8305 	mrs	r3, IPSR
 800bb40:	613b      	str	r3, [r7, #16]
  return(result);
 800bb42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d15f      	bne.n	800bc08 <osMessageQueueNew+0xdc>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d05c      	beq.n	800bc08 <osMessageQueueNew+0xdc>
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d059      	beq.n	800bc08 <osMessageQueueNew+0xdc>
    mem = -1;
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d029      	beq.n	800bbb4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d012      	beq.n	800bb8e <osMessageQueueNew+0x62>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	2b4f      	cmp	r3, #79	; 0x4f
 800bb6e:	d90e      	bls.n	800bb8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00a      	beq.n	800bb8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	695a      	ldr	r2, [r3, #20]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	fb01 f303 	mul.w	r3, r1, r3
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d302      	bcc.n	800bb8e <osMessageQueueNew+0x62>
        mem = 1;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	61bb      	str	r3, [r7, #24]
 800bb8c:	e014      	b.n	800bbb8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d110      	bne.n	800bbb8 <osMessageQueueNew+0x8c>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d108      	bne.n	800bbb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d104      	bne.n	800bbb8 <osMessageQueueNew+0x8c>
          mem = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	61bb      	str	r3, [r7, #24]
 800bbb2:	e001      	b.n	800bbb8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d10b      	bne.n	800bbd6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	9100      	str	r1, [sp, #0]
 800bbca:	68b9      	ldr	r1, [r7, #8]
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f000 fe6b 	bl	800c8a8 <xQueueGenericCreateStatic>
 800bbd2:	61f8      	str	r0, [r7, #28]
 800bbd4:	e008      	b.n	800bbe8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d105      	bne.n	800bbe8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bbdc:	2200      	movs	r2, #0
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 fed9 	bl	800c998 <xQueueGenericCreate>
 800bbe6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <osMessageQueueNew+0xd0>
        name = attr->name;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	617b      	str	r3, [r7, #20]
 800bbfa:	e001      	b.n	800bc00 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bc00:	6979      	ldr	r1, [r7, #20]
 800bc02:	69f8      	ldr	r0, [r7, #28]
 800bc04:	f001 fe24 	bl	800d850 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bc08:	69fb      	ldr	r3, [r7, #28]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3720      	adds	r7, #32
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	4613      	mov	r3, r2
 800bc22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc2c:	f3ef 8305 	mrs	r3, IPSR
 800bc30:	617b      	str	r3, [r7, #20]
  return(result);
 800bc32:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d028      	beq.n	800bc8a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <osMessageQueuePut+0x36>
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <osMessageQueuePut+0x36>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bc4a:	f06f 0303 	mvn.w	r3, #3
 800bc4e:	61fb      	str	r3, [r7, #28]
 800bc50:	e038      	b.n	800bcc4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc56:	f107 0210 	add.w	r2, r7, #16
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	69b8      	ldr	r0, [r7, #24]
 800bc60:	f001 f916 	bl	800ce90 <xQueueGenericSendFromISR>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d003      	beq.n	800bc72 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bc6a:	f06f 0302 	mvn.w	r3, #2
 800bc6e:	61fb      	str	r3, [r7, #28]
 800bc70:	e028      	b.n	800bcc4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d025      	beq.n	800bcc4 <osMessageQueuePut+0xb0>
 800bc78:	4b15      	ldr	r3, [pc, #84]	; (800bcd0 <osMessageQueuePut+0xbc>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	e01c      	b.n	800bcc4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <osMessageQueuePut+0x82>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bc96:	f06f 0303 	mvn.w	r3, #3
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e012      	b.n	800bcc4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc9e:	2300      	movs	r3, #0
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	69b8      	ldr	r0, [r7, #24]
 800bca6:	f000 fff5 	bl	800cc94 <xQueueGenericSend>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d009      	beq.n	800bcc4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bcb6:	f06f 0301 	mvn.w	r3, #1
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e002      	b.n	800bcc4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bcbe:	f06f 0302 	mvn.w	r3, #2
 800bcc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bcc4:	69fb      	ldr	r3, [r7, #28]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3720      	adds	r7, #32
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcea:	f3ef 8305 	mrs	r3, IPSR
 800bcee:	617b      	str	r3, [r7, #20]
  return(result);
 800bcf0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d028      	beq.n	800bd48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <osMessageQueueGet+0x34>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <osMessageQueueGet+0x34>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bd08:	f06f 0303 	mvn.w	r3, #3
 800bd0c:	61fb      	str	r3, [r7, #28]
 800bd0e:	e037      	b.n	800bd80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bd14:	f107 0310 	add.w	r3, r7, #16
 800bd18:	461a      	mov	r2, r3
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	69b8      	ldr	r0, [r7, #24]
 800bd1e:	f001 fbcb 	bl	800d4b8 <xQueueReceiveFromISR>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d003      	beq.n	800bd30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bd28:	f06f 0302 	mvn.w	r3, #2
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	e027      	b.n	800bd80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d024      	beq.n	800bd80 <osMessageQueueGet+0xac>
 800bd36:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <osMessageQueueGet+0xb8>)
 800bd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	e01b      	b.n	800bd80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <osMessageQueueGet+0x80>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bd54:	f06f 0303 	mvn.w	r3, #3
 800bd58:	61fb      	str	r3, [r7, #28]
 800bd5a:	e011      	b.n	800bd80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	68b9      	ldr	r1, [r7, #8]
 800bd60:	69b8      	ldr	r0, [r7, #24]
 800bd62:	f001 f9bd 	bl	800d0e0 <xQueueReceive>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d009      	beq.n	800bd80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bd72:	f06f 0301 	mvn.w	r3, #1
 800bd76:	61fb      	str	r3, [r7, #28]
 800bd78:	e002      	b.n	800bd80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bd7a:	f06f 0302 	mvn.w	r3, #2
 800bd7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd80:	69fb      	ldr	r3, [r7, #28]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3720      	adds	r7, #32
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4a07      	ldr	r2, [pc, #28]	; (800bdbc <vApplicationGetIdleTaskMemory+0x2c>)
 800bda0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	4a06      	ldr	r2, [pc, #24]	; (800bdc0 <vApplicationGetIdleTaskMemory+0x30>)
 800bda6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2280      	movs	r2, #128	; 0x80
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	bf00      	nop
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	24004dd4 	.word	0x24004dd4
 800bdc0:	24004e30 	.word	0x24004e30

0800bdc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4a07      	ldr	r2, [pc, #28]	; (800bdf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bdd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4a06      	ldr	r2, [pc, #24]	; (800bdf4 <vApplicationGetTimerTaskMemory+0x30>)
 800bdda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bde2:	601a      	str	r2, [r3, #0]
}
 800bde4:	bf00      	nop
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	24005030 	.word	0x24005030
 800bdf4:	2400508c 	.word	0x2400508c

0800bdf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08a      	sub	sp, #40	; 0x28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be00:	2300      	movs	r3, #0
 800be02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be04:	f001 ffe8 	bl	800ddd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be08:	4b5b      	ldr	r3, [pc, #364]	; (800bf78 <pvPortMalloc+0x180>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be10:	f000 f920 	bl	800c054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be14:	4b59      	ldr	r3, [pc, #356]	; (800bf7c <pvPortMalloc+0x184>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4013      	ands	r3, r2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f040 8093 	bne.w	800bf48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01d      	beq.n	800be64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be28:	2208      	movs	r2, #8
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b00      	cmp	r3, #0
 800be38:	d014      	beq.n	800be64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f023 0307 	bic.w	r3, r3, #7
 800be40:	3308      	adds	r3, #8
 800be42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f003 0307 	and.w	r3, r3, #7
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d06e      	beq.n	800bf48 <pvPortMalloc+0x150>
 800be6a:	4b45      	ldr	r3, [pc, #276]	; (800bf80 <pvPortMalloc+0x188>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	429a      	cmp	r2, r3
 800be72:	d869      	bhi.n	800bf48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be74:	4b43      	ldr	r3, [pc, #268]	; (800bf84 <pvPortMalloc+0x18c>)
 800be76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be78:	4b42      	ldr	r3, [pc, #264]	; (800bf84 <pvPortMalloc+0x18c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be7e:	e004      	b.n	800be8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	429a      	cmp	r2, r3
 800be92:	d903      	bls.n	800be9c <pvPortMalloc+0xa4>
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1f1      	bne.n	800be80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be9c:	4b36      	ldr	r3, [pc, #216]	; (800bf78 <pvPortMalloc+0x180>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d050      	beq.n	800bf48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2208      	movs	r2, #8
 800beac:	4413      	add	r3, r2
 800beae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	1ad2      	subs	r2, r2, r3
 800bec0:	2308      	movs	r3, #8
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d91f      	bls.n	800bf08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	f003 0307 	and.w	r3, r3, #7
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <pvPortMalloc+0xf8>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	613b      	str	r3, [r7, #16]
}
 800beec:	bf00      	nop
 800beee:	e7fe      	b.n	800beee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	1ad2      	subs	r2, r2, r3
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf02:	69b8      	ldr	r0, [r7, #24]
 800bf04:	f000 f908 	bl	800c118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf08:	4b1d      	ldr	r3, [pc, #116]	; (800bf80 <pvPortMalloc+0x188>)
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	4a1b      	ldr	r2, [pc, #108]	; (800bf80 <pvPortMalloc+0x188>)
 800bf14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf16:	4b1a      	ldr	r3, [pc, #104]	; (800bf80 <pvPortMalloc+0x188>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	4b1b      	ldr	r3, [pc, #108]	; (800bf88 <pvPortMalloc+0x190>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d203      	bcs.n	800bf2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf22:	4b17      	ldr	r3, [pc, #92]	; (800bf80 <pvPortMalloc+0x188>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a18      	ldr	r2, [pc, #96]	; (800bf88 <pvPortMalloc+0x190>)
 800bf28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	4b13      	ldr	r3, [pc, #76]	; (800bf7c <pvPortMalloc+0x184>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	431a      	orrs	r2, r3
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf3e:	4b13      	ldr	r3, [pc, #76]	; (800bf8c <pvPortMalloc+0x194>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3301      	adds	r3, #1
 800bf44:	4a11      	ldr	r2, [pc, #68]	; (800bf8c <pvPortMalloc+0x194>)
 800bf46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf48:	f001 ff54 	bl	800ddf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <pvPortMalloc+0x174>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	60fb      	str	r3, [r7, #12]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <pvPortMalloc+0x172>
	return pvReturn;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3728      	adds	r7, #40	; 0x28
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	24009094 	.word	0x24009094
 800bf7c:	240090a8 	.word	0x240090a8
 800bf80:	24009098 	.word	0x24009098
 800bf84:	2400908c 	.word	0x2400908c
 800bf88:	2400909c 	.word	0x2400909c
 800bf8c:	240090a0 	.word	0x240090a0

0800bf90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d04d      	beq.n	800c03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfa2:	2308      	movs	r3, #8
 800bfa4:	425b      	negs	r3, r3
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	4b24      	ldr	r3, [pc, #144]	; (800c048 <vPortFree+0xb8>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4013      	ands	r3, r2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <vPortFree+0x44>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60fb      	str	r3, [r7, #12]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <vPortFree+0x62>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	60bb      	str	r3, [r7, #8]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <vPortFree+0xb8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d01e      	beq.n	800c03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d11a      	bne.n	800c03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <vPortFree+0xb8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	43db      	mvns	r3, r3
 800c012:	401a      	ands	r2, r3
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c018:	f001 fede 	bl	800ddd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <vPortFree+0xbc>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4413      	add	r3, r2
 800c026:	4a09      	ldr	r2, [pc, #36]	; (800c04c <vPortFree+0xbc>)
 800c028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c02a:	6938      	ldr	r0, [r7, #16]
 800c02c:	f000 f874 	bl	800c118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c030:	4b07      	ldr	r3, [pc, #28]	; (800c050 <vPortFree+0xc0>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3301      	adds	r3, #1
 800c036:	4a06      	ldr	r2, [pc, #24]	; (800c050 <vPortFree+0xc0>)
 800c038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c03a:	f001 fedb 	bl	800ddf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c03e:	bf00      	nop
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	240090a8 	.word	0x240090a8
 800c04c:	24009098 	.word	0x24009098
 800c050:	240090a4 	.word	0x240090a4

0800c054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c060:	4b27      	ldr	r3, [pc, #156]	; (800c100 <prvHeapInit+0xac>)
 800c062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00c      	beq.n	800c088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3307      	adds	r3, #7
 800c072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 0307 	bic.w	r3, r3, #7
 800c07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	4a1f      	ldr	r2, [pc, #124]	; (800c100 <prvHeapInit+0xac>)
 800c084:	4413      	add	r3, r2
 800c086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c08c:	4a1d      	ldr	r2, [pc, #116]	; (800c104 <prvHeapInit+0xb0>)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c092:	4b1c      	ldr	r3, [pc, #112]	; (800c104 <prvHeapInit+0xb0>)
 800c094:	2200      	movs	r2, #0
 800c096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	4413      	add	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	1a9b      	subs	r3, r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 0307 	bic.w	r3, r3, #7
 800c0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4a15      	ldr	r2, [pc, #84]	; (800c108 <prvHeapInit+0xb4>)
 800c0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <prvHeapInit+0xb4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0be:	4b12      	ldr	r3, [pc, #72]	; (800c108 <prvHeapInit+0xb4>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	1ad2      	subs	r2, r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0d4:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <prvHeapInit+0xb4>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	4a0a      	ldr	r2, [pc, #40]	; (800c10c <prvHeapInit+0xb8>)
 800c0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4a09      	ldr	r2, [pc, #36]	; (800c110 <prvHeapInit+0xbc>)
 800c0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <prvHeapInit+0xc0>)
 800c0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0f2:	601a      	str	r2, [r3, #0]
}
 800c0f4:	bf00      	nop
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	2400548c 	.word	0x2400548c
 800c104:	2400908c 	.word	0x2400908c
 800c108:	24009094 	.word	0x24009094
 800c10c:	2400909c 	.word	0x2400909c
 800c110:	24009098 	.word	0x24009098
 800c114:	240090a8 	.word	0x240090a8

0800c118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c120:	4b28      	ldr	r3, [pc, #160]	; (800c1c4 <prvInsertBlockIntoFreeList+0xac>)
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	e002      	b.n	800c12c <prvInsertBlockIntoFreeList+0x14>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	429a      	cmp	r2, r3
 800c134:	d8f7      	bhi.n	800c126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	4413      	add	r3, r2
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	429a      	cmp	r2, r3
 800c146:	d108      	bne.n	800c15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	441a      	add	r2, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d118      	bne.n	800c1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d00d      	beq.n	800c196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	441a      	add	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	e008      	b.n	800c1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c196:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	e003      	b.n	800c1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d002      	beq.n	800c1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	2400908c 	.word	0x2400908c
 800c1c8:	24009094 	.word	0x24009094

0800c1cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f103 0208 	add.w	r2, r3, #8
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f103 0208 	add.w	r2, r3, #8
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f103 0208 	add.w	r2, r3, #8
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c21a:	bf00      	nop
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c226:	b480      	push	{r7}
 800c228:	b085      	sub	sp, #20
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	1c5a      	adds	r2, r3, #1
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	601a      	str	r2, [r3, #0]
}
 800c262:	bf00      	nop
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c26e:	b480      	push	{r7}
 800c270:	b085      	sub	sp, #20
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c284:	d103      	bne.n	800c28e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	60fb      	str	r3, [r7, #12]
 800c28c:	e00c      	b.n	800c2a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3308      	adds	r3, #8
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e002      	b.n	800c29c <vListInsert+0x2e>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	60fb      	str	r3, [r7, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d2f6      	bcs.n	800c296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	6892      	ldr	r2, [r2, #8]
 800c2f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	6852      	ldr	r2, [r2, #4]
 800c300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d103      	bne.n	800c314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689a      	ldr	r2, [r3, #8]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	1e5a      	subs	r2, r3, #1
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3b04      	subs	r3, #4
 800c344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c34c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3b04      	subs	r3, #4
 800c352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f023 0201 	bic.w	r2, r3, #1
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3b04      	subs	r3, #4
 800c362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c364:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <pxPortInitialiseStack+0x64>)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3b14      	subs	r3, #20
 800c36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3b04      	subs	r3, #4
 800c37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f06f 0202 	mvn.w	r2, #2
 800c382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3b20      	subs	r3, #32
 800c388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c38a:	68fb      	ldr	r3, [r7, #12]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	0800c39d 	.word	0x0800c39d

0800c39c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3a6:	4b12      	ldr	r3, [pc, #72]	; (800c3f0 <prvTaskExitError+0x54>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ae:	d00a      	beq.n	800c3c6 <prvTaskExitError+0x2a>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	60fb      	str	r3, [r7, #12]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <prvTaskExitError+0x28>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	60bb      	str	r3, [r7, #8]
}
 800c3d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3da:	bf00      	nop
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0fc      	beq.n	800c3dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	24000024 	.word	0x24000024
	...

0800c400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <pxCurrentTCBConst2>)
 800c402:	6819      	ldr	r1, [r3, #0]
 800c404:	6808      	ldr	r0, [r1, #0]
 800c406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40a:	f380 8809 	msr	PSP, r0
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f04f 0000 	mov.w	r0, #0
 800c416:	f380 8811 	msr	BASEPRI, r0
 800c41a:	4770      	bx	lr
 800c41c:	f3af 8000 	nop.w

0800c420 <pxCurrentTCBConst2>:
 800c420:	240090f4 	.word	0x240090f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop

0800c428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c428:	4808      	ldr	r0, [pc, #32]	; (800c44c <prvPortStartFirstTask+0x24>)
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	6800      	ldr	r0, [r0, #0]
 800c42e:	f380 8808 	msr	MSP, r0
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8814 	msr	CONTROL, r0
 800c43a:	b662      	cpsie	i
 800c43c:	b661      	cpsie	f
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	df00      	svc	0
 800c448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c44a:	bf00      	nop
 800c44c:	e000ed08 	.word	0xe000ed08

0800c450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c456:	4b46      	ldr	r3, [pc, #280]	; (800c570 <xPortStartScheduler+0x120>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a46      	ldr	r2, [pc, #280]	; (800c574 <xPortStartScheduler+0x124>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10a      	bne.n	800c476 <xPortStartScheduler+0x26>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	613b      	str	r3, [r7, #16]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c476:	4b3e      	ldr	r3, [pc, #248]	; (800c570 <xPortStartScheduler+0x120>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a3f      	ldr	r2, [pc, #252]	; (800c578 <xPortStartScheduler+0x128>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10a      	bne.n	800c496 <xPortStartScheduler+0x46>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c496:	4b39      	ldr	r3, [pc, #228]	; (800c57c <xPortStartScheduler+0x12c>)
 800c498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	22ff      	movs	r2, #255	; 0xff
 800c4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	4b31      	ldr	r3, [pc, #196]	; (800c580 <xPortStartScheduler+0x130>)
 800c4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4be:	4b31      	ldr	r3, [pc, #196]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4c4:	e009      	b.n	800c4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4c6:	4b2f      	ldr	r3, [pc, #188]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	4a2d      	ldr	r2, [pc, #180]	; (800c584 <xPortStartScheduler+0x134>)
 800c4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e2:	2b80      	cmp	r3, #128	; 0x80
 800c4e4:	d0ef      	beq.n	800c4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4e6:	4b27      	ldr	r3, [pc, #156]	; (800c584 <xPortStartScheduler+0x134>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f1c3 0307 	rsb	r3, r3, #7
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d00a      	beq.n	800c508 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60bb      	str	r3, [r7, #8]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c508:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <xPortStartScheduler+0x134>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <xPortStartScheduler+0x134>)
 800c510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c512:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <xPortStartScheduler+0x134>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c51a:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <xPortStartScheduler+0x134>)
 800c51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	b2da      	uxtb	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c526:	4b18      	ldr	r3, [pc, #96]	; (800c588 <xPortStartScheduler+0x138>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a17      	ldr	r2, [pc, #92]	; (800c588 <xPortStartScheduler+0x138>)
 800c52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <xPortStartScheduler+0x138>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a14      	ldr	r2, [pc, #80]	; (800c588 <xPortStartScheduler+0x138>)
 800c538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c53e:	f000 f8dd 	bl	800c6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c542:	4b12      	ldr	r3, [pc, #72]	; (800c58c <xPortStartScheduler+0x13c>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c548:	f000 f8fc 	bl	800c744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c54c:	4b10      	ldr	r3, [pc, #64]	; (800c590 <xPortStartScheduler+0x140>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0f      	ldr	r2, [pc, #60]	; (800c590 <xPortStartScheduler+0x140>)
 800c552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c558:	f7ff ff66 	bl	800c428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c55c:	f001 fdc4 	bl	800e0e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c560:	f7ff ff1c 	bl	800c39c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed00 	.word	0xe000ed00
 800c574:	410fc271 	.word	0x410fc271
 800c578:	410fc270 	.word	0x410fc270
 800c57c:	e000e400 	.word	0xe000e400
 800c580:	240090ac 	.word	0x240090ac
 800c584:	240090b0 	.word	0x240090b0
 800c588:	e000ed20 	.word	0xe000ed20
 800c58c:	24000024 	.word	0x24000024
 800c590:	e000ef34 	.word	0xe000ef34

0800c594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	607b      	str	r3, [r7, #4]
}
 800c5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ae:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	4a0d      	ldr	r2, [pc, #52]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d10f      	bne.n	800c5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <vPortEnterCritical+0x5c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00a      	beq.n	800c5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	603b      	str	r3, [r7, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <vPortEnterCritical+0x4a>
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	24000024 	.word	0x24000024
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5fa:	4b12      	ldr	r3, [pc, #72]	; (800c644 <vPortExitCritical+0x50>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <vPortExitCritical+0x24>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	607b      	str	r3, [r7, #4]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c618:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <vPortExitCritical+0x50>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	4a09      	ldr	r2, [pc, #36]	; (800c644 <vPortExitCritical+0x50>)
 800c620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c622:	4b08      	ldr	r3, [pc, #32]	; (800c644 <vPortExitCritical+0x50>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d105      	bne.n	800c636 <vPortExitCritical+0x42>
 800c62a:	2300      	movs	r3, #0
 800c62c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	24000024 	.word	0x24000024
	...

0800c650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c650:	f3ef 8009 	mrs	r0, PSP
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <pxCurrentTCBConst>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	f01e 0f10 	tst.w	lr, #16
 800c660:	bf08      	it	eq
 800c662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	6010      	str	r0, [r2, #0]
 800c66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c674:	f380 8811 	msr	BASEPRI, r0
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f001 fd32 	bl	800e0e8 <vTaskSwitchContext>
 800c684:	f04f 0000 	mov.w	r0, #0
 800c688:	f380 8811 	msr	BASEPRI, r0
 800c68c:	bc09      	pop	{r0, r3}
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	6808      	ldr	r0, [r1, #0]
 800c692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c696:	f01e 0f10 	tst.w	lr, #16
 800c69a:	bf08      	it	eq
 800c69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6a0:	f380 8809 	msr	PSP, r0
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst>:
 800c6b0:	240090f4 	.word	0x240090f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop

0800c6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6d2:	f001 fc4f 	bl	800df74 <xTaskIncrementTick>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <xPortSysTickHandler+0x40>)
 800c6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	f383 8811 	msr	BASEPRI, r3
}
 800c6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c700:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c706:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <vPortSetupTimerInterrupt+0x38>)
 800c708:	2200      	movs	r2, #0
 800c70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c70c:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <vPortSetupTimerInterrupt+0x3c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <vPortSetupTimerInterrupt+0x40>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	099b      	lsrs	r3, r3, #6
 800c718:	4a09      	ldr	r2, [pc, #36]	; (800c740 <vPortSetupTimerInterrupt+0x44>)
 800c71a:	3b01      	subs	r3, #1
 800c71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c71e:	4b04      	ldr	r3, [pc, #16]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
}
 800c724:	bf00      	nop
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	e000e010 	.word	0xe000e010
 800c734:	e000e018 	.word	0xe000e018
 800c738:	24000000 	.word	0x24000000
 800c73c:	10624dd3 	.word	0x10624dd3
 800c740:	e000e014 	.word	0xe000e014

0800c744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c754 <vPortEnableVFP+0x10>
 800c748:	6801      	ldr	r1, [r0, #0]
 800c74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c74e:	6001      	str	r1, [r0, #0]
 800c750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c752:	bf00      	nop
 800c754:	e000ed88 	.word	0xe000ed88

0800c758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b0f      	cmp	r3, #15
 800c768:	d914      	bls.n	800c794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c76a:	4a17      	ldr	r2, [pc, #92]	; (800c7c8 <vPortValidateInterruptPriority+0x70>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c774:	4b15      	ldr	r3, [pc, #84]	; (800c7cc <vPortValidateInterruptPriority+0x74>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	7afa      	ldrb	r2, [r7, #11]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d20a      	bcs.n	800c794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	607b      	str	r3, [r7, #4]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c794:	4b0e      	ldr	r3, [pc, #56]	; (800c7d0 <vPortValidateInterruptPriority+0x78>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c79c:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <vPortValidateInterruptPriority+0x7c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d90a      	bls.n	800c7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	603b      	str	r3, [r7, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <vPortValidateInterruptPriority+0x60>
	}
 800c7ba:	bf00      	nop
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	e000e3f0 	.word	0xe000e3f0
 800c7cc:	240090ac 	.word	0x240090ac
 800c7d0:	e000ed0c 	.word	0xe000ed0c
 800c7d4:	240090b0 	.word	0x240090b0

0800c7d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <xQueueGenericReset+0x2a>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	60bb      	str	r3, [r7, #8]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c802:	f7ff fec7 	bl	800c594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c812:	fb01 f303 	mul.w	r3, r1, r3
 800c816:	441a      	add	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c832:	3b01      	subs	r3, #1
 800c834:	68f9      	ldr	r1, [r7, #12]
 800c836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c838:	fb01 f303 	mul.w	r3, r1, r3
 800c83c:	441a      	add	r2, r3
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	22ff      	movs	r2, #255	; 0xff
 800c846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	22ff      	movs	r2, #255	; 0xff
 800c84e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d114      	bne.n	800c882 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01a      	beq.n	800c896 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3310      	adds	r3, #16
 800c864:	4618      	mov	r0, r3
 800c866:	f001 fced 	bl	800e244 <xTaskRemoveFromEventList>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d012      	beq.n	800c896 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <xQueueGenericReset+0xcc>)
 800c872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c876:	601a      	str	r2, [r3, #0]
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	e009      	b.n	800c896 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3310      	adds	r3, #16
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff fca0 	bl	800c1cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3324      	adds	r3, #36	; 0x24
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fc9b 	bl	800c1cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c896:	f7ff fead 	bl	800c5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c89a:	2301      	movs	r3, #1
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	e000ed04 	.word	0xe000ed04

0800c8a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08e      	sub	sp, #56	; 0x38
 800c8ac:	af02      	add	r7, sp, #8
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10a      	bne.n	800c8d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8ce:	bf00      	nop
 800c8d0:	e7fe      	b.n	800c8d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <xQueueGenericCreateStatic+0x52>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <xQueueGenericCreateStatic+0x56>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e000      	b.n	800c900 <xQueueGenericCreateStatic+0x58>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	623b      	str	r3, [r7, #32]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <xQueueGenericCreateStatic+0x7e>
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <xQueueGenericCreateStatic+0x82>
 800c926:	2301      	movs	r3, #1
 800c928:	e000      	b.n	800c92c <xQueueGenericCreateStatic+0x84>
 800c92a:	2300      	movs	r3, #0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10a      	bne.n	800c946 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	61fb      	str	r3, [r7, #28]
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c946:	2350      	movs	r3, #80	; 0x50
 800c948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b50      	cmp	r3, #80	; 0x50
 800c94e:	d00a      	beq.n	800c966 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	61bb      	str	r3, [r7, #24]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c966:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00d      	beq.n	800c98e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c97a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4613      	mov	r3, r2
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f83f 	bl	800ca0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c990:	4618      	mov	r0, r3
 800c992:	3730      	adds	r7, #48	; 0x30
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08a      	sub	sp, #40	; 0x28
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10a      	bne.n	800c9c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	613b      	str	r3, [r7, #16]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	3350      	adds	r3, #80	; 0x50
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7ff fa11 	bl	800bdf8 <pvPortMalloc>
 800c9d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d011      	beq.n	800ca02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	3350      	adds	r3, #80	; 0x50
 800c9e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9f0:	79fa      	ldrb	r2, [r7, #7]
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f805 	bl	800ca0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca02:	69bb      	ldr	r3, [r7, #24]
	}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3720      	adds	r7, #32
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	69ba      	ldr	r2, [r7, #24]
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	e002      	b.n	800ca2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	69b8      	ldr	r0, [r7, #24]
 800ca3e:	f7ff fecb 	bl	800c7d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	78fa      	ldrb	r2, [r7, #3]
 800ca46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca4a:	bf00      	nop
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b082      	sub	sp, #8
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00e      	beq.n	800ca7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca72:	2300      	movs	r3, #0
 800ca74:	2200      	movs	r2, #0
 800ca76:	2100      	movs	r1, #0
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f90b 	bl	800cc94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b086      	sub	sp, #24
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca90:	2301      	movs	r3, #1
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	2300      	movs	r3, #0
 800ca96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	6939      	ldr	r1, [r7, #16]
 800ca9e:	6978      	ldr	r0, [r7, #20]
 800caa0:	f7ff ff7a 	bl	800c998 <xQueueGenericCreate>
 800caa4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff ffd3 	bl	800ca52 <prvInitialiseMutex>

		return xNewQueue;
 800caac:	68fb      	ldr	r3, [r7, #12]
	}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b088      	sub	sp, #32
 800caba:	af02      	add	r7, sp, #8
 800cabc:	4603      	mov	r3, r0
 800cabe:	6039      	str	r1, [r7, #0]
 800cac0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cac2:	2301      	movs	r3, #1
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	2300      	movs	r3, #0
 800cac8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2200      	movs	r2, #0
 800cad2:	6939      	ldr	r1, [r7, #16]
 800cad4:	6978      	ldr	r0, [r7, #20]
 800cad6:	f7ff fee7 	bl	800c8a8 <xQueueGenericCreateStatic>
 800cada:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff ffb8 	bl	800ca52 <prvInitialiseMutex>

		return xNewQueue;
 800cae2:	68fb      	ldr	r3, [r7, #12]
	}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800caec:	b590      	push	{r4, r7, lr}
 800caee:	b087      	sub	sp, #28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60fb      	str	r3, [r7, #12]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	689c      	ldr	r4, [r3, #8]
 800cb18:	f001 fd52 	bl	800e5c0 <xTaskGetCurrentTaskHandle>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	429c      	cmp	r4, r3
 800cb20:	d111      	bne.n	800cb46 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	1e5a      	subs	r2, r3, #1
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d105      	bne.n	800cb40 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cb34:	2300      	movs	r3, #0
 800cb36:	2200      	movs	r2, #0
 800cb38:	2100      	movs	r1, #0
 800cb3a:	6938      	ldr	r0, [r7, #16]
 800cb3c:	f000 f8aa 	bl	800cc94 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cb40:	2301      	movs	r3, #1
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	e001      	b.n	800cb4a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cb4a:	697b      	ldr	r3, [r7, #20]
	}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}

0800cb54 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10a      	bne.n	800cb7e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	e7fe      	b.n	800cb7c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	689c      	ldr	r4, [r3, #8]
 800cb82:	f001 fd1d 	bl	800e5c0 <xTaskGetCurrentTaskHandle>
 800cb86:	4603      	mov	r3, r0
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	d107      	bne.n	800cb9c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb96:	2301      	movs	r3, #1
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	e00c      	b.n	800cbb6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6938      	ldr	r0, [r7, #16]
 800cba0:	f000 fb7e 	bl	800d2a0 <xQueueSemaphoreTake>
 800cba4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d004      	beq.n	800cbb6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cbb6:	697b      	ldr	r3, [r7, #20]
	}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	371c      	adds	r7, #28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd90      	pop	{r4, r7, pc}

0800cbc0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	; 0x28
 800cbc4:	af02      	add	r7, sp, #8
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	61bb      	str	r3, [r7, #24]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d90a      	bls.n	800cc06 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	617b      	str	r3, [r7, #20]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc06:	2302      	movs	r3, #2
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2100      	movs	r1, #0
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff fe49 	bl	800c8a8 <xQueueGenericCreateStatic>
 800cc16:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc24:	69fb      	ldr	r3, [r7, #28]
	}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	613b      	str	r3, [r7, #16]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d90a      	bls.n	800cc72 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60fb      	str	r3, [r7, #12]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc72:	2202      	movs	r2, #2
 800cc74:	2100      	movs	r1, #0
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7ff fe8e 	bl	800c998 <xQueueGenericCreate>
 800cc7c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc8a:	697b      	ldr	r3, [r7, #20]
	}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08e      	sub	sp, #56	; 0x38
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cca2:	2300      	movs	r3, #0
 800cca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <xQueueGenericSend+0x32>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d103      	bne.n	800ccd4 <xQueueGenericSend+0x40>
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <xQueueGenericSend+0x44>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e000      	b.n	800ccda <xQueueGenericSend+0x46>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <xQueueGenericSend+0x60>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d103      	bne.n	800cd02 <xQueueGenericSend+0x6e>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d101      	bne.n	800cd06 <xQueueGenericSend+0x72>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <xQueueGenericSend+0x74>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <xQueueGenericSend+0x8e>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	623b      	str	r3, [r7, #32]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd22:	f001 fc5d 	bl	800e5e0 <xTaskGetSchedulerState>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <xQueueGenericSend+0x9e>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <xQueueGenericSend+0xa2>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <xQueueGenericSend+0xa4>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xQueueGenericSend+0xbe>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	61fb      	str	r3, [r7, #28]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd52:	f7ff fc1f 	bl	800c594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d302      	bcc.n	800cd68 <xQueueGenericSend+0xd4>
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d129      	bne.n	800cdbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd6e:	f000 fc5e 	bl	800d62e <prvCopyDataToQueue>
 800cd72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d010      	beq.n	800cd9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	3324      	adds	r3, #36	; 0x24
 800cd80:	4618      	mov	r0, r3
 800cd82:	f001 fa5f 	bl	800e244 <xTaskRemoveFromEventList>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d013      	beq.n	800cdb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd8c:	4b3f      	ldr	r3, [pc, #252]	; (800ce8c <xQueueGenericSend+0x1f8>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	e00a      	b.n	800cdb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cda4:	4b39      	ldr	r3, [pc, #228]	; (800ce8c <xQueueGenericSend+0x1f8>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdb4:	f7ff fc1e 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e063      	b.n	800ce84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d103      	bne.n	800cdca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdc2:	f7ff fc17 	bl	800c5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e05c      	b.n	800ce84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d106      	bne.n	800cdde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdd0:	f107 0314 	add.w	r3, r7, #20
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f001 fa99 	bl	800e30c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdda:	2301      	movs	r3, #1
 800cddc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdde:	f7ff fc09 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cde2:	f000 fff9 	bl	800ddd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cde6:	f7ff fbd5 	bl	800c594 <vPortEnterCritical>
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdf0:	b25b      	sxtb	r3, r3
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d103      	bne.n	800ce00 <xQueueGenericSend+0x16c>
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce06:	b25b      	sxtb	r3, r3
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d103      	bne.n	800ce16 <xQueueGenericSend+0x182>
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce16:	f7ff fbed 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce1a:	1d3a      	adds	r2, r7, #4
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4611      	mov	r1, r2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 fa88 	bl	800e338 <xTaskCheckForTimeOut>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d124      	bne.n	800ce78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce30:	f000 fcf5 	bl	800d81e <prvIsQueueFull>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d018      	beq.n	800ce6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	3310      	adds	r3, #16
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	4611      	mov	r1, r2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 f9ae 	bl	800e1a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce4a:	f000 fc80 	bl	800d74e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce4e:	f000 ffd1 	bl	800ddf4 <xTaskResumeAll>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f47f af7c 	bne.w	800cd52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce5a:	4b0c      	ldr	r3, [pc, #48]	; (800ce8c <xQueueGenericSend+0x1f8>)
 800ce5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	e772      	b.n	800cd52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6e:	f000 fc6e 	bl	800d74e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce72:	f000 ffbf 	bl	800ddf4 <xTaskResumeAll>
 800ce76:	e76c      	b.n	800cd52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce7a:	f000 fc68 	bl	800d74e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce7e:	f000 ffb9 	bl	800ddf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3738      	adds	r7, #56	; 0x38
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b090      	sub	sp, #64	; 0x40
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d103      	bne.n	800cecc <xQueueGenericSendFromISR+0x3c>
 800cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <xQueueGenericSendFromISR+0x40>
 800cecc:	2301      	movs	r3, #1
 800cece:	e000      	b.n	800ced2 <xQueueGenericSendFromISR+0x42>
 800ced0:	2300      	movs	r3, #0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d103      	bne.n	800cefa <xQueueGenericSendFromISR+0x6a>
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d101      	bne.n	800cefe <xQueueGenericSendFromISR+0x6e>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e000      	b.n	800cf00 <xQueueGenericSendFromISR+0x70>
 800cefe:	2300      	movs	r3, #0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	623b      	str	r3, [r7, #32]
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf1a:	f7ff fc1d 	bl	800c758 <vPortValidateInterruptPriority>
	__asm volatile
 800cf1e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	61fa      	str	r2, [r7, #28]
 800cf34:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cf36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d302      	bcc.n	800cf4c <xQueueGenericSendFromISR+0xbc>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d12f      	bne.n	800cfac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf62:	f000 fb64 	bl	800d62e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	d112      	bne.n	800cf96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d016      	beq.n	800cfa6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	3324      	adds	r3, #36	; 0x24
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f001 f961 	bl	800e244 <xTaskRemoveFromEventList>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00e      	beq.n	800cfa6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	e007      	b.n	800cfa6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	b25a      	sxtb	r2, r3
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfaa:	e001      	b.n	800cfb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfac:	2300      	movs	r3, #0
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f383 8811 	msr	BASEPRI, r3
}
 800cfba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3740      	adds	r7, #64	; 0x40
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b08e      	sub	sp, #56	; 0x38
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	623b      	str	r3, [r7, #32]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00a      	beq.n	800d00e <xQueueGiveFromISR+0x48>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	61fb      	str	r3, [r7, #28]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <xQueueGiveFromISR+0x58>
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <xQueueGiveFromISR+0x5c>
 800d01e:	2301      	movs	r3, #1
 800d020:	e000      	b.n	800d024 <xQueueGiveFromISR+0x5e>
 800d022:	2300      	movs	r3, #0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	61bb      	str	r3, [r7, #24]
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d03e:	f7ff fb8b 	bl	800c758 <vPortValidateInterruptPriority>
	__asm volatile
 800d042:	f3ef 8211 	mrs	r2, BASEPRI
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	617a      	str	r2, [r7, #20]
 800d058:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d05a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d22b      	bcs.n	800d0c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d112      	bne.n	800d0b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d016      	beq.n	800d0c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	3324      	adds	r3, #36	; 0x24
 800d096:	4618      	mov	r0, r3
 800d098:	f001 f8d4 	bl	800e244 <xTaskRemoveFromEventList>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00e      	beq.n	800d0c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e007      	b.n	800d0c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	b25a      	sxtb	r2, r3
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0c4:	e001      	b.n	800d0ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f383 8811 	msr	BASEPRI, r3
}
 800d0d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3738      	adds	r7, #56	; 0x38
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08c      	sub	sp, #48	; 0x30
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10a      	bne.n	800d110 <xQueueReceive+0x30>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	623b      	str	r3, [r7, #32]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d103      	bne.n	800d11e <xQueueReceive+0x3e>
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <xQueueReceive+0x42>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueReceive+0x44>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <xQueueReceive+0x5e>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	61fb      	str	r3, [r7, #28]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d13e:	f001 fa4f 	bl	800e5e0 <xTaskGetSchedulerState>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <xQueueReceive+0x6e>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <xQueueReceive+0x72>
 800d14e:	2301      	movs	r3, #1
 800d150:	e000      	b.n	800d154 <xQueueReceive+0x74>
 800d152:	2300      	movs	r3, #0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10a      	bne.n	800d16e <xQueueReceive+0x8e>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	61bb      	str	r3, [r7, #24]
}
 800d16a:	bf00      	nop
 800d16c:	e7fe      	b.n	800d16c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d16e:	f7ff fa11 	bl	800c594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d01f      	beq.n	800d1be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d182:	f000 fabe 	bl	800d702 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	1e5a      	subs	r2, r3, #1
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00f      	beq.n	800d1b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	3310      	adds	r3, #16
 800d19a:	4618      	mov	r0, r3
 800d19c:	f001 f852 	bl	800e244 <xTaskRemoveFromEventList>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d007      	beq.n	800d1b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1a6:	4b3d      	ldr	r3, [pc, #244]	; (800d29c <xQueueReceive+0x1bc>)
 800d1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1b6:	f7ff fa1d 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e069      	b.n	800d292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d103      	bne.n	800d1cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1c4:	f7ff fa16 	bl	800c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e062      	b.n	800d292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1d2:	f107 0310 	add.w	r3, r7, #16
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 f898 	bl	800e30c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1e0:	f7ff fa08 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1e4:	f000 fdf8 	bl	800ddd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1e8:	f7ff f9d4 	bl	800c594 <vPortEnterCritical>
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1f2:	b25b      	sxtb	r3, r3
 800d1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f8:	d103      	bne.n	800d202 <xQueueReceive+0x122>
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d208:	b25b      	sxtb	r3, r3
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d103      	bne.n	800d218 <xQueueReceive+0x138>
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	2200      	movs	r2, #0
 800d214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d218:	f7ff f9ec 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d21c:	1d3a      	adds	r2, r7, #4
 800d21e:	f107 0310 	add.w	r3, r7, #16
 800d222:	4611      	mov	r1, r2
 800d224:	4618      	mov	r0, r3
 800d226:	f001 f887 	bl	800e338 <xTaskCheckForTimeOut>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d123      	bne.n	800d278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d232:	f000 fade 	bl	800d7f2 <prvIsQueueEmpty>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d017      	beq.n	800d26c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	3324      	adds	r3, #36	; 0x24
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	4611      	mov	r1, r2
 800d244:	4618      	mov	r0, r3
 800d246:	f000 ffad 	bl	800e1a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d24c:	f000 fa7f 	bl	800d74e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d250:	f000 fdd0 	bl	800ddf4 <xTaskResumeAll>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d189      	bne.n	800d16e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d25a:	4b10      	ldr	r3, [pc, #64]	; (800d29c <xQueueReceive+0x1bc>)
 800d25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	e780      	b.n	800d16e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26e:	f000 fa6e 	bl	800d74e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d272:	f000 fdbf 	bl	800ddf4 <xTaskResumeAll>
 800d276:	e77a      	b.n	800d16e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d27a:	f000 fa68 	bl	800d74e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d27e:	f000 fdb9 	bl	800ddf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d284:	f000 fab5 	bl	800d7f2 <prvIsQueueEmpty>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f43f af6f 	beq.w	800d16e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d292:	4618      	mov	r0, r3
 800d294:	3730      	adds	r7, #48	; 0x30
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	e000ed04 	.word	0xe000ed04

0800d2a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08e      	sub	sp, #56	; 0x38
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	623b      	str	r3, [r7, #32]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	61fb      	str	r3, [r7, #28]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2f0:	f001 f976 	bl	800e5e0 <xTaskGetSchedulerState>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <xQueueSemaphoreTake+0x60>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <xQueueSemaphoreTake+0x64>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <xQueueSemaphoreTake+0x66>
 800d304:	2300      	movs	r3, #0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	61bb      	str	r3, [r7, #24]
}
 800d31c:	bf00      	nop
 800d31e:	e7fe      	b.n	800d31e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d320:	f7ff f938 	bl	800c594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d328:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d024      	beq.n	800d37a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	1e5a      	subs	r2, r3, #1
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d104      	bne.n	800d34a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d340:	f001 fac4 	bl	800e8cc <pvTaskIncrementMutexHeldCount>
 800d344:	4602      	mov	r2, r0
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00f      	beq.n	800d372 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	3310      	adds	r3, #16
 800d356:	4618      	mov	r0, r3
 800d358:	f000 ff74 	bl	800e244 <xTaskRemoveFromEventList>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d362:	4b54      	ldr	r3, [pc, #336]	; (800d4b4 <xQueueSemaphoreTake+0x214>)
 800d364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d368:	601a      	str	r2, [r3, #0]
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d372:	f7ff f93f 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800d376:	2301      	movs	r3, #1
 800d378:	e097      	b.n	800d4aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d111      	bne.n	800d3a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00a      	beq.n	800d39c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	617b      	str	r3, [r7, #20]
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d39c:	f7ff f92a 	bl	800c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e082      	b.n	800d4aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3aa:	f107 030c 	add.w	r3, r7, #12
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 ffac 	bl	800e30c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3b8:	f7ff f91c 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3bc:	f000 fd0c 	bl	800ddd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3c0:	f7ff f8e8 	bl	800c594 <vPortEnterCritical>
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d0:	d103      	bne.n	800d3da <xQueueSemaphoreTake+0x13a>
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e0:	b25b      	sxtb	r3, r3
 800d3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e6:	d103      	bne.n	800d3f0 <xQueueSemaphoreTake+0x150>
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3f0:	f7ff f900 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3f4:	463a      	mov	r2, r7
 800d3f6:	f107 030c 	add.w	r3, r7, #12
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 ff9b 	bl	800e338 <xTaskCheckForTimeOut>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d132      	bne.n	800d46e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40a:	f000 f9f2 	bl	800d7f2 <prvIsQueueEmpty>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d026      	beq.n	800d462 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d109      	bne.n	800d430 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d41c:	f7ff f8ba 	bl	800c594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	4618      	mov	r0, r3
 800d426:	f001 f8f9 	bl	800e61c <xTaskPriorityInherit>
 800d42a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d42c:	f7ff f8e2 	bl	800c5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	3324      	adds	r3, #36	; 0x24
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 feb3 	bl	800e1a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d440:	f000 f985 	bl	800d74e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d444:	f000 fcd6 	bl	800ddf4 <xTaskResumeAll>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f47f af68 	bne.w	800d320 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d450:	4b18      	ldr	r3, [pc, #96]	; (800d4b4 <xQueueSemaphoreTake+0x214>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	e75e      	b.n	800d320 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d464:	f000 f973 	bl	800d74e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d468:	f000 fcc4 	bl	800ddf4 <xTaskResumeAll>
 800d46c:	e758      	b.n	800d320 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d46e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d470:	f000 f96d 	bl	800d74e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d474:	f000 fcbe 	bl	800ddf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d47a:	f000 f9ba 	bl	800d7f2 <prvIsQueueEmpty>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	f43f af4d 	beq.w	800d320 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00d      	beq.n	800d4a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d48c:	f7ff f882 	bl	800c594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d492:	f000 f8b4 	bl	800d5fe <prvGetDisinheritPriorityAfterTimeout>
 800d496:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 f992 	bl	800e7c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4a4:	f7ff f8a6 	bl	800c5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3738      	adds	r7, #56	; 0x38
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	e000ed04 	.word	0xe000ed04

0800d4b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08e      	sub	sp, #56	; 0x38
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10a      	bne.n	800d4e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	623b      	str	r3, [r7, #32]
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d103      	bne.n	800d4f2 <xQueueReceiveFromISR+0x3a>
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <xQueueReceiveFromISR+0x3e>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <xQueueReceiveFromISR+0x40>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	61fb      	str	r3, [r7, #28]
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d512:	f7ff f921 	bl	800c758 <vPortValidateInterruptPriority>
	__asm volatile
 800d516:	f3ef 8211 	mrs	r2, BASEPRI
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	61ba      	str	r2, [r7, #24]
 800d52c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d52e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d02f      	beq.n	800d59e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d54c:	f000 f8d9 	bl	800d702 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	1e5a      	subs	r2, r3, #1
 800d554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d112      	bne.n	800d588 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d016      	beq.n	800d598 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	3310      	adds	r3, #16
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fe68 	bl	800e244 <xTaskRemoveFromEventList>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00e      	beq.n	800d598 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	e007      	b.n	800d598 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d58c:	3301      	adds	r3, #1
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	b25a      	sxtb	r2, r3
 800d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d598:	2301      	movs	r3, #1
 800d59a:	637b      	str	r3, [r7, #52]	; 0x34
 800d59c:	e001      	b.n	800d5a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	f383 8811 	msr	BASEPRI, r3
}
 800d5ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3738      	adds	r7, #56	; 0x38
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10a      	bne.n	800d5e0 <vQueueDelete+0x28>
	__asm volatile
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	60bb      	str	r3, [r7, #8]
}
 800d5dc:	bf00      	nop
 800d5de:	e7fe      	b.n	800d5de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 f95f 	bl	800d8a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7fe fccd 	bl	800bf90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5f6:	bf00      	nop
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d006      	beq.n	800d61c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e001      	b.n	800d620 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d61c:	2300      	movs	r3, #0
 800d61e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d620:	68fb      	ldr	r3, [r7, #12]
	}
 800d622:	4618      	mov	r0, r3
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b086      	sub	sp, #24
 800d632:	af00      	add	r7, sp, #0
 800d634:	60f8      	str	r0, [r7, #12]
 800d636:	60b9      	str	r1, [r7, #8]
 800d638:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10d      	bne.n	800d668 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d14d      	bne.n	800d6f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	4618      	mov	r0, r3
 800d65a:	f001 f847 	bl	800e6ec <xTaskPriorityDisinherit>
 800d65e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	609a      	str	r2, [r3, #8]
 800d666:	e043      	b.n	800d6f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d119      	bne.n	800d6a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6858      	ldr	r0, [r3, #4]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	461a      	mov	r2, r3
 800d678:	68b9      	ldr	r1, [r7, #8]
 800d67a:	f00e f9e0 	bl	801ba3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d686:	441a      	add	r2, r3
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	429a      	cmp	r2, r3
 800d696:	d32b      	bcc.n	800d6f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	605a      	str	r2, [r3, #4]
 800d6a0:	e026      	b.n	800d6f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68d8      	ldr	r0, [r3, #12]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	68b9      	ldr	r1, [r7, #8]
 800d6ae:	f00e f9c6 	bl	801ba3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68da      	ldr	r2, [r3, #12]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ba:	425b      	negs	r3, r3
 800d6bc:	441a      	add	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d207      	bcs.n	800d6de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689a      	ldr	r2, [r3, #8]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d6:	425b      	negs	r3, r3
 800d6d8:	441a      	add	r2, r3
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d105      	bne.n	800d6f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6f8:	697b      	ldr	r3, [r7, #20]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d018      	beq.n	800d746 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71c:	441a      	add	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68da      	ldr	r2, [r3, #12]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d303      	bcc.n	800d736 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	68d9      	ldr	r1, [r3, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73e:	461a      	mov	r2, r3
 800d740:	6838      	ldr	r0, [r7, #0]
 800d742:	f00e f97c 	bl	801ba3e <memcpy>
	}
}
 800d746:	bf00      	nop
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d756:	f7fe ff1d 	bl	800c594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d760:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d762:	e011      	b.n	800d788 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d012      	beq.n	800d792 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3324      	adds	r3, #36	; 0x24
 800d770:	4618      	mov	r0, r3
 800d772:	f000 fd67 	bl	800e244 <xTaskRemoveFromEventList>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d77c:	f000 fe3e 	bl	800e3fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d780:	7bfb      	ldrb	r3, [r7, #15]
 800d782:	3b01      	subs	r3, #1
 800d784:	b2db      	uxtb	r3, r3
 800d786:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	dce9      	bgt.n	800d764 <prvUnlockQueue+0x16>
 800d790:	e000      	b.n	800d794 <prvUnlockQueue+0x46>
					break;
 800d792:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	22ff      	movs	r2, #255	; 0xff
 800d798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d79c:	f7fe ff2a 	bl	800c5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7a0:	f7fe fef8 	bl	800c594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ac:	e011      	b.n	800d7d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d012      	beq.n	800d7dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	3310      	adds	r3, #16
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 fd42 	bl	800e244 <xTaskRemoveFromEventList>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d001      	beq.n	800d7ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7c6:	f000 fe19 	bl	800e3fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dce9      	bgt.n	800d7ae <prvUnlockQueue+0x60>
 800d7da:	e000      	b.n	800d7de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	22ff      	movs	r2, #255	; 0xff
 800d7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7e6:	f7fe ff05 	bl	800c5f4 <vPortExitCritical>
}
 800d7ea:	bf00      	nop
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7fa:	f7fe fecb 	bl	800c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d802:	2b00      	cmp	r3, #0
 800d804:	d102      	bne.n	800d80c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d806:	2301      	movs	r3, #1
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	e001      	b.n	800d810 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d810:	f7fe fef0 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800d814:	68fb      	ldr	r3, [r7, #12]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d826:	f7fe feb5 	bl	800c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d832:	429a      	cmp	r2, r3
 800d834:	d102      	bne.n	800d83c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d836:	2301      	movs	r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
 800d83a:	e001      	b.n	800d840 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d83c:	2300      	movs	r3, #0
 800d83e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d840:	f7fe fed8 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800d844:	68fb      	ldr	r3, [r7, #12]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
	...

0800d850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	e014      	b.n	800d88a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d860:	4a0f      	ldr	r2, [pc, #60]	; (800d8a0 <vQueueAddToRegistry+0x50>)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10b      	bne.n	800d884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d86c:	490c      	ldr	r1, [pc, #48]	; (800d8a0 <vQueueAddToRegistry+0x50>)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d876:	4a0a      	ldr	r2, [pc, #40]	; (800d8a0 <vQueueAddToRegistry+0x50>)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	4413      	add	r3, r2
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d882:	e006      	b.n	800d892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b07      	cmp	r3, #7
 800d88e:	d9e7      	bls.n	800d860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d890:	bf00      	nop
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	240090b4 	.word	0x240090b4

0800d8a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	e016      	b.n	800d8e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8b2:	4a10      	ldr	r2, [pc, #64]	; (800d8f4 <vQueueUnregisterQueue+0x50>)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	00db      	lsls	r3, r3, #3
 800d8b8:	4413      	add	r3, r2
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d10b      	bne.n	800d8da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8c2:	4a0c      	ldr	r2, [pc, #48]	; (800d8f4 <vQueueUnregisterQueue+0x50>)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8cc:	4a09      	ldr	r2, [pc, #36]	; (800d8f4 <vQueueUnregisterQueue+0x50>)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	4413      	add	r3, r2
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	605a      	str	r2, [r3, #4]
				break;
 800d8d8:	e006      	b.n	800d8e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b07      	cmp	r3, #7
 800d8e4:	d9e5      	bls.n	800d8b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8e6:	bf00      	nop
 800d8e8:	bf00      	nop
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr
 800d8f4:	240090b4 	.word	0x240090b4

0800d8f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d908:	f7fe fe44 	bl	800c594 <vPortEnterCritical>
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d912:	b25b      	sxtb	r3, r3
 800d914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d918:	d103      	bne.n	800d922 <vQueueWaitForMessageRestricted+0x2a>
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d928:	b25b      	sxtb	r3, r3
 800d92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92e:	d103      	bne.n	800d938 <vQueueWaitForMessageRestricted+0x40>
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d938:	f7fe fe5c 	bl	800c5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	2b00      	cmp	r3, #0
 800d942:	d106      	bne.n	800d952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	3324      	adds	r3, #36	; 0x24
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 fc4d 	bl	800e1ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d952:	6978      	ldr	r0, [r7, #20]
 800d954:	f7ff fefb 	bl	800d74e <prvUnlockQueue>
	}
 800d958:	bf00      	nop
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08e      	sub	sp, #56	; 0x38
 800d964:	af04      	add	r7, sp, #16
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
 800d96c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10a      	bne.n	800d98a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	623b      	str	r3, [r7, #32]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10a      	bne.n	800d9a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	61fb      	str	r3, [r7, #28]
}
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9a6:	235c      	movs	r3, #92	; 0x5c
 800d9a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b5c      	cmp	r3, #92	; 0x5c
 800d9ae:	d00a      	beq.n	800d9c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	61bb      	str	r3, [r7, #24]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d01e      	beq.n	800da0c <xTaskCreateStatic+0xac>
 800d9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01b      	beq.n	800da0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	f107 0314 	add.w	r3, r7, #20
 800d9f2:	9301      	str	r3, [sp, #4]
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	68b9      	ldr	r1, [r7, #8]
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 f850 	bl	800daa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da06:	f000 f8dd 	bl	800dbc4 <prvAddNewTaskToReadyList>
 800da0a:	e001      	b.n	800da10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da0c:	2300      	movs	r3, #0
 800da0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da10:	697b      	ldr	r3, [r7, #20]
	}
 800da12:	4618      	mov	r0, r3
 800da14:	3728      	adds	r7, #40	; 0x28
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b08c      	sub	sp, #48	; 0x30
 800da1e:	af04      	add	r7, sp, #16
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	603b      	str	r3, [r7, #0]
 800da26:	4613      	mov	r3, r2
 800da28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da2a:	88fb      	ldrh	r3, [r7, #6]
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe f9e2 	bl	800bdf8 <pvPortMalloc>
 800da34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00e      	beq.n	800da5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da3c:	205c      	movs	r0, #92	; 0x5c
 800da3e:	f7fe f9db 	bl	800bdf8 <pvPortMalloc>
 800da42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	631a      	str	r2, [r3, #48]	; 0x30
 800da50:	e005      	b.n	800da5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7fe fa9c 	bl	800bf90 <vPortFree>
 800da58:	e001      	b.n	800da5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da6c:	88fa      	ldrh	r2, [r7, #6]
 800da6e:	2300      	movs	r3, #0
 800da70:	9303      	str	r3, [sp, #12]
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 f80e 	bl	800daa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da88:	69f8      	ldr	r0, [r7, #28]
 800da8a:	f000 f89b 	bl	800dbc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da8e:	2301      	movs	r3, #1
 800da90:	61bb      	str	r3, [r7, #24]
 800da92:	e002      	b.n	800da9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da94:	f04f 33ff 	mov.w	r3, #4294967295
 800da98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da9a:	69bb      	ldr	r3, [r7, #24]
	}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3720      	adds	r7, #32
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	461a      	mov	r2, r3
 800dabc:	21a5      	movs	r1, #165	; 0xa5
 800dabe:	f00d ff48 	bl	801b952 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dac6:	6879      	ldr	r1, [r7, #4]
 800dac8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dacc:	440b      	add	r3, r1
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f023 0307 	bic.w	r3, r3, #7
 800dada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <prvInitialiseNewTask+0x58>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	617b      	str	r3, [r7, #20]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01f      	beq.n	800db42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db02:	2300      	movs	r3, #0
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	e012      	b.n	800db2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	4413      	add	r3, r2
 800db0e:	7819      	ldrb	r1, [r3, #0]
 800db10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	4413      	add	r3, r2
 800db16:	3334      	adds	r3, #52	; 0x34
 800db18:	460a      	mov	r2, r1
 800db1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	3301      	adds	r3, #1
 800db2c:	61fb      	str	r3, [r7, #28]
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	2b0f      	cmp	r3, #15
 800db32:	d9e9      	bls.n	800db08 <prvInitialiseNewTask+0x64>
 800db34:	e000      	b.n	800db38 <prvInitialiseNewTask+0x94>
			{
				break;
 800db36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db40:	e003      	b.n	800db4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	2b37      	cmp	r3, #55	; 0x37
 800db4e:	d901      	bls.n	800db54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db50:	2337      	movs	r3, #55	; 0x37
 800db52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db62:	2200      	movs	r2, #0
 800db64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	3304      	adds	r3, #4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fb4e 	bl	800c20c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db72:	3318      	adds	r3, #24
 800db74:	4618      	mov	r0, r3
 800db76:	f7fe fb49 	bl	800c20c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	2200      	movs	r2, #0
 800db94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	68f9      	ldr	r1, [r7, #12]
 800dba2:	69b8      	ldr	r0, [r7, #24]
 800dba4:	f7fe fbc6 	bl	800c334 <pxPortInitialiseStack>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbba:	bf00      	nop
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbcc:	f7fe fce2 	bl	800c594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbd0:	4b2d      	ldr	r3, [pc, #180]	; (800dc88 <prvAddNewTaskToReadyList+0xc4>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	4a2c      	ldr	r2, [pc, #176]	; (800dc88 <prvAddNewTaskToReadyList+0xc4>)
 800dbd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbda:	4b2c      	ldr	r3, [pc, #176]	; (800dc8c <prvAddNewTaskToReadyList+0xc8>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d109      	bne.n	800dbf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbe2:	4a2a      	ldr	r2, [pc, #168]	; (800dc8c <prvAddNewTaskToReadyList+0xc8>)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbe8:	4b27      	ldr	r3, [pc, #156]	; (800dc88 <prvAddNewTaskToReadyList+0xc4>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d110      	bne.n	800dc12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbf0:	f000 fc28 	bl	800e444 <prvInitialiseTaskLists>
 800dbf4:	e00d      	b.n	800dc12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbf6:	4b26      	ldr	r3, [pc, #152]	; (800dc90 <prvAddNewTaskToReadyList+0xcc>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbfe:	4b23      	ldr	r3, [pc, #140]	; (800dc8c <prvAddNewTaskToReadyList+0xc8>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d802      	bhi.n	800dc12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc0c:	4a1f      	ldr	r2, [pc, #124]	; (800dc8c <prvAddNewTaskToReadyList+0xc8>)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc12:	4b20      	ldr	r3, [pc, #128]	; (800dc94 <prvAddNewTaskToReadyList+0xd0>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3301      	adds	r3, #1
 800dc18:	4a1e      	ldr	r2, [pc, #120]	; (800dc94 <prvAddNewTaskToReadyList+0xd0>)
 800dc1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc1c:	4b1d      	ldr	r3, [pc, #116]	; (800dc94 <prvAddNewTaskToReadyList+0xd0>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc28:	4b1b      	ldr	r3, [pc, #108]	; (800dc98 <prvAddNewTaskToReadyList+0xd4>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d903      	bls.n	800dc38 <prvAddNewTaskToReadyList+0x74>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc34:	4a18      	ldr	r2, [pc, #96]	; (800dc98 <prvAddNewTaskToReadyList+0xd4>)
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4a15      	ldr	r2, [pc, #84]	; (800dc9c <prvAddNewTaskToReadyList+0xd8>)
 800dc46:	441a      	add	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f7fe fae9 	bl	800c226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc54:	f7fe fcce 	bl	800c5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc58:	4b0d      	ldr	r3, [pc, #52]	; (800dc90 <prvAddNewTaskToReadyList+0xcc>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00e      	beq.n	800dc7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc60:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <prvAddNewTaskToReadyList+0xc8>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d207      	bcs.n	800dc7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc6e:	4b0c      	ldr	r3, [pc, #48]	; (800dca0 <prvAddNewTaskToReadyList+0xdc>)
 800dc70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc7e:	bf00      	nop
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	240095c8 	.word	0x240095c8
 800dc8c:	240090f4 	.word	0x240090f4
 800dc90:	240095d4 	.word	0x240095d4
 800dc94:	240095e4 	.word	0x240095e4
 800dc98:	240095d0 	.word	0x240095d0
 800dc9c:	240090f8 	.word	0x240090f8
 800dca0:	e000ed04 	.word	0xe000ed04

0800dca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d017      	beq.n	800dce6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcb6:	4b13      	ldr	r3, [pc, #76]	; (800dd04 <vTaskDelay+0x60>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00a      	beq.n	800dcd4 <vTaskDelay+0x30>
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	60bb      	str	r3, [r7, #8]
}
 800dcd0:	bf00      	nop
 800dcd2:	e7fe      	b.n	800dcd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dcd4:	f000 f880 	bl	800ddd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dcd8:	2100      	movs	r1, #0
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fe0a 	bl	800e8f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dce0:	f000 f888 	bl	800ddf4 <xTaskResumeAll>
 800dce4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d107      	bne.n	800dcfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dcec:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <vTaskDelay+0x64>)
 800dcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	240095f0 	.word	0x240095f0
 800dd08:	e000ed04 	.word	0xe000ed04

0800dd0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08a      	sub	sp, #40	; 0x28
 800dd10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd1a:	463a      	mov	r2, r7
 800dd1c:	1d39      	adds	r1, r7, #4
 800dd1e:	f107 0308 	add.w	r3, r7, #8
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe f834 	bl	800bd90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	9202      	str	r2, [sp, #8]
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	2300      	movs	r3, #0
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	2300      	movs	r3, #0
 800dd38:	460a      	mov	r2, r1
 800dd3a:	4921      	ldr	r1, [pc, #132]	; (800ddc0 <vTaskStartScheduler+0xb4>)
 800dd3c:	4821      	ldr	r0, [pc, #132]	; (800ddc4 <vTaskStartScheduler+0xb8>)
 800dd3e:	f7ff fe0f 	bl	800d960 <xTaskCreateStatic>
 800dd42:	4603      	mov	r3, r0
 800dd44:	4a20      	ldr	r2, [pc, #128]	; (800ddc8 <vTaskStartScheduler+0xbc>)
 800dd46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd48:	4b1f      	ldr	r3, [pc, #124]	; (800ddc8 <vTaskStartScheduler+0xbc>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd50:	2301      	movs	r3, #1
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	e001      	b.n	800dd5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d102      	bne.n	800dd66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd60:	f000 fe1c 	bl	800e99c <xTimerCreateTimerTask>
 800dd64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d116      	bne.n	800dd9a <vTaskStartScheduler+0x8e>
	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	613b      	str	r3, [r7, #16]
}
 800dd7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd80:	4b12      	ldr	r3, [pc, #72]	; (800ddcc <vTaskStartScheduler+0xc0>)
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd88:	4b11      	ldr	r3, [pc, #68]	; (800ddd0 <vTaskStartScheduler+0xc4>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd8e:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <vTaskStartScheduler+0xc8>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd94:	f7fe fb5c 	bl	800c450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd98:	e00e      	b.n	800ddb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda0:	d10a      	bne.n	800ddb8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	60fb      	str	r3, [r7, #12]
}
 800ddb4:	bf00      	nop
 800ddb6:	e7fe      	b.n	800ddb6 <vTaskStartScheduler+0xaa>
}
 800ddb8:	bf00      	nop
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	0801c734 	.word	0x0801c734
 800ddc4:	0800e415 	.word	0x0800e415
 800ddc8:	240095ec 	.word	0x240095ec
 800ddcc:	240095e8 	.word	0x240095e8
 800ddd0:	240095d4 	.word	0x240095d4
 800ddd4:	240095cc 	.word	0x240095cc

0800ddd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddd8:	b480      	push	{r7}
 800ddda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dddc:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <vTaskSuspendAll+0x18>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3301      	adds	r3, #1
 800dde2:	4a03      	ldr	r2, [pc, #12]	; (800ddf0 <vTaskSuspendAll+0x18>)
 800dde4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dde6:	bf00      	nop
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	240095f0 	.word	0x240095f0

0800ddf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de02:	4b42      	ldr	r3, [pc, #264]	; (800df0c <xTaskResumeAll+0x118>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10a      	bne.n	800de20 <xTaskResumeAll+0x2c>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	603b      	str	r3, [r7, #0]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de20:	f7fe fbb8 	bl	800c594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de24:	4b39      	ldr	r3, [pc, #228]	; (800df0c <xTaskResumeAll+0x118>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3b01      	subs	r3, #1
 800de2a:	4a38      	ldr	r2, [pc, #224]	; (800df0c <xTaskResumeAll+0x118>)
 800de2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de2e:	4b37      	ldr	r3, [pc, #220]	; (800df0c <xTaskResumeAll+0x118>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d162      	bne.n	800defc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de36:	4b36      	ldr	r3, [pc, #216]	; (800df10 <xTaskResumeAll+0x11c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d05e      	beq.n	800defc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de3e:	e02f      	b.n	800dea0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de40:	4b34      	ldr	r3, [pc, #208]	; (800df14 <xTaskResumeAll+0x120>)
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3318      	adds	r3, #24
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fa47 	bl	800c2e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3304      	adds	r3, #4
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fa42 	bl	800c2e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de60:	4b2d      	ldr	r3, [pc, #180]	; (800df18 <xTaskResumeAll+0x124>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	429a      	cmp	r2, r3
 800de66:	d903      	bls.n	800de70 <xTaskResumeAll+0x7c>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	4a2a      	ldr	r2, [pc, #168]	; (800df18 <xTaskResumeAll+0x124>)
 800de6e:	6013      	str	r3, [r2, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de74:	4613      	mov	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4a27      	ldr	r2, [pc, #156]	; (800df1c <xTaskResumeAll+0x128>)
 800de7e:	441a      	add	r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3304      	adds	r3, #4
 800de84:	4619      	mov	r1, r3
 800de86:	4610      	mov	r0, r2
 800de88:	f7fe f9cd 	bl	800c226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de90:	4b23      	ldr	r3, [pc, #140]	; (800df20 <xTaskResumeAll+0x12c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de96:	429a      	cmp	r2, r3
 800de98:	d302      	bcc.n	800dea0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de9a:	4b22      	ldr	r3, [pc, #136]	; (800df24 <xTaskResumeAll+0x130>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dea0:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <xTaskResumeAll+0x120>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1cb      	bne.n	800de40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800deae:	f000 fb67 	bl	800e580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800deb2:	4b1d      	ldr	r3, [pc, #116]	; (800df28 <xTaskResumeAll+0x134>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d010      	beq.n	800dee0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800debe:	f000 f859 	bl	800df74 <xTaskIncrementTick>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dec8:	4b16      	ldr	r3, [pc, #88]	; (800df24 <xTaskResumeAll+0x130>)
 800deca:	2201      	movs	r2, #1
 800decc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1f1      	bne.n	800debe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800deda:	4b13      	ldr	r3, [pc, #76]	; (800df28 <xTaskResumeAll+0x134>)
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dee0:	4b10      	ldr	r3, [pc, #64]	; (800df24 <xTaskResumeAll+0x130>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d009      	beq.n	800defc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dee8:	2301      	movs	r3, #1
 800deea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800deec:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <xTaskResumeAll+0x138>)
 800deee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	f3bf 8f4f 	dsb	sy
 800def8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800defc:	f7fe fb7a 	bl	800c5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800df00:	68bb      	ldr	r3, [r7, #8]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	240095f0 	.word	0x240095f0
 800df10:	240095c8 	.word	0x240095c8
 800df14:	24009588 	.word	0x24009588
 800df18:	240095d0 	.word	0x240095d0
 800df1c:	240090f8 	.word	0x240090f8
 800df20:	240090f4 	.word	0x240090f4
 800df24:	240095dc 	.word	0x240095dc
 800df28:	240095d8 	.word	0x240095d8
 800df2c:	e000ed04 	.word	0xe000ed04

0800df30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df36:	4b05      	ldr	r3, [pc, #20]	; (800df4c <xTaskGetTickCount+0x1c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df3c:	687b      	ldr	r3, [r7, #4]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	240095cc 	.word	0x240095cc

0800df50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df56:	f7fe fbff 	bl	800c758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800df5a:	2300      	movs	r3, #0
 800df5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800df5e:	4b04      	ldr	r3, [pc, #16]	; (800df70 <xTaskGetTickCountFromISR+0x20>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df64:	683b      	ldr	r3, [r7, #0]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	240095cc 	.word	0x240095cc

0800df74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df7e:	4b4f      	ldr	r3, [pc, #316]	; (800e0bc <xTaskIncrementTick+0x148>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f040 808f 	bne.w	800e0a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df88:	4b4d      	ldr	r3, [pc, #308]	; (800e0c0 <xTaskIncrementTick+0x14c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df90:	4a4b      	ldr	r2, [pc, #300]	; (800e0c0 <xTaskIncrementTick+0x14c>)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d120      	bne.n	800dfde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df9c:	4b49      	ldr	r3, [pc, #292]	; (800e0c4 <xTaskIncrementTick+0x150>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00a      	beq.n	800dfbc <xTaskIncrementTick+0x48>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	603b      	str	r3, [r7, #0]
}
 800dfb8:	bf00      	nop
 800dfba:	e7fe      	b.n	800dfba <xTaskIncrementTick+0x46>
 800dfbc:	4b41      	ldr	r3, [pc, #260]	; (800e0c4 <xTaskIncrementTick+0x150>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	4b41      	ldr	r3, [pc, #260]	; (800e0c8 <xTaskIncrementTick+0x154>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a3f      	ldr	r2, [pc, #252]	; (800e0c4 <xTaskIncrementTick+0x150>)
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	4a3f      	ldr	r2, [pc, #252]	; (800e0c8 <xTaskIncrementTick+0x154>)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6013      	str	r3, [r2, #0]
 800dfd0:	4b3e      	ldr	r3, [pc, #248]	; (800e0cc <xTaskIncrementTick+0x158>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	4a3d      	ldr	r2, [pc, #244]	; (800e0cc <xTaskIncrementTick+0x158>)
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	f000 fad1 	bl	800e580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfde:	4b3c      	ldr	r3, [pc, #240]	; (800e0d0 <xTaskIncrementTick+0x15c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d349      	bcc.n	800e07c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe8:	4b36      	ldr	r3, [pc, #216]	; (800e0c4 <xTaskIncrementTick+0x150>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d104      	bne.n	800dffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dff2:	4b37      	ldr	r3, [pc, #220]	; (800e0d0 <xTaskIncrementTick+0x15c>)
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295
 800dff8:	601a      	str	r2, [r3, #0]
					break;
 800dffa:	e03f      	b.n	800e07c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dffc:	4b31      	ldr	r3, [pc, #196]	; (800e0c4 <xTaskIncrementTick+0x150>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	d203      	bcs.n	800e01c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e014:	4a2e      	ldr	r2, [pc, #184]	; (800e0d0 <xTaskIncrementTick+0x15c>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e01a:	e02f      	b.n	800e07c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	3304      	adds	r3, #4
 800e020:	4618      	mov	r0, r3
 800e022:	f7fe f95d 	bl	800c2e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d004      	beq.n	800e038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	3318      	adds	r3, #24
 800e032:	4618      	mov	r0, r3
 800e034:	f7fe f954 	bl	800c2e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03c:	4b25      	ldr	r3, [pc, #148]	; (800e0d4 <xTaskIncrementTick+0x160>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d903      	bls.n	800e04c <xTaskIncrementTick+0xd8>
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	4a22      	ldr	r2, [pc, #136]	; (800e0d4 <xTaskIncrementTick+0x160>)
 800e04a:	6013      	str	r3, [r2, #0]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	4613      	mov	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4a1f      	ldr	r2, [pc, #124]	; (800e0d8 <xTaskIncrementTick+0x164>)
 800e05a:	441a      	add	r2, r3
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	3304      	adds	r3, #4
 800e060:	4619      	mov	r1, r3
 800e062:	4610      	mov	r0, r2
 800e064:	f7fe f8df 	bl	800c226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	4b1b      	ldr	r3, [pc, #108]	; (800e0dc <xTaskIncrementTick+0x168>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e072:	429a      	cmp	r2, r3
 800e074:	d3b8      	bcc.n	800dfe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e076:	2301      	movs	r3, #1
 800e078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e07a:	e7b5      	b.n	800dfe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e07c:	4b17      	ldr	r3, [pc, #92]	; (800e0dc <xTaskIncrementTick+0x168>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e082:	4915      	ldr	r1, [pc, #84]	; (800e0d8 <xTaskIncrementTick+0x164>)
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	440b      	add	r3, r1
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d901      	bls.n	800e098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e094:	2301      	movs	r3, #1
 800e096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e098:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <xTaskIncrementTick+0x16c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d007      	beq.n	800e0b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	617b      	str	r3, [r7, #20]
 800e0a4:	e004      	b.n	800e0b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0a6:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <xTaskIncrementTick+0x170>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	4a0d      	ldr	r2, [pc, #52]	; (800e0e4 <xTaskIncrementTick+0x170>)
 800e0ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0b0:	697b      	ldr	r3, [r7, #20]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3718      	adds	r7, #24
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	240095f0 	.word	0x240095f0
 800e0c0:	240095cc 	.word	0x240095cc
 800e0c4:	24009580 	.word	0x24009580
 800e0c8:	24009584 	.word	0x24009584
 800e0cc:	240095e0 	.word	0x240095e0
 800e0d0:	240095e8 	.word	0x240095e8
 800e0d4:	240095d0 	.word	0x240095d0
 800e0d8:	240090f8 	.word	0x240090f8
 800e0dc:	240090f4 	.word	0x240090f4
 800e0e0:	240095dc 	.word	0x240095dc
 800e0e4:	240095d8 	.word	0x240095d8

0800e0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0ee:	4b28      	ldr	r3, [pc, #160]	; (800e190 <vTaskSwitchContext+0xa8>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d003      	beq.n	800e0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0f6:	4b27      	ldr	r3, [pc, #156]	; (800e194 <vTaskSwitchContext+0xac>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0fc:	e041      	b.n	800e182 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e0fe:	4b25      	ldr	r3, [pc, #148]	; (800e194 <vTaskSwitchContext+0xac>)
 800e100:	2200      	movs	r2, #0
 800e102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e104:	4b24      	ldr	r3, [pc, #144]	; (800e198 <vTaskSwitchContext+0xb0>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	e010      	b.n	800e12e <vTaskSwitchContext+0x46>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <vTaskSwitchContext+0x40>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	607b      	str	r3, [r7, #4]
}
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <vTaskSwitchContext+0x3e>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	60fb      	str	r3, [r7, #12]
 800e12e:	491b      	ldr	r1, [pc, #108]	; (800e19c <vTaskSwitchContext+0xb4>)
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	4613      	mov	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	440b      	add	r3, r1
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0e4      	beq.n	800e10c <vTaskSwitchContext+0x24>
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4613      	mov	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4a13      	ldr	r2, [pc, #76]	; (800e19c <vTaskSwitchContext+0xb4>)
 800e14e:	4413      	add	r3, r2
 800e150:	60bb      	str	r3, [r7, #8]
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	605a      	str	r2, [r3, #4]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	3308      	adds	r3, #8
 800e164:	429a      	cmp	r2, r3
 800e166:	d104      	bne.n	800e172 <vTaskSwitchContext+0x8a>
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	685a      	ldr	r2, [r3, #4]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	605a      	str	r2, [r3, #4]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	4a09      	ldr	r2, [pc, #36]	; (800e1a0 <vTaskSwitchContext+0xb8>)
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	4a06      	ldr	r2, [pc, #24]	; (800e198 <vTaskSwitchContext+0xb0>)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6013      	str	r3, [r2, #0]
}
 800e182:	bf00      	nop
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	240095f0 	.word	0x240095f0
 800e194:	240095dc 	.word	0x240095dc
 800e198:	240095d0 	.word	0x240095d0
 800e19c:	240090f8 	.word	0x240090f8
 800e1a0:	240090f4 	.word	0x240090f4

0800e1a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10a      	bne.n	800e1ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	60fb      	str	r3, [r7, #12]
}
 800e1c6:	bf00      	nop
 800e1c8:	e7fe      	b.n	800e1c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1ca:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <vTaskPlaceOnEventList+0x44>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3318      	adds	r3, #24
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7fe f84b 	bl	800c26e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1d8:	2101      	movs	r1, #1
 800e1da:	6838      	ldr	r0, [r7, #0]
 800e1dc:	f000 fb8a 	bl	800e8f4 <prvAddCurrentTaskToDelayedList>
}
 800e1e0:	bf00      	nop
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	240090f4 	.word	0x240090f4

0800e1ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	617b      	str	r3, [r7, #20]
}
 800e210:	bf00      	nop
 800e212:	e7fe      	b.n	800e212 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e214:	4b0a      	ldr	r3, [pc, #40]	; (800e240 <vTaskPlaceOnEventListRestricted+0x54>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3318      	adds	r3, #24
 800e21a:	4619      	mov	r1, r3
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7fe f802 	bl	800c226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e228:	f04f 33ff 	mov.w	r3, #4294967295
 800e22c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	68b8      	ldr	r0, [r7, #8]
 800e232:	f000 fb5f 	bl	800e8f4 <prvAddCurrentTaskToDelayedList>
	}
 800e236:	bf00      	nop
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	240090f4 	.word	0x240090f4

0800e244 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10a      	bne.n	800e270 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	60fb      	str	r3, [r7, #12]
}
 800e26c:	bf00      	nop
 800e26e:	e7fe      	b.n	800e26e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	3318      	adds	r3, #24
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe f833 	bl	800c2e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e27a:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <xTaskRemoveFromEventList+0xb0>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d11d      	bne.n	800e2be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	3304      	adds	r3, #4
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe f82a 	bl	800c2e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e290:	4b19      	ldr	r3, [pc, #100]	; (800e2f8 <xTaskRemoveFromEventList+0xb4>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d903      	bls.n	800e2a0 <xTaskRemoveFromEventList+0x5c>
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	4a16      	ldr	r2, [pc, #88]	; (800e2f8 <xTaskRemoveFromEventList+0xb4>)
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4a13      	ldr	r2, [pc, #76]	; (800e2fc <xTaskRemoveFromEventList+0xb8>)
 800e2ae:	441a      	add	r2, r3
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f7fd ffb5 	bl	800c226 <vListInsertEnd>
 800e2bc:	e005      	b.n	800e2ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	3318      	adds	r3, #24
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	480e      	ldr	r0, [pc, #56]	; (800e300 <xTaskRemoveFromEventList+0xbc>)
 800e2c6:	f7fd ffae 	bl	800c226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <xTaskRemoveFromEventList+0xc0>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d905      	bls.n	800e2e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	; (800e308 <xTaskRemoveFromEventList+0xc4>)
 800e2de:	2201      	movs	r2, #1
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	e001      	b.n	800e2e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e2e8:	697b      	ldr	r3, [r7, #20]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	240095f0 	.word	0x240095f0
 800e2f8:	240095d0 	.word	0x240095d0
 800e2fc:	240090f8 	.word	0x240090f8
 800e300:	24009588 	.word	0x24009588
 800e304:	240090f4 	.word	0x240090f4
 800e308:	240095dc 	.word	0x240095dc

0800e30c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e314:	4b06      	ldr	r3, [pc, #24]	; (800e330 <vTaskInternalSetTimeOutState+0x24>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e31c:	4b05      	ldr	r3, [pc, #20]	; (800e334 <vTaskInternalSetTimeOutState+0x28>)
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	605a      	str	r2, [r3, #4]
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	240095e0 	.word	0x240095e0
 800e334:	240095cc 	.word	0x240095cc

0800e338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	613b      	str	r3, [r7, #16]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	60fb      	str	r3, [r7, #12]
}
 800e376:	bf00      	nop
 800e378:	e7fe      	b.n	800e378 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e37a:	f7fe f90b 	bl	800c594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e37e:	4b1d      	ldr	r3, [pc, #116]	; (800e3f4 <xTaskCheckForTimeOut+0xbc>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	69ba      	ldr	r2, [r7, #24]
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e396:	d102      	bne.n	800e39e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e398:	2300      	movs	r3, #0
 800e39a:	61fb      	str	r3, [r7, #28]
 800e39c:	e023      	b.n	800e3e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	4b15      	ldr	r3, [pc, #84]	; (800e3f8 <xTaskCheckForTimeOut+0xc0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d007      	beq.n	800e3ba <xTaskCheckForTimeOut+0x82>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d302      	bcc.n	800e3ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	61fb      	str	r3, [r7, #28]
 800e3b8:	e015      	b.n	800e3e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d20b      	bcs.n	800e3dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	1ad2      	subs	r2, r2, r3
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7ff ff9b 	bl	800e30c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	e004      	b.n	800e3e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e3e6:	f7fe f905 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3720      	adds	r7, #32
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	240095cc 	.word	0x240095cc
 800e3f8:	240095e0 	.word	0x240095e0

0800e3fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e400:	4b03      	ldr	r3, [pc, #12]	; (800e410 <vTaskMissedYield+0x14>)
 800e402:	2201      	movs	r2, #1
 800e404:	601a      	str	r2, [r3, #0]
}
 800e406:	bf00      	nop
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	240095dc 	.word	0x240095dc

0800e414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e41c:	f000 f852 	bl	800e4c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e420:	4b06      	ldr	r3, [pc, #24]	; (800e43c <prvIdleTask+0x28>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d9f9      	bls.n	800e41c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e428:	4b05      	ldr	r3, [pc, #20]	; (800e440 <prvIdleTask+0x2c>)
 800e42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e438:	e7f0      	b.n	800e41c <prvIdleTask+0x8>
 800e43a:	bf00      	nop
 800e43c:	240090f8 	.word	0x240090f8
 800e440:	e000ed04 	.word	0xe000ed04

0800e444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e44a:	2300      	movs	r3, #0
 800e44c:	607b      	str	r3, [r7, #4]
 800e44e:	e00c      	b.n	800e46a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	4613      	mov	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4a12      	ldr	r2, [pc, #72]	; (800e4a4 <prvInitialiseTaskLists+0x60>)
 800e45c:	4413      	add	r3, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fd feb4 	bl	800c1cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	3301      	adds	r3, #1
 800e468:	607b      	str	r3, [r7, #4]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b37      	cmp	r3, #55	; 0x37
 800e46e:	d9ef      	bls.n	800e450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e470:	480d      	ldr	r0, [pc, #52]	; (800e4a8 <prvInitialiseTaskLists+0x64>)
 800e472:	f7fd feab 	bl	800c1cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e476:	480d      	ldr	r0, [pc, #52]	; (800e4ac <prvInitialiseTaskLists+0x68>)
 800e478:	f7fd fea8 	bl	800c1cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e47c:	480c      	ldr	r0, [pc, #48]	; (800e4b0 <prvInitialiseTaskLists+0x6c>)
 800e47e:	f7fd fea5 	bl	800c1cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e482:	480c      	ldr	r0, [pc, #48]	; (800e4b4 <prvInitialiseTaskLists+0x70>)
 800e484:	f7fd fea2 	bl	800c1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e488:	480b      	ldr	r0, [pc, #44]	; (800e4b8 <prvInitialiseTaskLists+0x74>)
 800e48a:	f7fd fe9f 	bl	800c1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e48e:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <prvInitialiseTaskLists+0x78>)
 800e490:	4a05      	ldr	r2, [pc, #20]	; (800e4a8 <prvInitialiseTaskLists+0x64>)
 800e492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e494:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <prvInitialiseTaskLists+0x7c>)
 800e496:	4a05      	ldr	r2, [pc, #20]	; (800e4ac <prvInitialiseTaskLists+0x68>)
 800e498:	601a      	str	r2, [r3, #0]
}
 800e49a:	bf00      	nop
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	240090f8 	.word	0x240090f8
 800e4a8:	24009558 	.word	0x24009558
 800e4ac:	2400956c 	.word	0x2400956c
 800e4b0:	24009588 	.word	0x24009588
 800e4b4:	2400959c 	.word	0x2400959c
 800e4b8:	240095b4 	.word	0x240095b4
 800e4bc:	24009580 	.word	0x24009580
 800e4c0:	24009584 	.word	0x24009584

0800e4c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4ca:	e019      	b.n	800e500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4cc:	f7fe f862 	bl	800c594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d0:	4b10      	ldr	r3, [pc, #64]	; (800e514 <prvCheckTasksWaitingTermination+0x50>)
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fd feff 	bl	800c2e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <prvCheckTasksWaitingTermination+0x54>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	4a0b      	ldr	r2, [pc, #44]	; (800e518 <prvCheckTasksWaitingTermination+0x54>)
 800e4ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4ec:	4b0b      	ldr	r3, [pc, #44]	; (800e51c <prvCheckTasksWaitingTermination+0x58>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	4a0a      	ldr	r2, [pc, #40]	; (800e51c <prvCheckTasksWaitingTermination+0x58>)
 800e4f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4f6:	f7fe f87d 	bl	800c5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f810 	bl	800e520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e500:	4b06      	ldr	r3, [pc, #24]	; (800e51c <prvCheckTasksWaitingTermination+0x58>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1e1      	bne.n	800e4cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	2400959c 	.word	0x2400959c
 800e518:	240095c8 	.word	0x240095c8
 800e51c:	240095b0 	.word	0x240095b0

0800e520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d108      	bne.n	800e544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e536:	4618      	mov	r0, r3
 800e538:	f7fd fd2a 	bl	800bf90 <vPortFree>
				vPortFree( pxTCB );
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7fd fd27 	bl	800bf90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e542:	e018      	b.n	800e576 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d103      	bne.n	800e556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7fd fd1e 	bl	800bf90 <vPortFree>
	}
 800e554:	e00f      	b.n	800e576 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d00a      	beq.n	800e576 <prvDeleteTCB+0x56>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	60fb      	str	r3, [r7, #12]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <prvDeleteTCB+0x54>
	}
 800e576:	bf00      	nop
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
	...

0800e580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e586:	4b0c      	ldr	r3, [pc, #48]	; (800e5b8 <prvResetNextTaskUnblockTime+0x38>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e590:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <prvResetNextTaskUnblockTime+0x3c>)
 800e592:	f04f 32ff 	mov.w	r2, #4294967295
 800e596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e598:	e008      	b.n	800e5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e59a:	4b07      	ldr	r3, [pc, #28]	; (800e5b8 <prvResetNextTaskUnblockTime+0x38>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	4a04      	ldr	r2, [pc, #16]	; (800e5bc <prvResetNextTaskUnblockTime+0x3c>)
 800e5aa:	6013      	str	r3, [r2, #0]
}
 800e5ac:	bf00      	nop
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	24009580 	.word	0x24009580
 800e5bc:	240095e8 	.word	0x240095e8

0800e5c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e5c6:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <xTaskGetCurrentTaskHandle+0x1c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e5cc:	687b      	ldr	r3, [r7, #4]
	}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	240090f4 	.word	0x240090f4

0800e5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <xTaskGetSchedulerState+0x34>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d102      	bne.n	800e5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	607b      	str	r3, [r7, #4]
 800e5f2:	e008      	b.n	800e606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5f4:	4b08      	ldr	r3, [pc, #32]	; (800e618 <xTaskGetSchedulerState+0x38>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d102      	bne.n	800e602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	607b      	str	r3, [r7, #4]
 800e600:	e001      	b.n	800e606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e602:	2300      	movs	r3, #0
 800e604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e606:	687b      	ldr	r3, [r7, #4]
	}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	240095d4 	.word	0x240095d4
 800e618:	240095f0 	.word	0x240095f0

0800e61c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d051      	beq.n	800e6d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e636:	4b2a      	ldr	r3, [pc, #168]	; (800e6e0 <xTaskPriorityInherit+0xc4>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d241      	bcs.n	800e6c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	2b00      	cmp	r3, #0
 800e646:	db06      	blt.n	800e656 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e648:	4b25      	ldr	r3, [pc, #148]	; (800e6e0 <xTaskPriorityInherit+0xc4>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	6959      	ldr	r1, [r3, #20]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	4a1f      	ldr	r2, [pc, #124]	; (800e6e4 <xTaskPriorityInherit+0xc8>)
 800e668:	4413      	add	r3, r2
 800e66a:	4299      	cmp	r1, r3
 800e66c:	d122      	bne.n	800e6b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	3304      	adds	r3, #4
 800e672:	4618      	mov	r0, r3
 800e674:	f7fd fe34 	bl	800c2e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e678:	4b19      	ldr	r3, [pc, #100]	; (800e6e0 <xTaskPriorityInherit+0xc4>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e686:	4b18      	ldr	r3, [pc, #96]	; (800e6e8 <xTaskPriorityInherit+0xcc>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d903      	bls.n	800e696 <xTaskPriorityInherit+0x7a>
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e692:	4a15      	ldr	r2, [pc, #84]	; (800e6e8 <xTaskPriorityInherit+0xcc>)
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69a:	4613      	mov	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4a10      	ldr	r2, [pc, #64]	; (800e6e4 <xTaskPriorityInherit+0xc8>)
 800e6a4:	441a      	add	r2, r3
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f7fd fdba 	bl	800c226 <vListInsertEnd>
 800e6b2:	e004      	b.n	800e6be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <xTaskPriorityInherit+0xc4>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	e008      	b.n	800e6d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6c8:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <xTaskPriorityInherit+0xc4>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d201      	bcs.n	800e6d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
	}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	240090f4 	.word	0x240090f4
 800e6e4:	240090f8 	.word	0x240090f8
 800e6e8:	240095d0 	.word	0x240095d0

0800e6ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b086      	sub	sp, #24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d056      	beq.n	800e7b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e702:	4b2e      	ldr	r3, [pc, #184]	; (800e7bc <xTaskPriorityDisinherit+0xd0>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	693a      	ldr	r2, [r7, #16]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d00a      	beq.n	800e722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	60fb      	str	r3, [r7, #12]
}
 800e71e:	bf00      	nop
 800e720:	e7fe      	b.n	800e720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10a      	bne.n	800e740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	60bb      	str	r3, [r7, #8]
}
 800e73c:	bf00      	nop
 800e73e:	e7fe      	b.n	800e73e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e744:	1e5a      	subs	r2, r3, #1
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e752:	429a      	cmp	r2, r3
 800e754:	d02c      	beq.n	800e7b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d128      	bne.n	800e7b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	3304      	adds	r3, #4
 800e762:	4618      	mov	r0, r3
 800e764:	f7fd fdbc 	bl	800c2e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e780:	4b0f      	ldr	r3, [pc, #60]	; (800e7c0 <xTaskPriorityDisinherit+0xd4>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	429a      	cmp	r2, r3
 800e786:	d903      	bls.n	800e790 <xTaskPriorityDisinherit+0xa4>
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78c:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <xTaskPriorityDisinherit+0xd4>)
 800e78e:	6013      	str	r3, [r2, #0]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e794:	4613      	mov	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4413      	add	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	4a09      	ldr	r2, [pc, #36]	; (800e7c4 <xTaskPriorityDisinherit+0xd8>)
 800e79e:	441a      	add	r2, r3
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	f7fd fd3d 	bl	800c226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7b0:	697b      	ldr	r3, [r7, #20]
	}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3718      	adds	r7, #24
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	240090f4 	.word	0x240090f4
 800e7c0:	240095d0 	.word	0x240095d0
 800e7c4:	240090f8 	.word	0x240090f8

0800e7c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b088      	sub	sp, #32
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d06a      	beq.n	800e8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	60fb      	str	r3, [r7, #12]
}
 800e7fa:	bf00      	nop
 800e7fc:	e7fe      	b.n	800e7fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e802:	683a      	ldr	r2, [r7, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d902      	bls.n	800e80e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	61fb      	str	r3, [r7, #28]
 800e80c:	e002      	b.n	800e814 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e812:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	69fa      	ldr	r2, [r7, #28]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d04b      	beq.n	800e8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	429a      	cmp	r2, r3
 800e826:	d146      	bne.n	800e8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e828:	4b25      	ldr	r3, [pc, #148]	; (800e8c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	69ba      	ldr	r2, [r7, #24]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d10a      	bne.n	800e848 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	60bb      	str	r3, [r7, #8]
}
 800e844:	bf00      	nop
 800e846:	e7fe      	b.n	800e846 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	699b      	ldr	r3, [r3, #24]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	db04      	blt.n	800e866 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	6959      	ldr	r1, [r3, #20]
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4a13      	ldr	r2, [pc, #76]	; (800e8c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e876:	4413      	add	r3, r2
 800e878:	4299      	cmp	r1, r3
 800e87a:	d11c      	bne.n	800e8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	3304      	adds	r3, #4
 800e880:	4618      	mov	r0, r3
 800e882:	f7fd fd2d 	bl	800c2e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88a:	4b0f      	ldr	r3, [pc, #60]	; (800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d903      	bls.n	800e89a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e896:	4a0c      	ldr	r2, [pc, #48]	; (800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89e:	4613      	mov	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4a07      	ldr	r2, [pc, #28]	; (800e8c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8a8:	441a      	add	r2, r3
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	f7fd fcb8 	bl	800c226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8b6:	bf00      	nop
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	240090f4 	.word	0x240090f4
 800e8c4:	240090f8 	.word	0x240090f8
 800e8c8:	240095d0 	.word	0x240095d0

0800e8cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8d0:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d004      	beq.n	800e8e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8d8:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8de:	3201      	adds	r2, #1
 800e8e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e8e2:	4b03      	ldr	r3, [pc, #12]	; (800e8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
	}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	240090f4 	.word	0x240090f4

0800e8f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8fe:	4b21      	ldr	r3, [pc, #132]	; (800e984 <prvAddCurrentTaskToDelayedList+0x90>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e904:	4b20      	ldr	r3, [pc, #128]	; (800e988 <prvAddCurrentTaskToDelayedList+0x94>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3304      	adds	r3, #4
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fd fce8 	bl	800c2e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e916:	d10a      	bne.n	800e92e <prvAddCurrentTaskToDelayedList+0x3a>
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d007      	beq.n	800e92e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e91e:	4b1a      	ldr	r3, [pc, #104]	; (800e988 <prvAddCurrentTaskToDelayedList+0x94>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	3304      	adds	r3, #4
 800e924:	4619      	mov	r1, r3
 800e926:	4819      	ldr	r0, [pc, #100]	; (800e98c <prvAddCurrentTaskToDelayedList+0x98>)
 800e928:	f7fd fc7d 	bl	800c226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e92c:	e026      	b.n	800e97c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4413      	add	r3, r2
 800e934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e936:	4b14      	ldr	r3, [pc, #80]	; (800e988 <prvAddCurrentTaskToDelayedList+0x94>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	429a      	cmp	r2, r3
 800e944:	d209      	bcs.n	800e95a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e946:	4b12      	ldr	r3, [pc, #72]	; (800e990 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	4b0f      	ldr	r3, [pc, #60]	; (800e988 <prvAddCurrentTaskToDelayedList+0x94>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3304      	adds	r3, #4
 800e950:	4619      	mov	r1, r3
 800e952:	4610      	mov	r0, r2
 800e954:	f7fd fc8b 	bl	800c26e <vListInsert>
}
 800e958:	e010      	b.n	800e97c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e95a:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <prvAddCurrentTaskToDelayedList+0x94>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3304      	adds	r3, #4
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	f7fd fc81 	bl	800c26e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	429a      	cmp	r2, r3
 800e974:	d202      	bcs.n	800e97c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e976:	4a08      	ldr	r2, [pc, #32]	; (800e998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	6013      	str	r3, [r2, #0]
}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	240095cc 	.word	0x240095cc
 800e988:	240090f4 	.word	0x240090f4
 800e98c:	240095b4 	.word	0x240095b4
 800e990:	24009584 	.word	0x24009584
 800e994:	24009580 	.word	0x24009580
 800e998:	240095e8 	.word	0x240095e8

0800e99c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	; 0x28
 800e9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9a6:	f000 fb07 	bl	800efb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ea1c <xTimerCreateTimerTask+0x80>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d021      	beq.n	800e9f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9ba:	1d3a      	adds	r2, r7, #4
 800e9bc:	f107 0108 	add.w	r1, r7, #8
 800e9c0:	f107 030c 	add.w	r3, r7, #12
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fd f9fd 	bl	800bdc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	9202      	str	r2, [sp, #8]
 800e9d2:	9301      	str	r3, [sp, #4]
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	460a      	mov	r2, r1
 800e9dc:	4910      	ldr	r1, [pc, #64]	; (800ea20 <xTimerCreateTimerTask+0x84>)
 800e9de:	4811      	ldr	r0, [pc, #68]	; (800ea24 <xTimerCreateTimerTask+0x88>)
 800e9e0:	f7fe ffbe 	bl	800d960 <xTaskCreateStatic>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	4a10      	ldr	r2, [pc, #64]	; (800ea28 <xTimerCreateTimerTask+0x8c>)
 800e9e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ea28 <xTimerCreateTimerTask+0x8c>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10a      	bne.n	800ea12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	613b      	str	r3, [r7, #16]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea12:	697b      	ldr	r3, [r7, #20]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	24009624 	.word	0x24009624
 800ea20:	0801c73c 	.word	0x0801c73c
 800ea24:	0800eb61 	.word	0x0800eb61
 800ea28:	24009628 	.word	0x24009628

0800ea2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08a      	sub	sp, #40	; 0x28
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10a      	bne.n	800ea5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	623b      	str	r3, [r7, #32]
}
 800ea56:	bf00      	nop
 800ea58:	e7fe      	b.n	800ea58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea5a:	4b1a      	ldr	r3, [pc, #104]	; (800eac4 <xTimerGenericCommand+0x98>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d02a      	beq.n	800eab8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2b05      	cmp	r3, #5
 800ea72:	dc18      	bgt.n	800eaa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea74:	f7ff fdb4 	bl	800e5e0 <xTaskGetSchedulerState>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d109      	bne.n	800ea92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea7e:	4b11      	ldr	r3, [pc, #68]	; (800eac4 <xTimerGenericCommand+0x98>)
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	f107 0110 	add.w	r1, r7, #16
 800ea86:	2300      	movs	r3, #0
 800ea88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea8a:	f7fe f903 	bl	800cc94 <xQueueGenericSend>
 800ea8e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea90:	e012      	b.n	800eab8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea92:	4b0c      	ldr	r3, [pc, #48]	; (800eac4 <xTimerGenericCommand+0x98>)
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	f107 0110 	add.w	r1, r7, #16
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f7fe f8f9 	bl	800cc94 <xQueueGenericSend>
 800eaa2:	6278      	str	r0, [r7, #36]	; 0x24
 800eaa4:	e008      	b.n	800eab8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eaa6:	4b07      	ldr	r3, [pc, #28]	; (800eac4 <xTimerGenericCommand+0x98>)
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f107 0110 	add.w	r1, r7, #16
 800eaae:	2300      	movs	r3, #0
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	f7fe f9ed 	bl	800ce90 <xQueueGenericSendFromISR>
 800eab6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3728      	adds	r7, #40	; 0x28
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	24009624 	.word	0x24009624

0800eac8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af02      	add	r7, sp, #8
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead2:	4b22      	ldr	r3, [pc, #136]	; (800eb5c <prvProcessExpiredTimer+0x94>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	3304      	adds	r3, #4
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fd fbfd 	bl	800c2e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d022      	beq.n	800eb3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	699a      	ldr	r2, [r3, #24]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	18d1      	adds	r1, r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	6978      	ldr	r0, [r7, #20]
 800eb02:	f000 f8d1 	bl	800eca8 <prvInsertTimerInActiveList>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d01f      	beq.n	800eb4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	2300      	movs	r3, #0
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	2100      	movs	r1, #0
 800eb16:	6978      	ldr	r0, [r7, #20]
 800eb18:	f7ff ff88 	bl	800ea2c <xTimerGenericCommand>
 800eb1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d113      	bne.n	800eb4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	60fb      	str	r3, [r7, #12]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb40:	f023 0301 	bic.w	r3, r3, #1
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	6a1b      	ldr	r3, [r3, #32]
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	4798      	blx	r3
}
 800eb54:	bf00      	nop
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	2400961c 	.word	0x2400961c

0800eb60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb68:	f107 0308 	add.w	r3, r7, #8
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f000 f857 	bl	800ec20 <prvGetNextExpireTime>
 800eb72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f000 f803 	bl	800eb84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb7e:	f000 f8d5 	bl	800ed2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb82:	e7f1      	b.n	800eb68 <prvTimerTask+0x8>

0800eb84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb8e:	f7ff f923 	bl	800ddd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb92:	f107 0308 	add.w	r3, r7, #8
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f866 	bl	800ec68 <prvSampleTimeNow>
 800eb9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d130      	bne.n	800ec06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10a      	bne.n	800ebc0 <prvProcessTimerOrBlockTask+0x3c>
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d806      	bhi.n	800ebc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ebb2:	f7ff f91f 	bl	800ddf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebb6:	68f9      	ldr	r1, [r7, #12]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff ff85 	bl	800eac8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ebbe:	e024      	b.n	800ec0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d008      	beq.n	800ebd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ebc6:	4b13      	ldr	r3, [pc, #76]	; (800ec14 <prvProcessTimerOrBlockTask+0x90>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d101      	bne.n	800ebd4 <prvProcessTimerOrBlockTask+0x50>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e000      	b.n	800ebd6 <prvProcessTimerOrBlockTask+0x52>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ebd8:	4b0f      	ldr	r3, [pc, #60]	; (800ec18 <prvProcessTimerOrBlockTask+0x94>)
 800ebda:	6818      	ldr	r0, [r3, #0]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	f7fe fe87 	bl	800d8f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ebea:	f7ff f903 	bl	800ddf4 <xTaskResumeAll>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10a      	bne.n	800ec0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ebf4:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <prvProcessTimerOrBlockTask+0x98>)
 800ebf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	f3bf 8f6f 	isb	sy
}
 800ec04:	e001      	b.n	800ec0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec06:	f7ff f8f5 	bl	800ddf4 <xTaskResumeAll>
}
 800ec0a:	bf00      	nop
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	24009620 	.word	0x24009620
 800ec18:	24009624 	.word	0x24009624
 800ec1c:	e000ed04 	.word	0xe000ed04

0800ec20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec28:	4b0e      	ldr	r3, [pc, #56]	; (800ec64 <prvGetNextExpireTime+0x44>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <prvGetNextExpireTime+0x16>
 800ec32:	2201      	movs	r2, #1
 800ec34:	e000      	b.n	800ec38 <prvGetNextExpireTime+0x18>
 800ec36:	2200      	movs	r2, #0
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d105      	bne.n	800ec50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec44:	4b07      	ldr	r3, [pc, #28]	; (800ec64 <prvGetNextExpireTime+0x44>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	e001      	b.n	800ec54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec50:	2300      	movs	r3, #0
 800ec52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec54:	68fb      	ldr	r3, [r7, #12]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	2400961c 	.word	0x2400961c

0800ec68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec70:	f7ff f95e 	bl	800df30 <xTaskGetTickCount>
 800ec74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec76:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <prvSampleTimeNow+0x3c>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d205      	bcs.n	800ec8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec80:	f000 f936 	bl	800eef0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	601a      	str	r2, [r3, #0]
 800ec8a:	e002      	b.n	800ec92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec92:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <prvSampleTimeNow+0x3c>)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec98:	68fb      	ldr	r3, [r7, #12]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	2400962c 	.word	0x2400962c

0800eca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d812      	bhi.n	800ecf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	1ad2      	subs	r2, r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	699b      	ldr	r3, [r3, #24]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d302      	bcc.n	800ece2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	e01b      	b.n	800ed1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ece2:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <prvInsertTimerInActiveList+0x7c>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7fd fabe 	bl	800c26e <vListInsert>
 800ecf2:	e012      	b.n	800ed1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d206      	bcs.n	800ed0a <prvInsertTimerInActiveList+0x62>
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d302      	bcc.n	800ed0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed04:	2301      	movs	r3, #1
 800ed06:	617b      	str	r3, [r7, #20]
 800ed08:	e007      	b.n	800ed1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed0a:	4b07      	ldr	r3, [pc, #28]	; (800ed28 <prvInsertTimerInActiveList+0x80>)
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f7fd faaa 	bl	800c26e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed1a:	697b      	ldr	r3, [r7, #20]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3718      	adds	r7, #24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	24009620 	.word	0x24009620
 800ed28:	2400961c 	.word	0x2400961c

0800ed2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08e      	sub	sp, #56	; 0x38
 800ed30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed32:	e0ca      	b.n	800eeca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	da18      	bge.n	800ed6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed3a:	1d3b      	adds	r3, r7, #4
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10a      	bne.n	800ed5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	61fb      	str	r3, [r7, #28]
}
 800ed58:	bf00      	nop
 800ed5a:	e7fe      	b.n	800ed5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed62:	6850      	ldr	r0, [r2, #4]
 800ed64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed66:	6892      	ldr	r2, [r2, #8]
 800ed68:	4611      	mov	r1, r2
 800ed6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f2c0 80ab 	blt.w	800eeca <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7a:	695b      	ldr	r3, [r3, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d004      	beq.n	800ed8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	3304      	adds	r3, #4
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fd faab 	bl	800c2e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7ff ff6b 	bl	800ec68 <prvSampleTimeNow>
 800ed92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2b09      	cmp	r3, #9
 800ed98:	f200 8096 	bhi.w	800eec8 <prvProcessReceivedCommands+0x19c>
 800ed9c:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <prvProcessReceivedCommands+0x78>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edcd 	.word	0x0800edcd
 800eda8:	0800edcd 	.word	0x0800edcd
 800edac:	0800edcd 	.word	0x0800edcd
 800edb0:	0800ee41 	.word	0x0800ee41
 800edb4:	0800ee55 	.word	0x0800ee55
 800edb8:	0800ee9f 	.word	0x0800ee9f
 800edbc:	0800edcd 	.word	0x0800edcd
 800edc0:	0800edcd 	.word	0x0800edcd
 800edc4:	0800ee41 	.word	0x0800ee41
 800edc8:	0800ee55 	.word	0x0800ee55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edd2:	f043 0301 	orr.w	r3, r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	18d1      	adds	r1, r2, r3
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edec:	f7ff ff5c 	bl	800eca8 <prvInsertTimerInActiveList>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d069      	beq.n	800eeca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d05e      	beq.n	800eeca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	441a      	add	r2, r3
 800ee14:	2300      	movs	r3, #0
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	2300      	movs	r3, #0
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee1e:	f7ff fe05 	bl	800ea2c <xTimerGenericCommand>
 800ee22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee24:	6a3b      	ldr	r3, [r7, #32]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d14f      	bne.n	800eeca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2e:	f383 8811 	msr	BASEPRI, r3
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	f3bf 8f4f 	dsb	sy
 800ee3a:	61bb      	str	r3, [r7, #24]
}
 800ee3c:	bf00      	nop
 800ee3e:	e7fe      	b.n	800ee3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee46:	f023 0301 	bic.w	r3, r3, #1
 800ee4a:	b2da      	uxtb	r2, r3
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee52:	e03a      	b.n	800eeca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee5a:	f043 0301 	orr.w	r3, r3, #1
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	617b      	str	r3, [r7, #20]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	699a      	ldr	r2, [r3, #24]
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	18d1      	adds	r1, r2, r3
 800ee92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee98:	f7ff ff06 	bl	800eca8 <prvInsertTimerInActiveList>
					break;
 800ee9c:	e015      	b.n	800eeca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea4:	f003 0302 	and.w	r3, r3, #2
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d103      	bne.n	800eeb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eeac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeae:	f7fd f86f 	bl	800bf90 <vPortFree>
 800eeb2:	e00a      	b.n	800eeca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeba:	f023 0301 	bic.w	r3, r3, #1
 800eebe:	b2da      	uxtb	r2, r3
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eec6:	e000      	b.n	800eeca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800eec8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eeca:	4b08      	ldr	r3, [pc, #32]	; (800eeec <prvProcessReceivedCommands+0x1c0>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	1d39      	adds	r1, r7, #4
 800eed0:	2200      	movs	r2, #0
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe f904 	bl	800d0e0 <xQueueReceive>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f47f af2a 	bne.w	800ed34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eee0:	bf00      	nop
 800eee2:	bf00      	nop
 800eee4:	3730      	adds	r7, #48	; 0x30
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	24009624 	.word	0x24009624

0800eef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b088      	sub	sp, #32
 800eef4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eef6:	e048      	b.n	800ef8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eef8:	4b2d      	ldr	r3, [pc, #180]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef02:	4b2b      	ldr	r3, [pc, #172]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	3304      	adds	r3, #4
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fd f9e5 	bl	800c2e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef24:	f003 0304 	and.w	r3, r3, #4
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d02e      	beq.n	800ef8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	693a      	ldr	r2, [r7, #16]
 800ef32:	4413      	add	r3, r2
 800ef34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d90e      	bls.n	800ef5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef4a:	4b19      	ldr	r3, [pc, #100]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3304      	adds	r3, #4
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7fd f98a 	bl	800c26e <vListInsert>
 800ef5a:	e016      	b.n	800ef8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	2300      	movs	r3, #0
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	2100      	movs	r1, #0
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f7ff fd60 	bl	800ea2c <xTimerGenericCommand>
 800ef6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10a      	bne.n	800ef8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	603b      	str	r3, [r7, #0]
}
 800ef86:	bf00      	nop
 800ef88:	e7fe      	b.n	800ef88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef8a:	4b09      	ldr	r3, [pc, #36]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1b1      	bne.n	800eef8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef94:	4b06      	ldr	r3, [pc, #24]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef9a:	4b06      	ldr	r3, [pc, #24]	; (800efb4 <prvSwitchTimerLists+0xc4>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4a04      	ldr	r2, [pc, #16]	; (800efb0 <prvSwitchTimerLists+0xc0>)
 800efa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efa2:	4a04      	ldr	r2, [pc, #16]	; (800efb4 <prvSwitchTimerLists+0xc4>)
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	6013      	str	r3, [r2, #0]
}
 800efa8:	bf00      	nop
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	2400961c 	.word	0x2400961c
 800efb4:	24009620 	.word	0x24009620

0800efb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800efbe:	f7fd fae9 	bl	800c594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efc2:	4b15      	ldr	r3, [pc, #84]	; (800f018 <prvCheckForValidListAndQueue+0x60>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d120      	bne.n	800f00c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efca:	4814      	ldr	r0, [pc, #80]	; (800f01c <prvCheckForValidListAndQueue+0x64>)
 800efcc:	f7fd f8fe 	bl	800c1cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efd0:	4813      	ldr	r0, [pc, #76]	; (800f020 <prvCheckForValidListAndQueue+0x68>)
 800efd2:	f7fd f8fb 	bl	800c1cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efd6:	4b13      	ldr	r3, [pc, #76]	; (800f024 <prvCheckForValidListAndQueue+0x6c>)
 800efd8:	4a10      	ldr	r2, [pc, #64]	; (800f01c <prvCheckForValidListAndQueue+0x64>)
 800efda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800efdc:	4b12      	ldr	r3, [pc, #72]	; (800f028 <prvCheckForValidListAndQueue+0x70>)
 800efde:	4a10      	ldr	r2, [pc, #64]	; (800f020 <prvCheckForValidListAndQueue+0x68>)
 800efe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efe2:	2300      	movs	r3, #0
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	4b11      	ldr	r3, [pc, #68]	; (800f02c <prvCheckForValidListAndQueue+0x74>)
 800efe8:	4a11      	ldr	r2, [pc, #68]	; (800f030 <prvCheckForValidListAndQueue+0x78>)
 800efea:	2110      	movs	r1, #16
 800efec:	200a      	movs	r0, #10
 800efee:	f7fd fc5b 	bl	800c8a8 <xQueueGenericCreateStatic>
 800eff2:	4603      	mov	r3, r0
 800eff4:	4a08      	ldr	r2, [pc, #32]	; (800f018 <prvCheckForValidListAndQueue+0x60>)
 800eff6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eff8:	4b07      	ldr	r3, [pc, #28]	; (800f018 <prvCheckForValidListAndQueue+0x60>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d005      	beq.n	800f00c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f000:	4b05      	ldr	r3, [pc, #20]	; (800f018 <prvCheckForValidListAndQueue+0x60>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	490b      	ldr	r1, [pc, #44]	; (800f034 <prvCheckForValidListAndQueue+0x7c>)
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe fc22 	bl	800d850 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f00c:	f7fd faf2 	bl	800c5f4 <vPortExitCritical>
}
 800f010:	bf00      	nop
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	24009624 	.word	0x24009624
 800f01c:	240095f4 	.word	0x240095f4
 800f020:	24009608 	.word	0x24009608
 800f024:	2400961c 	.word	0x2400961c
 800f028:	24009620 	.word	0x24009620
 800f02c:	240096d0 	.word	0x240096d0
 800f030:	24009630 	.word	0x24009630
 800f034:	0801c744 	.word	0x0801c744

0800f038 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f042:	88fb      	ldrh	r3, [r7, #6]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	b21a      	sxth	r2, r3
 800f048:	88fb      	ldrh	r3, [r7, #6]
 800f04a:	0a1b      	lsrs	r3, r3, #8
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	b21b      	sxth	r3, r3
 800f050:	4313      	orrs	r3, r2
 800f052:	b21b      	sxth	r3, r3
 800f054:	b29b      	uxth	r3, r3
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	061a      	lsls	r2, r3, #24
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	021b      	lsls	r3, r3, #8
 800f072:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f076:	431a      	orrs	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	0a1b      	lsrs	r3, r3, #8
 800f07c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f080:	431a      	orrs	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	0e1b      	lsrs	r3, r3, #24
 800f086:	4313      	orrs	r3, r2
}
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f098:	4b20      	ldr	r3, [pc, #128]	; (800f11c <dhcp_inc_pcb_refcount+0x88>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d133      	bne.n	800f108 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f0a0:	4b1f      	ldr	r3, [pc, #124]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d005      	beq.n	800f0b4 <dhcp_inc_pcb_refcount+0x20>
 800f0a8:	4b1e      	ldr	r3, [pc, #120]	; (800f124 <dhcp_inc_pcb_refcount+0x90>)
 800f0aa:	22e5      	movs	r2, #229	; 0xe5
 800f0ac:	491e      	ldr	r1, [pc, #120]	; (800f128 <dhcp_inc_pcb_refcount+0x94>)
 800f0ae:	481f      	ldr	r0, [pc, #124]	; (800f12c <dhcp_inc_pcb_refcount+0x98>)
 800f0b0:	f00c fbea 	bl	801b888 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f0b4:	f00c faa0 	bl	801b5f8 <udp_new>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	4a19      	ldr	r2, [pc, #100]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0bc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f0be:	4b18      	ldr	r3, [pc, #96]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ca:	e024      	b.n	800f116 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f0cc:	4b14      	ldr	r3, [pc, #80]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	7a5a      	ldrb	r2, [r3, #9]
 800f0d2:	4b13      	ldr	r3, [pc, #76]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f042 0220 	orr.w	r2, r2, #32
 800f0da:	b2d2      	uxtb	r2, r2
 800f0dc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f0de:	4b10      	ldr	r3, [pc, #64]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2244      	movs	r2, #68	; 0x44
 800f0e4:	4912      	ldr	r1, [pc, #72]	; (800f130 <dhcp_inc_pcb_refcount+0x9c>)
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f00c f92e 	bl	801b348 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f0ec:	4b0c      	ldr	r3, [pc, #48]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2243      	movs	r2, #67	; 0x43
 800f0f2:	490f      	ldr	r1, [pc, #60]	; (800f130 <dhcp_inc_pcb_refcount+0x9c>)
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f00c f9af 	bl	801b458 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f0fa:	4b09      	ldr	r3, [pc, #36]	; (800f120 <dhcp_inc_pcb_refcount+0x8c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2200      	movs	r2, #0
 800f100:	490c      	ldr	r1, [pc, #48]	; (800f134 <dhcp_inc_pcb_refcount+0xa0>)
 800f102:	4618      	mov	r0, r3
 800f104:	f00c fa16 	bl	801b534 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f108:	4b04      	ldr	r3, [pc, #16]	; (800f11c <dhcp_inc_pcb_refcount+0x88>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	3301      	adds	r3, #1
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	4b02      	ldr	r3, [pc, #8]	; (800f11c <dhcp_inc_pcb_refcount+0x88>)
 800f112:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	2400974c 	.word	0x2400974c
 800f120:	24009748 	.word	0x24009748
 800f124:	0801c74c 	.word	0x0801c74c
 800f128:	0801c7bc 	.word	0x0801c7bc
 800f12c:	0801c7e4 	.word	0x0801c7e4
 800f130:	0801f984 	.word	0x0801f984
 800f134:	080109cd 	.word	0x080109cd

0800f138 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f13c:	4b0e      	ldr	r3, [pc, #56]	; (800f178 <dhcp_dec_pcb_refcount+0x40>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d105      	bne.n	800f150 <dhcp_dec_pcb_refcount+0x18>
 800f144:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <dhcp_dec_pcb_refcount+0x44>)
 800f146:	22ff      	movs	r2, #255	; 0xff
 800f148:	490d      	ldr	r1, [pc, #52]	; (800f180 <dhcp_dec_pcb_refcount+0x48>)
 800f14a:	480e      	ldr	r0, [pc, #56]	; (800f184 <dhcp_dec_pcb_refcount+0x4c>)
 800f14c:	f00c fb9c 	bl	801b888 <iprintf>
  dhcp_pcb_refcount--;
 800f150:	4b09      	ldr	r3, [pc, #36]	; (800f178 <dhcp_dec_pcb_refcount+0x40>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	3b01      	subs	r3, #1
 800f156:	b2da      	uxtb	r2, r3
 800f158:	4b07      	ldr	r3, [pc, #28]	; (800f178 <dhcp_dec_pcb_refcount+0x40>)
 800f15a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f15c:	4b06      	ldr	r3, [pc, #24]	; (800f178 <dhcp_dec_pcb_refcount+0x40>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d107      	bne.n	800f174 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f164:	4b08      	ldr	r3, [pc, #32]	; (800f188 <dhcp_dec_pcb_refcount+0x50>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4618      	mov	r0, r3
 800f16a:	f00c fa03 	bl	801b574 <udp_remove>
    dhcp_pcb = NULL;
 800f16e:	4b06      	ldr	r3, [pc, #24]	; (800f188 <dhcp_dec_pcb_refcount+0x50>)
 800f170:	2200      	movs	r2, #0
 800f172:	601a      	str	r2, [r3, #0]
  }
}
 800f174:	bf00      	nop
 800f176:	bd80      	pop	{r7, pc}
 800f178:	2400974c 	.word	0x2400974c
 800f17c:	0801c74c 	.word	0x0801c74c
 800f180:	0801c80c 	.word	0x0801c80c
 800f184:	0801c7e4 	.word	0x0801c7e4
 800f188:	24009748 	.word	0x24009748

0800f18c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f198:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f19a:	210c      	movs	r1, #12
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f001 f857 	bl	8010250 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f1a2:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <dhcp_handle_nak+0x30>)
 800f1a4:	4a05      	ldr	r2, [pc, #20]	; (800f1bc <dhcp_handle_nak+0x30>)
 800f1a6:	4905      	ldr	r1, [pc, #20]	; (800f1bc <dhcp_handle_nak+0x30>)
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f005 f88f 	bl	80142cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fc4a 	bl	800fa48 <dhcp_discover>
}
 800f1b4:	bf00      	nop
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	0801f984 	.word	0x0801f984

0800f1c0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f1ce:	2108      	movs	r1, #8
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f001 f83d 	bl	8010250 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	331c      	adds	r3, #28
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f002 fb3e 	bl	8011860 <etharp_query>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	799b      	ldrb	r3, [r3, #6]
 800f1ec:	2bff      	cmp	r3, #255	; 0xff
 800f1ee:	d005      	beq.n	800f1fc <dhcp_check+0x3c>
    dhcp->tries++;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	799b      	ldrb	r3, [r3, #6]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	b2da      	uxtb	r2, r3
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f1fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f200:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f202:	893b      	ldrh	r3, [r7, #8]
 800f204:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f208:	4a06      	ldr	r2, [pc, #24]	; (800f224 <dhcp_check+0x64>)
 800f20a:	fb82 1203 	smull	r1, r2, r2, r3
 800f20e:	1152      	asrs	r2, r2, #5
 800f210:	17db      	asrs	r3, r3, #31
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	b29a      	uxth	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f21a:	bf00      	nop
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	10624dd3 	.word	0x10624dd3

0800f228 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f238:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <dhcp_handle_offer+0x44>)
 800f23a:	789b      	ldrb	r3, [r3, #2]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d011      	beq.n	800f264 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f246:	4b0a      	ldr	r3, [pc, #40]	; (800f270 <dhcp_handle_offer+0x48>)
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff ff09 	bl	800f062 <lwip_htonl>
 800f250:	4602      	mov	r2, r0
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	691a      	ldr	r2, [r3, #16]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f808 	bl	800f274 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f264:	bf00      	nop
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	24009740 	.word	0x24009740
 800f270:	24009720 	.word	0x24009720

0800f274 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f274:	b5b0      	push	{r4, r5, r7, lr}
 800f276:	b08a      	sub	sp, #40	; 0x28
 800f278:	af02      	add	r7, sp, #8
 800f27a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d109      	bne.n	800f296 <dhcp_select+0x22>
 800f282:	4b71      	ldr	r3, [pc, #452]	; (800f448 <dhcp_select+0x1d4>)
 800f284:	f240 1277 	movw	r2, #375	; 0x177
 800f288:	4970      	ldr	r1, [pc, #448]	; (800f44c <dhcp_select+0x1d8>)
 800f28a:	4871      	ldr	r0, [pc, #452]	; (800f450 <dhcp_select+0x1dc>)
 800f28c:	f00c fafc 	bl	801b888 <iprintf>
 800f290:	f06f 030f 	mvn.w	r3, #15
 800f294:	e0d3      	b.n	800f43e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <dhcp_select+0x42>
 800f2a2:	4b69      	ldr	r3, [pc, #420]	; (800f448 <dhcp_select+0x1d4>)
 800f2a4:	f240 1279 	movw	r2, #377	; 0x179
 800f2a8:	496a      	ldr	r1, [pc, #424]	; (800f454 <dhcp_select+0x1e0>)
 800f2aa:	4869      	ldr	r0, [pc, #420]	; (800f450 <dhcp_select+0x1dc>)
 800f2ac:	f00c faec 	bl	801b888 <iprintf>
 800f2b0:	f06f 0305 	mvn.w	r3, #5
 800f2b4:	e0c3      	b.n	800f43e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	69b8      	ldr	r0, [r7, #24]
 800f2ba:	f000 ffc9 	bl	8010250 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f2be:	f107 030c 	add.w	r3, r7, #12
 800f2c2:	2203      	movs	r2, #3
 800f2c4:	69b9      	ldr	r1, [r7, #24]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f001 fc4e 	bl	8010b68 <dhcp_create_msg>
 800f2cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 8085 	beq.w	800f3e0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f2dc:	89b8      	ldrh	r0, [r7, #12]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	2239      	movs	r2, #57	; 0x39
 800f2e8:	f000 ffcc 	bl	8010284 <dhcp_option>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f2f0:	89b8      	ldrh	r0, [r7, #12]
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	f001 f81b 	bl	8010338 <dhcp_option_short>
 800f302:	4603      	mov	r3, r0
 800f304:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f306:	89b8      	ldrh	r0, [r7, #12]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f30e:	2304      	movs	r3, #4
 800f310:	2232      	movs	r2, #50	; 0x32
 800f312:	f000 ffb7 	bl	8010284 <dhcp_option>
 800f316:	4603      	mov	r3, r0
 800f318:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f31a:	89bc      	ldrh	r4, [r7, #12]
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	69db      	ldr	r3, [r3, #28]
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff fe9b 	bl	800f062 <lwip_htonl>
 800f32c:	4603      	mov	r3, r0
 800f32e:	461a      	mov	r2, r3
 800f330:	4629      	mov	r1, r5
 800f332:	4620      	mov	r0, r4
 800f334:	f001 f832 	bl	801039c <dhcp_option_long>
 800f338:	4603      	mov	r3, r0
 800f33a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f33c:	89b8      	ldrh	r0, [r7, #12]
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f344:	2304      	movs	r3, #4
 800f346:	2236      	movs	r2, #54	; 0x36
 800f348:	f000 ff9c 	bl	8010284 <dhcp_option>
 800f34c:	4603      	mov	r3, r0
 800f34e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f350:	89bc      	ldrh	r4, [r7, #12]
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff fe80 	bl	800f062 <lwip_htonl>
 800f362:	4603      	mov	r3, r0
 800f364:	461a      	mov	r2, r3
 800f366:	4629      	mov	r1, r5
 800f368:	4620      	mov	r0, r4
 800f36a:	f001 f817 	bl	801039c <dhcp_option_long>
 800f36e:	4603      	mov	r3, r0
 800f370:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f372:	89b8      	ldrh	r0, [r7, #12]
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f37a:	2303      	movs	r3, #3
 800f37c:	2237      	movs	r2, #55	; 0x37
 800f37e:	f000 ff81 	bl	8010284 <dhcp_option>
 800f382:	4603      	mov	r3, r0
 800f384:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f386:	2300      	movs	r3, #0
 800f388:	77bb      	strb	r3, [r7, #30]
 800f38a:	e00e      	b.n	800f3aa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f38c:	89b8      	ldrh	r0, [r7, #12]
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f394:	7fbb      	ldrb	r3, [r7, #30]
 800f396:	4a30      	ldr	r2, [pc, #192]	; (800f458 <dhcp_select+0x1e4>)
 800f398:	5cd3      	ldrb	r3, [r2, r3]
 800f39a:	461a      	mov	r2, r3
 800f39c:	f000 ffa6 	bl	80102ec <dhcp_option_byte>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3a4:	7fbb      	ldrb	r3, [r7, #30]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	77bb      	strb	r3, [r7, #30]
 800f3aa:	7fbb      	ldrb	r3, [r7, #30]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d9ed      	bls.n	800f38c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3b0:	89b8      	ldrh	r0, [r7, #12]
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	33f0      	adds	r3, #240	; 0xf0
 800f3b6:	697a      	ldr	r2, [r7, #20]
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	f001 fcab 	bl	8010d14 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f3be:	4b27      	ldr	r3, [pc, #156]	; (800f45c <dhcp_select+0x1e8>)
 800f3c0:	6818      	ldr	r0, [r3, #0]
 800f3c2:	4b27      	ldr	r3, [pc, #156]	; (800f460 <dhcp_select+0x1ec>)
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	2343      	movs	r3, #67	; 0x43
 800f3cc:	4a25      	ldr	r2, [pc, #148]	; (800f464 <dhcp_select+0x1f0>)
 800f3ce:	6979      	ldr	r1, [r7, #20]
 800f3d0:	f00b fed4 	bl	801b17c <udp_sendto_if_src>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f3d8:	6978      	ldr	r0, [r7, #20]
 800f3da:	f005 fc85 	bl	8014ce8 <pbuf_free>
 800f3de:	e001      	b.n	800f3e4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f3e0:	23ff      	movs	r3, #255	; 0xff
 800f3e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	799b      	ldrb	r3, [r3, #6]
 800f3e8:	2bff      	cmp	r3, #255	; 0xff
 800f3ea:	d005      	beq.n	800f3f8 <dhcp_select+0x184>
    dhcp->tries++;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	799b      	ldrb	r3, [r3, #6]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	799b      	ldrb	r3, [r3, #6]
 800f3fc:	2b05      	cmp	r3, #5
 800f3fe:	d80d      	bhi.n	800f41c <dhcp_select+0x1a8>
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	799b      	ldrb	r3, [r3, #6]
 800f404:	461a      	mov	r2, r3
 800f406:	2301      	movs	r3, #1
 800f408:	4093      	lsls	r3, r2
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	461a      	mov	r2, r3
 800f40e:	0152      	lsls	r2, r2, #5
 800f410:	1ad2      	subs	r2, r2, r3
 800f412:	0092      	lsls	r2, r2, #2
 800f414:	4413      	add	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	b29b      	uxth	r3, r3
 800f41a:	e001      	b.n	800f420 <dhcp_select+0x1ac>
 800f41c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f420:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f422:	89fb      	ldrh	r3, [r7, #14]
 800f424:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f428:	4a0f      	ldr	r2, [pc, #60]	; (800f468 <dhcp_select+0x1f4>)
 800f42a:	fb82 1203 	smull	r1, r2, r2, r3
 800f42e:	1152      	asrs	r2, r2, #5
 800f430:	17db      	asrs	r3, r3, #31
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	b29a      	uxth	r2, r3
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f43a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bdb0      	pop	{r4, r5, r7, pc}
 800f446:	bf00      	nop
 800f448:	0801c74c 	.word	0x0801c74c
 800f44c:	0801c830 	.word	0x0801c830
 800f450:	0801c7e4 	.word	0x0801c7e4
 800f454:	0801c84c 	.word	0x0801c84c
 800f458:	24000028 	.word	0x24000028
 800f45c:	24009748 	.word	0x24009748
 800f460:	0801f984 	.word	0x0801f984
 800f464:	0801f988 	.word	0x0801f988
 800f468:	10624dd3 	.word	0x10624dd3

0800f46c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800f472:	4b27      	ldr	r3, [pc, #156]	; (800f510 <dhcp_coarse_tmr+0xa4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	607b      	str	r3, [r7, #4]
 800f478:	e042      	b.n	800f500 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d039      	beq.n	800f4fa <dhcp_coarse_tmr+0x8e>
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	795b      	ldrb	r3, [r3, #5]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d035      	beq.n	800f4fa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	8a9b      	ldrh	r3, [r3, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d012      	beq.n	800f4bc <dhcp_coarse_tmr+0x50>
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	8a5b      	ldrh	r3, [r3, #18]
 800f49a:	3301      	adds	r3, #1
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	825a      	strh	r2, [r3, #18]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	8a5a      	ldrh	r2, [r3, #18]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	8a9b      	ldrh	r3, [r3, #20]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d106      	bne.n	800f4bc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fe34 	bl	801011c <dhcp_release_and_stop>
        dhcp_start(netif);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f96b 	bl	800f790 <dhcp_start>
 800f4ba:	e01e      	b.n	800f4fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	8a1b      	ldrh	r3, [r3, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d00b      	beq.n	800f4dc <dhcp_coarse_tmr+0x70>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	8a1b      	ldrh	r3, [r3, #16]
 800f4c8:	1e5a      	subs	r2, r3, #1
 800f4ca:	b291      	uxth	r1, r2
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	8211      	strh	r1, [r2, #16]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d103      	bne.n	800f4dc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f8c7 	bl	800f668 <dhcp_t2_timeout>
 800f4da:	e00e      	b.n	800f4fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	89db      	ldrh	r3, [r3, #14]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00a      	beq.n	800f4fa <dhcp_coarse_tmr+0x8e>
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	89db      	ldrh	r3, [r3, #14]
 800f4e8:	1e5a      	subs	r2, r3, #1
 800f4ea:	b291      	uxth	r1, r2
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	81d1      	strh	r1, [r2, #14]
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d102      	bne.n	800f4fa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f888 	bl	800f60a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	607b      	str	r3, [r7, #4]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1b9      	bne.n	800f47a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f506:	bf00      	nop
 800f508:	bf00      	nop
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	2400c968 	.word	0x2400c968

0800f514 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <dhcp_fine_tmr+0x60>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	607b      	str	r3, [r7, #4]
 800f520:	e020      	b.n	800f564 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f526:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d017      	beq.n	800f55e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	891b      	ldrh	r3, [r3, #8]
 800f532:	2b01      	cmp	r3, #1
 800f534:	d906      	bls.n	800f544 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	891b      	ldrh	r3, [r3, #8]
 800f53a:	3b01      	subs	r3, #1
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	811a      	strh	r2, [r3, #8]
 800f542:	e00c      	b.n	800f55e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	891b      	ldrh	r3, [r3, #8]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d108      	bne.n	800f55e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	891b      	ldrh	r3, [r3, #8]
 800f550:	3b01      	subs	r3, #1
 800f552:	b29a      	uxth	r2, r3
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f80d 	bl	800f578 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	607b      	str	r3, [r7, #4]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1db      	bne.n	800f522 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	2400c968 	.word	0x2400c968

0800f578 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f584:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	795b      	ldrb	r3, [r3, #5]
 800f58a:	2b0c      	cmp	r3, #12
 800f58c:	d003      	beq.n	800f596 <dhcp_timeout+0x1e>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	795b      	ldrb	r3, [r3, #5]
 800f592:	2b06      	cmp	r3, #6
 800f594:	d103      	bne.n	800f59e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fa56 	bl	800fa48 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f59c:	e031      	b.n	800f602 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	795b      	ldrb	r3, [r3, #5]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d10e      	bne.n	800f5c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	799b      	ldrb	r3, [r3, #6]
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	d803      	bhi.n	800f5b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff fe60 	bl	800f274 <dhcp_select>
}
 800f5b4:	e025      	b.n	800f602 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fdb0 	bl	801011c <dhcp_release_and_stop>
      dhcp_start(netif);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f8e7 	bl	800f790 <dhcp_start>
}
 800f5c2:	e01e      	b.n	800f602 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	795b      	ldrb	r3, [r3, #5]
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d10b      	bne.n	800f5e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	799b      	ldrb	r3, [r3, #6]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d803      	bhi.n	800f5dc <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7ff fdf3 	bl	800f1c0 <dhcp_check>
}
 800f5da:	e012      	b.n	800f602 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fad5 	bl	800fb8c <dhcp_bind>
}
 800f5e2:	e00e      	b.n	800f602 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	795b      	ldrb	r3, [r3, #5]
 800f5e8:	2b03      	cmp	r3, #3
 800f5ea:	d10a      	bne.n	800f602 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	799b      	ldrb	r3, [r3, #6]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d803      	bhi.n	800f5fc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fcdb 	bl	800ffb0 <dhcp_reboot>
}
 800f5fa:	e002      	b.n	800f602 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 fa23 	bl	800fa48 <dhcp_discover>
}
 800f602:	bf00      	nop
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f616:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	795b      	ldrb	r3, [r3, #5]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d007      	beq.n	800f630 <dhcp_t1_timeout+0x26>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	795b      	ldrb	r3, [r3, #5]
 800f624:	2b0a      	cmp	r3, #10
 800f626:	d003      	beq.n	800f630 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f62c:	2b05      	cmp	r3, #5
 800f62e:	d117      	bne.n	800f660 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fb85 	bl	800fd40 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	899b      	ldrh	r3, [r3, #12]
 800f63a:	461a      	mov	r2, r3
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	8a5b      	ldrh	r3, [r3, #18]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	2b01      	cmp	r3, #1
 800f644:	dd0c      	ble.n	800f660 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	461a      	mov	r2, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	8a5b      	ldrh	r3, [r3, #18]
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	da00      	bge.n	800f658 <dhcp_t1_timeout+0x4e>
 800f656:	3301      	adds	r3, #1
 800f658:	105b      	asrs	r3, r3, #1
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f660:	bf00      	nop
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f674:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	795b      	ldrb	r3, [r3, #5]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d00b      	beq.n	800f696 <dhcp_t2_timeout+0x2e>
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	795b      	ldrb	r3, [r3, #5]
 800f682:	2b0a      	cmp	r3, #10
 800f684:	d007      	beq.n	800f696 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f68a:	2b05      	cmp	r3, #5
 800f68c:	d003      	beq.n	800f696 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	795b      	ldrb	r3, [r3, #5]
 800f692:	2b04      	cmp	r3, #4
 800f694:	d117      	bne.n	800f6c6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fbee 	bl	800fe78 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	8a9b      	ldrh	r3, [r3, #20]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	8a5b      	ldrh	r3, [r3, #18]
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	dd0c      	ble.n	800f6c6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	8a9b      	ldrh	r3, [r3, #20]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	8a5b      	ldrh	r3, [r3, #18]
 800f6b6:	1ad3      	subs	r3, r2, r3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	da00      	bge.n	800f6be <dhcp_t2_timeout+0x56>
 800f6bc:	3301      	adds	r3, #1
 800f6be:	105b      	asrs	r3, r3, #1
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
	...

0800f6d0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6de:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f6ec:	4b26      	ldr	r3, [pc, #152]	; (800f788 <dhcp_handle_ack+0xb8>)
 800f6ee:	78db      	ldrb	r3, [r3, #3]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f6f4:	4b25      	ldr	r3, [pc, #148]	; (800f78c <dhcp_handle_ack+0xbc>)
 800f6f6:	68da      	ldr	r2, [r3, #12]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f6fc:	4b22      	ldr	r3, [pc, #136]	; (800f788 <dhcp_handle_ack+0xb8>)
 800f6fe:	791b      	ldrb	r3, [r3, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d004      	beq.n	800f70e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f704:	4b21      	ldr	r3, [pc, #132]	; (800f78c <dhcp_handle_ack+0xbc>)
 800f706:	691a      	ldr	r2, [r3, #16]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	62da      	str	r2, [r3, #44]	; 0x2c
 800f70c:	e004      	b.n	800f718 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f712:	085a      	lsrs	r2, r3, #1
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f718:	4b1b      	ldr	r3, [pc, #108]	; (800f788 <dhcp_handle_ack+0xb8>)
 800f71a:	795b      	ldrb	r3, [r3, #5]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d004      	beq.n	800f72a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f720:	4b1a      	ldr	r3, [pc, #104]	; (800f78c <dhcp_handle_ack+0xbc>)
 800f722:	695a      	ldr	r2, [r3, #20]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	631a      	str	r2, [r3, #48]	; 0x30
 800f728:	e007      	b.n	800f73a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f72e:	4613      	mov	r3, r2
 800f730:	00db      	lsls	r3, r3, #3
 800f732:	1a9b      	subs	r3, r3, r2
 800f734:	08da      	lsrs	r2, r3, #3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	691a      	ldr	r2, [r3, #16]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f742:	4b11      	ldr	r3, [pc, #68]	; (800f788 <dhcp_handle_ack+0xb8>)
 800f744:	799b      	ldrb	r3, [r3, #6]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00b      	beq.n	800f762 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f74a:	4b10      	ldr	r3, [pc, #64]	; (800f78c <dhcp_handle_ack+0xbc>)
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff fc87 	bl	800f062 <lwip_htonl>
 800f754:	4602      	mov	r2, r0
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2201      	movs	r2, #1
 800f75e:	71da      	strb	r2, [r3, #7]
 800f760:	e002      	b.n	800f768 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2200      	movs	r2, #0
 800f766:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f768:	4b07      	ldr	r3, [pc, #28]	; (800f788 <dhcp_handle_ack+0xb8>)
 800f76a:	79db      	ldrb	r3, [r3, #7]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d007      	beq.n	800f780 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f770:	4b06      	ldr	r3, [pc, #24]	; (800f78c <dhcp_handle_ack+0xbc>)
 800f772:	69db      	ldr	r3, [r3, #28]
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff fc74 	bl	800f062 <lwip_htonl>
 800f77a:	4602      	mov	r2, r0
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f780:	bf00      	nop
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	24009740 	.word	0x24009740
 800f78c:	24009720 	.word	0x24009720

0800f790 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d109      	bne.n	800f7b2 <dhcp_start+0x22>
 800f79e:	4b37      	ldr	r3, [pc, #220]	; (800f87c <dhcp_start+0xec>)
 800f7a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f7a4:	4936      	ldr	r1, [pc, #216]	; (800f880 <dhcp_start+0xf0>)
 800f7a6:	4837      	ldr	r0, [pc, #220]	; (800f884 <dhcp_start+0xf4>)
 800f7a8:	f00c f86e 	bl	801b888 <iprintf>
 800f7ac:	f06f 030f 	mvn.w	r3, #15
 800f7b0:	e060      	b.n	800f874 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f7b8:	f003 0301 	and.w	r3, r3, #1
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d109      	bne.n	800f7d4 <dhcp_start+0x44>
 800f7c0:	4b2e      	ldr	r3, [pc, #184]	; (800f87c <dhcp_start+0xec>)
 800f7c2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f7c6:	4930      	ldr	r1, [pc, #192]	; (800f888 <dhcp_start+0xf8>)
 800f7c8:	482e      	ldr	r0, [pc, #184]	; (800f884 <dhcp_start+0xf4>)
 800f7ca:	f00c f85d 	bl	801b888 <iprintf>
 800f7ce:	f06f 030f 	mvn.w	r3, #15
 800f7d2:	e04f      	b.n	800f874 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7de:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f7e2:	d202      	bcs.n	800f7ea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e8:	e044      	b.n	800f874 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d10d      	bne.n	800f80c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f7f0:	2034      	movs	r0, #52	; 0x34
 800f7f2:	f004 f9af 	bl	8013b54 <mem_malloc>
 800f7f6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f802:	e037      	b.n	800f874 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	625a      	str	r2, [r3, #36]	; 0x24
 800f80a:	e005      	b.n	800f818 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	791b      	ldrb	r3, [r3, #4]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f814:	f7ff fc90 	bl	800f138 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f818:	2234      	movs	r2, #52	; 0x34
 800f81a:	2100      	movs	r1, #0
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f00c f898 	bl	801b952 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f822:	f7ff fc37 	bl	800f094 <dhcp_inc_pcb_refcount>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <dhcp_start+0xa2>
    return ERR_MEM;
 800f82c:	f04f 33ff 	mov.w	r3, #4294967295
 800f830:	e020      	b.n	800f874 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2201      	movs	r2, #1
 800f836:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f83e:	f003 0304 	and.w	r3, r3, #4
 800f842:	2b00      	cmp	r3, #0
 800f844:	d105      	bne.n	800f852 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f846:	2102      	movs	r1, #2
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f000 fd01 	bl	8010250 <dhcp_set_state>
    return ERR_OK;
 800f84e:	2300      	movs	r3, #0
 800f850:	e010      	b.n	800f874 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 f8f8 	bl	800fa48 <dhcp_discover>
 800f858:	4603      	mov	r3, r0
 800f85a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f85c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d005      	beq.n	800f870 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fc59 	bl	801011c <dhcp_release_and_stop>
    return ERR_MEM;
 800f86a:	f04f 33ff 	mov.w	r3, #4294967295
 800f86e:	e001      	b.n	800f874 <dhcp_start+0xe4>
  }
  return result;
 800f870:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	0801c74c 	.word	0x0801c74c
 800f880:	0801c868 	.word	0x0801c868
 800f884:	0801c7e4 	.word	0x0801c7e4
 800f888:	0801c8ac 	.word	0x0801c8ac

0800f88c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f898:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d025      	beq.n	800f8ec <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	795b      	ldrb	r3, [r3, #5]
 800f8a4:	2b0a      	cmp	r3, #10
 800f8a6:	d008      	beq.n	800f8ba <dhcp_network_changed+0x2e>
 800f8a8:	2b0a      	cmp	r3, #10
 800f8aa:	dc0d      	bgt.n	800f8c8 <dhcp_network_changed+0x3c>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01f      	beq.n	800f8f0 <dhcp_network_changed+0x64>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	db09      	blt.n	800f8c8 <dhcp_network_changed+0x3c>
 800f8b4:	3b03      	subs	r3, #3
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d806      	bhi.n	800f8c8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fb75 	bl	800ffb0 <dhcp_reboot>
      break;
 800f8c6:	e014      	b.n	800f8f2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	795b      	ldrb	r3, [r3, #5]
 800f8cc:	2b0c      	cmp	r3, #12
 800f8ce:	d906      	bls.n	800f8de <dhcp_network_changed+0x52>
 800f8d0:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <dhcp_network_changed+0x6c>)
 800f8d2:	f240 326d 	movw	r2, #877	; 0x36d
 800f8d6:	4909      	ldr	r1, [pc, #36]	; (800f8fc <dhcp_network_changed+0x70>)
 800f8d8:	4809      	ldr	r0, [pc, #36]	; (800f900 <dhcp_network_changed+0x74>)
 800f8da:	f00b ffd5 	bl	801b888 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f000 f8af 	bl	800fa48 <dhcp_discover>
      break;
 800f8ea:	e002      	b.n	800f8f2 <dhcp_network_changed+0x66>
    return;
 800f8ec:	bf00      	nop
 800f8ee:	e000      	b.n	800f8f2 <dhcp_network_changed+0x66>
      break;
 800f8f0:	bf00      	nop
  }
}
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0801c74c 	.word	0x0801c74c
 800f8fc:	0801c8d0 	.word	0x0801c8d0
 800f900:	0801c7e4 	.word	0x0801c7e4

0800f904 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d107      	bne.n	800f924 <dhcp_arp_reply+0x20>
 800f914:	4b0e      	ldr	r3, [pc, #56]	; (800f950 <dhcp_arp_reply+0x4c>)
 800f916:	f240 328b 	movw	r2, #907	; 0x38b
 800f91a:	490e      	ldr	r1, [pc, #56]	; (800f954 <dhcp_arp_reply+0x50>)
 800f91c:	480e      	ldr	r0, [pc, #56]	; (800f958 <dhcp_arp_reply+0x54>)
 800f91e:	f00b ffb3 	bl	801b888 <iprintf>
 800f922:	e012      	b.n	800f94a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00c      	beq.n	800f94a <dhcp_arp_reply+0x46>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	795b      	ldrb	r3, [r3, #5]
 800f934:	2b08      	cmp	r3, #8
 800f936:	d108      	bne.n	800f94a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	69db      	ldr	r3, [r3, #28]
 800f940:	429a      	cmp	r2, r3
 800f942:	d102      	bne.n	800f94a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f809 	bl	800f95c <dhcp_decline>
    }
  }
}
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	0801c74c 	.word	0x0801c74c
 800f954:	0801c868 	.word	0x0801c868
 800f958:	0801c7e4 	.word	0x0801c7e4

0800f95c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f95c:	b5b0      	push	{r4, r5, r7, lr}
 800f95e:	b08a      	sub	sp, #40	; 0x28
 800f960:	af02      	add	r7, sp, #8
 800f962:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f968:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f96a:	210c      	movs	r1, #12
 800f96c:	69b8      	ldr	r0, [r7, #24]
 800f96e:	f000 fc6f 	bl	8010250 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f972:	f107 030c 	add.w	r3, r7, #12
 800f976:	2204      	movs	r2, #4
 800f978:	69b9      	ldr	r1, [r7, #24]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f001 f8f4 	bl	8010b68 <dhcp_create_msg>
 800f980:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d035      	beq.n	800f9f4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f98e:	89b8      	ldrh	r0, [r7, #12]
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f996:	2304      	movs	r3, #4
 800f998:	2232      	movs	r2, #50	; 0x32
 800f99a:	f000 fc73 	bl	8010284 <dhcp_option>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f9a2:	89bc      	ldrh	r4, [r7, #12]
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	69db      	ldr	r3, [r3, #28]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff fb57 	bl	800f062 <lwip_htonl>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f000 fcee 	bl	801039c <dhcp_option_long>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f9c4:	89b8      	ldrh	r0, [r7, #12]
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	33f0      	adds	r3, #240	; 0xf0
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	f001 f9a1 	bl	8010d14 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f9d2:	4b19      	ldr	r3, [pc, #100]	; (800fa38 <dhcp_decline+0xdc>)
 800f9d4:	6818      	ldr	r0, [r3, #0]
 800f9d6:	4b19      	ldr	r3, [pc, #100]	; (800fa3c <dhcp_decline+0xe0>)
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	2343      	movs	r3, #67	; 0x43
 800f9e0:	4a17      	ldr	r2, [pc, #92]	; (800fa40 <dhcp_decline+0xe4>)
 800f9e2:	6979      	ldr	r1, [r7, #20]
 800f9e4:	f00b fbca 	bl	801b17c <udp_sendto_if_src>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f9ec:	6978      	ldr	r0, [r7, #20]
 800f9ee:	f005 f97b 	bl	8014ce8 <pbuf_free>
 800f9f2:	e001      	b.n	800f9f8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f9f4:	23ff      	movs	r3, #255	; 0xff
 800f9f6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	799b      	ldrb	r3, [r3, #6]
 800f9fc:	2bff      	cmp	r3, #255	; 0xff
 800f9fe:	d005      	beq.n	800fa0c <dhcp_decline+0xb0>
    dhcp->tries++;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	799b      	ldrb	r3, [r3, #6]
 800fa04:	3301      	adds	r3, #1
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800fa0c:	f242 7310 	movw	r3, #10000	; 0x2710
 800fa10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fa12:	89fb      	ldrh	r3, [r7, #14]
 800fa14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa18:	4a0a      	ldr	r2, [pc, #40]	; (800fa44 <dhcp_decline+0xe8>)
 800fa1a:	fb82 1203 	smull	r1, r2, r2, r3
 800fa1e:	1152      	asrs	r2, r2, #5
 800fa20:	17db      	asrs	r3, r3, #31
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3720      	adds	r7, #32
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bdb0      	pop	{r4, r5, r7, pc}
 800fa36:	bf00      	nop
 800fa38:	24009748 	.word	0x24009748
 800fa3c:	0801f984 	.word	0x0801f984
 800fa40:	0801f988 	.word	0x0801f988
 800fa44:	10624dd3 	.word	0x10624dd3

0800fa48 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800fa56:	2300      	movs	r3, #0
 800fa58:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800fa60:	2106      	movs	r1, #6
 800fa62:	69b8      	ldr	r0, [r7, #24]
 800fa64:	f000 fbf4 	bl	8010250 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800fa68:	f107 0308 	add.w	r3, r7, #8
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	69b9      	ldr	r1, [r7, #24]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f001 f879 	bl	8010b68 <dhcp_create_msg>
 800fa76:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d04b      	beq.n	800fb16 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fa84:	8938      	ldrh	r0, [r7, #8]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa8c:	2302      	movs	r3, #2
 800fa8e:	2239      	movs	r2, #57	; 0x39
 800fa90:	f000 fbf8 	bl	8010284 <dhcp_option>
 800fa94:	4603      	mov	r3, r0
 800fa96:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa98:	8938      	ldrh	r0, [r7, #8]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faa4:	461a      	mov	r2, r3
 800faa6:	f000 fc47 	bl	8010338 <dhcp_option_short>
 800faaa:	4603      	mov	r3, r0
 800faac:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800faae:	8938      	ldrh	r0, [r7, #8]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fab6:	2303      	movs	r3, #3
 800fab8:	2237      	movs	r2, #55	; 0x37
 800faba:	f000 fbe3 	bl	8010284 <dhcp_option>
 800fabe:	4603      	mov	r3, r0
 800fac0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fac2:	2300      	movs	r3, #0
 800fac4:	77fb      	strb	r3, [r7, #31]
 800fac6:	e00e      	b.n	800fae6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fac8:	8938      	ldrh	r0, [r7, #8]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fad0:	7ffb      	ldrb	r3, [r7, #31]
 800fad2:	4a29      	ldr	r2, [pc, #164]	; (800fb78 <dhcp_discover+0x130>)
 800fad4:	5cd3      	ldrb	r3, [r2, r3]
 800fad6:	461a      	mov	r2, r3
 800fad8:	f000 fc08 	bl	80102ec <dhcp_option_byte>
 800fadc:	4603      	mov	r3, r0
 800fade:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fae0:	7ffb      	ldrb	r3, [r7, #31]
 800fae2:	3301      	adds	r3, #1
 800fae4:	77fb      	strb	r3, [r7, #31]
 800fae6:	7ffb      	ldrb	r3, [r7, #31]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d9ed      	bls.n	800fac8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800faec:	8938      	ldrh	r0, [r7, #8]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	33f0      	adds	r3, #240	; 0xf0
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	4619      	mov	r1, r3
 800faf6:	f001 f90d 	bl	8010d14 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fafa:	4b20      	ldr	r3, [pc, #128]	; (800fb7c <dhcp_discover+0x134>)
 800fafc:	6818      	ldr	r0, [r3, #0]
 800fafe:	4b20      	ldr	r3, [pc, #128]	; (800fb80 <dhcp_discover+0x138>)
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	2343      	movs	r3, #67	; 0x43
 800fb08:	4a1e      	ldr	r2, [pc, #120]	; (800fb84 <dhcp_discover+0x13c>)
 800fb0a:	6939      	ldr	r1, [r7, #16]
 800fb0c:	f00b fb36 	bl	801b17c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800fb10:	6938      	ldr	r0, [r7, #16]
 800fb12:	f005 f8e9 	bl	8014ce8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	799b      	ldrb	r3, [r3, #6]
 800fb1a:	2bff      	cmp	r3, #255	; 0xff
 800fb1c:	d005      	beq.n	800fb2a <dhcp_discover+0xe2>
    dhcp->tries++;
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	799b      	ldrb	r3, [r3, #6]
 800fb22:	3301      	adds	r3, #1
 800fb24:	b2da      	uxtb	r2, r3
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	799b      	ldrb	r3, [r3, #6]
 800fb2e:	2b05      	cmp	r3, #5
 800fb30:	d80d      	bhi.n	800fb4e <dhcp_discover+0x106>
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	799b      	ldrb	r3, [r3, #6]
 800fb36:	461a      	mov	r2, r3
 800fb38:	2301      	movs	r3, #1
 800fb3a:	4093      	lsls	r3, r2
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	461a      	mov	r2, r3
 800fb40:	0152      	lsls	r2, r2, #5
 800fb42:	1ad2      	subs	r2, r2, r3
 800fb44:	0092      	lsls	r2, r2, #2
 800fb46:	4413      	add	r3, r2
 800fb48:	00db      	lsls	r3, r3, #3
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	e001      	b.n	800fb52 <dhcp_discover+0x10a>
 800fb4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fb52:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb54:	897b      	ldrh	r3, [r7, #10]
 800fb56:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb5a:	4a0b      	ldr	r2, [pc, #44]	; (800fb88 <dhcp_discover+0x140>)
 800fb5c:	fb82 1203 	smull	r1, r2, r2, r3
 800fb60:	1152      	asrs	r2, r2, #5
 800fb62:	17db      	asrs	r3, r3, #31
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3720      	adds	r7, #32
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	24000028 	.word	0x24000028
 800fb7c:	24009748 	.word	0x24009748
 800fb80:	0801f984 	.word	0x0801f984
 800fb84:	0801f988 	.word	0x0801f988
 800fb88:	10624dd3 	.word	0x10624dd3

0800fb8c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b088      	sub	sp, #32
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d107      	bne.n	800fbaa <dhcp_bind+0x1e>
 800fb9a:	4b64      	ldr	r3, [pc, #400]	; (800fd2c <dhcp_bind+0x1a0>)
 800fb9c:	f240 4215 	movw	r2, #1045	; 0x415
 800fba0:	4963      	ldr	r1, [pc, #396]	; (800fd30 <dhcp_bind+0x1a4>)
 800fba2:	4864      	ldr	r0, [pc, #400]	; (800fd34 <dhcp_bind+0x1a8>)
 800fba4:	f00b fe70 	bl	801b888 <iprintf>
 800fba8:	e0bc      	b.n	800fd24 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d107      	bne.n	800fbc6 <dhcp_bind+0x3a>
 800fbb6:	4b5d      	ldr	r3, [pc, #372]	; (800fd2c <dhcp_bind+0x1a0>)
 800fbb8:	f240 4217 	movw	r2, #1047	; 0x417
 800fbbc:	495e      	ldr	r1, [pc, #376]	; (800fd38 <dhcp_bind+0x1ac>)
 800fbbe:	485d      	ldr	r0, [pc, #372]	; (800fd34 <dhcp_bind+0x1a8>)
 800fbc0:	f00b fe62 	bl	801b888 <iprintf>
 800fbc4:	e0ae      	b.n	800fd24 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd4:	d019      	beq.n	800fc0a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbda:	331e      	adds	r3, #30
 800fbdc:	4a57      	ldr	r2, [pc, #348]	; (800fd3c <dhcp_bind+0x1b0>)
 800fbde:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe2:	095b      	lsrs	r3, r3, #5
 800fbe4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbec:	d302      	bcc.n	800fbf4 <dhcp_bind+0x68>
      timeout = 0xffff;
 800fbee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbf2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	8a9b      	ldrh	r3, [r3, #20]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d102      	bne.n	800fc0a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	2201      	movs	r2, #1
 800fc08:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc12:	d01d      	beq.n	800fc50 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc18:	331e      	adds	r3, #30
 800fc1a:	4a48      	ldr	r2, [pc, #288]	; (800fd3c <dhcp_bind+0x1b0>)
 800fc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc20:	095b      	lsrs	r3, r3, #5
 800fc22:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc2a:	d302      	bcc.n	800fc32 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800fc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc30:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	895b      	ldrh	r3, [r3, #10]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d102      	bne.n	800fc48 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	2201      	movs	r2, #1
 800fc46:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	895a      	ldrh	r2, [r3, #10]
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc58:	d01d      	beq.n	800fc96 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc5e:	331e      	adds	r3, #30
 800fc60:	4a36      	ldr	r2, [pc, #216]	; (800fd3c <dhcp_bind+0x1b0>)
 800fc62:	fba2 2303 	umull	r2, r3, r2, r3
 800fc66:	095b      	lsrs	r3, r3, #5
 800fc68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc70:	d302      	bcc.n	800fc78 <dhcp_bind+0xec>
      timeout = 0xffff;
 800fc72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	899b      	ldrh	r3, [r3, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d102      	bne.n	800fc8e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	899a      	ldrh	r2, [r3, #12]
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	895a      	ldrh	r2, [r3, #10]
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	899b      	ldrh	r3, [r3, #12]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d306      	bcc.n	800fcb0 <dhcp_bind+0x124>
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	899b      	ldrh	r3, [r3, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	2200      	movs	r2, #0
 800fcae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	79db      	ldrb	r3, [r3, #7]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d003      	beq.n	800fcc0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	6a1b      	ldr	r3, [r3, #32]
 800fcbc:	613b      	str	r3, [r7, #16]
 800fcbe:	e014      	b.n	800fcea <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	331c      	adds	r3, #28
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800fcc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	db02      	blt.n	800fcd6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800fcd0:	23ff      	movs	r3, #255	; 0xff
 800fcd2:	613b      	str	r3, [r7, #16]
 800fcd4:	e009      	b.n	800fcea <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
 800fcd8:	2bbf      	cmp	r3, #191	; 0xbf
 800fcda:	d903      	bls.n	800fce4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800fcdc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	e002      	b.n	800fcea <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800fce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fce8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d108      	bne.n	800fd08 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	69da      	ldr	r2, [r3, #28]
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	4013      	ands	r3, r2
 800fcfe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800fd08:	210a      	movs	r1, #10
 800fd0a:	69b8      	ldr	r0, [r7, #24]
 800fd0c:	f000 faa0 	bl	8010250 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	f103 011c 	add.w	r1, r3, #28
 800fd16:	f107 030c 	add.w	r3, r7, #12
 800fd1a:	f107 0210 	add.w	r2, r7, #16
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f004 fad4 	bl	80142cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	0801c74c 	.word	0x0801c74c
 800fd30:	0801c8e4 	.word	0x0801c8e4
 800fd34:	0801c7e4 	.word	0x0801c7e4
 800fd38:	0801c900 	.word	0x0801c900
 800fd3c:	88888889 	.word	0x88888889

0800fd40 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800fd4e:	2105      	movs	r1, #5
 800fd50:	69b8      	ldr	r0, [r7, #24]
 800fd52:	f000 fa7d 	bl	8010250 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fd56:	f107 030c 	add.w	r3, r7, #12
 800fd5a:	2203      	movs	r2, #3
 800fd5c:	69b9      	ldr	r1, [r7, #24]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 ff02 	bl	8010b68 <dhcp_create_msg>
 800fd64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d04e      	beq.n	800fe0a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fd72:	89b8      	ldrh	r0, [r7, #12]
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	2239      	movs	r2, #57	; 0x39
 800fd7e:	f000 fa81 	bl	8010284 <dhcp_option>
 800fd82:	4603      	mov	r3, r0
 800fd84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fd86:	89b8      	ldrh	r0, [r7, #12]
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd92:	461a      	mov	r2, r3
 800fd94:	f000 fad0 	bl	8010338 <dhcp_option_short>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd9c:	89b8      	ldrh	r0, [r7, #12]
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fda4:	2303      	movs	r3, #3
 800fda6:	2237      	movs	r2, #55	; 0x37
 800fda8:	f000 fa6c 	bl	8010284 <dhcp_option>
 800fdac:	4603      	mov	r3, r0
 800fdae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	77bb      	strb	r3, [r7, #30]
 800fdb4:	e00e      	b.n	800fdd4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fdb6:	89b8      	ldrh	r0, [r7, #12]
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fdbe:	7fbb      	ldrb	r3, [r7, #30]
 800fdc0:	4a2a      	ldr	r2, [pc, #168]	; (800fe6c <dhcp_renew+0x12c>)
 800fdc2:	5cd3      	ldrb	r3, [r2, r3]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	f000 fa91 	bl	80102ec <dhcp_option_byte>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fdce:	7fbb      	ldrb	r3, [r7, #30]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	77bb      	strb	r3, [r7, #30]
 800fdd4:	7fbb      	ldrb	r3, [r7, #30]
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d9ed      	bls.n	800fdb6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fdda:	89b8      	ldrh	r0, [r7, #12]
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	33f0      	adds	r3, #240	; 0xf0
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	4619      	mov	r1, r3
 800fde4:	f000 ff96 	bl	8010d14 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fde8:	4b21      	ldr	r3, [pc, #132]	; (800fe70 <dhcp_renew+0x130>)
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	f103 0218 	add.w	r2, r3, #24
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	2343      	movs	r3, #67	; 0x43
 800fdf8:	6979      	ldr	r1, [r7, #20]
 800fdfa:	f00b f94b 	bl	801b094 <udp_sendto_if>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fe02:	6978      	ldr	r0, [r7, #20]
 800fe04:	f004 ff70 	bl	8014ce8 <pbuf_free>
 800fe08:	e001      	b.n	800fe0e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fe0a:	23ff      	movs	r3, #255	; 0xff
 800fe0c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	799b      	ldrb	r3, [r3, #6]
 800fe12:	2bff      	cmp	r3, #255	; 0xff
 800fe14:	d005      	beq.n	800fe22 <dhcp_renew+0xe2>
    dhcp->tries++;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	799b      	ldrb	r3, [r3, #6]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	799b      	ldrb	r3, [r3, #6]
 800fe26:	2b09      	cmp	r3, #9
 800fe28:	d80a      	bhi.n	800fe40 <dhcp_renew+0x100>
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	799b      	ldrb	r3, [r3, #6]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	0152      	lsls	r2, r2, #5
 800fe34:	1ad2      	subs	r2, r2, r3
 800fe36:	0092      	lsls	r2, r2, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	011b      	lsls	r3, r3, #4
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	e001      	b.n	800fe44 <dhcp_renew+0x104>
 800fe40:	f644 6320 	movw	r3, #20000	; 0x4e20
 800fe44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fe46:	89fb      	ldrh	r3, [r7, #14]
 800fe48:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fe4c:	4a09      	ldr	r2, [pc, #36]	; (800fe74 <dhcp_renew+0x134>)
 800fe4e:	fb82 1203 	smull	r1, r2, r2, r3
 800fe52:	1152      	asrs	r2, r2, #5
 800fe54:	17db      	asrs	r3, r3, #31
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fe5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3720      	adds	r7, #32
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	24000028 	.word	0x24000028
 800fe70:	24009748 	.word	0x24009748
 800fe74:	10624dd3 	.word	0x10624dd3

0800fe78 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08a      	sub	sp, #40	; 0x28
 800fe7c:	af02      	add	r7, sp, #8
 800fe7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fe86:	2104      	movs	r1, #4
 800fe88:	69b8      	ldr	r0, [r7, #24]
 800fe8a:	f000 f9e1 	bl	8010250 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fe8e:	f107 030c 	add.w	r3, r7, #12
 800fe92:	2203      	movs	r2, #3
 800fe94:	69b9      	ldr	r1, [r7, #24]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 fe66 	bl	8010b68 <dhcp_create_msg>
 800fe9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d04c      	beq.n	800ff3e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800feaa:	89b8      	ldrh	r0, [r7, #12]
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800feb2:	2302      	movs	r3, #2
 800feb4:	2239      	movs	r2, #57	; 0x39
 800feb6:	f000 f9e5 	bl	8010284 <dhcp_option>
 800feba:	4603      	mov	r3, r0
 800febc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800febe:	89b8      	ldrh	r0, [r7, #12]
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feca:	461a      	mov	r2, r3
 800fecc:	f000 fa34 	bl	8010338 <dhcp_option_short>
 800fed0:	4603      	mov	r3, r0
 800fed2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fed4:	89b8      	ldrh	r0, [r7, #12]
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fedc:	2303      	movs	r3, #3
 800fede:	2237      	movs	r2, #55	; 0x37
 800fee0:	f000 f9d0 	bl	8010284 <dhcp_option>
 800fee4:	4603      	mov	r3, r0
 800fee6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fee8:	2300      	movs	r3, #0
 800feea:	77bb      	strb	r3, [r7, #30]
 800feec:	e00e      	b.n	800ff0c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800feee:	89b8      	ldrh	r0, [r7, #12]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fef6:	7fbb      	ldrb	r3, [r7, #30]
 800fef8:	4a29      	ldr	r2, [pc, #164]	; (800ffa0 <dhcp_rebind+0x128>)
 800fefa:	5cd3      	ldrb	r3, [r2, r3]
 800fefc:	461a      	mov	r2, r3
 800fefe:	f000 f9f5 	bl	80102ec <dhcp_option_byte>
 800ff02:	4603      	mov	r3, r0
 800ff04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ff06:	7fbb      	ldrb	r3, [r7, #30]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	77bb      	strb	r3, [r7, #30]
 800ff0c:	7fbb      	ldrb	r3, [r7, #30]
 800ff0e:	2b02      	cmp	r3, #2
 800ff10:	d9ed      	bls.n	800feee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ff12:	89b8      	ldrh	r0, [r7, #12]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	33f0      	adds	r3, #240	; 0xf0
 800ff18:	697a      	ldr	r2, [r7, #20]
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	f000 fefa 	bl	8010d14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ff20:	4b20      	ldr	r3, [pc, #128]	; (800ffa4 <dhcp_rebind+0x12c>)
 800ff22:	6818      	ldr	r0, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	2343      	movs	r3, #67	; 0x43
 800ff2a:	4a1f      	ldr	r2, [pc, #124]	; (800ffa8 <dhcp_rebind+0x130>)
 800ff2c:	6979      	ldr	r1, [r7, #20]
 800ff2e:	f00b f8b1 	bl	801b094 <udp_sendto_if>
 800ff32:	4603      	mov	r3, r0
 800ff34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ff36:	6978      	ldr	r0, [r7, #20]
 800ff38:	f004 fed6 	bl	8014ce8 <pbuf_free>
 800ff3c:	e001      	b.n	800ff42 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ff3e:	23ff      	movs	r3, #255	; 0xff
 800ff40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	799b      	ldrb	r3, [r3, #6]
 800ff46:	2bff      	cmp	r3, #255	; 0xff
 800ff48:	d005      	beq.n	800ff56 <dhcp_rebind+0xde>
    dhcp->tries++;
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	799b      	ldrb	r3, [r3, #6]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800ff56:	69bb      	ldr	r3, [r7, #24]
 800ff58:	799b      	ldrb	r3, [r3, #6]
 800ff5a:	2b09      	cmp	r3, #9
 800ff5c:	d80a      	bhi.n	800ff74 <dhcp_rebind+0xfc>
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	799b      	ldrb	r3, [r3, #6]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	461a      	mov	r2, r3
 800ff66:	0152      	lsls	r2, r2, #5
 800ff68:	1ad2      	subs	r2, r2, r3
 800ff6a:	0092      	lsls	r2, r2, #2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	e001      	b.n	800ff78 <dhcp_rebind+0x100>
 800ff74:	f242 7310 	movw	r3, #10000	; 0x2710
 800ff78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ff7a:	89fb      	ldrh	r3, [r7, #14]
 800ff7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ff80:	4a0a      	ldr	r2, [pc, #40]	; (800ffac <dhcp_rebind+0x134>)
 800ff82:	fb82 1203 	smull	r1, r2, r2, r3
 800ff86:	1152      	asrs	r2, r2, #5
 800ff88:	17db      	asrs	r3, r3, #31
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ff92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3720      	adds	r7, #32
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	24000028 	.word	0x24000028
 800ffa4:	24009748 	.word	0x24009748
 800ffa8:	0801f988 	.word	0x0801f988
 800ffac:	10624dd3 	.word	0x10624dd3

0800ffb0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800ffb0:	b5b0      	push	{r4, r5, r7, lr}
 800ffb2:	b08a      	sub	sp, #40	; 0x28
 800ffb4:	af02      	add	r7, sp, #8
 800ffb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800ffbe:	2103      	movs	r1, #3
 800ffc0:	69b8      	ldr	r0, [r7, #24]
 800ffc2:	f000 f945 	bl	8010250 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ffc6:	f107 030c 	add.w	r3, r7, #12
 800ffca:	2203      	movs	r2, #3
 800ffcc:	69b9      	ldr	r1, [r7, #24]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fdca 	bl	8010b68 <dhcp_create_msg>
 800ffd4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d066      	beq.n	80100aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ffe2:	89b8      	ldrh	r0, [r7, #12]
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffea:	2302      	movs	r3, #2
 800ffec:	2239      	movs	r2, #57	; 0x39
 800ffee:	f000 f949 	bl	8010284 <dhcp_option>
 800fff2:	4603      	mov	r3, r0
 800fff4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fff6:	89b8      	ldrh	r0, [r7, #12]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	33f0      	adds	r3, #240	; 0xf0
 800fffc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010000:	4619      	mov	r1, r3
 8010002:	f000 f999 	bl	8010338 <dhcp_option_short>
 8010006:	4603      	mov	r3, r0
 8010008:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801000a:	89b8      	ldrh	r0, [r7, #12]
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010012:	2304      	movs	r3, #4
 8010014:	2232      	movs	r2, #50	; 0x32
 8010016:	f000 f935 	bl	8010284 <dhcp_option>
 801001a:	4603      	mov	r3, r0
 801001c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801001e:	89bc      	ldrh	r4, [r7, #12]
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	69db      	ldr	r3, [r3, #28]
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff f819 	bl	800f062 <lwip_htonl>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	4629      	mov	r1, r5
 8010036:	4620      	mov	r0, r4
 8010038:	f000 f9b0 	bl	801039c <dhcp_option_long>
 801003c:	4603      	mov	r3, r0
 801003e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010040:	89b8      	ldrh	r0, [r7, #12]
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010048:	2303      	movs	r3, #3
 801004a:	2237      	movs	r2, #55	; 0x37
 801004c:	f000 f91a 	bl	8010284 <dhcp_option>
 8010050:	4603      	mov	r3, r0
 8010052:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010054:	2300      	movs	r3, #0
 8010056:	77bb      	strb	r3, [r7, #30]
 8010058:	e00e      	b.n	8010078 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801005a:	89b8      	ldrh	r0, [r7, #12]
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010062:	7fbb      	ldrb	r3, [r7, #30]
 8010064:	4a29      	ldr	r2, [pc, #164]	; (801010c <dhcp_reboot+0x15c>)
 8010066:	5cd3      	ldrb	r3, [r2, r3]
 8010068:	461a      	mov	r2, r3
 801006a:	f000 f93f 	bl	80102ec <dhcp_option_byte>
 801006e:	4603      	mov	r3, r0
 8010070:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010072:	7fbb      	ldrb	r3, [r7, #30]
 8010074:	3301      	adds	r3, #1
 8010076:	77bb      	strb	r3, [r7, #30]
 8010078:	7fbb      	ldrb	r3, [r7, #30]
 801007a:	2b02      	cmp	r3, #2
 801007c:	d9ed      	bls.n	801005a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801007e:	89b8      	ldrh	r0, [r7, #12]
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	33f0      	adds	r3, #240	; 0xf0
 8010084:	697a      	ldr	r2, [r7, #20]
 8010086:	4619      	mov	r1, r3
 8010088:	f000 fe44 	bl	8010d14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801008c:	4b20      	ldr	r3, [pc, #128]	; (8010110 <dhcp_reboot+0x160>)
 801008e:	6818      	ldr	r0, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	2343      	movs	r3, #67	; 0x43
 8010096:	4a1f      	ldr	r2, [pc, #124]	; (8010114 <dhcp_reboot+0x164>)
 8010098:	6979      	ldr	r1, [r7, #20]
 801009a:	f00a fffb 	bl	801b094 <udp_sendto_if>
 801009e:	4603      	mov	r3, r0
 80100a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80100a2:	6978      	ldr	r0, [r7, #20]
 80100a4:	f004 fe20 	bl	8014ce8 <pbuf_free>
 80100a8:	e001      	b.n	80100ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80100aa:	23ff      	movs	r3, #255	; 0xff
 80100ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	799b      	ldrb	r3, [r3, #6]
 80100b2:	2bff      	cmp	r3, #255	; 0xff
 80100b4:	d005      	beq.n	80100c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	799b      	ldrb	r3, [r3, #6]
 80100ba:	3301      	adds	r3, #1
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	799b      	ldrb	r3, [r3, #6]
 80100c6:	2b09      	cmp	r3, #9
 80100c8:	d80a      	bhi.n	80100e0 <dhcp_reboot+0x130>
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	799b      	ldrb	r3, [r3, #6]
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	461a      	mov	r2, r3
 80100d2:	0152      	lsls	r2, r2, #5
 80100d4:	1ad2      	subs	r2, r2, r3
 80100d6:	0092      	lsls	r2, r2, #2
 80100d8:	4413      	add	r3, r2
 80100da:	00db      	lsls	r3, r3, #3
 80100dc:	b29b      	uxth	r3, r3
 80100de:	e001      	b.n	80100e4 <dhcp_reboot+0x134>
 80100e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80100e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80100e6:	89fb      	ldrh	r3, [r7, #14]
 80100e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80100ec:	4a0a      	ldr	r2, [pc, #40]	; (8010118 <dhcp_reboot+0x168>)
 80100ee:	fb82 1203 	smull	r1, r2, r2, r3
 80100f2:	1152      	asrs	r2, r2, #5
 80100f4:	17db      	asrs	r3, r3, #31
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80100fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3720      	adds	r7, #32
 8010106:	46bd      	mov	sp, r7
 8010108:	bdb0      	pop	{r4, r5, r7, pc}
 801010a:	bf00      	nop
 801010c:	24000028 	.word	0x24000028
 8010110:	24009748 	.word	0x24009748
 8010114:	0801f988 	.word	0x0801f988
 8010118:	10624dd3 	.word	0x10624dd3

0801011c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801011c:	b5b0      	push	{r4, r5, r7, lr}
 801011e:	b08a      	sub	sp, #40	; 0x28
 8010120:	af02      	add	r7, sp, #8
 8010122:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	2b00      	cmp	r3, #0
 801012e:	f000 8084 	beq.w	801023a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	795b      	ldrb	r3, [r3, #5]
 8010136:	2b00      	cmp	r3, #0
 8010138:	f000 8081 	beq.w	801023e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2200      	movs	r2, #0
 8010146:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2200      	movs	r2, #0
 801014c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	2200      	movs	r2, #0
 8010152:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	2200      	movs	r2, #0
 8010158:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	2200      	movs	r2, #0
 801015e:	631a      	str	r2, [r3, #48]	; 0x30
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	62da      	str	r2, [r3, #44]	; 0x2c
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2200      	movs	r2, #0
 8010174:	829a      	strh	r2, [r3, #20]
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	8a9a      	ldrh	r2, [r3, #20]
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	825a      	strh	r2, [r3, #18]
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	8a5a      	ldrh	r2, [r3, #18]
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	821a      	strh	r2, [r3, #16]
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	8a1a      	ldrh	r2, [r3, #16]
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fdee 	bl	8010d70 <dhcp_supplied_address>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d03b      	beq.n	8010212 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801019a:	f107 030e 	add.w	r3, r7, #14
 801019e:	2207      	movs	r2, #7
 80101a0:	69f9      	ldr	r1, [r7, #28]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fce0 	bl	8010b68 <dhcp_create_msg>
 80101a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d030      	beq.n	8010212 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80101b6:	89f8      	ldrh	r0, [r7, #14]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101be:	2304      	movs	r3, #4
 80101c0:	2236      	movs	r2, #54	; 0x36
 80101c2:	f000 f85f 	bl	8010284 <dhcp_option>
 80101c6:	4603      	mov	r3, r0
 80101c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80101ca:	89fc      	ldrh	r4, [r7, #14]
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fe ff44 	bl	800f062 <lwip_htonl>
 80101da:	4603      	mov	r3, r0
 80101dc:	461a      	mov	r2, r3
 80101de:	4629      	mov	r1, r5
 80101e0:	4620      	mov	r0, r4
 80101e2:	f000 f8db 	bl	801039c <dhcp_option_long>
 80101e6:	4603      	mov	r3, r0
 80101e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80101ea:	89f8      	ldrh	r0, [r7, #14]
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	33f0      	adds	r3, #240	; 0xf0
 80101f0:	69ba      	ldr	r2, [r7, #24]
 80101f2:	4619      	mov	r1, r3
 80101f4:	f000 fd8e 	bl	8010d14 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80101f8:	4b13      	ldr	r3, [pc, #76]	; (8010248 <dhcp_release_and_stop+0x12c>)
 80101fa:	6818      	ldr	r0, [r3, #0]
 80101fc:	f107 0210 	add.w	r2, r7, #16
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	2343      	movs	r3, #67	; 0x43
 8010206:	69b9      	ldr	r1, [r7, #24]
 8010208:	f00a ff44 	bl	801b094 <udp_sendto_if>
      pbuf_free(p_out);
 801020c:	69b8      	ldr	r0, [r7, #24]
 801020e:	f004 fd6b 	bl	8014ce8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010212:	4b0e      	ldr	r3, [pc, #56]	; (801024c <dhcp_release_and_stop+0x130>)
 8010214:	4a0d      	ldr	r2, [pc, #52]	; (801024c <dhcp_release_and_stop+0x130>)
 8010216:	490d      	ldr	r1, [pc, #52]	; (801024c <dhcp_release_and_stop+0x130>)
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f004 f857 	bl	80142cc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801021e:	2100      	movs	r1, #0
 8010220:	69f8      	ldr	r0, [r7, #28]
 8010222:	f000 f815 	bl	8010250 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	791b      	ldrb	r3, [r3, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d008      	beq.n	8010240 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801022e:	f7fe ff83 	bl	800f138 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	2200      	movs	r2, #0
 8010236:	711a      	strb	r2, [r3, #4]
 8010238:	e002      	b.n	8010240 <dhcp_release_and_stop+0x124>
    return;
 801023a:	bf00      	nop
 801023c:	e000      	b.n	8010240 <dhcp_release_and_stop+0x124>
    return;
 801023e:	bf00      	nop
  }
}
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bdb0      	pop	{r4, r5, r7, pc}
 8010246:	bf00      	nop
 8010248:	24009748 	.word	0x24009748
 801024c:	0801f984 	.word	0x0801f984

08010250 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	795b      	ldrb	r3, [r3, #5]
 8010260:	78fa      	ldrb	r2, [r7, #3]
 8010262:	429a      	cmp	r2, r3
 8010264:	d008      	beq.n	8010278 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	78fa      	ldrb	r2, [r7, #3]
 801026a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	811a      	strh	r2, [r3, #8]
  }
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6039      	str	r1, [r7, #0]
 801028c:	4611      	mov	r1, r2
 801028e:	461a      	mov	r2, r3
 8010290:	4603      	mov	r3, r0
 8010292:	80fb      	strh	r3, [r7, #6]
 8010294:	460b      	mov	r3, r1
 8010296:	717b      	strb	r3, [r7, #5]
 8010298:	4613      	mov	r3, r2
 801029a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801029c:	88fa      	ldrh	r2, [r7, #6]
 801029e:	793b      	ldrb	r3, [r7, #4]
 80102a0:	4413      	add	r3, r2
 80102a2:	3302      	adds	r3, #2
 80102a4:	2b44      	cmp	r3, #68	; 0x44
 80102a6:	d906      	bls.n	80102b6 <dhcp_option+0x32>
 80102a8:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <dhcp_option+0x5c>)
 80102aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80102ae:	490d      	ldr	r1, [pc, #52]	; (80102e4 <dhcp_option+0x60>)
 80102b0:	480d      	ldr	r0, [pc, #52]	; (80102e8 <dhcp_option+0x64>)
 80102b2:	f00b fae9 	bl	801b888 <iprintf>
  options[options_out_len++] = option_type;
 80102b6:	88fb      	ldrh	r3, [r7, #6]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	80fa      	strh	r2, [r7, #6]
 80102bc:	461a      	mov	r2, r3
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	4413      	add	r3, r2
 80102c2:	797a      	ldrb	r2, [r7, #5]
 80102c4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80102c6:	88fb      	ldrh	r3, [r7, #6]
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	80fa      	strh	r2, [r7, #6]
 80102cc:	461a      	mov	r2, r3
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	4413      	add	r3, r2
 80102d2:	793a      	ldrb	r2, [r7, #4]
 80102d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80102d6:	88fb      	ldrh	r3, [r7, #6]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	0801c74c 	.word	0x0801c74c
 80102e4:	0801c918 	.word	0x0801c918
 80102e8:	0801c7e4 	.word	0x0801c7e4

080102ec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	4603      	mov	r3, r0
 80102f4:	6039      	str	r1, [r7, #0]
 80102f6:	80fb      	strh	r3, [r7, #6]
 80102f8:	4613      	mov	r3, r2
 80102fa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80102fc:	88fb      	ldrh	r3, [r7, #6]
 80102fe:	2b43      	cmp	r3, #67	; 0x43
 8010300:	d906      	bls.n	8010310 <dhcp_option_byte+0x24>
 8010302:	4b0a      	ldr	r3, [pc, #40]	; (801032c <dhcp_option_byte+0x40>)
 8010304:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010308:	4909      	ldr	r1, [pc, #36]	; (8010330 <dhcp_option_byte+0x44>)
 801030a:	480a      	ldr	r0, [pc, #40]	; (8010334 <dhcp_option_byte+0x48>)
 801030c:	f00b fabc 	bl	801b888 <iprintf>
  options[options_out_len++] = value;
 8010310:	88fb      	ldrh	r3, [r7, #6]
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	80fa      	strh	r2, [r7, #6]
 8010316:	461a      	mov	r2, r3
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	4413      	add	r3, r2
 801031c:	797a      	ldrb	r2, [r7, #5]
 801031e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010320:	88fb      	ldrh	r3, [r7, #6]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	0801c74c 	.word	0x0801c74c
 8010330:	0801c95c 	.word	0x0801c95c
 8010334:	0801c7e4 	.word	0x0801c7e4

08010338 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	6039      	str	r1, [r7, #0]
 8010342:	80fb      	strh	r3, [r7, #6]
 8010344:	4613      	mov	r3, r2
 8010346:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010348:	88fb      	ldrh	r3, [r7, #6]
 801034a:	3302      	adds	r3, #2
 801034c:	2b44      	cmp	r3, #68	; 0x44
 801034e:	d906      	bls.n	801035e <dhcp_option_short+0x26>
 8010350:	4b0f      	ldr	r3, [pc, #60]	; (8010390 <dhcp_option_short+0x58>)
 8010352:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010356:	490f      	ldr	r1, [pc, #60]	; (8010394 <dhcp_option_short+0x5c>)
 8010358:	480f      	ldr	r0, [pc, #60]	; (8010398 <dhcp_option_short+0x60>)
 801035a:	f00b fa95 	bl	801b888 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801035e:	88bb      	ldrh	r3, [r7, #4]
 8010360:	0a1b      	lsrs	r3, r3, #8
 8010362:	b29a      	uxth	r2, r3
 8010364:	88fb      	ldrh	r3, [r7, #6]
 8010366:	1c59      	adds	r1, r3, #1
 8010368:	80f9      	strh	r1, [r7, #6]
 801036a:	4619      	mov	r1, r3
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	440b      	add	r3, r1
 8010370:	b2d2      	uxtb	r2, r2
 8010372:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010374:	88fb      	ldrh	r3, [r7, #6]
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	80fa      	strh	r2, [r7, #6]
 801037a:	461a      	mov	r2, r3
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	4413      	add	r3, r2
 8010380:	88ba      	ldrh	r2, [r7, #4]
 8010382:	b2d2      	uxtb	r2, r2
 8010384:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010386:	88fb      	ldrh	r3, [r7, #6]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	0801c74c 	.word	0x0801c74c
 8010394:	0801c994 	.word	0x0801c994
 8010398:	0801c7e4 	.word	0x0801c7e4

0801039c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
 80103a8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80103aa:	89fb      	ldrh	r3, [r7, #14]
 80103ac:	3304      	adds	r3, #4
 80103ae:	2b44      	cmp	r3, #68	; 0x44
 80103b0:	d906      	bls.n	80103c0 <dhcp_option_long+0x24>
 80103b2:	4b19      	ldr	r3, [pc, #100]	; (8010418 <dhcp_option_long+0x7c>)
 80103b4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80103b8:	4918      	ldr	r1, [pc, #96]	; (801041c <dhcp_option_long+0x80>)
 80103ba:	4819      	ldr	r0, [pc, #100]	; (8010420 <dhcp_option_long+0x84>)
 80103bc:	f00b fa64 	bl	801b888 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	0e1a      	lsrs	r2, r3, #24
 80103c4:	89fb      	ldrh	r3, [r7, #14]
 80103c6:	1c59      	adds	r1, r3, #1
 80103c8:	81f9      	strh	r1, [r7, #14]
 80103ca:	4619      	mov	r1, r3
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	440b      	add	r3, r1
 80103d0:	b2d2      	uxtb	r2, r2
 80103d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	0c1a      	lsrs	r2, r3, #16
 80103d8:	89fb      	ldrh	r3, [r7, #14]
 80103da:	1c59      	adds	r1, r3, #1
 80103dc:	81f9      	strh	r1, [r7, #14]
 80103de:	4619      	mov	r1, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	440b      	add	r3, r1
 80103e4:	b2d2      	uxtb	r2, r2
 80103e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	0a1a      	lsrs	r2, r3, #8
 80103ec:	89fb      	ldrh	r3, [r7, #14]
 80103ee:	1c59      	adds	r1, r3, #1
 80103f0:	81f9      	strh	r1, [r7, #14]
 80103f2:	4619      	mov	r1, r3
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	440b      	add	r3, r1
 80103f8:	b2d2      	uxtb	r2, r2
 80103fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80103fc:	89fb      	ldrh	r3, [r7, #14]
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	81fa      	strh	r2, [r7, #14]
 8010402:	461a      	mov	r2, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	4413      	add	r3, r2
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	b2d2      	uxtb	r2, r2
 801040c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801040e:	89fb      	ldrh	r3, [r7, #14]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3710      	adds	r7, #16
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	0801c74c 	.word	0x0801c74c
 801041c:	0801c9d0 	.word	0x0801c9d0
 8010420:	0801c7e4 	.word	0x0801c7e4

08010424 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b090      	sub	sp, #64	; 0x40
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801042e:	2300      	movs	r3, #0
 8010430:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010436:	2208      	movs	r2, #8
 8010438:	2100      	movs	r1, #0
 801043a:	48b5      	ldr	r0, [pc, #724]	; (8010710 <dhcp_parse_reply+0x2ec>)
 801043c:	f00b fa89 	bl	801b952 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	895b      	ldrh	r3, [r3, #10]
 8010444:	2b2b      	cmp	r3, #43	; 0x2b
 8010446:	d802      	bhi.n	801044e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010448:	f06f 0301 	mvn.w	r3, #1
 801044c:	e2a7      	b.n	801099e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010454:	23f0      	movs	r3, #240	; 0xf0
 8010456:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	891b      	ldrh	r3, [r3, #8]
 801045c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010462:	e00c      	b.n	801047e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010466:	895b      	ldrh	r3, [r3, #10]
 8010468:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	895b      	ldrh	r3, [r3, #10]
 8010472:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010474:	1ad3      	subs	r3, r2, r3
 8010476:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010480:	2b00      	cmp	r3, #0
 8010482:	d004      	beq.n	801048e <dhcp_parse_reply+0x6a>
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	895b      	ldrh	r3, [r3, #10]
 8010488:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801048a:	429a      	cmp	r2, r3
 801048c:	d2ea      	bcs.n	8010464 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010490:	2b00      	cmp	r3, #0
 8010492:	d102      	bne.n	801049a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010494:	f06f 0301 	mvn.w	r3, #1
 8010498:	e281      	b.n	801099e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801049a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801049c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801049e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80104a0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80104a8:	e239      	b.n	801091e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80104aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104ae:	4413      	add	r3, r2
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80104b4:	2300      	movs	r3, #0
 80104b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295
 80104be:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80104c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104c2:	3302      	adds	r3, #2
 80104c4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80104c6:	8bfa      	ldrh	r2, [r7, #30]
 80104c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d202      	bcs.n	80104d4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80104ce:	f06f 0301 	mvn.w	r3, #1
 80104d2:	e264      	b.n	801099e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80104d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104d6:	3301      	adds	r3, #1
 80104d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104da:	8952      	ldrh	r2, [r2, #10]
 80104dc:	4293      	cmp	r3, r2
 80104de:	da07      	bge.n	80104f0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80104e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104e2:	3301      	adds	r3, #1
 80104e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104e6:	4413      	add	r3, r2
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104ee:	e00b      	b.n	8010508 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80104f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d004      	beq.n	8010502 <dhcp_parse_reply+0xde>
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	e000      	b.n	8010504 <dhcp_parse_reply+0xe0>
 8010502:	2300      	movs	r3, #0
 8010504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801050c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	2b3b      	cmp	r3, #59	; 0x3b
 8010514:	f200 812c 	bhi.w	8010770 <dhcp_parse_reply+0x34c>
 8010518:	a201      	add	r2, pc, #4	; (adr r2, 8010520 <dhcp_parse_reply+0xfc>)
 801051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051e:	bf00      	nop
 8010520:	08010611 	.word	0x08010611
 8010524:	08010621 	.word	0x08010621
 8010528:	08010771 	.word	0x08010771
 801052c:	08010643 	.word	0x08010643
 8010530:	08010771 	.word	0x08010771
 8010534:	08010771 	.word	0x08010771
 8010538:	08010771 	.word	0x08010771
 801053c:	08010771 	.word	0x08010771
 8010540:	08010771 	.word	0x08010771
 8010544:	08010771 	.word	0x08010771
 8010548:	08010771 	.word	0x08010771
 801054c:	08010771 	.word	0x08010771
 8010550:	08010771 	.word	0x08010771
 8010554:	08010771 	.word	0x08010771
 8010558:	08010771 	.word	0x08010771
 801055c:	08010771 	.word	0x08010771
 8010560:	08010771 	.word	0x08010771
 8010564:	08010771 	.word	0x08010771
 8010568:	08010771 	.word	0x08010771
 801056c:	08010771 	.word	0x08010771
 8010570:	08010771 	.word	0x08010771
 8010574:	08010771 	.word	0x08010771
 8010578:	08010771 	.word	0x08010771
 801057c:	08010771 	.word	0x08010771
 8010580:	08010771 	.word	0x08010771
 8010584:	08010771 	.word	0x08010771
 8010588:	08010771 	.word	0x08010771
 801058c:	08010771 	.word	0x08010771
 8010590:	08010771 	.word	0x08010771
 8010594:	08010771 	.word	0x08010771
 8010598:	08010771 	.word	0x08010771
 801059c:	08010771 	.word	0x08010771
 80105a0:	08010771 	.word	0x08010771
 80105a4:	08010771 	.word	0x08010771
 80105a8:	08010771 	.word	0x08010771
 80105ac:	08010771 	.word	0x08010771
 80105b0:	08010771 	.word	0x08010771
 80105b4:	08010771 	.word	0x08010771
 80105b8:	08010771 	.word	0x08010771
 80105bc:	08010771 	.word	0x08010771
 80105c0:	08010771 	.word	0x08010771
 80105c4:	08010771 	.word	0x08010771
 80105c8:	08010771 	.word	0x08010771
 80105cc:	08010771 	.word	0x08010771
 80105d0:	08010771 	.word	0x08010771
 80105d4:	08010771 	.word	0x08010771
 80105d8:	08010771 	.word	0x08010771
 80105dc:	08010771 	.word	0x08010771
 80105e0:	08010771 	.word	0x08010771
 80105e4:	08010771 	.word	0x08010771
 80105e8:	08010771 	.word	0x08010771
 80105ec:	0801066f 	.word	0x0801066f
 80105f0:	08010691 	.word	0x08010691
 80105f4:	080106cd 	.word	0x080106cd
 80105f8:	080106ef 	.word	0x080106ef
 80105fc:	08010771 	.word	0x08010771
 8010600:	08010771 	.word	0x08010771
 8010604:	08010771 	.word	0x08010771
 8010608:	0801072d 	.word	0x0801072d
 801060c:	0801074f 	.word	0x0801074f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010610:	2300      	movs	r3, #0
 8010612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801061e:	e0ab      	b.n	8010778 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010624:	2b04      	cmp	r3, #4
 8010626:	d009      	beq.n	801063c <dhcp_parse_reply+0x218>
 8010628:	4b3a      	ldr	r3, [pc, #232]	; (8010714 <dhcp_parse_reply+0x2f0>)
 801062a:	f240 622e 	movw	r2, #1582	; 0x62e
 801062e:	493a      	ldr	r1, [pc, #232]	; (8010718 <dhcp_parse_reply+0x2f4>)
 8010630:	483a      	ldr	r0, [pc, #232]	; (801071c <dhcp_parse_reply+0x2f8>)
 8010632:	f00b f929 	bl	801b888 <iprintf>
 8010636:	f06f 0305 	mvn.w	r3, #5
 801063a:	e1b0      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801063c:	2306      	movs	r3, #6
 801063e:	623b      	str	r3, [r7, #32]
        break;
 8010640:	e09a      	b.n	8010778 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010642:	2304      	movs	r3, #4
 8010644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010648:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801064c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010650:	429a      	cmp	r2, r3
 8010652:	d209      	bcs.n	8010668 <dhcp_parse_reply+0x244>
 8010654:	4b2f      	ldr	r3, [pc, #188]	; (8010714 <dhcp_parse_reply+0x2f0>)
 8010656:	f240 6233 	movw	r2, #1587	; 0x633
 801065a:	4931      	ldr	r1, [pc, #196]	; (8010720 <dhcp_parse_reply+0x2fc>)
 801065c:	482f      	ldr	r0, [pc, #188]	; (801071c <dhcp_parse_reply+0x2f8>)
 801065e:	f00b f913 	bl	801b888 <iprintf>
 8010662:	f06f 0305 	mvn.w	r3, #5
 8010666:	e19a      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010668:	2307      	movs	r3, #7
 801066a:	623b      	str	r3, [r7, #32]
        break;
 801066c:	e084      	b.n	8010778 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010672:	2b04      	cmp	r3, #4
 8010674:	d009      	beq.n	801068a <dhcp_parse_reply+0x266>
 8010676:	4b27      	ldr	r3, [pc, #156]	; (8010714 <dhcp_parse_reply+0x2f0>)
 8010678:	f240 6241 	movw	r2, #1601	; 0x641
 801067c:	4926      	ldr	r1, [pc, #152]	; (8010718 <dhcp_parse_reply+0x2f4>)
 801067e:	4827      	ldr	r0, [pc, #156]	; (801071c <dhcp_parse_reply+0x2f8>)
 8010680:	f00b f902 	bl	801b888 <iprintf>
 8010684:	f06f 0305 	mvn.w	r3, #5
 8010688:	e189      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801068a:	2303      	movs	r3, #3
 801068c:	623b      	str	r3, [r7, #32]
        break;
 801068e:	e073      	b.n	8010778 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010694:	2b01      	cmp	r3, #1
 8010696:	d009      	beq.n	80106ac <dhcp_parse_reply+0x288>
 8010698:	4b1e      	ldr	r3, [pc, #120]	; (8010714 <dhcp_parse_reply+0x2f0>)
 801069a:	f240 624f 	movw	r2, #1615	; 0x64f
 801069e:	4921      	ldr	r1, [pc, #132]	; (8010724 <dhcp_parse_reply+0x300>)
 80106a0:	481e      	ldr	r0, [pc, #120]	; (801071c <dhcp_parse_reply+0x2f8>)
 80106a2:	f00b f8f1 	bl	801b888 <iprintf>
 80106a6:	f06f 0305 	mvn.w	r3, #5
 80106aa:	e178      	b.n	801099e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80106ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106ae:	2bf0      	cmp	r3, #240	; 0xf0
 80106b0:	d009      	beq.n	80106c6 <dhcp_parse_reply+0x2a2>
 80106b2:	4b18      	ldr	r3, [pc, #96]	; (8010714 <dhcp_parse_reply+0x2f0>)
 80106b4:	f240 6251 	movw	r2, #1617	; 0x651
 80106b8:	491b      	ldr	r1, [pc, #108]	; (8010728 <dhcp_parse_reply+0x304>)
 80106ba:	4818      	ldr	r0, [pc, #96]	; (801071c <dhcp_parse_reply+0x2f8>)
 80106bc:	f00b f8e4 	bl	801b888 <iprintf>
 80106c0:	f06f 0305 	mvn.w	r3, #5
 80106c4:	e16b      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80106c6:	2300      	movs	r3, #0
 80106c8:	623b      	str	r3, [r7, #32]
        break;
 80106ca:	e055      	b.n	8010778 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80106cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d009      	beq.n	80106e8 <dhcp_parse_reply+0x2c4>
 80106d4:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <dhcp_parse_reply+0x2f0>)
 80106d6:	f240 6255 	movw	r2, #1621	; 0x655
 80106da:	4912      	ldr	r1, [pc, #72]	; (8010724 <dhcp_parse_reply+0x300>)
 80106dc:	480f      	ldr	r0, [pc, #60]	; (801071c <dhcp_parse_reply+0x2f8>)
 80106de:	f00b f8d3 	bl	801b888 <iprintf>
 80106e2:	f06f 0305 	mvn.w	r3, #5
 80106e6:	e15a      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80106e8:	2301      	movs	r3, #1
 80106ea:	623b      	str	r3, [r7, #32]
        break;
 80106ec:	e044      	b.n	8010778 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80106ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d009      	beq.n	801070a <dhcp_parse_reply+0x2e6>
 80106f6:	4b07      	ldr	r3, [pc, #28]	; (8010714 <dhcp_parse_reply+0x2f0>)
 80106f8:	f240 6259 	movw	r2, #1625	; 0x659
 80106fc:	4906      	ldr	r1, [pc, #24]	; (8010718 <dhcp_parse_reply+0x2f4>)
 80106fe:	4807      	ldr	r0, [pc, #28]	; (801071c <dhcp_parse_reply+0x2f8>)
 8010700:	f00b f8c2 	bl	801b888 <iprintf>
 8010704:	f06f 0305 	mvn.w	r3, #5
 8010708:	e149      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801070a:	2302      	movs	r3, #2
 801070c:	623b      	str	r3, [r7, #32]
        break;
 801070e:	e033      	b.n	8010778 <dhcp_parse_reply+0x354>
 8010710:	24009740 	.word	0x24009740
 8010714:	0801c74c 	.word	0x0801c74c
 8010718:	0801ca0c 	.word	0x0801ca0c
 801071c:	0801c7e4 	.word	0x0801c7e4
 8010720:	0801ca18 	.word	0x0801ca18
 8010724:	0801ca2c 	.word	0x0801ca2c
 8010728:	0801ca38 	.word	0x0801ca38
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801072c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010730:	2b04      	cmp	r3, #4
 8010732:	d009      	beq.n	8010748 <dhcp_parse_reply+0x324>
 8010734:	4b9c      	ldr	r3, [pc, #624]	; (80109a8 <dhcp_parse_reply+0x584>)
 8010736:	f240 625d 	movw	r2, #1629	; 0x65d
 801073a:	499c      	ldr	r1, [pc, #624]	; (80109ac <dhcp_parse_reply+0x588>)
 801073c:	489c      	ldr	r0, [pc, #624]	; (80109b0 <dhcp_parse_reply+0x58c>)
 801073e:	f00b f8a3 	bl	801b888 <iprintf>
 8010742:	f06f 0305 	mvn.w	r3, #5
 8010746:	e12a      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010748:	2304      	movs	r3, #4
 801074a:	623b      	str	r3, [r7, #32]
        break;
 801074c:	e014      	b.n	8010778 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801074e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010752:	2b04      	cmp	r3, #4
 8010754:	d009      	beq.n	801076a <dhcp_parse_reply+0x346>
 8010756:	4b94      	ldr	r3, [pc, #592]	; (80109a8 <dhcp_parse_reply+0x584>)
 8010758:	f240 6261 	movw	r2, #1633	; 0x661
 801075c:	4993      	ldr	r1, [pc, #588]	; (80109ac <dhcp_parse_reply+0x588>)
 801075e:	4894      	ldr	r0, [pc, #592]	; (80109b0 <dhcp_parse_reply+0x58c>)
 8010760:	f00b f892 	bl	801b888 <iprintf>
 8010764:	f06f 0305 	mvn.w	r3, #5
 8010768:	e119      	b.n	801099e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801076a:	2305      	movs	r3, #5
 801076c:	623b      	str	r3, [r7, #32]
        break;
 801076e:	e003      	b.n	8010778 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010770:	2300      	movs	r3, #0
 8010772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010776:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010778:	7dfb      	ldrb	r3, [r7, #23]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d103      	bne.n	8010786 <dhcp_parse_reply+0x362>
      offset++;
 801077e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010780:	3301      	adds	r3, #1
 8010782:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010784:	e0a1      	b.n	80108ca <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010786:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801078c:	4413      	add	r3, r2
 801078e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010792:	4293      	cmp	r3, r2
 8010794:	dd02      	ble.n	801079c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010796:	f06f 0301 	mvn.w	r3, #1
 801079a:	e100      	b.n	801099e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801079c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107a4:	4413      	add	r3, r2
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	3302      	adds	r3, #2
 80107aa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80107ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 808a 	beq.w	80108ca <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	db02      	blt.n	80107c6 <dhcp_parse_reply+0x3a2>
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	2b07      	cmp	r3, #7
 80107c4:	dd06      	ble.n	80107d4 <dhcp_parse_reply+0x3b0>
 80107c6:	4b78      	ldr	r3, [pc, #480]	; (80109a8 <dhcp_parse_reply+0x584>)
 80107c8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80107cc:	4979      	ldr	r1, [pc, #484]	; (80109b4 <dhcp_parse_reply+0x590>)
 80107ce:	4878      	ldr	r0, [pc, #480]	; (80109b0 <dhcp_parse_reply+0x58c>)
 80107d0:	f00b f85a 	bl	801b888 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80107d4:	4a78      	ldr	r2, [pc, #480]	; (80109b8 <dhcp_parse_reply+0x594>)
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	4413      	add	r3, r2
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d174      	bne.n	80108ca <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80107e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107e4:	2b04      	cmp	r3, #4
 80107e6:	bf28      	it	cs
 80107e8:	2304      	movcs	r3, #4
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80107ee:	8bfb      	ldrh	r3, [r7, #30]
 80107f0:	8aba      	ldrh	r2, [r7, #20]
 80107f2:	f107 0108 	add.w	r1, r7, #8
 80107f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f8:	f004 fc7c 	bl	80150f4 <pbuf_copy_partial>
 80107fc:	4603      	mov	r3, r0
 80107fe:	461a      	mov	r2, r3
 8010800:	8abb      	ldrh	r3, [r7, #20]
 8010802:	4293      	cmp	r3, r2
 8010804:	d002      	beq.n	801080c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010806:	f06f 0301 	mvn.w	r3, #1
 801080a:	e0c8      	b.n	801099e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010810:	2b04      	cmp	r3, #4
 8010812:	d933      	bls.n	801087c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010818:	f003 0303 	and.w	r3, r3, #3
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	d009      	beq.n	8010836 <dhcp_parse_reply+0x412>
 8010822:	4b61      	ldr	r3, [pc, #388]	; (80109a8 <dhcp_parse_reply+0x584>)
 8010824:	f240 6281 	movw	r2, #1665	; 0x681
 8010828:	4964      	ldr	r1, [pc, #400]	; (80109bc <dhcp_parse_reply+0x598>)
 801082a:	4861      	ldr	r0, [pc, #388]	; (80109b0 <dhcp_parse_reply+0x58c>)
 801082c:	f00b f82c 	bl	801b888 <iprintf>
 8010830:	f06f 0305 	mvn.w	r3, #5
 8010834:	e0b3      	b.n	801099e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010836:	4a60      	ldr	r2, [pc, #384]	; (80109b8 <dhcp_parse_reply+0x594>)
 8010838:	6a3b      	ldr	r3, [r7, #32]
 801083a:	4413      	add	r3, r2
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe fc0d 	bl	800f062 <lwip_htonl>
 8010848:	4602      	mov	r2, r0
 801084a:	495d      	ldr	r1, [pc, #372]	; (80109c0 <dhcp_parse_reply+0x59c>)
 801084c:	6a3b      	ldr	r3, [r7, #32]
 801084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010856:	3b04      	subs	r3, #4
 8010858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801085c:	8bfb      	ldrh	r3, [r7, #30]
 801085e:	3304      	adds	r3, #4
 8010860:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010862:	8a7a      	ldrh	r2, [r7, #18]
 8010864:	8bfb      	ldrh	r3, [r7, #30]
 8010866:	429a      	cmp	r2, r3
 8010868:	d202      	bcs.n	8010870 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801086a:	f06f 0301 	mvn.w	r3, #1
 801086e:	e096      	b.n	801099e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010870:	8a7b      	ldrh	r3, [r7, #18]
 8010872:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	3301      	adds	r3, #1
 8010878:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801087a:	e79e      	b.n	80107ba <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801087c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010880:	2b04      	cmp	r3, #4
 8010882:	d106      	bne.n	8010892 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe fbeb 	bl	800f062 <lwip_htonl>
 801088c:	4603      	mov	r3, r0
 801088e:	60bb      	str	r3, [r7, #8]
 8010890:	e011      	b.n	80108b6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010892:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010896:	2b01      	cmp	r3, #1
 8010898:	d009      	beq.n	80108ae <dhcp_parse_reply+0x48a>
 801089a:	4b43      	ldr	r3, [pc, #268]	; (80109a8 <dhcp_parse_reply+0x584>)
 801089c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80108a0:	4948      	ldr	r1, [pc, #288]	; (80109c4 <dhcp_parse_reply+0x5a0>)
 80108a2:	4843      	ldr	r0, [pc, #268]	; (80109b0 <dhcp_parse_reply+0x58c>)
 80108a4:	f00a fff0 	bl	801b888 <iprintf>
 80108a8:	f06f 0305 	mvn.w	r3, #5
 80108ac:	e077      	b.n	801099e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80108ae:	f107 0308 	add.w	r3, r7, #8
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80108b6:	4a40      	ldr	r2, [pc, #256]	; (80109b8 <dhcp_parse_reply+0x594>)
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	4413      	add	r3, r2
 80108bc:	2201      	movs	r2, #1
 80108be:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	493f      	ldr	r1, [pc, #252]	; (80109c0 <dhcp_parse_reply+0x59c>)
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80108ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108cc:	895b      	ldrh	r3, [r3, #10]
 80108ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d324      	bcc.n	801091e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	895b      	ldrh	r3, [r3, #10]
 80108d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	895b      	ldrh	r3, [r3, #10]
 80108e2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80108e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d213      	bcs.n	8010918 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80108f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d109      	bne.n	8010910 <dhcp_parse_reply+0x4ec>
 80108fc:	4b2a      	ldr	r3, [pc, #168]	; (80109a8 <dhcp_parse_reply+0x584>)
 80108fe:	f240 629d 	movw	r2, #1693	; 0x69d
 8010902:	4931      	ldr	r1, [pc, #196]	; (80109c8 <dhcp_parse_reply+0x5a4>)
 8010904:	482a      	ldr	r0, [pc, #168]	; (80109b0 <dhcp_parse_reply+0x58c>)
 8010906:	f00a ffbf 	bl	801b888 <iprintf>
 801090a:	f06f 0305 	mvn.w	r3, #5
 801090e:	e046      	b.n	801099e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010916:	e002      	b.n	801091e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010918:	f06f 0301 	mvn.w	r3, #1
 801091c:	e03f      	b.n	801099e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801091e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010920:	2b00      	cmp	r3, #0
 8010922:	d00a      	beq.n	801093a <dhcp_parse_reply+0x516>
 8010924:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010926:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010928:	429a      	cmp	r2, r3
 801092a:	d206      	bcs.n	801093a <dhcp_parse_reply+0x516>
 801092c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801092e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010930:	4413      	add	r3, r2
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	2bff      	cmp	r3, #255	; 0xff
 8010936:	f47f adb8 	bne.w	80104aa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801093a:	4b1f      	ldr	r3, [pc, #124]	; (80109b8 <dhcp_parse_reply+0x594>)
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d018      	beq.n	8010974 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010942:	4b1f      	ldr	r3, [pc, #124]	; (80109c0 <dhcp_parse_reply+0x59c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010948:	4b1b      	ldr	r3, [pc, #108]	; (80109b8 <dhcp_parse_reply+0x594>)
 801094a:	2200      	movs	r2, #0
 801094c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d102      	bne.n	801095a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010954:	2301      	movs	r3, #1
 8010956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010958:	e00c      	b.n	8010974 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2b02      	cmp	r3, #2
 801095e:	d102      	bne.n	8010966 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010960:	2301      	movs	r3, #1
 8010962:	62bb      	str	r3, [r7, #40]	; 0x28
 8010964:	e006      	b.n	8010974 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b03      	cmp	r3, #3
 801096a:	d103      	bne.n	8010974 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801096c:	2301      	movs	r3, #1
 801096e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010970:	2301      	movs	r3, #1
 8010972:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	2b00      	cmp	r3, #0
 8010978:	d006      	beq.n	8010988 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801097e:	236c      	movs	r3, #108	; 0x6c
 8010980:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010982:	23ec      	movs	r3, #236	; 0xec
 8010984:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010986:	e56a      	b.n	801045e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	2b00      	cmp	r3, #0
 801098c:	d006      	beq.n	801099c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801098e:	2300      	movs	r3, #0
 8010990:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010992:	232c      	movs	r3, #44	; 0x2c
 8010994:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010996:	236c      	movs	r3, #108	; 0x6c
 8010998:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801099a:	e560      	b.n	801045e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3740      	adds	r7, #64	; 0x40
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	0801c74c 	.word	0x0801c74c
 80109ac:	0801ca0c 	.word	0x0801ca0c
 80109b0:	0801c7e4 	.word	0x0801c7e4
 80109b4:	0801ca50 	.word	0x0801ca50
 80109b8:	24009740 	.word	0x24009740
 80109bc:	0801ca64 	.word	0x0801ca64
 80109c0:	24009720 	.word	0x24009720
 80109c4:	0801ca7c 	.word	0x0801ca7c
 80109c8:	0801ca90 	.word	0x0801ca90

080109cc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08a      	sub	sp, #40	; 0x28
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80109da:	4b60      	ldr	r3, [pc, #384]	; (8010b5c <dhcp_recv+0x190>)
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 809d 	beq.w	8010b2e <dhcp_recv+0x162>
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	791b      	ldrb	r3, [r3, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 8098 	beq.w	8010b2e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	895b      	ldrh	r3, [r3, #10]
 8010a02:	2b2b      	cmp	r3, #43	; 0x2b
 8010a04:	f240 8095 	bls.w	8010b32 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	f040 8092 	bne.w	8010b36 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010a12:	2300      	movs	r3, #0
 8010a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a18:	e012      	b.n	8010a40 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a1e:	6a3a      	ldr	r2, [r7, #32]
 8010a20:	4413      	add	r3, r2
 8010a22:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a2a:	69b9      	ldr	r1, [r7, #24]
 8010a2c:	440b      	add	r3, r1
 8010a2e:	7f1b      	ldrb	r3, [r3, #28]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	f040 8082 	bne.w	8010b3a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a40:	6a3b      	ldr	r3, [r7, #32]
 8010a42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d203      	bcs.n	8010a56 <dhcp_recv+0x8a>
 8010a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a52:	2b05      	cmp	r3, #5
 8010a54:	d9e1      	bls.n	8010a1a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010a56:	69bb      	ldr	r3, [r7, #24]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe fb01 	bl	800f062 <lwip_htonl>
 8010a60:	4602      	mov	r2, r0
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d169      	bne.n	8010b3e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8010a6a:	69f9      	ldr	r1, [r7, #28]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7ff fcd9 	bl	8010424 <dhcp_parse_reply>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d164      	bne.n	8010b42 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010a78:	4b39      	ldr	r3, [pc, #228]	; (8010b60 <dhcp_recv+0x194>)
 8010a7a:	785b      	ldrb	r3, [r3, #1]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d062      	beq.n	8010b46 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010a86:	4b37      	ldr	r3, [pc, #220]	; (8010b64 <dhcp_recv+0x198>)
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8010a8c:	7cfb      	ldrb	r3, [r7, #19]
 8010a8e:	2b05      	cmp	r3, #5
 8010a90:	d12a      	bne.n	8010ae8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	795b      	ldrb	r3, [r3, #5]
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d112      	bne.n	8010ac0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8010a9a:	6979      	ldr	r1, [r7, #20]
 8010a9c:	6a38      	ldr	r0, [r7, #32]
 8010a9e:	f7fe fe17 	bl	800f6d0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010aa8:	f003 0308 	and.w	r3, r3, #8
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010ab0:	6a38      	ldr	r0, [r7, #32]
 8010ab2:	f7fe fb85 	bl	800f1c0 <dhcp_check>
 8010ab6:	e049      	b.n	8010b4c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010ab8:	6a38      	ldr	r0, [r7, #32]
 8010aba:	f7ff f867 	bl	800fb8c <dhcp_bind>
 8010abe:	e045      	b.n	8010b4c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	795b      	ldrb	r3, [r3, #5]
 8010ac4:	2b03      	cmp	r3, #3
 8010ac6:	d007      	beq.n	8010ad8 <dhcp_recv+0x10c>
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	795b      	ldrb	r3, [r3, #5]
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	d003      	beq.n	8010ad8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010ad4:	2b05      	cmp	r3, #5
 8010ad6:	d139      	bne.n	8010b4c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010ad8:	6979      	ldr	r1, [r7, #20]
 8010ada:	6a38      	ldr	r0, [r7, #32]
 8010adc:	f7fe fdf8 	bl	800f6d0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010ae0:	6a38      	ldr	r0, [r7, #32]
 8010ae2:	f7ff f853 	bl	800fb8c <dhcp_bind>
 8010ae6:	e031      	b.n	8010b4c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010ae8:	7cfb      	ldrb	r3, [r7, #19]
 8010aea:	2b06      	cmp	r3, #6
 8010aec:	d113      	bne.n	8010b16 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	d00b      	beq.n	8010b0e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	795b      	ldrb	r3, [r3, #5]
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d007      	beq.n	8010b0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	d003      	beq.n	8010b0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	795b      	ldrb	r3, [r3, #5]
 8010b0a:	2b05      	cmp	r3, #5
 8010b0c:	d103      	bne.n	8010b16 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010b0e:	6a38      	ldr	r0, [r7, #32]
 8010b10:	f7fe fb3c 	bl	800f18c <dhcp_handle_nak>
 8010b14:	e01a      	b.n	8010b4c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010b16:	7cfb      	ldrb	r3, [r7, #19]
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d116      	bne.n	8010b4a <dhcp_recv+0x17e>
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	795b      	ldrb	r3, [r3, #5]
 8010b20:	2b06      	cmp	r3, #6
 8010b22:	d112      	bne.n	8010b4a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010b24:	6979      	ldr	r1, [r7, #20]
 8010b26:	6a38      	ldr	r0, [r7, #32]
 8010b28:	f7fe fb7e 	bl	800f228 <dhcp_handle_offer>
 8010b2c:	e00e      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b2e:	bf00      	nop
 8010b30:	e00c      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b32:	bf00      	nop
 8010b34:	e00a      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b36:	bf00      	nop
 8010b38:	e008      	b.n	8010b4c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010b3a:	bf00      	nop
 8010b3c:	e006      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b3e:	bf00      	nop
 8010b40:	e004      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b42:	bf00      	nop
 8010b44:	e002      	b.n	8010b4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010b46:	bf00      	nop
 8010b48:	e000      	b.n	8010b4c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010b4a:	bf00      	nop
  pbuf_free(p);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f004 f8cb 	bl	8014ce8 <pbuf_free>
}
 8010b52:	bf00      	nop
 8010b54:	3728      	adds	r7, #40	; 0x28
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	24009848 	.word	0x24009848
 8010b60:	24009740 	.word	0x24009740
 8010b64:	24009720 	.word	0x24009720

08010b68 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b088      	sub	sp, #32
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	603b      	str	r3, [r7, #0]
 8010b74:	4613      	mov	r3, r2
 8010b76:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d108      	bne.n	8010b90 <dhcp_create_msg+0x28>
 8010b7e:	4b5f      	ldr	r3, [pc, #380]	; (8010cfc <dhcp_create_msg+0x194>)
 8010b80:	f240 7269 	movw	r2, #1897	; 0x769
 8010b84:	495e      	ldr	r1, [pc, #376]	; (8010d00 <dhcp_create_msg+0x198>)
 8010b86:	485f      	ldr	r0, [pc, #380]	; (8010d04 <dhcp_create_msg+0x19c>)
 8010b88:	f00a fe7e 	bl	801b888 <iprintf>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	e0b1      	b.n	8010cf4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d108      	bne.n	8010ba8 <dhcp_create_msg+0x40>
 8010b96:	4b59      	ldr	r3, [pc, #356]	; (8010cfc <dhcp_create_msg+0x194>)
 8010b98:	f240 726a 	movw	r2, #1898	; 0x76a
 8010b9c:	495a      	ldr	r1, [pc, #360]	; (8010d08 <dhcp_create_msg+0x1a0>)
 8010b9e:	4859      	ldr	r0, [pc, #356]	; (8010d04 <dhcp_create_msg+0x19c>)
 8010ba0:	f00a fe72 	bl	801b888 <iprintf>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e0a5      	b.n	8010cf4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010ba8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bac:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010bb0:	2036      	movs	r0, #54	; 0x36
 8010bb2:	f003 fdb5 	bl	8014720 <pbuf_alloc>
 8010bb6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d101      	bne.n	8010bc2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e098      	b.n	8010cf4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	895b      	ldrh	r3, [r3, #10]
 8010bc6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8010bca:	d206      	bcs.n	8010bda <dhcp_create_msg+0x72>
 8010bcc:	4b4b      	ldr	r3, [pc, #300]	; (8010cfc <dhcp_create_msg+0x194>)
 8010bce:	f240 7271 	movw	r2, #1905	; 0x771
 8010bd2:	494e      	ldr	r1, [pc, #312]	; (8010d0c <dhcp_create_msg+0x1a4>)
 8010bd4:	484b      	ldr	r0, [pc, #300]	; (8010d04 <dhcp_create_msg+0x19c>)
 8010bd6:	f00a fe57 	bl	801b888 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	2b03      	cmp	r3, #3
 8010bde:	d103      	bne.n	8010be8 <dhcp_create_msg+0x80>
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	795b      	ldrb	r3, [r3, #5]
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	d10d      	bne.n	8010c04 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	799b      	ldrb	r3, [r3, #6]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d105      	bne.n	8010bfc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010bf0:	f00a fd4a 	bl	801b688 <rand>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	4b45      	ldr	r3, [pc, #276]	; (8010d10 <dhcp_create_msg+0x1a8>)
 8010bfa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010bfc:	4b44      	ldr	r3, [pc, #272]	; (8010d10 <dhcp_create_msg+0x1a8>)
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010c0a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010c0e:	2100      	movs	r1, #0
 8010c10:	6978      	ldr	r0, [r7, #20]
 8010c12:	f00a fe9e 	bl	801b952 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	2201      	movs	r2, #1
 8010c1a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fe fa16 	bl	800f062 <lwip_htonl>
 8010c36:	4602      	mov	r2, r0
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	2b08      	cmp	r3, #8
 8010c40:	d010      	beq.n	8010c64 <dhcp_create_msg+0xfc>
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	2b04      	cmp	r3, #4
 8010c46:	d00d      	beq.n	8010c64 <dhcp_create_msg+0xfc>
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	2b07      	cmp	r3, #7
 8010c4c:	d00a      	beq.n	8010c64 <dhcp_create_msg+0xfc>
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d10c      	bne.n	8010c6e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010c58:	2b05      	cmp	r3, #5
 8010c5a:	d003      	beq.n	8010c64 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	795b      	ldrb	r3, [r3, #5]
 8010c60:	2b04      	cmp	r3, #4
 8010c62:	d104      	bne.n	8010c6e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	3304      	adds	r3, #4
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010c6e:	2300      	movs	r3, #0
 8010c70:	83fb      	strh	r3, [r7, #30]
 8010c72:	e00c      	b.n	8010c8e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010c74:	8bfa      	ldrh	r2, [r7, #30]
 8010c76:	8bfb      	ldrh	r3, [r7, #30]
 8010c78:	68f9      	ldr	r1, [r7, #12]
 8010c7a:	440a      	add	r2, r1
 8010c7c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	4413      	add	r3, r2
 8010c84:	460a      	mov	r2, r1
 8010c86:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010c88:	8bfb      	ldrh	r3, [r7, #30]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	83fb      	strh	r3, [r7, #30]
 8010c8e:	8bfb      	ldrh	r3, [r7, #30]
 8010c90:	2b05      	cmp	r3, #5
 8010c92:	d9ef      	bls.n	8010c74 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010c9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010ca6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010caa:	2200      	movs	r2, #0
 8010cac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010cb0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010cba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	2235      	movs	r2, #53	; 0x35
 8010cc8:	2000      	movs	r0, #0
 8010cca:	f7ff fadb 	bl	8010284 <dhcp_option>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010cd8:	79fa      	ldrb	r2, [r7, #7]
 8010cda:	8a7b      	ldrh	r3, [r7, #18]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff fb05 	bl	80102ec <dhcp_option_byte>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d002      	beq.n	8010cf2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	8a7a      	ldrh	r2, [r7, #18]
 8010cf0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8010cf2:	69bb      	ldr	r3, [r7, #24]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3720      	adds	r7, #32
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	0801c74c 	.word	0x0801c74c
 8010d00:	0801caa4 	.word	0x0801caa4
 8010d04:	0801c7e4 	.word	0x0801c7e4
 8010d08:	0801cac4 	.word	0x0801cac4
 8010d0c:	0801cae4 	.word	0x0801cae4
 8010d10:	24009750 	.word	0x24009750

08010d14 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010d22:	89fb      	ldrh	r3, [r7, #14]
 8010d24:	1c5a      	adds	r2, r3, #1
 8010d26:	81fa      	strh	r2, [r7, #14]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	22ff      	movs	r2, #255	; 0xff
 8010d30:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010d32:	e007      	b.n	8010d44 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010d34:	89fb      	ldrh	r3, [r7, #14]
 8010d36:	1c5a      	adds	r2, r3, #1
 8010d38:	81fa      	strh	r2, [r7, #14]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	4413      	add	r3, r2
 8010d40:	2200      	movs	r2, #0
 8010d42:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010d44:	89fb      	ldrh	r3, [r7, #14]
 8010d46:	2b43      	cmp	r3, #67	; 0x43
 8010d48:	d904      	bls.n	8010d54 <dhcp_option_trailer+0x40>
 8010d4a:	89fb      	ldrh	r3, [r7, #14]
 8010d4c:	f003 0303 	and.w	r3, r3, #3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d002      	beq.n	8010d5a <dhcp_option_trailer+0x46>
 8010d54:	89fb      	ldrh	r3, [r7, #14]
 8010d56:	2b43      	cmp	r3, #67	; 0x43
 8010d58:	d9ec      	bls.n	8010d34 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010d5a:	89fb      	ldrh	r3, [r7, #14]
 8010d5c:	33f0      	adds	r3, #240	; 0xf0
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f003 fe3a 	bl	80149dc <pbuf_realloc>
}
 8010d68:	bf00      	nop
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d017      	beq.n	8010dae <dhcp_supplied_address+0x3e>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d013      	beq.n	8010dae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	795b      	ldrb	r3, [r3, #5]
 8010d90:	2b0a      	cmp	r3, #10
 8010d92:	d007      	beq.n	8010da4 <dhcp_supplied_address+0x34>
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	795b      	ldrb	r3, [r3, #5]
 8010d98:	2b05      	cmp	r3, #5
 8010d9a:	d003      	beq.n	8010da4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010da0:	2b04      	cmp	r3, #4
 8010da2:	d101      	bne.n	8010da8 <dhcp_supplied_address+0x38>
 8010da4:	2301      	movs	r3, #1
 8010da6:	e000      	b.n	8010daa <dhcp_supplied_address+0x3a>
 8010da8:	2300      	movs	r3, #0
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	e000      	b.n	8010db0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010dc4:	4915      	ldr	r1, [pc, #84]	; (8010e1c <etharp_free_entry+0x60>)
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	4613      	mov	r3, r2
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	4413      	add	r3, r2
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	440b      	add	r3, r1
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d013      	beq.n	8010e00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010dd8:	4910      	ldr	r1, [pc, #64]	; (8010e1c <etharp_free_entry+0x60>)
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	4413      	add	r3, r2
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	440b      	add	r3, r1
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4618      	mov	r0, r3
 8010dea:	f003 ff7d 	bl	8014ce8 <pbuf_free>
    arp_table[i].q = NULL;
 8010dee:	490b      	ldr	r1, [pc, #44]	; (8010e1c <etharp_free_entry+0x60>)
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	440b      	add	r3, r1
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010e00:	4906      	ldr	r1, [pc, #24]	; (8010e1c <etharp_free_entry+0x60>)
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	4613      	mov	r3, r2
 8010e06:	005b      	lsls	r3, r3, #1
 8010e08:	4413      	add	r3, r2
 8010e0a:	00db      	lsls	r3, r3, #3
 8010e0c:	440b      	add	r3, r1
 8010e0e:	3314      	adds	r3, #20
 8010e10:	2200      	movs	r2, #0
 8010e12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	24009754 	.word	0x24009754

08010e20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e26:	2300      	movs	r3, #0
 8010e28:	607b      	str	r3, [r7, #4]
 8010e2a:	e096      	b.n	8010f5a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010e2c:	494f      	ldr	r1, [pc, #316]	; (8010f6c <etharp_tmr+0x14c>)
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	4613      	mov	r3, r2
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	4413      	add	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	440b      	add	r3, r1
 8010e3a:	3314      	adds	r3, #20
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	f000 8086 	beq.w	8010f54 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010e48:	4948      	ldr	r1, [pc, #288]	; (8010f6c <etharp_tmr+0x14c>)
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	4413      	add	r3, r2
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	440b      	add	r3, r1
 8010e56:	3312      	adds	r3, #18
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	b298      	uxth	r0, r3
 8010e5e:	4943      	ldr	r1, [pc, #268]	; (8010f6c <etharp_tmr+0x14c>)
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	4613      	mov	r3, r2
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	4413      	add	r3, r2
 8010e68:	00db      	lsls	r3, r3, #3
 8010e6a:	440b      	add	r3, r1
 8010e6c:	3312      	adds	r3, #18
 8010e6e:	4602      	mov	r2, r0
 8010e70:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e72:	493e      	ldr	r1, [pc, #248]	; (8010f6c <etharp_tmr+0x14c>)
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	4613      	mov	r3, r2
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	00db      	lsls	r3, r3, #3
 8010e7e:	440b      	add	r3, r1
 8010e80:	3312      	adds	r3, #18
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e88:	d215      	bcs.n	8010eb6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e8a:	4938      	ldr	r1, [pc, #224]	; (8010f6c <etharp_tmr+0x14c>)
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	4613      	mov	r3, r2
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	4413      	add	r3, r2
 8010e94:	00db      	lsls	r3, r3, #3
 8010e96:	440b      	add	r3, r1
 8010e98:	3314      	adds	r3, #20
 8010e9a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d10e      	bne.n	8010ebe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010ea0:	4932      	ldr	r1, [pc, #200]	; (8010f6c <etharp_tmr+0x14c>)
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	4413      	add	r3, r2
 8010eaa:	00db      	lsls	r3, r3, #3
 8010eac:	440b      	add	r3, r1
 8010eae:	3312      	adds	r3, #18
 8010eb0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010eb2:	2b04      	cmp	r3, #4
 8010eb4:	d903      	bls.n	8010ebe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff ff80 	bl	8010dbc <etharp_free_entry>
 8010ebc:	e04a      	b.n	8010f54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010ebe:	492b      	ldr	r1, [pc, #172]	; (8010f6c <etharp_tmr+0x14c>)
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	4413      	add	r3, r2
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	440b      	add	r3, r1
 8010ecc:	3314      	adds	r3, #20
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b03      	cmp	r3, #3
 8010ed2:	d10a      	bne.n	8010eea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010ed4:	4925      	ldr	r1, [pc, #148]	; (8010f6c <etharp_tmr+0x14c>)
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	005b      	lsls	r3, r3, #1
 8010edc:	4413      	add	r3, r2
 8010ede:	00db      	lsls	r3, r3, #3
 8010ee0:	440b      	add	r3, r1
 8010ee2:	3314      	adds	r3, #20
 8010ee4:	2204      	movs	r2, #4
 8010ee6:	701a      	strb	r2, [r3, #0]
 8010ee8:	e034      	b.n	8010f54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010eea:	4920      	ldr	r1, [pc, #128]	; (8010f6c <etharp_tmr+0x14c>)
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	4413      	add	r3, r2
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3314      	adds	r3, #20
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2b04      	cmp	r3, #4
 8010efe:	d10a      	bne.n	8010f16 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010f00:	491a      	ldr	r1, [pc, #104]	; (8010f6c <etharp_tmr+0x14c>)
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	4613      	mov	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	4413      	add	r3, r2
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	440b      	add	r3, r1
 8010f0e:	3314      	adds	r3, #20
 8010f10:	2202      	movs	r2, #2
 8010f12:	701a      	strb	r2, [r3, #0]
 8010f14:	e01e      	b.n	8010f54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010f16:	4915      	ldr	r1, [pc, #84]	; (8010f6c <etharp_tmr+0x14c>)
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	4413      	add	r3, r2
 8010f20:	00db      	lsls	r3, r3, #3
 8010f22:	440b      	add	r3, r1
 8010f24:	3314      	adds	r3, #20
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d113      	bne.n	8010f54 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010f2c:	490f      	ldr	r1, [pc, #60]	; (8010f6c <etharp_tmr+0x14c>)
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4613      	mov	r3, r2
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	4413      	add	r3, r2
 8010f36:	00db      	lsls	r3, r3, #3
 8010f38:	440b      	add	r3, r1
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	4613      	mov	r3, r2
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	4413      	add	r3, r2
 8010f46:	00db      	lsls	r3, r3, #3
 8010f48:	4a08      	ldr	r2, [pc, #32]	; (8010f6c <etharp_tmr+0x14c>)
 8010f4a:	4413      	add	r3, r2
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	4619      	mov	r1, r3
 8010f50:	f000 fe72 	bl	8011c38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3301      	adds	r3, #1
 8010f58:	607b      	str	r3, [r7, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b09      	cmp	r3, #9
 8010f5e:	f77f af65 	ble.w	8010e2c <etharp_tmr+0xc>
      }
    }
  }
}
 8010f62:	bf00      	nop
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	24009754 	.word	0x24009754

08010f70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b08a      	sub	sp, #40	; 0x28
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	607a      	str	r2, [r7, #4]
 8010f7c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010f7e:	230a      	movs	r3, #10
 8010f80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010f82:	230a      	movs	r3, #10
 8010f84:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010f86:	230a      	movs	r3, #10
 8010f88:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f8e:	230a      	movs	r3, #10
 8010f90:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f92:	2300      	movs	r3, #0
 8010f94:	83bb      	strh	r3, [r7, #28]
 8010f96:	2300      	movs	r3, #0
 8010f98:	837b      	strh	r3, [r7, #26]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	843b      	strh	r3, [r7, #32]
 8010fa2:	e0ae      	b.n	8011102 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fa8:	49a6      	ldr	r1, [pc, #664]	; (8011244 <etharp_find_entry+0x2d4>)
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010fba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010fbe:	2b0a      	cmp	r3, #10
 8010fc0:	d105      	bne.n	8010fce <etharp_find_entry+0x5e>
 8010fc2:	7dfb      	ldrb	r3, [r7, #23]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d102      	bne.n	8010fce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010fc8:	8c3b      	ldrh	r3, [r7, #32]
 8010fca:	847b      	strh	r3, [r7, #34]	; 0x22
 8010fcc:	e095      	b.n	80110fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010fce:	7dfb      	ldrb	r3, [r7, #23]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f000 8092 	beq.w	80110fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d009      	beq.n	8010ff0 <etharp_find_entry+0x80>
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d806      	bhi.n	8010ff0 <etharp_find_entry+0x80>
 8010fe2:	4b99      	ldr	r3, [pc, #612]	; (8011248 <etharp_find_entry+0x2d8>)
 8010fe4:	f240 1223 	movw	r2, #291	; 0x123
 8010fe8:	4998      	ldr	r1, [pc, #608]	; (801124c <etharp_find_entry+0x2dc>)
 8010fea:	4899      	ldr	r0, [pc, #612]	; (8011250 <etharp_find_entry+0x2e0>)
 8010fec:	f00a fc4c 	bl	801b888 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d020      	beq.n	8011038 <etharp_find_entry+0xc8>
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	6819      	ldr	r1, [r3, #0]
 8010ffa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ffe:	4891      	ldr	r0, [pc, #580]	; (8011244 <etharp_find_entry+0x2d4>)
 8011000:	4613      	mov	r3, r2
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	4413      	add	r3, r2
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	4403      	add	r3, r0
 801100a:	3304      	adds	r3, #4
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4299      	cmp	r1, r3
 8011010:	d112      	bne.n	8011038 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00c      	beq.n	8011032 <etharp_find_entry+0xc2>
 8011018:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801101c:	4989      	ldr	r1, [pc, #548]	; (8011244 <etharp_find_entry+0x2d4>)
 801101e:	4613      	mov	r3, r2
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	4413      	add	r3, r2
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	440b      	add	r3, r1
 8011028:	3308      	adds	r3, #8
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	429a      	cmp	r2, r3
 8011030:	d102      	bne.n	8011038 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011032:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011036:	e100      	b.n	801123a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011038:	7dfb      	ldrb	r3, [r7, #23]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d140      	bne.n	80110c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801103e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011042:	4980      	ldr	r1, [pc, #512]	; (8011244 <etharp_find_entry+0x2d4>)
 8011044:	4613      	mov	r3, r2
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	4413      	add	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	440b      	add	r3, r1
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d01a      	beq.n	801108a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011054:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011058:	497a      	ldr	r1, [pc, #488]	; (8011244 <etharp_find_entry+0x2d4>)
 801105a:	4613      	mov	r3, r2
 801105c:	005b      	lsls	r3, r3, #1
 801105e:	4413      	add	r3, r2
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	440b      	add	r3, r1
 8011064:	3312      	adds	r3, #18
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	8bba      	ldrh	r2, [r7, #28]
 801106a:	429a      	cmp	r2, r3
 801106c:	d845      	bhi.n	80110fa <etharp_find_entry+0x18a>
            old_queue = i;
 801106e:	8c3b      	ldrh	r3, [r7, #32]
 8011070:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011076:	4973      	ldr	r1, [pc, #460]	; (8011244 <etharp_find_entry+0x2d4>)
 8011078:	4613      	mov	r3, r2
 801107a:	005b      	lsls	r3, r3, #1
 801107c:	4413      	add	r3, r2
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	440b      	add	r3, r1
 8011082:	3312      	adds	r3, #18
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	83bb      	strh	r3, [r7, #28]
 8011088:	e037      	b.n	80110fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801108a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801108e:	496d      	ldr	r1, [pc, #436]	; (8011244 <etharp_find_entry+0x2d4>)
 8011090:	4613      	mov	r3, r2
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	4413      	add	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	440b      	add	r3, r1
 801109a:	3312      	adds	r3, #18
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	8b7a      	ldrh	r2, [r7, #26]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d82a      	bhi.n	80110fa <etharp_find_entry+0x18a>
            old_pending = i;
 80110a4:	8c3b      	ldrh	r3, [r7, #32]
 80110a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80110a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110ac:	4965      	ldr	r1, [pc, #404]	; (8011244 <etharp_find_entry+0x2d4>)
 80110ae:	4613      	mov	r3, r2
 80110b0:	005b      	lsls	r3, r3, #1
 80110b2:	4413      	add	r3, r2
 80110b4:	00db      	lsls	r3, r3, #3
 80110b6:	440b      	add	r3, r1
 80110b8:	3312      	adds	r3, #18
 80110ba:	881b      	ldrh	r3, [r3, #0]
 80110bc:	837b      	strh	r3, [r7, #26]
 80110be:	e01c      	b.n	80110fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d919      	bls.n	80110fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80110c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110ca:	495e      	ldr	r1, [pc, #376]	; (8011244 <etharp_find_entry+0x2d4>)
 80110cc:	4613      	mov	r3, r2
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	4413      	add	r3, r2
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	440b      	add	r3, r1
 80110d6:	3312      	adds	r3, #18
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	8b3a      	ldrh	r2, [r7, #24]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d80c      	bhi.n	80110fa <etharp_find_entry+0x18a>
            old_stable = i;
 80110e0:	8c3b      	ldrh	r3, [r7, #32]
 80110e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80110e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110e8:	4956      	ldr	r1, [pc, #344]	; (8011244 <etharp_find_entry+0x2d4>)
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	440b      	add	r3, r1
 80110f4:	3312      	adds	r3, #18
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110fa:	8c3b      	ldrh	r3, [r7, #32]
 80110fc:	3301      	adds	r3, #1
 80110fe:	b29b      	uxth	r3, r3
 8011100:	843b      	strh	r3, [r7, #32]
 8011102:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011106:	2b09      	cmp	r3, #9
 8011108:	f77f af4c 	ble.w	8010fa4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801110c:	7afb      	ldrb	r3, [r7, #11]
 801110e:	f003 0302 	and.w	r3, r3, #2
 8011112:	2b00      	cmp	r3, #0
 8011114:	d108      	bne.n	8011128 <etharp_find_entry+0x1b8>
 8011116:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801111a:	2b0a      	cmp	r3, #10
 801111c:	d107      	bne.n	801112e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801111e:	7afb      	ldrb	r3, [r7, #11]
 8011120:	f003 0301 	and.w	r3, r3, #1
 8011124:	2b00      	cmp	r3, #0
 8011126:	d102      	bne.n	801112e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011128:	f04f 33ff 	mov.w	r3, #4294967295
 801112c:	e085      	b.n	801123a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801112e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011132:	2b09      	cmp	r3, #9
 8011134:	dc02      	bgt.n	801113c <etharp_find_entry+0x1cc>
    i = empty;
 8011136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011138:	843b      	strh	r3, [r7, #32]
 801113a:	e039      	b.n	80111b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801113c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011140:	2b09      	cmp	r3, #9
 8011142:	dc14      	bgt.n	801116e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011146:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011148:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801114c:	493d      	ldr	r1, [pc, #244]	; (8011244 <etharp_find_entry+0x2d4>)
 801114e:	4613      	mov	r3, r2
 8011150:	005b      	lsls	r3, r3, #1
 8011152:	4413      	add	r3, r2
 8011154:	00db      	lsls	r3, r3, #3
 8011156:	440b      	add	r3, r1
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d018      	beq.n	8011190 <etharp_find_entry+0x220>
 801115e:	4b3a      	ldr	r3, [pc, #232]	; (8011248 <etharp_find_entry+0x2d8>)
 8011160:	f240 126d 	movw	r2, #365	; 0x16d
 8011164:	493b      	ldr	r1, [pc, #236]	; (8011254 <etharp_find_entry+0x2e4>)
 8011166:	483a      	ldr	r0, [pc, #232]	; (8011250 <etharp_find_entry+0x2e0>)
 8011168:	f00a fb8e 	bl	801b888 <iprintf>
 801116c:	e010      	b.n	8011190 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801116e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011172:	2b09      	cmp	r3, #9
 8011174:	dc02      	bgt.n	801117c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011176:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011178:	843b      	strh	r3, [r7, #32]
 801117a:	e009      	b.n	8011190 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801117c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011180:	2b09      	cmp	r3, #9
 8011182:	dc02      	bgt.n	801118a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011184:	8bfb      	ldrh	r3, [r7, #30]
 8011186:	843b      	strh	r3, [r7, #32]
 8011188:	e002      	b.n	8011190 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801118a:	f04f 33ff 	mov.w	r3, #4294967295
 801118e:	e054      	b.n	801123a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011190:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011194:	2b09      	cmp	r3, #9
 8011196:	dd06      	ble.n	80111a6 <etharp_find_entry+0x236>
 8011198:	4b2b      	ldr	r3, [pc, #172]	; (8011248 <etharp_find_entry+0x2d8>)
 801119a:	f240 127f 	movw	r2, #383	; 0x17f
 801119e:	492e      	ldr	r1, [pc, #184]	; (8011258 <etharp_find_entry+0x2e8>)
 80111a0:	482b      	ldr	r0, [pc, #172]	; (8011250 <etharp_find_entry+0x2e0>)
 80111a2:	f00a fb71 	bl	801b888 <iprintf>
    etharp_free_entry(i);
 80111a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7ff fe06 	bl	8010dbc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80111b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111b4:	2b09      	cmp	r3, #9
 80111b6:	dd06      	ble.n	80111c6 <etharp_find_entry+0x256>
 80111b8:	4b23      	ldr	r3, [pc, #140]	; (8011248 <etharp_find_entry+0x2d8>)
 80111ba:	f240 1283 	movw	r2, #387	; 0x183
 80111be:	4926      	ldr	r1, [pc, #152]	; (8011258 <etharp_find_entry+0x2e8>)
 80111c0:	4823      	ldr	r0, [pc, #140]	; (8011250 <etharp_find_entry+0x2e0>)
 80111c2:	f00a fb61 	bl	801b888 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80111c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111ca:	491e      	ldr	r1, [pc, #120]	; (8011244 <etharp_find_entry+0x2d4>)
 80111cc:	4613      	mov	r3, r2
 80111ce:	005b      	lsls	r3, r3, #1
 80111d0:	4413      	add	r3, r2
 80111d2:	00db      	lsls	r3, r3, #3
 80111d4:	440b      	add	r3, r1
 80111d6:	3314      	adds	r3, #20
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d006      	beq.n	80111ec <etharp_find_entry+0x27c>
 80111de:	4b1a      	ldr	r3, [pc, #104]	; (8011248 <etharp_find_entry+0x2d8>)
 80111e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80111e4:	491d      	ldr	r1, [pc, #116]	; (801125c <etharp_find_entry+0x2ec>)
 80111e6:	481a      	ldr	r0, [pc, #104]	; (8011250 <etharp_find_entry+0x2e0>)
 80111e8:	f00a fb4e 	bl	801b888 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00b      	beq.n	801120a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80111f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6819      	ldr	r1, [r3, #0]
 80111fa:	4812      	ldr	r0, [pc, #72]	; (8011244 <etharp_find_entry+0x2d4>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	4403      	add	r3, r0
 8011206:	3304      	adds	r3, #4
 8011208:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801120a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801120e:	490d      	ldr	r1, [pc, #52]	; (8011244 <etharp_find_entry+0x2d4>)
 8011210:	4613      	mov	r3, r2
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	4413      	add	r3, r2
 8011216:	00db      	lsls	r3, r3, #3
 8011218:	440b      	add	r3, r1
 801121a:	3312      	adds	r3, #18
 801121c:	2200      	movs	r2, #0
 801121e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011224:	4907      	ldr	r1, [pc, #28]	; (8011244 <etharp_find_entry+0x2d4>)
 8011226:	4613      	mov	r3, r2
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	4413      	add	r3, r2
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	440b      	add	r3, r1
 8011230:	3308      	adds	r3, #8
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3728      	adds	r7, #40	; 0x28
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	24009754 	.word	0x24009754
 8011248:	0801cb24 	.word	0x0801cb24
 801124c:	0801cb98 	.word	0x0801cb98
 8011250:	0801cbd8 	.word	0x0801cbd8
 8011254:	0801cc00 	.word	0x0801cc00
 8011258:	0801cc18 	.word	0x0801cc18
 801125c:	0801cc2c 	.word	0x0801cc2c

08011260 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af02      	add	r7, sp, #8
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011274:	2b06      	cmp	r3, #6
 8011276:	d006      	beq.n	8011286 <etharp_update_arp_entry+0x26>
 8011278:	4b48      	ldr	r3, [pc, #288]	; (801139c <etharp_update_arp_entry+0x13c>)
 801127a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801127e:	4948      	ldr	r1, [pc, #288]	; (80113a0 <etharp_update_arp_entry+0x140>)
 8011280:	4848      	ldr	r0, [pc, #288]	; (80113a4 <etharp_update_arp_entry+0x144>)
 8011282:	f00a fb01 	bl	801b888 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d012      	beq.n	80112b2 <etharp_update_arp_entry+0x52>
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00e      	beq.n	80112b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68f9      	ldr	r1, [r7, #12]
 801129a:	4618      	mov	r0, r3
 801129c:	f001 faf0 	bl	8012880 <ip4_addr_isbroadcast_u32>
 80112a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d105      	bne.n	80112b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80112ae:	2be0      	cmp	r3, #224	; 0xe0
 80112b0:	d102      	bne.n	80112b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80112b2:	f06f 030f 	mvn.w	r3, #15
 80112b6:	e06c      	b.n	8011392 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80112b8:	78fb      	ldrb	r3, [r7, #3]
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	4619      	mov	r1, r3
 80112be:	68b8      	ldr	r0, [r7, #8]
 80112c0:	f7ff fe56 	bl	8010f70 <etharp_find_entry>
 80112c4:	4603      	mov	r3, r0
 80112c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80112c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	da02      	bge.n	80112d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80112d0:	8afb      	ldrh	r3, [r7, #22]
 80112d2:	b25b      	sxtb	r3, r3
 80112d4:	e05d      	b.n	8011392 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80112d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112da:	4933      	ldr	r1, [pc, #204]	; (80113a8 <etharp_update_arp_entry+0x148>)
 80112dc:	4613      	mov	r3, r2
 80112de:	005b      	lsls	r3, r3, #1
 80112e0:	4413      	add	r3, r2
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	440b      	add	r3, r1
 80112e6:	3314      	adds	r3, #20
 80112e8:	2202      	movs	r2, #2
 80112ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80112ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112f0:	492d      	ldr	r1, [pc, #180]	; (80113a8 <etharp_update_arp_entry+0x148>)
 80112f2:	4613      	mov	r3, r2
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	440b      	add	r3, r1
 80112fc:	3308      	adds	r3, #8
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011302:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011306:	4613      	mov	r3, r2
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	4413      	add	r3, r2
 801130c:	00db      	lsls	r3, r3, #3
 801130e:	3308      	adds	r3, #8
 8011310:	4a25      	ldr	r2, [pc, #148]	; (80113a8 <etharp_update_arp_entry+0x148>)
 8011312:	4413      	add	r3, r2
 8011314:	3304      	adds	r3, #4
 8011316:	2206      	movs	r2, #6
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	f00a fb8f 	bl	801ba3e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011320:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011324:	4920      	ldr	r1, [pc, #128]	; (80113a8 <etharp_update_arp_entry+0x148>)
 8011326:	4613      	mov	r3, r2
 8011328:	005b      	lsls	r3, r3, #1
 801132a:	4413      	add	r3, r2
 801132c:	00db      	lsls	r3, r3, #3
 801132e:	440b      	add	r3, r1
 8011330:	3312      	adds	r3, #18
 8011332:	2200      	movs	r2, #0
 8011334:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011336:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801133a:	491b      	ldr	r1, [pc, #108]	; (80113a8 <etharp_update_arp_entry+0x148>)
 801133c:	4613      	mov	r3, r2
 801133e:	005b      	lsls	r3, r3, #1
 8011340:	4413      	add	r3, r2
 8011342:	00db      	lsls	r3, r3, #3
 8011344:	440b      	add	r3, r1
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d021      	beq.n	8011390 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801134c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011350:	4915      	ldr	r1, [pc, #84]	; (80113a8 <etharp_update_arp_entry+0x148>)
 8011352:	4613      	mov	r3, r2
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	4413      	add	r3, r2
 8011358:	00db      	lsls	r3, r3, #3
 801135a:	440b      	add	r3, r1
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011360:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011364:	4910      	ldr	r1, [pc, #64]	; (80113a8 <etharp_update_arp_entry+0x148>)
 8011366:	4613      	mov	r3, r2
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	4413      	add	r3, r2
 801136c:	00db      	lsls	r3, r3, #3
 801136e:	440b      	add	r3, r1
 8011370:	2200      	movs	r2, #0
 8011372:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801137a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6939      	ldr	r1, [r7, #16]
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 fcf7 	bl	8011d78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801138a:	6938      	ldr	r0, [r7, #16]
 801138c:	f003 fcac 	bl	8014ce8 <pbuf_free>
  }
  return ERR_OK;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	0801cb24 	.word	0x0801cb24
 80113a0:	0801cc58 	.word	0x0801cc58
 80113a4:	0801cbd8 	.word	0x0801cbd8
 80113a8:	24009754 	.word	0x24009754

080113ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113b4:	2300      	movs	r3, #0
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	e01e      	b.n	80113f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80113ba:	4913      	ldr	r1, [pc, #76]	; (8011408 <etharp_cleanup_netif+0x5c>)
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	4613      	mov	r3, r2
 80113c0:	005b      	lsls	r3, r3, #1
 80113c2:	4413      	add	r3, r2
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	440b      	add	r3, r1
 80113c8:	3314      	adds	r3, #20
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80113ce:	7afb      	ldrb	r3, [r7, #11]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00e      	beq.n	80113f2 <etharp_cleanup_netif+0x46>
 80113d4:	490c      	ldr	r1, [pc, #48]	; (8011408 <etharp_cleanup_netif+0x5c>)
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	4613      	mov	r3, r2
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	4413      	add	r3, r2
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	440b      	add	r3, r1
 80113e2:	3308      	adds	r3, #8
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d102      	bne.n	80113f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f7ff fce5 	bl	8010dbc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3301      	adds	r3, #1
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b09      	cmp	r3, #9
 80113fc:	dddd      	ble.n	80113ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80113fe:	bf00      	nop
 8011400:	bf00      	nop
 8011402:	3710      	adds	r7, #16
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	24009754 	.word	0x24009754

0801140c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801140c:	b5b0      	push	{r4, r5, r7, lr}
 801140e:	b08a      	sub	sp, #40	; 0x28
 8011410:	af04      	add	r7, sp, #16
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d107      	bne.n	801142c <etharp_input+0x20>
 801141c:	4b3f      	ldr	r3, [pc, #252]	; (801151c <etharp_input+0x110>)
 801141e:	f240 228a 	movw	r2, #650	; 0x28a
 8011422:	493f      	ldr	r1, [pc, #252]	; (8011520 <etharp_input+0x114>)
 8011424:	483f      	ldr	r0, [pc, #252]	; (8011524 <etharp_input+0x118>)
 8011426:	f00a fa2f 	bl	801b888 <iprintf>
 801142a:	e074      	b.n	8011516 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29b      	uxth	r3, r3
 8011438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801143c:	d10c      	bne.n	8011458 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011442:	2b06      	cmp	r3, #6
 8011444:	d108      	bne.n	8011458 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801144a:	2b04      	cmp	r3, #4
 801144c:	d104      	bne.n	8011458 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	885b      	ldrh	r3, [r3, #2]
 8011452:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011454:	2b08      	cmp	r3, #8
 8011456:	d003      	beq.n	8011460 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f003 fc45 	bl	8014ce8 <pbuf_free>
    return;
 801145e:	e05a      	b.n	8011516 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	330e      	adds	r3, #14
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	3318      	adds	r3, #24
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	3304      	adds	r3, #4
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d102      	bne.n	8011480 <etharp_input+0x74>
    for_us = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	75fb      	strb	r3, [r7, #23]
 801147e:	e009      	b.n	8011494 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011480:	68ba      	ldr	r2, [r7, #8]
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	3304      	adds	r3, #4
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	429a      	cmp	r2, r3
 801148a:	bf0c      	ite	eq
 801148c:	2301      	moveq	r3, #1
 801148e:	2300      	movne	r3, #0
 8011490:	b2db      	uxtb	r3, r3
 8011492:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	f103 0208 	add.w	r2, r3, #8
 801149a:	7dfb      	ldrb	r3, [r7, #23]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <etharp_input+0x98>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e000      	b.n	80114a6 <etharp_input+0x9a>
 80114a4:	2302      	movs	r3, #2
 80114a6:	f107 010c 	add.w	r1, r7, #12
 80114aa:	6838      	ldr	r0, [r7, #0]
 80114ac:	f7ff fed8 	bl	8011260 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	88db      	ldrh	r3, [r3, #6]
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114ba:	d003      	beq.n	80114c4 <etharp_input+0xb8>
 80114bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114c0:	d01e      	beq.n	8011500 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80114c2:	e025      	b.n	8011510 <etharp_input+0x104>
      if (for_us) {
 80114c4:	7dfb      	ldrb	r3, [r7, #23]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d021      	beq.n	801150e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80114e4:	2102      	movs	r1, #2
 80114e6:	9103      	str	r1, [sp, #12]
 80114e8:	f107 010c 	add.w	r1, r7, #12
 80114ec:	9102      	str	r1, [sp, #8]
 80114ee:	9201      	str	r2, [sp, #4]
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	462b      	mov	r3, r5
 80114f4:	4622      	mov	r2, r4
 80114f6:	4601      	mov	r1, r0
 80114f8:	6838      	ldr	r0, [r7, #0]
 80114fa:	f000 faef 	bl	8011adc <etharp_raw>
      break;
 80114fe:	e006      	b.n	801150e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011500:	f107 030c 	add.w	r3, r7, #12
 8011504:	4619      	mov	r1, r3
 8011506:	6838      	ldr	r0, [r7, #0]
 8011508:	f7fe f9fc 	bl	800f904 <dhcp_arp_reply>
      break;
 801150c:	e000      	b.n	8011510 <etharp_input+0x104>
      break;
 801150e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f003 fbe9 	bl	8014ce8 <pbuf_free>
}
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bdb0      	pop	{r4, r5, r7, pc}
 801151c:	0801cb24 	.word	0x0801cb24
 8011520:	0801ccb0 	.word	0x0801ccb0
 8011524:	0801cbd8 	.word	0x0801cbd8

08011528 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af02      	add	r7, sp, #8
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011536:	79fa      	ldrb	r2, [r7, #7]
 8011538:	4944      	ldr	r1, [pc, #272]	; (801164c <etharp_output_to_arp_index+0x124>)
 801153a:	4613      	mov	r3, r2
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4413      	add	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	440b      	add	r3, r1
 8011544:	3314      	adds	r3, #20
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d806      	bhi.n	801155a <etharp_output_to_arp_index+0x32>
 801154c:	4b40      	ldr	r3, [pc, #256]	; (8011650 <etharp_output_to_arp_index+0x128>)
 801154e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011552:	4940      	ldr	r1, [pc, #256]	; (8011654 <etharp_output_to_arp_index+0x12c>)
 8011554:	4840      	ldr	r0, [pc, #256]	; (8011658 <etharp_output_to_arp_index+0x130>)
 8011556:	f00a f997 	bl	801b888 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801155a:	79fa      	ldrb	r2, [r7, #7]
 801155c:	493b      	ldr	r1, [pc, #236]	; (801164c <etharp_output_to_arp_index+0x124>)
 801155e:	4613      	mov	r3, r2
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	4413      	add	r3, r2
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	440b      	add	r3, r1
 8011568:	3314      	adds	r3, #20
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b02      	cmp	r3, #2
 801156e:	d153      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011570:	79fa      	ldrb	r2, [r7, #7]
 8011572:	4936      	ldr	r1, [pc, #216]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011574:	4613      	mov	r3, r2
 8011576:	005b      	lsls	r3, r3, #1
 8011578:	4413      	add	r3, r2
 801157a:	00db      	lsls	r3, r3, #3
 801157c:	440b      	add	r3, r1
 801157e:	3312      	adds	r3, #18
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011586:	d919      	bls.n	80115bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011588:	79fa      	ldrb	r2, [r7, #7]
 801158a:	4613      	mov	r3, r2
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	4413      	add	r3, r2
 8011590:	00db      	lsls	r3, r3, #3
 8011592:	4a2e      	ldr	r2, [pc, #184]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011594:	4413      	add	r3, r2
 8011596:	3304      	adds	r3, #4
 8011598:	4619      	mov	r1, r3
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f000 fb4c 	bl	8011c38 <etharp_request>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d138      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80115a6:	79fa      	ldrb	r2, [r7, #7]
 80115a8:	4928      	ldr	r1, [pc, #160]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115aa:	4613      	mov	r3, r2
 80115ac:	005b      	lsls	r3, r3, #1
 80115ae:	4413      	add	r3, r2
 80115b0:	00db      	lsls	r3, r3, #3
 80115b2:	440b      	add	r3, r1
 80115b4:	3314      	adds	r3, #20
 80115b6:	2203      	movs	r2, #3
 80115b8:	701a      	strb	r2, [r3, #0]
 80115ba:	e02d      	b.n	8011618 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80115bc:	79fa      	ldrb	r2, [r7, #7]
 80115be:	4923      	ldr	r1, [pc, #140]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115c0:	4613      	mov	r3, r2
 80115c2:	005b      	lsls	r3, r3, #1
 80115c4:	4413      	add	r3, r2
 80115c6:	00db      	lsls	r3, r3, #3
 80115c8:	440b      	add	r3, r1
 80115ca:	3312      	adds	r3, #18
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80115d2:	d321      	bcc.n	8011618 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115d4:	79fa      	ldrb	r2, [r7, #7]
 80115d6:	4613      	mov	r3, r2
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	4413      	add	r3, r2
 80115dc:	00db      	lsls	r3, r3, #3
 80115de:	4a1b      	ldr	r2, [pc, #108]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115e0:	4413      	add	r3, r2
 80115e2:	1d19      	adds	r1, r3, #4
 80115e4:	79fa      	ldrb	r2, [r7, #7]
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	3308      	adds	r3, #8
 80115f0:	4a16      	ldr	r2, [pc, #88]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115f2:	4413      	add	r3, r2
 80115f4:	3304      	adds	r3, #4
 80115f6:	461a      	mov	r2, r3
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f000 fafb 	bl	8011bf4 <etharp_request_dst>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d109      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011604:	79fa      	ldrb	r2, [r7, #7]
 8011606:	4911      	ldr	r1, [pc, #68]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011608:	4613      	mov	r3, r2
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	4413      	add	r3, r2
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	440b      	add	r3, r1
 8011612:	3314      	adds	r3, #20
 8011614:	2203      	movs	r2, #3
 8011616:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801161e:	79fa      	ldrb	r2, [r7, #7]
 8011620:	4613      	mov	r3, r2
 8011622:	005b      	lsls	r3, r3, #1
 8011624:	4413      	add	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	3308      	adds	r3, #8
 801162a:	4a08      	ldr	r2, [pc, #32]	; (801164c <etharp_output_to_arp_index+0x124>)
 801162c:	4413      	add	r3, r2
 801162e:	3304      	adds	r3, #4
 8011630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011634:	9200      	str	r2, [sp, #0]
 8011636:	460a      	mov	r2, r1
 8011638:	68b9      	ldr	r1, [r7, #8]
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f000 fb9c 	bl	8011d78 <ethernet_output>
 8011640:	4603      	mov	r3, r0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	24009754 	.word	0x24009754
 8011650:	0801cb24 	.word	0x0801cb24
 8011654:	0801ccd0 	.word	0x0801ccd0
 8011658:	0801cbd8 	.word	0x0801cbd8

0801165c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b08a      	sub	sp, #40	; 0x28
 8011660:	af02      	add	r7, sp, #8
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d106      	bne.n	8011680 <etharp_output+0x24>
 8011672:	4b73      	ldr	r3, [pc, #460]	; (8011840 <etharp_output+0x1e4>)
 8011674:	f240 321e 	movw	r2, #798	; 0x31e
 8011678:	4972      	ldr	r1, [pc, #456]	; (8011844 <etharp_output+0x1e8>)
 801167a:	4873      	ldr	r0, [pc, #460]	; (8011848 <etharp_output+0x1ec>)
 801167c:	f00a f904 	bl	801b888 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <etharp_output+0x38>
 8011686:	4b6e      	ldr	r3, [pc, #440]	; (8011840 <etharp_output+0x1e4>)
 8011688:	f240 321f 	movw	r2, #799	; 0x31f
 801168c:	496f      	ldr	r1, [pc, #444]	; (801184c <etharp_output+0x1f0>)
 801168e:	486e      	ldr	r0, [pc, #440]	; (8011848 <etharp_output+0x1ec>)
 8011690:	f00a f8fa 	bl	801b888 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <etharp_output+0x4c>
 801169a:	4b69      	ldr	r3, [pc, #420]	; (8011840 <etharp_output+0x1e4>)
 801169c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80116a0:	496b      	ldr	r1, [pc, #428]	; (8011850 <etharp_output+0x1f4>)
 80116a2:	4869      	ldr	r0, [pc, #420]	; (8011848 <etharp_output+0x1ec>)
 80116a4:	f00a f8f0 	bl	801b888 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	68f9      	ldr	r1, [r7, #12]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f001 f8e6 	bl	8012880 <ip4_addr_isbroadcast_u32>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80116ba:	4b66      	ldr	r3, [pc, #408]	; (8011854 <etharp_output+0x1f8>)
 80116bc:	61fb      	str	r3, [r7, #28]
 80116be:	e0af      	b.n	8011820 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116c8:	2be0      	cmp	r3, #224	; 0xe0
 80116ca:	d118      	bne.n	80116fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80116cc:	2301      	movs	r3, #1
 80116ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80116d0:	2300      	movs	r3, #0
 80116d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80116d4:	235e      	movs	r3, #94	; 0x5e
 80116d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	3301      	adds	r3, #1
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	3302      	adds	r3, #2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3303      	adds	r3, #3
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80116f6:	f107 0310 	add.w	r3, r7, #16
 80116fa:	61fb      	str	r3, [r7, #28]
 80116fc:	e090      	b.n	8011820 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	3304      	adds	r3, #4
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	405a      	eors	r2, r3
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	3308      	adds	r3, #8
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4013      	ands	r3, r2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d012      	beq.n	801173c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801171c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011720:	4293      	cmp	r3, r2
 8011722:	d00b      	beq.n	801173c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	330c      	adds	r3, #12
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	330c      	adds	r3, #12
 8011732:	61bb      	str	r3, [r7, #24]
 8011734:	e002      	b.n	801173c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011736:	f06f 0303 	mvn.w	r3, #3
 801173a:	e07d      	b.n	8011838 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801173c:	4b46      	ldr	r3, [pc, #280]	; (8011858 <etharp_output+0x1fc>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	4a46      	ldr	r2, [pc, #280]	; (801185c <etharp_output+0x200>)
 8011744:	460b      	mov	r3, r1
 8011746:	005b      	lsls	r3, r3, #1
 8011748:	440b      	add	r3, r1
 801174a:	00db      	lsls	r3, r3, #3
 801174c:	4413      	add	r3, r2
 801174e:	3314      	adds	r3, #20
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d925      	bls.n	80117a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011756:	4b40      	ldr	r3, [pc, #256]	; (8011858 <etharp_output+0x1fc>)
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	4619      	mov	r1, r3
 801175c:	4a3f      	ldr	r2, [pc, #252]	; (801185c <etharp_output+0x200>)
 801175e:	460b      	mov	r3, r1
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	440b      	add	r3, r1
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	4413      	add	r3, r2
 8011768:	3308      	adds	r3, #8
 801176a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	429a      	cmp	r2, r3
 8011770:	d117      	bne.n	80117a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	4b38      	ldr	r3, [pc, #224]	; (8011858 <etharp_output+0x1fc>)
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	4618      	mov	r0, r3
 801177c:	4937      	ldr	r1, [pc, #220]	; (801185c <etharp_output+0x200>)
 801177e:	4603      	mov	r3, r0
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	4403      	add	r3, r0
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	3304      	adds	r3, #4
 801178a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801178c:	429a      	cmp	r2, r3
 801178e:	d108      	bne.n	80117a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011790:	4b31      	ldr	r3, [pc, #196]	; (8011858 <etharp_output+0x1fc>)
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	461a      	mov	r2, r3
 8011796:	68b9      	ldr	r1, [r7, #8]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7ff fec5 	bl	8011528 <etharp_output_to_arp_index>
 801179e:	4603      	mov	r3, r0
 80117a0:	e04a      	b.n	8011838 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80117a2:	2300      	movs	r3, #0
 80117a4:	75fb      	strb	r3, [r7, #23]
 80117a6:	e031      	b.n	801180c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80117a8:	7dfa      	ldrb	r2, [r7, #23]
 80117aa:	492c      	ldr	r1, [pc, #176]	; (801185c <etharp_output+0x200>)
 80117ac:	4613      	mov	r3, r2
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	4413      	add	r3, r2
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	3314      	adds	r3, #20
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d923      	bls.n	8011806 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80117be:	7dfa      	ldrb	r2, [r7, #23]
 80117c0:	4926      	ldr	r1, [pc, #152]	; (801185c <etharp_output+0x200>)
 80117c2:	4613      	mov	r3, r2
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4413      	add	r3, r2
 80117c8:	00db      	lsls	r3, r3, #3
 80117ca:	440b      	add	r3, r1
 80117cc:	3308      	adds	r3, #8
 80117ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d117      	bne.n	8011806 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	6819      	ldr	r1, [r3, #0]
 80117da:	7dfa      	ldrb	r2, [r7, #23]
 80117dc:	481f      	ldr	r0, [pc, #124]	; (801185c <etharp_output+0x200>)
 80117de:	4613      	mov	r3, r2
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	4413      	add	r3, r2
 80117e4:	00db      	lsls	r3, r3, #3
 80117e6:	4403      	add	r3, r0
 80117e8:	3304      	adds	r3, #4
 80117ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80117ec:	4299      	cmp	r1, r3
 80117ee:	d10a      	bne.n	8011806 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80117f0:	4a19      	ldr	r2, [pc, #100]	; (8011858 <etharp_output+0x1fc>)
 80117f2:	7dfb      	ldrb	r3, [r7, #23]
 80117f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	461a      	mov	r2, r3
 80117fa:	68b9      	ldr	r1, [r7, #8]
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff fe93 	bl	8011528 <etharp_output_to_arp_index>
 8011802:	4603      	mov	r3, r0
 8011804:	e018      	b.n	8011838 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	3301      	adds	r3, #1
 801180a:	75fb      	strb	r3, [r7, #23]
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	2b09      	cmp	r3, #9
 8011810:	d9ca      	bls.n	80117a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	69b9      	ldr	r1, [r7, #24]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f000 f822 	bl	8011860 <etharp_query>
 801181c:	4603      	mov	r3, r0
 801181e:	e00b      	b.n	8011838 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	68b9      	ldr	r1, [r7, #8]
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f000 faa1 	bl	8011d78 <ethernet_output>
 8011836:	4603      	mov	r3, r0
}
 8011838:	4618      	mov	r0, r3
 801183a:	3720      	adds	r7, #32
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	0801cb24 	.word	0x0801cb24
 8011844:	0801ccb0 	.word	0x0801ccb0
 8011848:	0801cbd8 	.word	0x0801cbd8
 801184c:	0801cd00 	.word	0x0801cd00
 8011850:	0801cca0 	.word	0x0801cca0
 8011854:	0801f974 	.word	0x0801f974
 8011858:	24009844 	.word	0x24009844
 801185c:	24009754 	.word	0x24009754

08011860 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08c      	sub	sp, #48	; 0x30
 8011864:	af02      	add	r7, sp, #8
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	332a      	adds	r3, #42	; 0x2a
 8011870:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011872:	23ff      	movs	r3, #255	; 0xff
 8011874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68f9      	ldr	r1, [r7, #12]
 8011882:	4618      	mov	r0, r3
 8011884:	f000 fffc 	bl	8012880 <ip4_addr_isbroadcast_u32>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d10c      	bne.n	80118a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011896:	2be0      	cmp	r3, #224	; 0xe0
 8011898:	d006      	beq.n	80118a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d102      	bne.n	80118ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80118a8:	f06f 030f 	mvn.w	r3, #15
 80118ac:	e101      	b.n	8011ab2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	2101      	movs	r1, #1
 80118b2:	68b8      	ldr	r0, [r7, #8]
 80118b4:	f7ff fb5c 	bl	8010f70 <etharp_find_entry>
 80118b8:	4603      	mov	r3, r0
 80118ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80118bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	da02      	bge.n	80118ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80118c4:	8a7b      	ldrh	r3, [r7, #18]
 80118c6:	b25b      	sxtb	r3, r3
 80118c8:	e0f3      	b.n	8011ab2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80118ca:	8a7b      	ldrh	r3, [r7, #18]
 80118cc:	2b7e      	cmp	r3, #126	; 0x7e
 80118ce:	d906      	bls.n	80118de <etharp_query+0x7e>
 80118d0:	4b7a      	ldr	r3, [pc, #488]	; (8011abc <etharp_query+0x25c>)
 80118d2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80118d6:	497a      	ldr	r1, [pc, #488]	; (8011ac0 <etharp_query+0x260>)
 80118d8:	487a      	ldr	r0, [pc, #488]	; (8011ac4 <etharp_query+0x264>)
 80118da:	f009 ffd5 	bl	801b888 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80118de:	8a7b      	ldrh	r3, [r7, #18]
 80118e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80118e2:	7c7a      	ldrb	r2, [r7, #17]
 80118e4:	4978      	ldr	r1, [pc, #480]	; (8011ac8 <etharp_query+0x268>)
 80118e6:	4613      	mov	r3, r2
 80118e8:	005b      	lsls	r3, r3, #1
 80118ea:	4413      	add	r3, r2
 80118ec:	00db      	lsls	r3, r3, #3
 80118ee:	440b      	add	r3, r1
 80118f0:	3314      	adds	r3, #20
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d115      	bne.n	8011924 <etharp_query+0xc4>
    is_new_entry = 1;
 80118f8:	2301      	movs	r3, #1
 80118fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80118fc:	7c7a      	ldrb	r2, [r7, #17]
 80118fe:	4972      	ldr	r1, [pc, #456]	; (8011ac8 <etharp_query+0x268>)
 8011900:	4613      	mov	r3, r2
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	4413      	add	r3, r2
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	440b      	add	r3, r1
 801190a:	3314      	adds	r3, #20
 801190c:	2201      	movs	r2, #1
 801190e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011910:	7c7a      	ldrb	r2, [r7, #17]
 8011912:	496d      	ldr	r1, [pc, #436]	; (8011ac8 <etharp_query+0x268>)
 8011914:	4613      	mov	r3, r2
 8011916:	005b      	lsls	r3, r3, #1
 8011918:	4413      	add	r3, r2
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	440b      	add	r3, r1
 801191e:	3308      	adds	r3, #8
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011924:	7c7a      	ldrb	r2, [r7, #17]
 8011926:	4968      	ldr	r1, [pc, #416]	; (8011ac8 <etharp_query+0x268>)
 8011928:	4613      	mov	r3, r2
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	4413      	add	r3, r2
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	440b      	add	r3, r1
 8011932:	3314      	adds	r3, #20
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d011      	beq.n	801195e <etharp_query+0xfe>
 801193a:	7c7a      	ldrb	r2, [r7, #17]
 801193c:	4962      	ldr	r1, [pc, #392]	; (8011ac8 <etharp_query+0x268>)
 801193e:	4613      	mov	r3, r2
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	4413      	add	r3, r2
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	440b      	add	r3, r1
 8011948:	3314      	adds	r3, #20
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	2b01      	cmp	r3, #1
 801194e:	d806      	bhi.n	801195e <etharp_query+0xfe>
 8011950:	4b5a      	ldr	r3, [pc, #360]	; (8011abc <etharp_query+0x25c>)
 8011952:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011956:	495d      	ldr	r1, [pc, #372]	; (8011acc <etharp_query+0x26c>)
 8011958:	485a      	ldr	r0, [pc, #360]	; (8011ac4 <etharp_query+0x264>)
 801195a:	f009 ff95 	bl	801b888 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <etharp_query+0x10a>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10c      	bne.n	8011984 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801196a:	68b9      	ldr	r1, [r7, #8]
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 f963 	bl	8011c38 <etharp_request>
 8011972:	4603      	mov	r3, r0
 8011974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d102      	bne.n	8011984 <etharp_query+0x124>
      return result;
 801197e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011982:	e096      	b.n	8011ab2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d106      	bne.n	8011998 <etharp_query+0x138>
 801198a:	4b4c      	ldr	r3, [pc, #304]	; (8011abc <etharp_query+0x25c>)
 801198c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011990:	494f      	ldr	r1, [pc, #316]	; (8011ad0 <etharp_query+0x270>)
 8011992:	484c      	ldr	r0, [pc, #304]	; (8011ac4 <etharp_query+0x264>)
 8011994:	f009 ff78 	bl	801b888 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011998:	7c7a      	ldrb	r2, [r7, #17]
 801199a:	494b      	ldr	r1, [pc, #300]	; (8011ac8 <etharp_query+0x268>)
 801199c:	4613      	mov	r3, r2
 801199e:	005b      	lsls	r3, r3, #1
 80119a0:	4413      	add	r3, r2
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	440b      	add	r3, r1
 80119a6:	3314      	adds	r3, #20
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d917      	bls.n	80119de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80119ae:	4a49      	ldr	r2, [pc, #292]	; (8011ad4 <etharp_query+0x274>)
 80119b0:	7c7b      	ldrb	r3, [r7, #17]
 80119b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80119b4:	7c7a      	ldrb	r2, [r7, #17]
 80119b6:	4613      	mov	r3, r2
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	4413      	add	r3, r2
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	3308      	adds	r3, #8
 80119c0:	4a41      	ldr	r2, [pc, #260]	; (8011ac8 <etharp_query+0x268>)
 80119c2:	4413      	add	r3, r2
 80119c4:	3304      	adds	r3, #4
 80119c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119ca:	9200      	str	r2, [sp, #0]
 80119cc:	697a      	ldr	r2, [r7, #20]
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f000 f9d1 	bl	8011d78 <ethernet_output>
 80119d6:	4603      	mov	r3, r0
 80119d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80119dc:	e067      	b.n	8011aae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80119de:	7c7a      	ldrb	r2, [r7, #17]
 80119e0:	4939      	ldr	r1, [pc, #228]	; (8011ac8 <etharp_query+0x268>)
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	440b      	add	r3, r1
 80119ec:	3314      	adds	r3, #20
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d15c      	bne.n	8011aae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80119f4:	2300      	movs	r3, #0
 80119f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119fc:	e01c      	b.n	8011a38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	895a      	ldrh	r2, [r3, #10]
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	891b      	ldrh	r3, [r3, #8]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d10a      	bne.n	8011a20 <etharp_query+0x1c0>
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d006      	beq.n	8011a20 <etharp_query+0x1c0>
 8011a12:	4b2a      	ldr	r3, [pc, #168]	; (8011abc <etharp_query+0x25c>)
 8011a14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011a18:	492f      	ldr	r1, [pc, #188]	; (8011ad8 <etharp_query+0x278>)
 8011a1a:	482a      	ldr	r0, [pc, #168]	; (8011ac4 <etharp_query+0x264>)
 8011a1c:	f009 ff34 	bl	801b888 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	7b1b      	ldrb	r3, [r3, #12]
 8011a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <etharp_query+0x1d2>
        copy_needed = 1;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	61bb      	str	r3, [r7, #24]
        break;
 8011a30:	e005      	b.n	8011a3e <etharp_query+0x1de>
      }
      p = p->next;
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1df      	bne.n	80119fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d007      	beq.n	8011a54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011a4a:	200e      	movs	r0, #14
 8011a4c:	f003 fbc4 	bl	80151d8 <pbuf_clone>
 8011a50:	61f8      	str	r0, [r7, #28]
 8011a52:	e004      	b.n	8011a5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011a58:	69f8      	ldr	r0, [r7, #28]
 8011a5a:	f003 f9eb 	bl	8014e34 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d021      	beq.n	8011aa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011a64:	7c7a      	ldrb	r2, [r7, #17]
 8011a66:	4918      	ldr	r1, [pc, #96]	; (8011ac8 <etharp_query+0x268>)
 8011a68:	4613      	mov	r3, r2
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	4413      	add	r3, r2
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	440b      	add	r3, r1
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00a      	beq.n	8011a8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011a78:	7c7a      	ldrb	r2, [r7, #17]
 8011a7a:	4913      	ldr	r1, [pc, #76]	; (8011ac8 <etharp_query+0x268>)
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	440b      	add	r3, r1
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f003 f92d 	bl	8014ce8 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a8e:	7c7a      	ldrb	r2, [r7, #17]
 8011a90:	490d      	ldr	r1, [pc, #52]	; (8011ac8 <etharp_query+0x268>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	440b      	add	r3, r1
 8011a9c:	69fa      	ldr	r2, [r7, #28]
 8011a9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aa6:	e002      	b.n	8011aae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011aa8:	23ff      	movs	r3, #255	; 0xff
 8011aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3728      	adds	r7, #40	; 0x28
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801cb24 	.word	0x0801cb24
 8011ac0:	0801cd0c 	.word	0x0801cd0c
 8011ac4:	0801cbd8 	.word	0x0801cbd8
 8011ac8:	24009754 	.word	0x24009754
 8011acc:	0801cd1c 	.word	0x0801cd1c
 8011ad0:	0801cd00 	.word	0x0801cd00
 8011ad4:	24009844 	.word	0x24009844
 8011ad8:	0801cd44 	.word	0x0801cd44

08011adc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08a      	sub	sp, #40	; 0x28
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d106      	bne.n	8011b02 <etharp_raw+0x26>
 8011af4:	4b3a      	ldr	r3, [pc, #232]	; (8011be0 <etharp_raw+0x104>)
 8011af6:	f240 4257 	movw	r2, #1111	; 0x457
 8011afa:	493a      	ldr	r1, [pc, #232]	; (8011be4 <etharp_raw+0x108>)
 8011afc:	483a      	ldr	r0, [pc, #232]	; (8011be8 <etharp_raw+0x10c>)
 8011afe:	f009 fec3 	bl	801b888 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011b02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b06:	211c      	movs	r1, #28
 8011b08:	200e      	movs	r0, #14
 8011b0a:	f002 fe09 	bl	8014720 <pbuf_alloc>
 8011b0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	e05d      	b.n	8011bd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	895b      	ldrh	r3, [r3, #10]
 8011b20:	2b1b      	cmp	r3, #27
 8011b22:	d806      	bhi.n	8011b32 <etharp_raw+0x56>
 8011b24:	4b2e      	ldr	r3, [pc, #184]	; (8011be0 <etharp_raw+0x104>)
 8011b26:	f240 4262 	movw	r2, #1122	; 0x462
 8011b2a:	4930      	ldr	r1, [pc, #192]	; (8011bec <etharp_raw+0x110>)
 8011b2c:	482e      	ldr	r0, [pc, #184]	; (8011be8 <etharp_raw+0x10c>)
 8011b2e:	f009 feab 	bl	801b888 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011b38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fd fa7c 	bl	800f038 <lwip_htons>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b4e:	2b06      	cmp	r3, #6
 8011b50:	d006      	beq.n	8011b60 <etharp_raw+0x84>
 8011b52:	4b23      	ldr	r3, [pc, #140]	; (8011be0 <etharp_raw+0x104>)
 8011b54:	f240 4269 	movw	r2, #1129	; 0x469
 8011b58:	4925      	ldr	r1, [pc, #148]	; (8011bf0 <etharp_raw+0x114>)
 8011b5a:	4823      	ldr	r0, [pc, #140]	; (8011be8 <etharp_raw+0x10c>)
 8011b5c:	f009 fe94 	bl	801b888 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	3308      	adds	r3, #8
 8011b64:	2206      	movs	r2, #6
 8011b66:	6839      	ldr	r1, [r7, #0]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f009 ff68 	bl	801ba3e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	3312      	adds	r3, #18
 8011b72:	2206      	movs	r2, #6
 8011b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b76:	4618      	mov	r0, r3
 8011b78:	f009 ff61 	bl	801ba3e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	330e      	adds	r3, #14
 8011b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b82:	6812      	ldr	r2, [r2, #0]
 8011b84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	3318      	adds	r3, #24
 8011b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b8c:	6812      	ldr	r2, [r2, #0]
 8011b8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2200      	movs	r2, #0
 8011b94:	701a      	strb	r2, [r3, #0]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f042 0201 	orr.w	r2, r2, #1
 8011b9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f042 0208 	orr.w	r2, r2, #8
 8011ba6:	709a      	strb	r2, [r3, #2]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	2206      	movs	r2, #6
 8011bb0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	2204      	movs	r2, #4
 8011bb6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011bb8:	f640 0306 	movw	r3, #2054	; 0x806
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	69b9      	ldr	r1, [r7, #24]
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 f8d7 	bl	8011d78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011bca:	69b8      	ldr	r0, [r7, #24]
 8011bcc:	f003 f88c 	bl	8014ce8 <pbuf_free>
  p = NULL;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	0801cb24 	.word	0x0801cb24
 8011be4:	0801ccb0 	.word	0x0801ccb0
 8011be8:	0801cbd8 	.word	0x0801cbd8
 8011bec:	0801cd60 	.word	0x0801cd60
 8011bf0:	0801cd94 	.word	0x0801cd94

08011bf4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b088      	sub	sp, #32
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011c10:	2201      	movs	r2, #1
 8011c12:	9203      	str	r2, [sp, #12]
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	9202      	str	r2, [sp, #8]
 8011c18:	4a06      	ldr	r2, [pc, #24]	; (8011c34 <etharp_request_dst+0x40>)
 8011c1a:	9201      	str	r2, [sp, #4]
 8011c1c:	9300      	str	r3, [sp, #0]
 8011c1e:	4603      	mov	r3, r0
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f7ff ff5a 	bl	8011adc <etharp_raw>
 8011c28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	0801f97c 	.word	0x0801f97c

08011c38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011c42:	4a05      	ldr	r2, [pc, #20]	; (8011c58 <etharp_request+0x20>)
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff ffd4 	bl	8011bf4 <etharp_request_dst>
 8011c4c:	4603      	mov	r3, r0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3708      	adds	r7, #8
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	0801f974 	.word	0x0801f974

08011c5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011c66:	230e      	movs	r3, #14
 8011c68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	895b      	ldrh	r3, [r3, #10]
 8011c6e:	2b0e      	cmp	r3, #14
 8011c70:	d96e      	bls.n	8011d50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	7bdb      	ldrb	r3, [r3, #15]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c80:	3301      	adds	r3, #1
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	7b1a      	ldrb	r2, [r3, #12]
 8011c92:	7b5b      	ldrb	r3, [r3, #13]
 8011c94:	021b      	lsls	r3, r3, #8
 8011c96:	4313      	orrs	r3, r2
 8011c98:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	f003 0301 	and.w	r3, r3, #1
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d023      	beq.n	8011cee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d10f      	bne.n	8011cce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	785b      	ldrb	r3, [r3, #1]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d11b      	bne.n	8011cee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011cba:	2b5e      	cmp	r3, #94	; 0x5e
 8011cbc:	d117      	bne.n	8011cee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7b5b      	ldrb	r3, [r3, #13]
 8011cc2:	f043 0310 	orr.w	r3, r3, #16
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	735a      	strb	r2, [r3, #13]
 8011ccc:	e00f      	b.n	8011cee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	2206      	movs	r2, #6
 8011cd2:	4928      	ldr	r1, [pc, #160]	; (8011d74 <ethernet_input+0x118>)
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f009 fe2c 	bl	801b932 <memcmp>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d106      	bne.n	8011cee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	7b5b      	ldrb	r3, [r3, #13]
 8011ce4:	f043 0308 	orr.w	r3, r3, #8
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011cee:	89fb      	ldrh	r3, [r7, #14]
 8011cf0:	2b08      	cmp	r3, #8
 8011cf2:	d003      	beq.n	8011cfc <ethernet_input+0xa0>
 8011cf4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011cf8:	d014      	beq.n	8011d24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011cfa:	e032      	b.n	8011d62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d02:	f003 0308 	and.w	r3, r3, #8
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d024      	beq.n	8011d54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011d0a:	8afb      	ldrh	r3, [r7, #22]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f002 ff64 	bl	8014bdc <pbuf_remove_header>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d11e      	bne.n	8011d58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 fb95 	bl	801244c <ip4_input>
      break;
 8011d22:	e013      	b.n	8011d4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d2a:	f003 0308 	and.w	r3, r3, #8
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d014      	beq.n	8011d5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011d32:	8afb      	ldrh	r3, [r7, #22]
 8011d34:	4619      	mov	r1, r3
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f002 ff50 	bl	8014bdc <pbuf_remove_header>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10e      	bne.n	8011d60 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011d42:	6839      	ldr	r1, [r7, #0]
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7ff fb61 	bl	801140c <etharp_input>
      break;
 8011d4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	e00c      	b.n	8011d6a <ethernet_input+0x10e>
    goto free_and_return;
 8011d50:	bf00      	nop
 8011d52:	e006      	b.n	8011d62 <ethernet_input+0x106>
        goto free_and_return;
 8011d54:	bf00      	nop
 8011d56:	e004      	b.n	8011d62 <ethernet_input+0x106>
        goto free_and_return;
 8011d58:	bf00      	nop
 8011d5a:	e002      	b.n	8011d62 <ethernet_input+0x106>
        goto free_and_return;
 8011d5c:	bf00      	nop
 8011d5e:	e000      	b.n	8011d62 <ethernet_input+0x106>
        goto free_and_return;
 8011d60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f002 ffc0 	bl	8014ce8 <pbuf_free>
  return ERR_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	0801f974 	.word	0x0801f974

08011d78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011d86:	8c3b      	ldrh	r3, [r7, #32]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fd f955 	bl	800f038 <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011d92:	210e      	movs	r1, #14
 8011d94:	68b8      	ldr	r0, [r7, #8]
 8011d96:	f002 ff11 	bl	8014bbc <pbuf_add_header>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d125      	bne.n	8011dec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	8afa      	ldrh	r2, [r7, #22]
 8011daa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	2206      	movs	r2, #6
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f009 fe43 	bl	801ba3e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	3306      	adds	r3, #6
 8011dbc:	2206      	movs	r2, #6
 8011dbe:	6879      	ldr	r1, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f009 fe3c 	bl	801ba3e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011dcc:	2b06      	cmp	r3, #6
 8011dce:	d006      	beq.n	8011dde <ethernet_output+0x66>
 8011dd0:	4b0a      	ldr	r3, [pc, #40]	; (8011dfc <ethernet_output+0x84>)
 8011dd2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011dd6:	490a      	ldr	r1, [pc, #40]	; (8011e00 <ethernet_output+0x88>)
 8011dd8:	480a      	ldr	r0, [pc, #40]	; (8011e04 <ethernet_output+0x8c>)
 8011dda:	f009 fd55 	bl	801b888 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	699b      	ldr	r3, [r3, #24]
 8011de2:	68b9      	ldr	r1, [r7, #8]
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	4798      	blx	r3
 8011de8:	4603      	mov	r3, r0
 8011dea:	e002      	b.n	8011df2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011dec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011dee:	f06f 0301 	mvn.w	r3, #1
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	0801cdd8 	.word	0x0801cdd8
 8011e00:	0801ce48 	.word	0x0801ce48
 8011e04:	0801ce7c 	.word	0x0801ce7c

08011e08 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b08e      	sub	sp, #56	; 0x38
 8011e0c:	af04      	add	r7, sp, #16
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011e12:	4b87      	ldr	r3, [pc, #540]	; (8012030 <icmp_input+0x228>)
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	f003 030f 	and.w	r3, r3, #15
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e2a:	2b13      	cmp	r3, #19
 8011e2c:	f240 80e8 	bls.w	8012000 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	895b      	ldrh	r3, [r3, #10]
 8011e34:	2b03      	cmp	r3, #3
 8011e36:	f240 80e5 	bls.w	8012004 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011e44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f000 80d2 	beq.w	8011ff2 <icmp_input+0x1ea>
 8011e4e:	2b08      	cmp	r3, #8
 8011e50:	f040 80d2 	bne.w	8011ff8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011e54:	4b77      	ldr	r3, [pc, #476]	; (8012034 <icmp_input+0x22c>)
 8011e56:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e58:	4b75      	ldr	r3, [pc, #468]	; (8012030 <icmp_input+0x228>)
 8011e5a:	695b      	ldr	r3, [r3, #20]
 8011e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e60:	2be0      	cmp	r3, #224	; 0xe0
 8011e62:	f000 80d6 	beq.w	8012012 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011e66:	4b72      	ldr	r3, [pc, #456]	; (8012030 <icmp_input+0x228>)
 8011e68:	695b      	ldr	r3, [r3, #20]
 8011e6a:	4a71      	ldr	r2, [pc, #452]	; (8012030 <icmp_input+0x228>)
 8011e6c:	6812      	ldr	r2, [r2, #0]
 8011e6e:	4611      	mov	r1, r2
 8011e70:	4618      	mov	r0, r3
 8011e72:	f000 fd05 	bl	8012880 <ip4_addr_isbroadcast_u32>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f040 80cc 	bne.w	8012016 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	891b      	ldrh	r3, [r3, #8]
 8011e82:	2b07      	cmp	r3, #7
 8011e84:	f240 80c0 	bls.w	8012008 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 f9e0 	bl	801224e <inet_chksum_pbuf>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d003      	beq.n	8011e9c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f002 ff27 	bl	8014ce8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011e9a:	e0c5      	b.n	8012028 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e9e:	330e      	adds	r3, #14
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f002 fe8a 	bl	8014bbc <pbuf_add_header>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d04b      	beq.n	8011f46 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	891a      	ldrh	r2, [r3, #8]
 8011eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011eb4:	4413      	add	r3, r2
 8011eb6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	891b      	ldrh	r3, [r3, #8]
 8011ebc:	8b7a      	ldrh	r2, [r7, #26]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	f0c0 80ab 	bcc.w	801201a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011ec4:	8b7b      	ldrh	r3, [r7, #26]
 8011ec6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011eca:	4619      	mov	r1, r3
 8011ecc:	200e      	movs	r0, #14
 8011ece:	f002 fc27 	bl	8014720 <pbuf_alloc>
 8011ed2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f000 80a1 	beq.w	801201e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	895b      	ldrh	r3, [r3, #10]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ee4:	3308      	adds	r3, #8
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d203      	bcs.n	8011ef2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011eea:	6978      	ldr	r0, [r7, #20]
 8011eec:	f002 fefc 	bl	8014ce8 <pbuf_free>
          goto icmperr;
 8011ef0:	e096      	b.n	8012020 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011efa:	4618      	mov	r0, r3
 8011efc:	f009 fd9f 	bl	801ba3e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f02:	4619      	mov	r1, r3
 8011f04:	6978      	ldr	r0, [r7, #20]
 8011f06:	f002 fe69 	bl	8014bdc <pbuf_remove_header>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d009      	beq.n	8011f24 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011f10:	4b49      	ldr	r3, [pc, #292]	; (8012038 <icmp_input+0x230>)
 8011f12:	22b6      	movs	r2, #182	; 0xb6
 8011f14:	4949      	ldr	r1, [pc, #292]	; (801203c <icmp_input+0x234>)
 8011f16:	484a      	ldr	r0, [pc, #296]	; (8012040 <icmp_input+0x238>)
 8011f18:	f009 fcb6 	bl	801b888 <iprintf>
          pbuf_free(r);
 8011f1c:	6978      	ldr	r0, [r7, #20]
 8011f1e:	f002 fee3 	bl	8014ce8 <pbuf_free>
          goto icmperr;
 8011f22:	e07d      	b.n	8012020 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011f24:	6879      	ldr	r1, [r7, #4]
 8011f26:	6978      	ldr	r0, [r7, #20]
 8011f28:	f003 f812 	bl	8014f50 <pbuf_copy>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d003      	beq.n	8011f3a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011f32:	6978      	ldr	r0, [r7, #20]
 8011f34:	f002 fed8 	bl	8014ce8 <pbuf_free>
          goto icmperr;
 8011f38:	e072      	b.n	8012020 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f002 fed4 	bl	8014ce8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	607b      	str	r3, [r7, #4]
 8011f44:	e00f      	b.n	8011f66 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f48:	330e      	adds	r3, #14
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f002 fe45 	bl	8014bdc <pbuf_remove_header>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d006      	beq.n	8011f66 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011f58:	4b37      	ldr	r3, [pc, #220]	; (8012038 <icmp_input+0x230>)
 8011f5a:	22c7      	movs	r2, #199	; 0xc7
 8011f5c:	4939      	ldr	r1, [pc, #228]	; (8012044 <icmp_input+0x23c>)
 8011f5e:	4838      	ldr	r0, [pc, #224]	; (8012040 <icmp_input+0x238>)
 8011f60:	f009 fc92 	bl	801b888 <iprintf>
          goto icmperr;
 8011f64:	e05c      	b.n	8012020 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011f6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f6e:	4619      	mov	r1, r3
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f002 fe23 	bl	8014bbc <pbuf_add_header>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d13c      	bne.n	8011ff6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011f8a:	4b29      	ldr	r3, [pc, #164]	; (8012030 <icmp_input+0x228>)
 8011f8c:	691a      	ldr	r2, [r3, #16]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	2200      	movs	r2, #0
 8011f96:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	885b      	ldrh	r3, [r3, #2]
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	d907      	bls.n	8011fb6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	885b      	ldrh	r3, [r3, #2]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	3309      	adds	r3, #9
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	805a      	strh	r2, [r3, #2]
 8011fb4:	e006      	b.n	8011fc4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	885b      	ldrh	r3, [r3, #2]
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	3308      	adds	r3, #8
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	22ff      	movs	r2, #255	; 0xff
 8011fc8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	729a      	strb	r2, [r3, #10]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	9302      	str	r3, [sp, #8]
 8011fd8:	2301      	movs	r3, #1
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	23ff      	movs	r3, #255	; 0xff
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	69f9      	ldr	r1, [r7, #28]
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fb72 	bl	80126d0 <ip4_output_if>
 8011fec:	4603      	mov	r3, r0
 8011fee:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011ff0:	e001      	b.n	8011ff6 <icmp_input+0x1ee>
      break;
 8011ff2:	bf00      	nop
 8011ff4:	e000      	b.n	8011ff8 <icmp_input+0x1f0>
      break;
 8011ff6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f002 fe75 	bl	8014ce8 <pbuf_free>
  return;
 8011ffe:	e013      	b.n	8012028 <icmp_input+0x220>
    goto lenerr;
 8012000:	bf00      	nop
 8012002:	e002      	b.n	801200a <icmp_input+0x202>
    goto lenerr;
 8012004:	bf00      	nop
 8012006:	e000      	b.n	801200a <icmp_input+0x202>
        goto lenerr;
 8012008:	bf00      	nop
lenerr:
  pbuf_free(p);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f002 fe6c 	bl	8014ce8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012010:	e00a      	b.n	8012028 <icmp_input+0x220>
        goto icmperr;
 8012012:	bf00      	nop
 8012014:	e004      	b.n	8012020 <icmp_input+0x218>
        goto icmperr;
 8012016:	bf00      	nop
 8012018:	e002      	b.n	8012020 <icmp_input+0x218>
          goto icmperr;
 801201a:	bf00      	nop
 801201c:	e000      	b.n	8012020 <icmp_input+0x218>
          goto icmperr;
 801201e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f002 fe61 	bl	8014ce8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012026:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012028:	3728      	adds	r7, #40	; 0x28
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
 801202e:	bf00      	nop
 8012030:	24009848 	.word	0x24009848
 8012034:	2400985c 	.word	0x2400985c
 8012038:	0801cea4 	.word	0x0801cea4
 801203c:	0801cf14 	.word	0x0801cf14
 8012040:	0801cf4c 	.word	0x0801cf4c
 8012044:	0801cf74 	.word	0x0801cf74

08012048 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	460b      	mov	r3, r1
 8012052:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012054:	78fb      	ldrb	r3, [r7, #3]
 8012056:	461a      	mov	r2, r3
 8012058:	2103      	movs	r1, #3
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f000 f814 	bl	8012088 <icmp_send_response>
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	460b      	mov	r3, r1
 8012072:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	461a      	mov	r2, r3
 8012078:	210b      	movs	r1, #11
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f804 	bl	8012088 <icmp_send_response>
}
 8012080:	bf00      	nop
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08c      	sub	sp, #48	; 0x30
 801208c:	af04      	add	r7, sp, #16
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	460b      	mov	r3, r1
 8012092:	70fb      	strb	r3, [r7, #3]
 8012094:	4613      	mov	r3, r2
 8012096:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012098:	f44f 7220 	mov.w	r2, #640	; 0x280
 801209c:	2124      	movs	r1, #36	; 0x24
 801209e:	2022      	movs	r0, #34	; 0x22
 80120a0:	f002 fb3e 	bl	8014720 <pbuf_alloc>
 80120a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d056      	beq.n	801215a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	895b      	ldrh	r3, [r3, #10]
 80120b0:	2b23      	cmp	r3, #35	; 0x23
 80120b2:	d806      	bhi.n	80120c2 <icmp_send_response+0x3a>
 80120b4:	4b2b      	ldr	r3, [pc, #172]	; (8012164 <icmp_send_response+0xdc>)
 80120b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80120ba:	492b      	ldr	r1, [pc, #172]	; (8012168 <icmp_send_response+0xe0>)
 80120bc:	482b      	ldr	r0, [pc, #172]	; (801216c <icmp_send_response+0xe4>)
 80120be:	f009 fbe3 	bl	801b888 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	78fa      	ldrb	r2, [r7, #3]
 80120d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	78ba      	ldrb	r2, [r7, #2]
 80120d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2200      	movs	r2, #0
 80120de:	711a      	strb	r2, [r3, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	2200      	movs	r2, #0
 80120e8:	719a      	strb	r2, [r3, #6]
 80120ea:	2200      	movs	r2, #0
 80120ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	f103 0008 	add.w	r0, r3, #8
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	221c      	movs	r2, #28
 80120fc:	4619      	mov	r1, r3
 80120fe:	f009 fc9e 	bl	801ba3e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012108:	f107 030c 	add.w	r3, r7, #12
 801210c:	4618      	mov	r0, r3
 801210e:	f000 f903 	bl	8012318 <ip4_route>
 8012112:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d01b      	beq.n	8012152 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	2200      	movs	r2, #0
 801211e:	709a      	strb	r2, [r3, #2]
 8012120:	2200      	movs	r2, #0
 8012122:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	895b      	ldrh	r3, [r3, #10]
 8012128:	4619      	mov	r1, r3
 801212a:	6978      	ldr	r0, [r7, #20]
 801212c:	f000 f87d 	bl	801222a <inet_chksum>
 8012130:	4603      	mov	r3, r0
 8012132:	461a      	mov	r2, r3
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012138:	f107 020c 	add.w	r2, r7, #12
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	9302      	str	r3, [sp, #8]
 8012140:	2301      	movs	r3, #1
 8012142:	9301      	str	r3, [sp, #4]
 8012144:	2300      	movs	r3, #0
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	23ff      	movs	r3, #255	; 0xff
 801214a:	2100      	movs	r1, #0
 801214c:	69f8      	ldr	r0, [r7, #28]
 801214e:	f000 fabf 	bl	80126d0 <ip4_output_if>
  }
  pbuf_free(q);
 8012152:	69f8      	ldr	r0, [r7, #28]
 8012154:	f002 fdc8 	bl	8014ce8 <pbuf_free>
 8012158:	e000      	b.n	801215c <icmp_send_response+0xd4>
    return;
 801215a:	bf00      	nop
}
 801215c:	3720      	adds	r7, #32
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	0801cea4 	.word	0x0801cea4
 8012168:	0801cfa8 	.word	0x0801cfa8
 801216c:	0801cf4c 	.word	0x0801cf4c

08012170 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8012170:	b480      	push	{r7}
 8012172:	b089      	sub	sp, #36	; 0x24
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8012182:	2300      	movs	r3, #0
 8012184:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	f003 0301 	and.w	r3, r3, #1
 801218c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00d      	beq.n	80121b0 <lwip_standard_chksum+0x40>
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	dd0a      	ble.n	80121b0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801219a:	69fa      	ldr	r2, [r7, #28]
 801219c:	1c53      	adds	r3, r2, #1
 801219e:	61fb      	str	r3, [r7, #28]
 80121a0:	f107 030e 	add.w	r3, r7, #14
 80121a4:	3301      	adds	r3, #1
 80121a6:	7812      	ldrb	r2, [r2, #0]
 80121a8:	701a      	strb	r2, [r3, #0]
    len--;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80121b4:	e00a      	b.n	80121cc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	1c9a      	adds	r2, r3, #2
 80121ba:	61ba      	str	r2, [r7, #24]
 80121bc:	881b      	ldrh	r3, [r3, #0]
 80121be:	461a      	mov	r2, r3
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	4413      	add	r3, r2
 80121c4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	3b02      	subs	r3, #2
 80121ca:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	dcf1      	bgt.n	80121b6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dd04      	ble.n	80121e2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80121d8:	f107 030e 	add.w	r3, r7, #14
 80121dc:	69ba      	ldr	r2, [r7, #24]
 80121de:	7812      	ldrb	r2, [r2, #0]
 80121e0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80121e2:	89fb      	ldrh	r3, [r7, #14]
 80121e4:	461a      	mov	r2, r3
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	4413      	add	r3, r2
 80121ea:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	0c1a      	lsrs	r2, r3, #16
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	4413      	add	r3, r2
 80121f6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	0c1a      	lsrs	r2, r3, #16
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	4413      	add	r3, r2
 8012202:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d007      	beq.n	801221a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	021b      	lsls	r3, r3, #8
 801220e:	b29a      	uxth	r2, r3
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	0a1b      	lsrs	r3, r3, #8
 8012214:	b2db      	uxtb	r3, r3
 8012216:	4313      	orrs	r3, r2
 8012218:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	b29b      	uxth	r3, r3
}
 801221e:	4618      	mov	r0, r3
 8012220:	3724      	adds	r7, #36	; 0x24
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr

0801222a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b082      	sub	sp, #8
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	460b      	mov	r3, r1
 8012234:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012236:	887b      	ldrh	r3, [r7, #2]
 8012238:	4619      	mov	r1, r3
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7ff ff98 	bl	8012170 <lwip_standard_chksum>
 8012240:	4603      	mov	r3, r0
 8012242:	43db      	mvns	r3, r3
 8012244:	b29b      	uxth	r3, r3
}
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801224e:	b580      	push	{r7, lr}
 8012250:	b086      	sub	sp, #24
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8012256:	2300      	movs	r3, #0
 8012258:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	613b      	str	r3, [r7, #16]
 8012262:	e02b      	b.n	80122bc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	685a      	ldr	r2, [r3, #4]
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	895b      	ldrh	r3, [r3, #10]
 801226c:	4619      	mov	r1, r3
 801226e:	4610      	mov	r0, r2
 8012270:	f7ff ff7e 	bl	8012170 <lwip_standard_chksum>
 8012274:	4603      	mov	r3, r0
 8012276:	461a      	mov	r2, r3
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	4413      	add	r3, r2
 801227c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	0c1a      	lsrs	r2, r3, #16
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	b29b      	uxth	r3, r3
 8012286:	4413      	add	r3, r2
 8012288:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	895b      	ldrh	r3, [r3, #10]
 801228e:	f003 0301 	and.w	r3, r3, #1
 8012292:	b29b      	uxth	r3, r3
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00e      	beq.n	80122b6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	bf0c      	ite	eq
 801229e:	2301      	moveq	r3, #1
 80122a0:	2300      	movne	r3, #0
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	021b      	lsls	r3, r3, #8
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	0a1b      	lsrs	r3, r3, #8
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	4313      	orrs	r3, r2
 80122b4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	613b      	str	r3, [r7, #16]
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1d0      	bne.n	8012264 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d007      	beq.n	80122d8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	021b      	lsls	r3, r3, #8
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	0a1b      	lsrs	r3, r3, #8
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	4313      	orrs	r3, r2
 80122d6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	b29b      	uxth	r3, r3
 80122dc:	43db      	mvns	r3, r3
 80122de:	b29b      	uxth	r3, r3
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80122f2:	f003 f819 	bl	8015328 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80122f6:	f001 fa09 	bl	801370c <mem_init>
  memp_init();
 80122fa:	f001 fd61 	bl	8013dc0 <memp_init>
  pbuf_init();
  netif_init();
 80122fe:	f001 fe6d 	bl	8013fdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012302:	f008 fd05 	bl	801ad10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012306:	f003 f88b 	bl	8015420 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801230a:	f008 fc47 	bl	801ab9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801230e:	bf00      	nop
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012320:	4b33      	ldr	r3, [pc, #204]	; (80123f0 <ip4_route+0xd8>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	60fb      	str	r3, [r7, #12]
 8012326:	e036      	b.n	8012396 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801232e:	f003 0301 	and.w	r3, r3, #1
 8012332:	b2db      	uxtb	r3, r3
 8012334:	2b00      	cmp	r3, #0
 8012336:	d02b      	beq.n	8012390 <ip4_route+0x78>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801233e:	089b      	lsrs	r3, r3, #2
 8012340:	f003 0301 	and.w	r3, r3, #1
 8012344:	b2db      	uxtb	r3, r3
 8012346:	2b00      	cmp	r3, #0
 8012348:	d022      	beq.n	8012390 <ip4_route+0x78>
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	3304      	adds	r3, #4
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d01d      	beq.n	8012390 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	3304      	adds	r3, #4
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	405a      	eors	r2, r3
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	3308      	adds	r3, #8
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	4013      	ands	r3, r2
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	e038      	b.n	80123e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012376:	f003 0302 	and.w	r3, r3, #2
 801237a:	2b00      	cmp	r3, #0
 801237c:	d108      	bne.n	8012390 <ip4_route+0x78>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	330c      	adds	r3, #12
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	429a      	cmp	r2, r3
 801238a:	d101      	bne.n	8012390 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	e028      	b.n	80123e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1c5      	bne.n	8012328 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801239c:	4b15      	ldr	r3, [pc, #84]	; (80123f4 <ip4_route+0xdc>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d01a      	beq.n	80123da <ip4_route+0xc2>
 80123a4:	4b13      	ldr	r3, [pc, #76]	; (80123f4 <ip4_route+0xdc>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80123ac:	f003 0301 	and.w	r3, r3, #1
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d012      	beq.n	80123da <ip4_route+0xc2>
 80123b4:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <ip4_route+0xdc>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80123bc:	f003 0304 	and.w	r3, r3, #4
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00a      	beq.n	80123da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80123c4:	4b0b      	ldr	r3, [pc, #44]	; (80123f4 <ip4_route+0xdc>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3304      	adds	r3, #4
 80123ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d004      	beq.n	80123da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	2b7f      	cmp	r3, #127	; 0x7f
 80123d8:	d101      	bne.n	80123de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80123da:	2300      	movs	r3, #0
 80123dc:	e001      	b.n	80123e2 <ip4_route+0xca>
  }

  return netif_default;
 80123de:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <ip4_route+0xdc>)
 80123e0:	681b      	ldr	r3, [r3, #0]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3714      	adds	r7, #20
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop
 80123f0:	2400c968 	.word	0x2400c968
 80123f4:	2400c96c 	.word	0x2400c96c

080123f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012406:	f003 0301 	and.w	r3, r3, #1
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b00      	cmp	r3, #0
 801240e:	d016      	beq.n	801243e <ip4_input_accept+0x46>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	3304      	adds	r3, #4
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d011      	beq.n	801243e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801241a:	4b0b      	ldr	r3, [pc, #44]	; (8012448 <ip4_input_accept+0x50>)
 801241c:	695a      	ldr	r2, [r3, #20]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3304      	adds	r3, #4
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	429a      	cmp	r2, r3
 8012426:	d008      	beq.n	801243a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012428:	4b07      	ldr	r3, [pc, #28]	; (8012448 <ip4_input_accept+0x50>)
 801242a:	695b      	ldr	r3, [r3, #20]
 801242c:	6879      	ldr	r1, [r7, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	f000 fa26 	bl	8012880 <ip4_addr_isbroadcast_u32>
 8012434:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801243a:	2301      	movs	r3, #1
 801243c:	e000      	b.n	8012440 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	24009848 	.word	0x24009848

0801244c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012456:	2301      	movs	r3, #1
 8012458:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	091b      	lsrs	r3, r3, #4
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b04      	cmp	r3, #4
 801246a:	d004      	beq.n	8012476 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f002 fc3b 	bl	8014ce8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	e123      	b.n	80126be <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	f003 030f 	and.w	r3, r3, #15
 801247e:	b2db      	uxtb	r3, r3
 8012480:	009b      	lsls	r3, r3, #2
 8012482:	b2db      	uxtb	r3, r3
 8012484:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	885b      	ldrh	r3, [r3, #2]
 801248a:	b29b      	uxth	r3, r3
 801248c:	4618      	mov	r0, r3
 801248e:	f7fc fdd3 	bl	800f038 <lwip_htons>
 8012492:	4603      	mov	r3, r0
 8012494:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	8a3a      	ldrh	r2, [r7, #16]
 801249c:	429a      	cmp	r2, r3
 801249e:	d204      	bcs.n	80124aa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80124a0:	8a3b      	ldrh	r3, [r7, #16]
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f002 fa99 	bl	80149dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	895b      	ldrh	r3, [r3, #10]
 80124ae:	8a7a      	ldrh	r2, [r7, #18]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d807      	bhi.n	80124c4 <ip4_input+0x78>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	891b      	ldrh	r3, [r3, #8]
 80124b8:	8a3a      	ldrh	r2, [r7, #16]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d802      	bhi.n	80124c4 <ip4_input+0x78>
 80124be:	8a7b      	ldrh	r3, [r7, #18]
 80124c0:	2b13      	cmp	r3, #19
 80124c2:	d804      	bhi.n	80124ce <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f002 fc0f 	bl	8014ce8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80124ca:	2300      	movs	r3, #0
 80124cc:	e0f7      	b.n	80126be <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	691b      	ldr	r3, [r3, #16]
 80124d2:	4a7d      	ldr	r2, [pc, #500]	; (80126c8 <ip4_input+0x27c>)
 80124d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	4a7b      	ldr	r2, [pc, #492]	; (80126c8 <ip4_input+0x27c>)
 80124dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80124de:	4b7a      	ldr	r3, [pc, #488]	; (80126c8 <ip4_input+0x27c>)
 80124e0:	695b      	ldr	r3, [r3, #20]
 80124e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124e6:	2be0      	cmp	r3, #224	; 0xe0
 80124e8:	d112      	bne.n	8012510 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124f0:	f003 0301 	and.w	r3, r3, #1
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d007      	beq.n	801250a <ip4_input+0xbe>
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	3304      	adds	r3, #4
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <ip4_input+0xbe>
      netif = inp;
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	61bb      	str	r3, [r7, #24]
 8012508:	e02a      	b.n	8012560 <ip4_input+0x114>
    } else {
      netif = NULL;
 801250a:	2300      	movs	r3, #0
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	e027      	b.n	8012560 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012510:	6838      	ldr	r0, [r7, #0]
 8012512:	f7ff ff71 	bl	80123f8 <ip4_input_accept>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <ip4_input+0xd6>
      netif = inp;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	61bb      	str	r3, [r7, #24]
 8012520:	e01e      	b.n	8012560 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012522:	2300      	movs	r3, #0
 8012524:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012526:	4b68      	ldr	r3, [pc, #416]	; (80126c8 <ip4_input+0x27c>)
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b7f      	cmp	r3, #127	; 0x7f
 801252e:	d017      	beq.n	8012560 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012530:	4b66      	ldr	r3, [pc, #408]	; (80126cc <ip4_input+0x280>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	61bb      	str	r3, [r7, #24]
 8012536:	e00e      	b.n	8012556 <ip4_input+0x10a>
          if (netif == inp) {
 8012538:	69ba      	ldr	r2, [r7, #24]
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	429a      	cmp	r2, r3
 801253e:	d006      	beq.n	801254e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012540:	69b8      	ldr	r0, [r7, #24]
 8012542:	f7ff ff59 	bl	80123f8 <ip4_input_accept>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d108      	bne.n	801255e <ip4_input+0x112>
 801254c:	e000      	b.n	8012550 <ip4_input+0x104>
            continue;
 801254e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	61bb      	str	r3, [r7, #24]
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1ed      	bne.n	8012538 <ip4_input+0xec>
 801255c:	e000      	b.n	8012560 <ip4_input+0x114>
            break;
 801255e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d111      	bne.n	801258a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	7a5b      	ldrb	r3, [r3, #9]
 801256a:	2b11      	cmp	r3, #17
 801256c:	d10d      	bne.n	801258a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801256e:	8a7b      	ldrh	r3, [r7, #18]
 8012570:	69fa      	ldr	r2, [r7, #28]
 8012572:	4413      	add	r3, r2
 8012574:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	885b      	ldrh	r3, [r3, #2]
 801257a:	b29b      	uxth	r3, r3
 801257c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012580:	d103      	bne.n	801258a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012586:	2300      	movs	r3, #0
 8012588:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d017      	beq.n	80125c0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012590:	4b4d      	ldr	r3, [pc, #308]	; (80126c8 <ip4_input+0x27c>)
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d013      	beq.n	80125c0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012598:	4b4b      	ldr	r3, [pc, #300]	; (80126c8 <ip4_input+0x27c>)
 801259a:	691b      	ldr	r3, [r3, #16]
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f000 f96e 	bl	8012880 <ip4_addr_isbroadcast_u32>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d105      	bne.n	80125b6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80125aa:	4b47      	ldr	r3, [pc, #284]	; (80126c8 <ip4_input+0x27c>)
 80125ac:	691b      	ldr	r3, [r3, #16]
 80125ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80125b2:	2be0      	cmp	r3, #224	; 0xe0
 80125b4:	d104      	bne.n	80125c0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f002 fb96 	bl	8014ce8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80125bc:	2300      	movs	r3, #0
 80125be:	e07e      	b.n	80126be <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d104      	bne.n	80125d0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f002 fb8e 	bl	8014ce8 <pbuf_free>
    return ERR_OK;
 80125cc:	2300      	movs	r3, #0
 80125ce:	e076      	b.n	80126be <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	88db      	ldrh	r3, [r3, #6]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	461a      	mov	r2, r3
 80125d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80125dc:	4013      	ands	r3, r2
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d00b      	beq.n	80125fa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 fc92 	bl	8012f0c <ip4_reass>
 80125e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <ip4_input+0x1a8>
      return ERR_OK;
 80125f0:	2300      	movs	r3, #0
 80125f2:	e064      	b.n	80126be <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80125fa:	4a33      	ldr	r2, [pc, #204]	; (80126c8 <ip4_input+0x27c>)
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012600:	4a31      	ldr	r2, [pc, #196]	; (80126c8 <ip4_input+0x27c>)
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012606:	4a30      	ldr	r2, [pc, #192]	; (80126c8 <ip4_input+0x27c>)
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	f003 030f 	and.w	r3, r3, #15
 8012614:	b2db      	uxtb	r3, r3
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	b2db      	uxtb	r3, r3
 801261a:	b29a      	uxth	r2, r3
 801261c:	4b2a      	ldr	r3, [pc, #168]	; (80126c8 <ip4_input+0x27c>)
 801261e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012620:	8a7b      	ldrh	r3, [r7, #18]
 8012622:	4619      	mov	r1, r3
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f002 fad9 	bl	8014bdc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	7a5b      	ldrb	r3, [r3, #9]
 801262e:	2b11      	cmp	r3, #17
 8012630:	d006      	beq.n	8012640 <ip4_input+0x1f4>
 8012632:	2b11      	cmp	r3, #17
 8012634:	dc13      	bgt.n	801265e <ip4_input+0x212>
 8012636:	2b01      	cmp	r3, #1
 8012638:	d00c      	beq.n	8012654 <ip4_input+0x208>
 801263a:	2b06      	cmp	r3, #6
 801263c:	d005      	beq.n	801264a <ip4_input+0x1fe>
 801263e:	e00e      	b.n	801265e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f008 fc12 	bl	801ae6c <udp_input>
        break;
 8012648:	e026      	b.n	8012698 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f004 fa81 	bl	8016b54 <tcp_input>
        break;
 8012652:	e021      	b.n	8012698 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7ff fbd6 	bl	8011e08 <icmp_input>
        break;
 801265c:	e01c      	b.n	8012698 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801265e:	4b1a      	ldr	r3, [pc, #104]	; (80126c8 <ip4_input+0x27c>)
 8012660:	695b      	ldr	r3, [r3, #20]
 8012662:	69b9      	ldr	r1, [r7, #24]
 8012664:	4618      	mov	r0, r3
 8012666:	f000 f90b 	bl	8012880 <ip4_addr_isbroadcast_u32>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10f      	bne.n	8012690 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012670:	4b15      	ldr	r3, [pc, #84]	; (80126c8 <ip4_input+0x27c>)
 8012672:	695b      	ldr	r3, [r3, #20]
 8012674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012678:	2be0      	cmp	r3, #224	; 0xe0
 801267a:	d009      	beq.n	8012690 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801267c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012680:	4619      	mov	r1, r3
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f002 fb1d 	bl	8014cc2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012688:	2102      	movs	r1, #2
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff fcdc 	bl	8012048 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f002 fb29 	bl	8014ce8 <pbuf_free>
        break;
 8012696:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012698:	4b0b      	ldr	r3, [pc, #44]	; (80126c8 <ip4_input+0x27c>)
 801269a:	2200      	movs	r2, #0
 801269c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801269e:	4b0a      	ldr	r3, [pc, #40]	; (80126c8 <ip4_input+0x27c>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80126a4:	4b08      	ldr	r3, [pc, #32]	; (80126c8 <ip4_input+0x27c>)
 80126a6:	2200      	movs	r2, #0
 80126a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80126aa:	4b07      	ldr	r3, [pc, #28]	; (80126c8 <ip4_input+0x27c>)
 80126ac:	2200      	movs	r2, #0
 80126ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80126b0:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <ip4_input+0x27c>)
 80126b2:	2200      	movs	r2, #0
 80126b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80126b6:	4b04      	ldr	r3, [pc, #16]	; (80126c8 <ip4_input+0x27c>)
 80126b8:	2200      	movs	r2, #0
 80126ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3720      	adds	r7, #32
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	24009848 	.word	0x24009848
 80126cc:	2400c968 	.word	0x2400c968

080126d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b08a      	sub	sp, #40	; 0x28
 80126d4:	af04      	add	r7, sp, #16
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d009      	beq.n	80126fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d003      	beq.n	80126f6 <ip4_output_if+0x26>
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d102      	bne.n	80126fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	3304      	adds	r3, #4
 80126fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80126fc:	78fa      	ldrb	r2, [r7, #3]
 80126fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012700:	9302      	str	r3, [sp, #8]
 8012702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012706:	9301      	str	r3, [sp, #4]
 8012708:	f897 3020 	ldrb.w	r3, [r7, #32]
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	4613      	mov	r3, r2
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	6979      	ldr	r1, [r7, #20]
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f000 f805 	bl	8012724 <ip4_output_if_src>
 801271a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801271c:	4618      	mov	r0, r3
 801271e:	3718      	adds	r7, #24
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b088      	sub	sp, #32
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	7b9b      	ldrb	r3, [r3, #14]
 8012736:	2b01      	cmp	r3, #1
 8012738:	d006      	beq.n	8012748 <ip4_output_if_src+0x24>
 801273a:	4b4b      	ldr	r3, [pc, #300]	; (8012868 <ip4_output_if_src+0x144>)
 801273c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012740:	494a      	ldr	r1, [pc, #296]	; (801286c <ip4_output_if_src+0x148>)
 8012742:	484b      	ldr	r0, [pc, #300]	; (8012870 <ip4_output_if_src+0x14c>)
 8012744:	f009 f8a0 	bl	801b888 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d060      	beq.n	8012810 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801274e:	2314      	movs	r3, #20
 8012750:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012752:	2114      	movs	r1, #20
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f002 fa31 	bl	8014bbc <pbuf_add_header>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012760:	f06f 0301 	mvn.w	r3, #1
 8012764:	e07c      	b.n	8012860 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	895b      	ldrh	r3, [r3, #10]
 8012770:	2b13      	cmp	r3, #19
 8012772:	d806      	bhi.n	8012782 <ip4_output_if_src+0x5e>
 8012774:	4b3c      	ldr	r3, [pc, #240]	; (8012868 <ip4_output_if_src+0x144>)
 8012776:	f44f 7262 	mov.w	r2, #904	; 0x388
 801277a:	493e      	ldr	r1, [pc, #248]	; (8012874 <ip4_output_if_src+0x150>)
 801277c:	483c      	ldr	r0, [pc, #240]	; (8012870 <ip4_output_if_src+0x14c>)
 801277e:	f009 f883 	bl	801b888 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	78fa      	ldrb	r2, [r7, #3]
 8012786:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801278e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012798:	8b7b      	ldrh	r3, [r7, #26]
 801279a:	089b      	lsrs	r3, r3, #2
 801279c:	b29b      	uxth	r3, r3
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80127b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	891b      	ldrh	r3, [r3, #8]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fc fc3e 	bl	800f038 <lwip_htons>
 80127bc:	4603      	mov	r3, r0
 80127be:	461a      	mov	r2, r3
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	2200      	movs	r2, #0
 80127c8:	719a      	strb	r2, [r3, #6]
 80127ca:	2200      	movs	r2, #0
 80127cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80127ce:	4b2a      	ldr	r3, [pc, #168]	; (8012878 <ip4_output_if_src+0x154>)
 80127d0:	881b      	ldrh	r3, [r3, #0]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fc fc30 	bl	800f038 <lwip_htons>
 80127d8:	4603      	mov	r3, r0
 80127da:	461a      	mov	r2, r3
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80127e0:	4b25      	ldr	r3, [pc, #148]	; (8012878 <ip4_output_if_src+0x154>)
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	3301      	adds	r3, #1
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	4b23      	ldr	r3, [pc, #140]	; (8012878 <ip4_output_if_src+0x154>)
 80127ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d104      	bne.n	80127fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80127f2:	4b22      	ldr	r3, [pc, #136]	; (801287c <ip4_output_if_src+0x158>)
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	60da      	str	r2, [r3, #12]
 80127fa:	e003      	b.n	8012804 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	2200      	movs	r2, #0
 8012808:	729a      	strb	r2, [r3, #10]
 801280a:	2200      	movs	r2, #0
 801280c:	72da      	strb	r2, [r3, #11]
 801280e:	e00f      	b.n	8012830 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	895b      	ldrh	r3, [r3, #10]
 8012814:	2b13      	cmp	r3, #19
 8012816:	d802      	bhi.n	801281e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012818:	f06f 0301 	mvn.w	r3, #1
 801281c:	e020      	b.n	8012860 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	691b      	ldr	r3, [r3, #16]
 8012828:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801282a:	f107 0314 	add.w	r3, r7, #20
 801282e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012834:	2b00      	cmp	r3, #0
 8012836:	d00c      	beq.n	8012852 <ip4_output_if_src+0x12e>
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	891a      	ldrh	r2, [r3, #8]
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012840:	429a      	cmp	r2, r3
 8012842:	d906      	bls.n	8012852 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f000 fd53 	bl	80132f4 <ip4_frag>
 801284e:	4603      	mov	r3, r0
 8012850:	e006      	b.n	8012860 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012854:	695b      	ldr	r3, [r3, #20]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	68f9      	ldr	r1, [r7, #12]
 801285a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801285c:	4798      	blx	r3
 801285e:	4603      	mov	r3, r0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3720      	adds	r7, #32
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	0801cfd4 	.word	0x0801cfd4
 801286c:	0801d044 	.word	0x0801d044
 8012870:	0801d050 	.word	0x0801d050
 8012874:	0801d078 	.word	0x0801d078
 8012878:	24009860 	.word	0x24009860
 801287c:	0801f984 	.word	0x0801f984

08012880 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012894:	d002      	beq.n	801289c <ip4_addr_isbroadcast_u32+0x1c>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801289c:	2301      	movs	r3, #1
 801289e:	e02a      	b.n	80128f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128a6:	f003 0302 	and.w	r3, r3, #2
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d101      	bne.n	80128b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80128ae:	2300      	movs	r3, #0
 80128b0:	e021      	b.n	80128f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	3304      	adds	r3, #4
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d101      	bne.n	80128c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	e019      	b.n	80128f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	3304      	adds	r3, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	405a      	eors	r2, r3
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	3308      	adds	r3, #8
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4013      	ands	r3, r2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d10d      	bne.n	80128f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	3308      	adds	r3, #8
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	43da      	mvns	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	3308      	adds	r3, #8
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d101      	bne.n	80128f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e000      	b.n	80128f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80128f4:	2300      	movs	r3, #0
  }
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3714      	adds	r7, #20
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
	...

08012904 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801290a:	2300      	movs	r3, #0
 801290c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801290e:	4b12      	ldr	r3, [pc, #72]	; (8012958 <ip_reass_tmr+0x54>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012914:	e018      	b.n	8012948 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	7fdb      	ldrb	r3, [r3, #31]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00b      	beq.n	8012936 <ip_reass_tmr+0x32>
      r->timer--;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	7fdb      	ldrb	r3, [r3, #31]
 8012922:	3b01      	subs	r3, #1
 8012924:	b2da      	uxtb	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	e008      	b.n	8012948 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012940:	68b9      	ldr	r1, [r7, #8]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 f80a 	bl	801295c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1e3      	bne.n	8012916 <ip_reass_tmr+0x12>
    }
  }
}
 801294e:	bf00      	nop
 8012950:	bf00      	nop
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	24009864 	.word	0x24009864

0801295c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b088      	sub	sp, #32
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	429a      	cmp	r2, r3
 8012970:	d105      	bne.n	801297e <ip_reass_free_complete_datagram+0x22>
 8012972:	4b45      	ldr	r3, [pc, #276]	; (8012a88 <ip_reass_free_complete_datagram+0x12c>)
 8012974:	22ab      	movs	r2, #171	; 0xab
 8012976:	4945      	ldr	r1, [pc, #276]	; (8012a8c <ip_reass_free_complete_datagram+0x130>)
 8012978:	4845      	ldr	r0, [pc, #276]	; (8012a90 <ip_reass_free_complete_datagram+0x134>)
 801297a:	f008 ff85 	bl	801b888 <iprintf>
  if (prev != NULL) {
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00a      	beq.n	801299a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	429a      	cmp	r2, r3
 801298c:	d005      	beq.n	801299a <ip_reass_free_complete_datagram+0x3e>
 801298e:	4b3e      	ldr	r3, [pc, #248]	; (8012a88 <ip_reass_free_complete_datagram+0x12c>)
 8012990:	22ad      	movs	r2, #173	; 0xad
 8012992:	4940      	ldr	r1, [pc, #256]	; (8012a94 <ip_reass_free_complete_datagram+0x138>)
 8012994:	483e      	ldr	r0, [pc, #248]	; (8012a90 <ip_reass_free_complete_datagram+0x134>)
 8012996:	f008 ff77 	bl	801b888 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	889b      	ldrh	r3, [r3, #4]
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d12a      	bne.n	8012a02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80129ba:	69bb      	ldr	r3, [r7, #24]
 80129bc:	6858      	ldr	r0, [r3, #4]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	3308      	adds	r3, #8
 80129c2:	2214      	movs	r2, #20
 80129c4:	4619      	mov	r1, r3
 80129c6:	f009 f83a 	bl	801ba3e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80129ca:	2101      	movs	r1, #1
 80129cc:	69b8      	ldr	r0, [r7, #24]
 80129ce:	f7ff fb4b 	bl	8012068 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80129d2:	69b8      	ldr	r0, [r7, #24]
 80129d4:	f002 fa16 	bl	8014e04 <pbuf_clen>
 80129d8:	4603      	mov	r3, r0
 80129da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80129dc:	8bfa      	ldrh	r2, [r7, #30]
 80129de:	8a7b      	ldrh	r3, [r7, #18]
 80129e0:	4413      	add	r3, r2
 80129e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129e6:	db05      	blt.n	80129f4 <ip_reass_free_complete_datagram+0x98>
 80129e8:	4b27      	ldr	r3, [pc, #156]	; (8012a88 <ip_reass_free_complete_datagram+0x12c>)
 80129ea:	22bc      	movs	r2, #188	; 0xbc
 80129ec:	492a      	ldr	r1, [pc, #168]	; (8012a98 <ip_reass_free_complete_datagram+0x13c>)
 80129ee:	4828      	ldr	r0, [pc, #160]	; (8012a90 <ip_reass_free_complete_datagram+0x134>)
 80129f0:	f008 ff4a 	bl	801b888 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80129f4:	8bfa      	ldrh	r2, [r7, #30]
 80129f6:	8a7b      	ldrh	r3, [r7, #18]
 80129f8:	4413      	add	r3, r2
 80129fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80129fc:	69b8      	ldr	r0, [r7, #24]
 80129fe:	f002 f973 	bl	8014ce8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012a08:	e01f      	b.n	8012a4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f002 f9f2 	bl	8014e04 <pbuf_clen>
 8012a20:	4603      	mov	r3, r0
 8012a22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012a24:	8bfa      	ldrh	r2, [r7, #30]
 8012a26:	8a7b      	ldrh	r3, [r7, #18]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a2e:	db05      	blt.n	8012a3c <ip_reass_free_complete_datagram+0xe0>
 8012a30:	4b15      	ldr	r3, [pc, #84]	; (8012a88 <ip_reass_free_complete_datagram+0x12c>)
 8012a32:	22cc      	movs	r2, #204	; 0xcc
 8012a34:	4918      	ldr	r1, [pc, #96]	; (8012a98 <ip_reass_free_complete_datagram+0x13c>)
 8012a36:	4816      	ldr	r0, [pc, #88]	; (8012a90 <ip_reass_free_complete_datagram+0x134>)
 8012a38:	f008 ff26 	bl	801b888 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012a3c:	8bfa      	ldrh	r2, [r7, #30]
 8012a3e:	8a7b      	ldrh	r3, [r7, #18]
 8012a40:	4413      	add	r3, r2
 8012a42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f002 f94f 	bl	8014ce8 <pbuf_free>
  while (p != NULL) {
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1dc      	bne.n	8012a0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 f8c2 	bl	8012bdc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012a58:	4b10      	ldr	r3, [pc, #64]	; (8012a9c <ip_reass_free_complete_datagram+0x140>)
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	8bfa      	ldrh	r2, [r7, #30]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d905      	bls.n	8012a6e <ip_reass_free_complete_datagram+0x112>
 8012a62:	4b09      	ldr	r3, [pc, #36]	; (8012a88 <ip_reass_free_complete_datagram+0x12c>)
 8012a64:	22d2      	movs	r2, #210	; 0xd2
 8012a66:	490e      	ldr	r1, [pc, #56]	; (8012aa0 <ip_reass_free_complete_datagram+0x144>)
 8012a68:	4809      	ldr	r0, [pc, #36]	; (8012a90 <ip_reass_free_complete_datagram+0x134>)
 8012a6a:	f008 ff0d 	bl	801b888 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012a6e:	4b0b      	ldr	r3, [pc, #44]	; (8012a9c <ip_reass_free_complete_datagram+0x140>)
 8012a70:	881a      	ldrh	r2, [r3, #0]
 8012a72:	8bfb      	ldrh	r3, [r7, #30]
 8012a74:	1ad3      	subs	r3, r2, r3
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	4b08      	ldr	r3, [pc, #32]	; (8012a9c <ip_reass_free_complete_datagram+0x140>)
 8012a7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012a7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3720      	adds	r7, #32
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	0801d0a8 	.word	0x0801d0a8
 8012a8c:	0801d11c 	.word	0x0801d11c
 8012a90:	0801d128 	.word	0x0801d128
 8012a94:	0801d150 	.word	0x0801d150
 8012a98:	0801d164 	.word	0x0801d164
 8012a9c:	24009868 	.word	0x24009868
 8012aa0:	0801d184 	.word	0x0801d184

08012aa4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b08a      	sub	sp, #40	; 0x28
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012aba:	2300      	movs	r3, #0
 8012abc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012ac2:	4b28      	ldr	r3, [pc, #160]	; (8012b64 <ip_reass_remove_oldest_datagram+0xc0>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012ac8:	e030      	b.n	8012b2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	695a      	ldr	r2, [r3, #20]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d10c      	bne.n	8012af0 <ip_reass_remove_oldest_datagram+0x4c>
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad8:	699a      	ldr	r2, [r3, #24]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d106      	bne.n	8012af0 <ip_reass_remove_oldest_datagram+0x4c>
 8012ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae4:	899a      	ldrh	r2, [r3, #12]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	889b      	ldrh	r3, [r3, #4]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d014      	beq.n	8012b1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	3301      	adds	r3, #1
 8012af4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012af6:	6a3b      	ldr	r3, [r7, #32]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d104      	bne.n	8012b06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	61bb      	str	r3, [r7, #24]
 8012b04:	e009      	b.n	8012b1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	7fda      	ldrb	r2, [r3, #31]
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	7fdb      	ldrb	r3, [r3, #31]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d803      	bhi.n	8012b1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d001      	beq.n	8012b26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d1cb      	bne.n	8012aca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012b32:	6a3b      	ldr	r3, [r7, #32]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d008      	beq.n	8012b4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012b38:	69b9      	ldr	r1, [r7, #24]
 8012b3a:	6a38      	ldr	r0, [r7, #32]
 8012b3c:	f7ff ff0e 	bl	801295c <ip_reass_free_complete_datagram>
 8012b40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012b42:	697a      	ldr	r2, [r7, #20]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	4413      	add	r3, r2
 8012b48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	da02      	bge.n	8012b58 <ip_reass_remove_oldest_datagram+0xb4>
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	dcac      	bgt.n	8012ab2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012b58:	697b      	ldr	r3, [r7, #20]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3728      	adds	r7, #40	; 0x28
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	24009864 	.word	0x24009864

08012b68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b72:	2004      	movs	r0, #4
 8012b74:	f001 f992 	bl	8013e9c <memp_malloc>
 8012b78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d110      	bne.n	8012ba2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012b80:	6839      	ldr	r1, [r7, #0]
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f7ff ff8e 	bl	8012aa4 <ip_reass_remove_oldest_datagram>
 8012b88:	4602      	mov	r2, r0
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	dc03      	bgt.n	8012b98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b90:	2004      	movs	r0, #4
 8012b92:	f001 f983 	bl	8013e9c <memp_malloc>
 8012b96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d101      	bne.n	8012ba2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e016      	b.n	8012bd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012ba2:	2220      	movs	r2, #32
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f008 fed3 	bl	801b952 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	220f      	movs	r2, #15
 8012bb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012bb2:	4b09      	ldr	r3, [pc, #36]	; (8012bd8 <ip_reass_enqueue_new_datagram+0x70>)
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012bba:	4a07      	ldr	r2, [pc, #28]	; (8012bd8 <ip_reass_enqueue_new_datagram+0x70>)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3308      	adds	r3, #8
 8012bc4:	2214      	movs	r2, #20
 8012bc6:	6879      	ldr	r1, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f008 ff38 	bl	801ba3e <memcpy>
  return ipr;
 8012bce:	68fb      	ldr	r3, [r7, #12]
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	24009864 	.word	0x24009864

08012bdc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012be6:	4b10      	ldr	r3, [pc, #64]	; (8012c28 <ip_reass_dequeue_datagram+0x4c>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d104      	bne.n	8012bfa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4a0c      	ldr	r2, [pc, #48]	; (8012c28 <ip_reass_dequeue_datagram+0x4c>)
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	e00d      	b.n	8012c16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d106      	bne.n	8012c0e <ip_reass_dequeue_datagram+0x32>
 8012c00:	4b0a      	ldr	r3, [pc, #40]	; (8012c2c <ip_reass_dequeue_datagram+0x50>)
 8012c02:	f240 1245 	movw	r2, #325	; 0x145
 8012c06:	490a      	ldr	r1, [pc, #40]	; (8012c30 <ip_reass_dequeue_datagram+0x54>)
 8012c08:	480a      	ldr	r0, [pc, #40]	; (8012c34 <ip_reass_dequeue_datagram+0x58>)
 8012c0a:	f008 fe3d 	bl	801b888 <iprintf>
    prev->next = ipr->next;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012c16:	6879      	ldr	r1, [r7, #4]
 8012c18:	2004      	movs	r0, #4
 8012c1a:	f001 f9b5 	bl	8013f88 <memp_free>
}
 8012c1e:	bf00      	nop
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	24009864 	.word	0x24009864
 8012c2c:	0801d0a8 	.word	0x0801d0a8
 8012c30:	0801d1a8 	.word	0x0801d1a8
 8012c34:	0801d128 	.word	0x0801d128

08012c38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08c      	sub	sp, #48	; 0x30
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012c44:	2300      	movs	r3, #0
 8012c46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	885b      	ldrh	r3, [r3, #2]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fc f9ed 	bl	800f038 <lwip_htons>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	f003 030f 	and.w	r3, r3, #15
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012c70:	7e7b      	ldrb	r3, [r7, #25]
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	8b7a      	ldrh	r2, [r7, #26]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d202      	bcs.n	8012c80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c7e:	e135      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012c80:	7e7b      	ldrb	r3, [r7, #25]
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	8b7a      	ldrh	r2, [r7, #26]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	88db      	ldrh	r3, [r3, #6]
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fc f9d1 	bl	800f038 <lwip_htons>
 8012c96:	4603      	mov	r3, r0
 8012c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012caa:	2200      	movs	r2, #0
 8012cac:	701a      	strb	r2, [r3, #0]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	705a      	strb	r2, [r3, #1]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	709a      	strb	r2, [r3, #2]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbc:	8afa      	ldrh	r2, [r7, #22]
 8012cbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012cc0:	8afa      	ldrh	r2, [r7, #22]
 8012cc2:	8b7b      	ldrh	r3, [r7, #26]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	88db      	ldrh	r3, [r3, #6]
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	8afa      	ldrh	r2, [r7, #22]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d902      	bls.n	8012cde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cdc:	e106      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ce4:	e068      	b.n	8012db8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	889b      	ldrh	r3, [r3, #4]
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	889b      	ldrh	r3, [r3, #4]
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d235      	bcs.n	8012d68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d020      	beq.n	8012d4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0a:	889b      	ldrh	r3, [r3, #4]
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d10:	88db      	ldrh	r3, [r3, #6]
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d307      	bcc.n	8012d28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1a:	88db      	ldrh	r3, [r3, #6]
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	889b      	ldrh	r3, [r3, #4]
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d902      	bls.n	8012d2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d28:	f04f 33ff 	mov.w	r3, #4294967295
 8012d2c:	e0de      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d30:	68ba      	ldr	r2, [r7, #8]
 8012d32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d36:	88db      	ldrh	r3, [r3, #6]
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3c:	889b      	ldrh	r3, [r3, #4]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d03d      	beq.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012d44:	2300      	movs	r3, #0
 8012d46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012d48:	e03a      	b.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4c:	88db      	ldrh	r3, [r3, #6]
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	889b      	ldrh	r3, [r3, #4]
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d902      	bls.n	8012d60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d5e:	e0c5      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	605a      	str	r2, [r3, #4]
      break;
 8012d66:	e02b      	b.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6a:	889b      	ldrh	r3, [r3, #4]
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	889b      	ldrh	r3, [r3, #4]
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d102      	bne.n	8012d7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d78:	f04f 33ff 	mov.w	r3, #4294967295
 8012d7c:	e0b6      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d80:	889b      	ldrh	r3, [r3, #4]
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	88db      	ldrh	r3, [r3, #6]
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d202      	bcs.n	8012d94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d92:	e0ab      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d009      	beq.n	8012dae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9c:	88db      	ldrh	r3, [r3, #6]
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	889b      	ldrh	r3, [r3, #4]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d001      	beq.n	8012dae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012daa:	2300      	movs	r3, #0
 8012dac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d193      	bne.n	8012ce6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012dbe:	e000      	b.n	8012dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012dc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d12d      	bne.n	8012e24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d01c      	beq.n	8012e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd0:	88db      	ldrh	r3, [r3, #6]
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd6:	889b      	ldrh	r3, [r3, #4]
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d906      	bls.n	8012dec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012dde:	4b45      	ldr	r3, [pc, #276]	; (8012ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012de0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012de4:	4944      	ldr	r1, [pc, #272]	; (8012ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012de6:	4845      	ldr	r0, [pc, #276]	; (8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012de8:	f008 fd4e 	bl	801b888 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dee:	68ba      	ldr	r2, [r7, #8]
 8012df0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df4:	88db      	ldrh	r3, [r3, #6]
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	889b      	ldrh	r3, [r3, #4]
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d010      	beq.n	8012e24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	623b      	str	r3, [r7, #32]
 8012e06:	e00d      	b.n	8012e24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d006      	beq.n	8012e1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012e10:	4b38      	ldr	r3, [pc, #224]	; (8012ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012e12:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012e16:	493a      	ldr	r1, [pc, #232]	; (8012f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012e18:	4838      	ldr	r0, [pc, #224]	; (8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012e1a:	f008 fd35 	bl	801b888 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d105      	bne.n	8012e36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	7f9b      	ldrb	r3, [r3, #30]
 8012e2e:	f003 0301 	and.w	r3, r3, #1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d059      	beq.n	8012eea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012e36:	6a3b      	ldr	r3, [r7, #32]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d04f      	beq.n	8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d006      	beq.n	8012e52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	889b      	ldrh	r3, [r3, #4]
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d002      	beq.n	8012e58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012e52:	2300      	movs	r3, #0
 8012e54:	623b      	str	r3, [r7, #32]
 8012e56:	e041      	b.n	8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012e62:	e012      	b.n	8012e8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	88db      	ldrh	r3, [r3, #6]
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e72:	889b      	ldrh	r3, [r3, #4]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d002      	beq.n	8012e80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	623b      	str	r3, [r7, #32]
            break;
 8012e7e:	e007      	b.n	8012e90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1e9      	bne.n	8012e64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012e90:	6a3b      	ldr	r3, [r7, #32]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d022      	beq.n	8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012e9e:	4b15      	ldr	r3, [pc, #84]	; (8012ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ea0:	f240 12df 	movw	r2, #479	; 0x1df
 8012ea4:	4917      	ldr	r1, [pc, #92]	; (8012f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012ea6:	4815      	ldr	r0, [pc, #84]	; (8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ea8:	f008 fcee 	bl	801b888 <iprintf>
          LWIP_ASSERT("sanity check",
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d106      	bne.n	8012ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012eb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012eba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012ebe:	4911      	ldr	r1, [pc, #68]	; (8012f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012ec0:	480e      	ldr	r0, [pc, #56]	; (8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ec2:	f008 fce1 	bl	801b888 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d006      	beq.n	8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012ece:	4b09      	ldr	r3, [pc, #36]	; (8012ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ed0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012ed4:	490c      	ldr	r1, [pc, #48]	; (8012f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012ed6:	4809      	ldr	r0, [pc, #36]	; (8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ed8:	f008 fcd6 	bl	801b888 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012edc:	6a3b      	ldr	r3, [r7, #32]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	bf14      	ite	ne
 8012ee2:	2301      	movne	r3, #1
 8012ee4:	2300      	moveq	r3, #0
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	e000      	b.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3730      	adds	r7, #48	; 0x30
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	0801d0a8 	.word	0x0801d0a8
 8012ef8:	0801d1c4 	.word	0x0801d1c4
 8012efc:	0801d128 	.word	0x0801d128
 8012f00:	0801d1e4 	.word	0x0801d1e4
 8012f04:	0801d21c 	.word	0x0801d21c
 8012f08:	0801d22c 	.word	0x0801d22c

08012f0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b08e      	sub	sp, #56	; 0x38
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	f003 030f 	and.w	r3, r3, #15
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	2b14      	cmp	r3, #20
 8012f2a:	f040 8171 	bne.w	8013210 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	88db      	ldrh	r3, [r3, #6]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fc f87f 	bl	800f038 <lwip_htons>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f48:	885b      	ldrh	r3, [r3, #2]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fc f873 	bl	800f038 <lwip_htons>
 8012f52:	4603      	mov	r3, r0
 8012f54:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	f003 030f 	and.w	r3, r3, #15
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	f0c0 8150 	bcc.w	8013214 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f001 ff3f 	bl	8014e04 <pbuf_clen>
 8012f86:	4603      	mov	r3, r0
 8012f88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012f8a:	4b8c      	ldr	r3, [pc, #560]	; (80131bc <ip4_reass+0x2b0>)
 8012f8c:	881b      	ldrh	r3, [r3, #0]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	8c3b      	ldrh	r3, [r7, #32]
 8012f92:	4413      	add	r3, r2
 8012f94:	2b0a      	cmp	r3, #10
 8012f96:	dd10      	ble.n	8012fba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012f98:	8c3b      	ldrh	r3, [r7, #32]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f9e:	f7ff fd81 	bl	8012aa4 <ip_reass_remove_oldest_datagram>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f000 8137 	beq.w	8013218 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012faa:	4b84      	ldr	r3, [pc, #528]	; (80131bc <ip4_reass+0x2b0>)
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	8c3b      	ldrh	r3, [r7, #32]
 8012fb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012fb4:	2b0a      	cmp	r3, #10
 8012fb6:	f300 812f 	bgt.w	8013218 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012fba:	4b81      	ldr	r3, [pc, #516]	; (80131c0 <ip4_reass+0x2b4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8012fc0:	e015      	b.n	8012fee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc4:	695a      	ldr	r2, [r3, #20]
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d10c      	bne.n	8012fe8 <ip4_reass+0xdc>
 8012fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd0:	699a      	ldr	r2, [r3, #24]
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d106      	bne.n	8012fe8 <ip4_reass+0xdc>
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	899a      	ldrh	r2, [r3, #12]
 8012fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe0:	889b      	ldrh	r3, [r3, #4]
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d006      	beq.n	8012ff6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	633b      	str	r3, [r7, #48]	; 0x30
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1e6      	bne.n	8012fc2 <ip4_reass+0xb6>
 8012ff4:	e000      	b.n	8012ff8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012ff6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d109      	bne.n	8013012 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ffe:	8c3b      	ldrh	r3, [r7, #32]
 8013000:	4619      	mov	r1, r3
 8013002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013004:	f7ff fdb0 	bl	8012b68 <ip_reass_enqueue_new_datagram>
 8013008:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300c:	2b00      	cmp	r3, #0
 801300e:	d11c      	bne.n	801304a <ip4_reass+0x13e>
      goto nullreturn;
 8013010:	e105      	b.n	801321e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013014:	88db      	ldrh	r3, [r3, #6]
 8013016:	b29b      	uxth	r3, r3
 8013018:	4618      	mov	r0, r3
 801301a:	f7fc f80d 	bl	800f038 <lwip_htons>
 801301e:	4603      	mov	r3, r0
 8013020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013024:	2b00      	cmp	r3, #0
 8013026:	d110      	bne.n	801304a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302a:	89db      	ldrh	r3, [r3, #14]
 801302c:	4618      	mov	r0, r3
 801302e:	f7fc f803 	bl	800f038 <lwip_htons>
 8013032:	4603      	mov	r3, r0
 8013034:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303e:	3308      	adds	r3, #8
 8013040:	2214      	movs	r2, #20
 8013042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013044:	4618      	mov	r0, r3
 8013046:	f008 fcfa 	bl	801ba3e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304c:	88db      	ldrh	r3, [r3, #6]
 801304e:	b29b      	uxth	r3, r3
 8013050:	f003 0320 	and.w	r3, r3, #32
 8013054:	2b00      	cmp	r3, #0
 8013056:	bf0c      	ite	eq
 8013058:	2301      	moveq	r3, #1
 801305a:	2300      	movne	r3, #0
 801305c:	b2db      	uxtb	r3, r3
 801305e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00e      	beq.n	8013084 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801306a:	4413      	add	r3, r2
 801306c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801306e:	8b7a      	ldrh	r2, [r7, #26]
 8013070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013072:	429a      	cmp	r2, r3
 8013074:	f0c0 80a0 	bcc.w	80131b8 <ip4_reass+0x2ac>
 8013078:	8b7b      	ldrh	r3, [r7, #26]
 801307a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801307e:	4293      	cmp	r3, r2
 8013080:	f200 809a 	bhi.w	80131b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013084:	69fa      	ldr	r2, [r7, #28]
 8013086:	6879      	ldr	r1, [r7, #4]
 8013088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801308a:	f7ff fdd5 	bl	8012c38 <ip_reass_chain_frag_into_datagram_and_validate>
 801308e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013096:	f000 809b 	beq.w	80131d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801309a:	4b48      	ldr	r3, [pc, #288]	; (80131bc <ip4_reass+0x2b0>)
 801309c:	881a      	ldrh	r2, [r3, #0]
 801309e:	8c3b      	ldrh	r3, [r7, #32]
 80130a0:	4413      	add	r3, r2
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	4b45      	ldr	r3, [pc, #276]	; (80131bc <ip4_reass+0x2b0>)
 80130a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d00d      	beq.n	80130ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80130ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80130b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80130b2:	4413      	add	r3, r2
 80130b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80130b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b8:	8a7a      	ldrh	r2, [r7, #18]
 80130ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	7f9b      	ldrb	r3, [r3, #30]
 80130c0:	f043 0301 	orr.w	r3, r3, #1
 80130c4:	b2da      	uxtb	r2, r3
 80130c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d171      	bne.n	80131b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80130d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d2:	8b9b      	ldrh	r3, [r3, #28]
 80130d4:	3314      	adds	r3, #20
 80130d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80130d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80130ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ec:	3308      	adds	r3, #8
 80130ee:	2214      	movs	r2, #20
 80130f0:	4619      	mov	r1, r3
 80130f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f4:	f008 fca3 	bl	801ba3e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80130f8:	8a3b      	ldrh	r3, [r7, #16]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fb ff9c 	bl	800f038 <lwip_htons>
 8013100:	4603      	mov	r3, r0
 8013102:	461a      	mov	r2, r3
 8013104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013106:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	2200      	movs	r2, #0
 801310c:	719a      	strb	r2, [r3, #6]
 801310e:	2200      	movs	r2, #0
 8013110:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013114:	2200      	movs	r2, #0
 8013116:	729a      	strb	r2, [r3, #10]
 8013118:	2200      	movs	r2, #0
 801311a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013122:	e00d      	b.n	8013140 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801312a:	2114      	movs	r1, #20
 801312c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801312e:	f001 fd55 	bl	8014bdc <pbuf_remove_header>
      pbuf_cat(p, r);
 8013132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f001 fea5 	bl	8014e84 <pbuf_cat>
      r = iprh->next_pbuf;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1ee      	bne.n	8013124 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013146:	4b1e      	ldr	r3, [pc, #120]	; (80131c0 <ip4_reass+0x2b4>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314c:	429a      	cmp	r2, r3
 801314e:	d102      	bne.n	8013156 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013150:	2300      	movs	r3, #0
 8013152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013154:	e010      	b.n	8013178 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013156:	4b1a      	ldr	r3, [pc, #104]	; (80131c0 <ip4_reass+0x2b4>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801315c:	e007      	b.n	801316e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013164:	429a      	cmp	r2, r3
 8013166:	d006      	beq.n	8013176 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1f4      	bne.n	801315e <ip4_reass+0x252>
 8013174:	e000      	b.n	8013178 <ip4_reass+0x26c>
          break;
 8013176:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801317a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801317c:	f7ff fd2e 	bl	8012bdc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f001 fe3f 	bl	8014e04 <pbuf_clen>
 8013186:	4603      	mov	r3, r0
 8013188:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801318a:	4b0c      	ldr	r3, [pc, #48]	; (80131bc <ip4_reass+0x2b0>)
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	8c3a      	ldrh	r2, [r7, #32]
 8013190:	429a      	cmp	r2, r3
 8013192:	d906      	bls.n	80131a2 <ip4_reass+0x296>
 8013194:	4b0b      	ldr	r3, [pc, #44]	; (80131c4 <ip4_reass+0x2b8>)
 8013196:	f240 229b 	movw	r2, #667	; 0x29b
 801319a:	490b      	ldr	r1, [pc, #44]	; (80131c8 <ip4_reass+0x2bc>)
 801319c:	480b      	ldr	r0, [pc, #44]	; (80131cc <ip4_reass+0x2c0>)
 801319e:	f008 fb73 	bl	801b888 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80131a2:	4b06      	ldr	r3, [pc, #24]	; (80131bc <ip4_reass+0x2b0>)
 80131a4:	881a      	ldrh	r2, [r3, #0]
 80131a6:	8c3b      	ldrh	r3, [r7, #32]
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	4b03      	ldr	r3, [pc, #12]	; (80131bc <ip4_reass+0x2b0>)
 80131ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	e038      	b.n	8013226 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80131b4:	2300      	movs	r3, #0
 80131b6:	e036      	b.n	8013226 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80131b8:	bf00      	nop
 80131ba:	e00a      	b.n	80131d2 <ip4_reass+0x2c6>
 80131bc:	24009868 	.word	0x24009868
 80131c0:	24009864 	.word	0x24009864
 80131c4:	0801d0a8 	.word	0x0801d0a8
 80131c8:	0801d250 	.word	0x0801d250
 80131cc:	0801d128 	.word	0x0801d128
    goto nullreturn_ipr;
 80131d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80131d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d106      	bne.n	80131e6 <ip4_reass+0x2da>
 80131d8:	4b15      	ldr	r3, [pc, #84]	; (8013230 <ip4_reass+0x324>)
 80131da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80131de:	4915      	ldr	r1, [pc, #84]	; (8013234 <ip4_reass+0x328>)
 80131e0:	4815      	ldr	r0, [pc, #84]	; (8013238 <ip4_reass+0x32c>)
 80131e2:	f008 fb51 	bl	801b888 <iprintf>
  if (ipr->p == NULL) {
 80131e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d116      	bne.n	801321c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80131ee:	4b13      	ldr	r3, [pc, #76]	; (801323c <ip4_reass+0x330>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d006      	beq.n	8013206 <ip4_reass+0x2fa>
 80131f8:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <ip4_reass+0x324>)
 80131fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80131fe:	4910      	ldr	r1, [pc, #64]	; (8013240 <ip4_reass+0x334>)
 8013200:	480d      	ldr	r0, [pc, #52]	; (8013238 <ip4_reass+0x32c>)
 8013202:	f008 fb41 	bl	801b888 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013206:	2100      	movs	r1, #0
 8013208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801320a:	f7ff fce7 	bl	8012bdc <ip_reass_dequeue_datagram>
 801320e:	e006      	b.n	801321e <ip4_reass+0x312>
    goto nullreturn;
 8013210:	bf00      	nop
 8013212:	e004      	b.n	801321e <ip4_reass+0x312>
    goto nullreturn;
 8013214:	bf00      	nop
 8013216:	e002      	b.n	801321e <ip4_reass+0x312>
      goto nullreturn;
 8013218:	bf00      	nop
 801321a:	e000      	b.n	801321e <ip4_reass+0x312>
  }

nullreturn:
 801321c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f001 fd62 	bl	8014ce8 <pbuf_free>
  return NULL;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3738      	adds	r7, #56	; 0x38
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	0801d0a8 	.word	0x0801d0a8
 8013234:	0801d26c 	.word	0x0801d26c
 8013238:	0801d128 	.word	0x0801d128
 801323c:	24009864 	.word	0x24009864
 8013240:	0801d278 	.word	0x0801d278

08013244 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013248:	2005      	movs	r0, #5
 801324a:	f000 fe27 	bl	8013e9c <memp_malloc>
 801324e:	4603      	mov	r3, r0
}
 8013250:	4618      	mov	r0, r3
 8013252:	bd80      	pop	{r7, pc}

08013254 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d106      	bne.n	8013270 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013262:	4b07      	ldr	r3, [pc, #28]	; (8013280 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013264:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013268:	4906      	ldr	r1, [pc, #24]	; (8013284 <ip_frag_free_pbuf_custom_ref+0x30>)
 801326a:	4807      	ldr	r0, [pc, #28]	; (8013288 <ip_frag_free_pbuf_custom_ref+0x34>)
 801326c:	f008 fb0c 	bl	801b888 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	2005      	movs	r0, #5
 8013274:	f000 fe88 	bl	8013f88 <memp_free>
}
 8013278:	bf00      	nop
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	0801d0a8 	.word	0x0801d0a8
 8013284:	0801d298 	.word	0x0801d298
 8013288:	0801d128 	.word	0x0801d128

0801328c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <ipfrag_free_pbuf_custom+0x20>
 801329e:	4b11      	ldr	r3, [pc, #68]	; (80132e4 <ipfrag_free_pbuf_custom+0x58>)
 80132a0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80132a4:	4910      	ldr	r1, [pc, #64]	; (80132e8 <ipfrag_free_pbuf_custom+0x5c>)
 80132a6:	4811      	ldr	r0, [pc, #68]	; (80132ec <ipfrag_free_pbuf_custom+0x60>)
 80132a8:	f008 faee 	bl	801b888 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d006      	beq.n	80132c2 <ipfrag_free_pbuf_custom+0x36>
 80132b4:	4b0b      	ldr	r3, [pc, #44]	; (80132e4 <ipfrag_free_pbuf_custom+0x58>)
 80132b6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80132ba:	490d      	ldr	r1, [pc, #52]	; (80132f0 <ipfrag_free_pbuf_custom+0x64>)
 80132bc:	480b      	ldr	r0, [pc, #44]	; (80132ec <ipfrag_free_pbuf_custom+0x60>)
 80132be:	f008 fae3 	bl	801b888 <iprintf>
  if (pcr->original != NULL) {
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	695b      	ldr	r3, [r3, #20]
 80132ce:	4618      	mov	r0, r3
 80132d0:	f001 fd0a 	bl	8014ce8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f7ff ffbd 	bl	8013254 <ip_frag_free_pbuf_custom_ref>
}
 80132da:	bf00      	nop
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801d0a8 	.word	0x0801d0a8
 80132e8:	0801d2a4 	.word	0x0801d2a4
 80132ec:	0801d128 	.word	0x0801d128
 80132f0:	0801d2b0 	.word	0x0801d2b0

080132f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b094      	sub	sp, #80	; 0x50
 80132f8:	af02      	add	r7, sp, #8
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013300:	2300      	movs	r3, #0
 8013302:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801330a:	3b14      	subs	r3, #20
 801330c:	2b00      	cmp	r3, #0
 801330e:	da00      	bge.n	8013312 <ip4_frag+0x1e>
 8013310:	3307      	adds	r3, #7
 8013312:	10db      	asrs	r3, r3, #3
 8013314:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013316:	2314      	movs	r3, #20
 8013318:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013322:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f003 030f 	and.w	r3, r3, #15
 801332c:	b2db      	uxtb	r3, r3
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	b2db      	uxtb	r3, r3
 8013332:	2b14      	cmp	r3, #20
 8013334:	d002      	beq.n	801333c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013336:	f06f 0305 	mvn.w	r3, #5
 801333a:	e110      	b.n	801355e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	895b      	ldrh	r3, [r3, #10]
 8013340:	2b13      	cmp	r3, #19
 8013342:	d809      	bhi.n	8013358 <ip4_frag+0x64>
 8013344:	4b88      	ldr	r3, [pc, #544]	; (8013568 <ip4_frag+0x274>)
 8013346:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801334a:	4988      	ldr	r1, [pc, #544]	; (801356c <ip4_frag+0x278>)
 801334c:	4888      	ldr	r0, [pc, #544]	; (8013570 <ip4_frag+0x27c>)
 801334e:	f008 fa9b 	bl	801b888 <iprintf>
 8013352:	f06f 0305 	mvn.w	r3, #5
 8013356:	e102      	b.n	801355e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335a:	88db      	ldrh	r3, [r3, #6]
 801335c:	b29b      	uxth	r3, r3
 801335e:	4618      	mov	r0, r3
 8013360:	f7fb fe6a 	bl	800f038 <lwip_htons>
 8013364:	4603      	mov	r3, r0
 8013366:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801336a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801336e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013378:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	891b      	ldrh	r3, [r3, #8]
 801337e:	3b14      	subs	r3, #20
 8013380:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013384:	e0e1      	b.n	801354a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013386:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	b29b      	uxth	r3, r3
 801338c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013390:	4293      	cmp	r3, r2
 8013392:	bf28      	it	cs
 8013394:	4613      	movcs	r3, r2
 8013396:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013398:	f44f 7220 	mov.w	r2, #640	; 0x280
 801339c:	2114      	movs	r1, #20
 801339e:	200e      	movs	r0, #14
 80133a0:	f001 f9be 	bl	8014720 <pbuf_alloc>
 80133a4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80133a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	f000 80d5 	beq.w	8013558 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	895b      	ldrh	r3, [r3, #10]
 80133b2:	2b13      	cmp	r3, #19
 80133b4:	d806      	bhi.n	80133c4 <ip4_frag+0xd0>
 80133b6:	4b6c      	ldr	r3, [pc, #432]	; (8013568 <ip4_frag+0x274>)
 80133b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80133bc:	496d      	ldr	r1, [pc, #436]	; (8013574 <ip4_frag+0x280>)
 80133be:	486c      	ldr	r0, [pc, #432]	; (8013570 <ip4_frag+0x27c>)
 80133c0:	f008 fa62 	bl	801b888 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80133c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c6:	685b      	ldr	r3, [r3, #4]
 80133c8:	2214      	movs	r2, #20
 80133ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133cc:	4618      	mov	r0, r3
 80133ce:	f008 fb36 	bl	801ba3e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80133d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80133de:	e064      	b.n	80134aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	895a      	ldrh	r2, [r3, #10]
 80133e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	895b      	ldrh	r3, [r3, #10]
 80133ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d906      	bls.n	8013402 <ip4_frag+0x10e>
 80133f4:	4b5c      	ldr	r3, [pc, #368]	; (8013568 <ip4_frag+0x274>)
 80133f6:	f240 322d 	movw	r2, #813	; 0x32d
 80133fa:	495f      	ldr	r1, [pc, #380]	; (8013578 <ip4_frag+0x284>)
 80133fc:	485c      	ldr	r0, [pc, #368]	; (8013570 <ip4_frag+0x27c>)
 80133fe:	f008 fa43 	bl	801b888 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013402:	8bfa      	ldrh	r2, [r7, #30]
 8013404:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013408:	4293      	cmp	r3, r2
 801340a:	bf28      	it	cs
 801340c:	4613      	movcs	r3, r2
 801340e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013412:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013416:	2b00      	cmp	r3, #0
 8013418:	d105      	bne.n	8013426 <ip4_frag+0x132>
        poff = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	60fb      	str	r3, [r7, #12]
        continue;
 8013424:	e041      	b.n	80134aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013426:	f7ff ff0d 	bl	8013244 <ip_frag_alloc_pbuf_custom_ref>
 801342a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d103      	bne.n	801343a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013434:	f001 fc58 	bl	8014ce8 <pbuf_free>
        goto memerr;
 8013438:	e08f      	b.n	801355a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801343a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013442:	4413      	add	r3, r2
 8013444:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013448:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801344c:	9201      	str	r2, [sp, #4]
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	4603      	mov	r3, r0
 8013452:	2241      	movs	r2, #65	; 0x41
 8013454:	2000      	movs	r0, #0
 8013456:	f001 fa8d 	bl	8014974 <pbuf_alloced_custom>
 801345a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013462:	69b8      	ldr	r0, [r7, #24]
 8013464:	f7ff fef6 	bl	8013254 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801346a:	f001 fc3d 	bl	8014ce8 <pbuf_free>
        goto memerr;
 801346e:	e074      	b.n	801355a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f001 fcdf 	bl	8014e34 <pbuf_ref>
      pcr->original = p;
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	68fa      	ldr	r2, [r7, #12]
 801347a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	4a3f      	ldr	r2, [pc, #252]	; (801357c <ip4_frag+0x288>)
 8013480:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013482:	6979      	ldr	r1, [r7, #20]
 8013484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013486:	f001 fcfd 	bl	8014e84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801348a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801348e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013492:	1ad3      	subs	r3, r2, r3
 8013494:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013498:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801349c:	2b00      	cmp	r3, #0
 801349e:	d004      	beq.n	80134aa <ip4_frag+0x1b6>
        poff = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80134aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d196      	bne.n	80133e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80134b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80134b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80134b8:	4413      	add	r3, r2
 80134ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134c0:	f1a3 0213 	sub.w	r2, r3, #19
 80134c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134c8:	429a      	cmp	r2, r3
 80134ca:	bfcc      	ite	gt
 80134cc:	2301      	movgt	r3, #1
 80134ce:	2300      	movle	r3, #0
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80134d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80134de:	6a3b      	ldr	r3, [r7, #32]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <ip4_frag+0x1f6>
 80134e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d003      	beq.n	80134f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80134ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80134f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80134f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7fb fd9f 	bl	800f038 <lwip_htons>
 80134fa:	4603      	mov	r3, r0
 80134fc:	461a      	mov	r2, r3
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013502:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013504:	3314      	adds	r3, #20
 8013506:	b29b      	uxth	r3, r3
 8013508:	4618      	mov	r0, r3
 801350a:	f7fb fd95 	bl	800f038 <lwip_htons>
 801350e:	4603      	mov	r3, r0
 8013510:	461a      	mov	r2, r3
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	2200      	movs	r2, #0
 801351a:	729a      	strb	r2, [r3, #10]
 801351c:	2200      	movs	r2, #0
 801351e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	695b      	ldr	r3, [r3, #20]
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013528:	68b8      	ldr	r0, [r7, #8]
 801352a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801352c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801352e:	f001 fbdb 	bl	8014ce8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013532:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801353e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013544:	4413      	add	r3, r2
 8013546:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801354a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801354e:	2b00      	cmp	r3, #0
 8013550:	f47f af19 	bne.w	8013386 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	e002      	b.n	801355e <ip4_frag+0x26a>
      goto memerr;
 8013558:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801355a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801355e:	4618      	mov	r0, r3
 8013560:	3748      	adds	r7, #72	; 0x48
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	0801d0a8 	.word	0x0801d0a8
 801356c:	0801d2bc 	.word	0x0801d2bc
 8013570:	0801d128 	.word	0x0801d128
 8013574:	0801d2d8 	.word	0x0801d2d8
 8013578:	0801d2f8 	.word	0x0801d2f8
 801357c:	0801328d 	.word	0x0801328d

08013580 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	4603      	mov	r3, r0
 8013588:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801358a:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <ptr_to_mem+0x20>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	88fb      	ldrh	r3, [r7, #6]
 8013590:	4413      	add	r3, r2
}
 8013592:	4618      	mov	r0, r3
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop
 80135a0:	2400986c 	.word	0x2400986c

080135a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80135ac:	4b05      	ldr	r3, [pc, #20]	; (80135c4 <mem_to_ptr+0x20>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	b29b      	uxth	r3, r3
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	370c      	adds	r7, #12
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	2400986c 	.word	0x2400986c

080135c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80135c8:	b590      	push	{r4, r7, lr}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80135d0:	4b45      	ldr	r3, [pc, #276]	; (80136e8 <plug_holes+0x120>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d206      	bcs.n	80135e8 <plug_holes+0x20>
 80135da:	4b44      	ldr	r3, [pc, #272]	; (80136ec <plug_holes+0x124>)
 80135dc:	f240 12df 	movw	r2, #479	; 0x1df
 80135e0:	4943      	ldr	r1, [pc, #268]	; (80136f0 <plug_holes+0x128>)
 80135e2:	4844      	ldr	r0, [pc, #272]	; (80136f4 <plug_holes+0x12c>)
 80135e4:	f008 f950 	bl	801b888 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80135e8:	4b43      	ldr	r3, [pc, #268]	; (80136f8 <plug_holes+0x130>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d306      	bcc.n	8013600 <plug_holes+0x38>
 80135f2:	4b3e      	ldr	r3, [pc, #248]	; (80136ec <plug_holes+0x124>)
 80135f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80135f8:	4940      	ldr	r1, [pc, #256]	; (80136fc <plug_holes+0x134>)
 80135fa:	483e      	ldr	r0, [pc, #248]	; (80136f4 <plug_holes+0x12c>)
 80135fc:	f008 f944 	bl	801b888 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	791b      	ldrb	r3, [r3, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d006      	beq.n	8013616 <plug_holes+0x4e>
 8013608:	4b38      	ldr	r3, [pc, #224]	; (80136ec <plug_holes+0x124>)
 801360a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801360e:	493c      	ldr	r1, [pc, #240]	; (8013700 <plug_holes+0x138>)
 8013610:	4838      	ldr	r0, [pc, #224]	; (80136f4 <plug_holes+0x12c>)
 8013612:	f008 f939 	bl	801b888 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	881b      	ldrh	r3, [r3, #0]
 801361a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801361e:	d906      	bls.n	801362e <plug_holes+0x66>
 8013620:	4b32      	ldr	r3, [pc, #200]	; (80136ec <plug_holes+0x124>)
 8013622:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013626:	4937      	ldr	r1, [pc, #220]	; (8013704 <plug_holes+0x13c>)
 8013628:	4832      	ldr	r0, [pc, #200]	; (80136f4 <plug_holes+0x12c>)
 801362a:	f008 f92d 	bl	801b888 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff ffa4 	bl	8013580 <ptr_to_mem>
 8013638:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	429a      	cmp	r2, r3
 8013640:	d024      	beq.n	801368c <plug_holes+0xc4>
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	791b      	ldrb	r3, [r3, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d120      	bne.n	801368c <plug_holes+0xc4>
 801364a:	4b2b      	ldr	r3, [pc, #172]	; (80136f8 <plug_holes+0x130>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	429a      	cmp	r2, r3
 8013652:	d01b      	beq.n	801368c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013654:	4b2c      	ldr	r3, [pc, #176]	; (8013708 <plug_holes+0x140>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	429a      	cmp	r2, r3
 801365c:	d102      	bne.n	8013664 <plug_holes+0x9c>
      lfree = mem;
 801365e:	4a2a      	ldr	r2, [pc, #168]	; (8013708 <plug_holes+0x140>)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	881a      	ldrh	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	881b      	ldrh	r3, [r3, #0]
 8013670:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013674:	d00a      	beq.n	801368c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	4618      	mov	r0, r3
 801367c:	f7ff ff80 	bl	8013580 <ptr_to_mem>
 8013680:	4604      	mov	r4, r0
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f7ff ff8e 	bl	80135a4 <mem_to_ptr>
 8013688:	4603      	mov	r3, r0
 801368a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	885b      	ldrh	r3, [r3, #2]
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff ff75 	bl	8013580 <ptr_to_mem>
 8013696:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013698:	68ba      	ldr	r2, [r7, #8]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	429a      	cmp	r2, r3
 801369e:	d01f      	beq.n	80136e0 <plug_holes+0x118>
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	791b      	ldrb	r3, [r3, #4]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d11b      	bne.n	80136e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80136a8:	4b17      	ldr	r3, [pc, #92]	; (8013708 <plug_holes+0x140>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d102      	bne.n	80136b8 <plug_holes+0xf0>
      lfree = pmem;
 80136b2:	4a15      	ldr	r2, [pc, #84]	; (8013708 <plug_holes+0x140>)
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	881a      	ldrh	r2, [r3, #0]
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	881b      	ldrh	r3, [r3, #0]
 80136c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80136c8:	d00a      	beq.n	80136e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7ff ff56 	bl	8013580 <ptr_to_mem>
 80136d4:	4604      	mov	r4, r0
 80136d6:	68b8      	ldr	r0, [r7, #8]
 80136d8:	f7ff ff64 	bl	80135a4 <mem_to_ptr>
 80136dc:	4603      	mov	r3, r0
 80136de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80136e0:	bf00      	nop
 80136e2:	3714      	adds	r7, #20
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd90      	pop	{r4, r7, pc}
 80136e8:	2400986c 	.word	0x2400986c
 80136ec:	0801d308 	.word	0x0801d308
 80136f0:	0801d374 	.word	0x0801d374
 80136f4:	0801d38c 	.word	0x0801d38c
 80136f8:	24009870 	.word	0x24009870
 80136fc:	0801d3b4 	.word	0x0801d3b4
 8013700:	0801d3d0 	.word	0x0801d3d0
 8013704:	0801d3ec 	.word	0x0801d3ec
 8013708:	24009878 	.word	0x24009878

0801370c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013712:	4b1d      	ldr	r3, [pc, #116]	; (8013788 <mem_init+0x7c>)
 8013714:	4a1d      	ldr	r2, [pc, #116]	; (801378c <mem_init+0x80>)
 8013716:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013718:	4b1b      	ldr	r3, [pc, #108]	; (8013788 <mem_init+0x7c>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013724:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2200      	movs	r2, #0
 801372a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2200      	movs	r2, #0
 8013730:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013732:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8013736:	f7ff ff23 	bl	8013580 <ptr_to_mem>
 801373a:	4603      	mov	r3, r0
 801373c:	4a14      	ldr	r2, [pc, #80]	; (8013790 <mem_init+0x84>)
 801373e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013740:	4b13      	ldr	r3, [pc, #76]	; (8013790 <mem_init+0x84>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2201      	movs	r2, #1
 8013746:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013748:	4b11      	ldr	r3, [pc, #68]	; (8013790 <mem_init+0x84>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013750:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013752:	4b0f      	ldr	r3, [pc, #60]	; (8013790 <mem_init+0x84>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801375a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801375c:	4b0a      	ldr	r3, [pc, #40]	; (8013788 <mem_init+0x7c>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a0c      	ldr	r2, [pc, #48]	; (8013794 <mem_init+0x88>)
 8013762:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013764:	480c      	ldr	r0, [pc, #48]	; (8013798 <mem_init+0x8c>)
 8013766:	f001 fdeb 	bl	8015340 <sys_mutex_new>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d006      	beq.n	801377e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013770:	4b0a      	ldr	r3, [pc, #40]	; (801379c <mem_init+0x90>)
 8013772:	f240 221f 	movw	r2, #543	; 0x21f
 8013776:	490a      	ldr	r1, [pc, #40]	; (80137a0 <mem_init+0x94>)
 8013778:	480a      	ldr	r0, [pc, #40]	; (80137a4 <mem_init+0x98>)
 801377a:	f008 f885 	bl	801b888 <iprintf>
  }
}
 801377e:	bf00      	nop
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	2400986c 	.word	0x2400986c
 801378c:	30044000 	.word	0x30044000
 8013790:	24009870 	.word	0x24009870
 8013794:	24009878 	.word	0x24009878
 8013798:	24009874 	.word	0x24009874
 801379c:	0801d308 	.word	0x0801d308
 80137a0:	0801d418 	.word	0x0801d418
 80137a4:	0801d38c 	.word	0x0801d38c

080137a8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f7ff fef7 	bl	80135a4 <mem_to_ptr>
 80137b6:	4603      	mov	r3, r0
 80137b8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff fede 	bl	8013580 <ptr_to_mem>
 80137c4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	885b      	ldrh	r3, [r3, #2]
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7ff fed8 	bl	8013580 <ptr_to_mem>
 80137d0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137da:	d818      	bhi.n	801380e <mem_link_valid+0x66>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	885b      	ldrh	r3, [r3, #2]
 80137e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137e4:	d813      	bhi.n	801380e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80137ea:	8afa      	ldrh	r2, [r7, #22]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d004      	beq.n	80137fa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	881b      	ldrh	r3, [r3, #0]
 80137f4:	8afa      	ldrh	r2, [r7, #22]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d109      	bne.n	801380e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80137fa:	4b08      	ldr	r3, [pc, #32]	; (801381c <mem_link_valid+0x74>)
 80137fc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137fe:	693a      	ldr	r2, [r7, #16]
 8013800:	429a      	cmp	r2, r3
 8013802:	d006      	beq.n	8013812 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	885b      	ldrh	r3, [r3, #2]
 8013808:	8afa      	ldrh	r2, [r7, #22]
 801380a:	429a      	cmp	r2, r3
 801380c:	d001      	beq.n	8013812 <mem_link_valid+0x6a>
    return 0;
 801380e:	2300      	movs	r3, #0
 8013810:	e000      	b.n	8013814 <mem_link_valid+0x6c>
  }
  return 1;
 8013812:	2301      	movs	r3, #1
}
 8013814:	4618      	mov	r0, r3
 8013816:	3718      	adds	r7, #24
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	24009870 	.word	0x24009870

08013820 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b088      	sub	sp, #32
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d070      	beq.n	8013910 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f003 0303 	and.w	r3, r3, #3
 8013834:	2b00      	cmp	r3, #0
 8013836:	d00d      	beq.n	8013854 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013838:	4b37      	ldr	r3, [pc, #220]	; (8013918 <mem_free+0xf8>)
 801383a:	f240 2273 	movw	r2, #627	; 0x273
 801383e:	4937      	ldr	r1, [pc, #220]	; (801391c <mem_free+0xfc>)
 8013840:	4837      	ldr	r0, [pc, #220]	; (8013920 <mem_free+0x100>)
 8013842:	f008 f821 	bl	801b888 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013846:	f001 fdcd 	bl	80153e4 <sys_arch_protect>
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	f001 fdd7 	bl	8015400 <sys_arch_unprotect>
    return;
 8013852:	e05e      	b.n	8013912 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	3b08      	subs	r3, #8
 8013858:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801385a:	4b32      	ldr	r3, [pc, #200]	; (8013924 <mem_free+0x104>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	69fa      	ldr	r2, [r7, #28]
 8013860:	429a      	cmp	r2, r3
 8013862:	d306      	bcc.n	8013872 <mem_free+0x52>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f103 020c 	add.w	r2, r3, #12
 801386a:	4b2f      	ldr	r3, [pc, #188]	; (8013928 <mem_free+0x108>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d90d      	bls.n	801388e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013872:	4b29      	ldr	r3, [pc, #164]	; (8013918 <mem_free+0xf8>)
 8013874:	f240 227f 	movw	r2, #639	; 0x27f
 8013878:	492c      	ldr	r1, [pc, #176]	; (801392c <mem_free+0x10c>)
 801387a:	4829      	ldr	r0, [pc, #164]	; (8013920 <mem_free+0x100>)
 801387c:	f008 f804 	bl	801b888 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013880:	f001 fdb0 	bl	80153e4 <sys_arch_protect>
 8013884:	6138      	str	r0, [r7, #16]
 8013886:	6938      	ldr	r0, [r7, #16]
 8013888:	f001 fdba 	bl	8015400 <sys_arch_unprotect>
    return;
 801388c:	e041      	b.n	8013912 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801388e:	4828      	ldr	r0, [pc, #160]	; (8013930 <mem_free+0x110>)
 8013890:	f001 fd6c 	bl	801536c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	791b      	ldrb	r3, [r3, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d110      	bne.n	80138be <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801389c:	4b1e      	ldr	r3, [pc, #120]	; (8013918 <mem_free+0xf8>)
 801389e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80138a2:	4924      	ldr	r1, [pc, #144]	; (8013934 <mem_free+0x114>)
 80138a4:	481e      	ldr	r0, [pc, #120]	; (8013920 <mem_free+0x100>)
 80138a6:	f007 ffef 	bl	801b888 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80138aa:	4821      	ldr	r0, [pc, #132]	; (8013930 <mem_free+0x110>)
 80138ac:	f001 fd6d 	bl	801538a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138b0:	f001 fd98 	bl	80153e4 <sys_arch_protect>
 80138b4:	6178      	str	r0, [r7, #20]
 80138b6:	6978      	ldr	r0, [r7, #20]
 80138b8:	f001 fda2 	bl	8015400 <sys_arch_unprotect>
    return;
 80138bc:	e029      	b.n	8013912 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80138be:	69f8      	ldr	r0, [r7, #28]
 80138c0:	f7ff ff72 	bl	80137a8 <mem_link_valid>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d110      	bne.n	80138ec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80138ca:	4b13      	ldr	r3, [pc, #76]	; (8013918 <mem_free+0xf8>)
 80138cc:	f240 2295 	movw	r2, #661	; 0x295
 80138d0:	4919      	ldr	r1, [pc, #100]	; (8013938 <mem_free+0x118>)
 80138d2:	4813      	ldr	r0, [pc, #76]	; (8013920 <mem_free+0x100>)
 80138d4:	f007 ffd8 	bl	801b888 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80138d8:	4815      	ldr	r0, [pc, #84]	; (8013930 <mem_free+0x110>)
 80138da:	f001 fd56 	bl	801538a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138de:	f001 fd81 	bl	80153e4 <sys_arch_protect>
 80138e2:	61b8      	str	r0, [r7, #24]
 80138e4:	69b8      	ldr	r0, [r7, #24]
 80138e6:	f001 fd8b 	bl	8015400 <sys_arch_unprotect>
    return;
 80138ea:	e012      	b.n	8013912 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	2200      	movs	r2, #0
 80138f0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80138f2:	4b12      	ldr	r3, [pc, #72]	; (801393c <mem_free+0x11c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	69fa      	ldr	r2, [r7, #28]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d202      	bcs.n	8013902 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80138fc:	4a0f      	ldr	r2, [pc, #60]	; (801393c <mem_free+0x11c>)
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013902:	69f8      	ldr	r0, [r7, #28]
 8013904:	f7ff fe60 	bl	80135c8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013908:	4809      	ldr	r0, [pc, #36]	; (8013930 <mem_free+0x110>)
 801390a:	f001 fd3e 	bl	801538a <sys_mutex_unlock>
 801390e:	e000      	b.n	8013912 <mem_free+0xf2>
    return;
 8013910:	bf00      	nop
}
 8013912:	3720      	adds	r7, #32
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0801d308 	.word	0x0801d308
 801391c:	0801d434 	.word	0x0801d434
 8013920:	0801d38c 	.word	0x0801d38c
 8013924:	2400986c 	.word	0x2400986c
 8013928:	24009870 	.word	0x24009870
 801392c:	0801d458 	.word	0x0801d458
 8013930:	24009874 	.word	0x24009874
 8013934:	0801d474 	.word	0x0801d474
 8013938:	0801d49c 	.word	0x0801d49c
 801393c:	24009878 	.word	0x24009878

08013940 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b088      	sub	sp, #32
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	460b      	mov	r3, r1
 801394a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801394c:	887b      	ldrh	r3, [r7, #2]
 801394e:	3303      	adds	r3, #3
 8013950:	b29b      	uxth	r3, r3
 8013952:	f023 0303 	bic.w	r3, r3, #3
 8013956:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013958:	8bfb      	ldrh	r3, [r7, #30]
 801395a:	2b0b      	cmp	r3, #11
 801395c:	d801      	bhi.n	8013962 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801395e:	230c      	movs	r3, #12
 8013960:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013962:	8bfb      	ldrh	r3, [r7, #30]
 8013964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013968:	d803      	bhi.n	8013972 <mem_trim+0x32>
 801396a:	8bfa      	ldrh	r2, [r7, #30]
 801396c:	887b      	ldrh	r3, [r7, #2]
 801396e:	429a      	cmp	r2, r3
 8013970:	d201      	bcs.n	8013976 <mem_trim+0x36>
    return NULL;
 8013972:	2300      	movs	r3, #0
 8013974:	e0d8      	b.n	8013b28 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013976:	4b6e      	ldr	r3, [pc, #440]	; (8013b30 <mem_trim+0x1f0>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	429a      	cmp	r2, r3
 801397e:	d304      	bcc.n	801398a <mem_trim+0x4a>
 8013980:	4b6c      	ldr	r3, [pc, #432]	; (8013b34 <mem_trim+0x1f4>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	429a      	cmp	r2, r3
 8013988:	d306      	bcc.n	8013998 <mem_trim+0x58>
 801398a:	4b6b      	ldr	r3, [pc, #428]	; (8013b38 <mem_trim+0x1f8>)
 801398c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013990:	496a      	ldr	r1, [pc, #424]	; (8013b3c <mem_trim+0x1fc>)
 8013992:	486b      	ldr	r0, [pc, #428]	; (8013b40 <mem_trim+0x200>)
 8013994:	f007 ff78 	bl	801b888 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013998:	4b65      	ldr	r3, [pc, #404]	; (8013b30 <mem_trim+0x1f0>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d304      	bcc.n	80139ac <mem_trim+0x6c>
 80139a2:	4b64      	ldr	r3, [pc, #400]	; (8013b34 <mem_trim+0x1f4>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d307      	bcc.n	80139bc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80139ac:	f001 fd1a 	bl	80153e4 <sys_arch_protect>
 80139b0:	60b8      	str	r0, [r7, #8]
 80139b2:	68b8      	ldr	r0, [r7, #8]
 80139b4:	f001 fd24 	bl	8015400 <sys_arch_unprotect>
    return rmem;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	e0b5      	b.n	8013b28 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	3b08      	subs	r3, #8
 80139c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80139c2:	69b8      	ldr	r0, [r7, #24]
 80139c4:	f7ff fdee 	bl	80135a4 <mem_to_ptr>
 80139c8:	4603      	mov	r3, r0
 80139ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	881a      	ldrh	r2, [r3, #0]
 80139d0:	8afb      	ldrh	r3, [r7, #22]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	3b08      	subs	r3, #8
 80139d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80139da:	8bfa      	ldrh	r2, [r7, #30]
 80139dc:	8abb      	ldrh	r3, [r7, #20]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d906      	bls.n	80139f0 <mem_trim+0xb0>
 80139e2:	4b55      	ldr	r3, [pc, #340]	; (8013b38 <mem_trim+0x1f8>)
 80139e4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80139e8:	4956      	ldr	r1, [pc, #344]	; (8013b44 <mem_trim+0x204>)
 80139ea:	4855      	ldr	r0, [pc, #340]	; (8013b40 <mem_trim+0x200>)
 80139ec:	f007 ff4c 	bl	801b888 <iprintf>
  if (newsize > size) {
 80139f0:	8bfa      	ldrh	r2, [r7, #30]
 80139f2:	8abb      	ldrh	r3, [r7, #20]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d901      	bls.n	80139fc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80139f8:	2300      	movs	r3, #0
 80139fa:	e095      	b.n	8013b28 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80139fc:	8bfa      	ldrh	r2, [r7, #30]
 80139fe:	8abb      	ldrh	r3, [r7, #20]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d101      	bne.n	8013a08 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	e08f      	b.n	8013b28 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013a08:	484f      	ldr	r0, [pc, #316]	; (8013b48 <mem_trim+0x208>)
 8013a0a:	f001 fcaf 	bl	801536c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff fdb4 	bl	8013580 <ptr_to_mem>
 8013a18:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	791b      	ldrb	r3, [r3, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d13f      	bne.n	8013aa2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a2a:	d106      	bne.n	8013a3a <mem_trim+0xfa>
 8013a2c:	4b42      	ldr	r3, [pc, #264]	; (8013b38 <mem_trim+0x1f8>)
 8013a2e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8013a32:	4946      	ldr	r1, [pc, #280]	; (8013b4c <mem_trim+0x20c>)
 8013a34:	4842      	ldr	r0, [pc, #264]	; (8013b40 <mem_trim+0x200>)
 8013a36:	f007 ff27 	bl	801b888 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	881b      	ldrh	r3, [r3, #0]
 8013a3e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013a40:	8afa      	ldrh	r2, [r7, #22]
 8013a42:	8bfb      	ldrh	r3, [r7, #30]
 8013a44:	4413      	add	r3, r2
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	3308      	adds	r3, #8
 8013a4a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013a4c:	4b40      	ldr	r3, [pc, #256]	; (8013b50 <mem_trim+0x210>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	693a      	ldr	r2, [r7, #16]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d106      	bne.n	8013a64 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013a56:	89fb      	ldrh	r3, [r7, #14]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7ff fd91 	bl	8013580 <ptr_to_mem>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	4a3b      	ldr	r2, [pc, #236]	; (8013b50 <mem_trim+0x210>)
 8013a62:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013a64:	89fb      	ldrh	r3, [r7, #14]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fd8a 	bl	8013580 <ptr_to_mem>
 8013a6c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	2200      	movs	r2, #0
 8013a72:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	89ba      	ldrh	r2, [r7, #12]
 8013a78:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	8afa      	ldrh	r2, [r7, #22]
 8013a7e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	89fa      	ldrh	r2, [r7, #14]
 8013a84:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a8e:	d047      	beq.n	8013b20 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	881b      	ldrh	r3, [r3, #0]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7ff fd73 	bl	8013580 <ptr_to_mem>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	8053      	strh	r3, [r2, #2]
 8013aa0:	e03e      	b.n	8013b20 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013aa2:	8bfb      	ldrh	r3, [r7, #30]
 8013aa4:	f103 0214 	add.w	r2, r3, #20
 8013aa8:	8abb      	ldrh	r3, [r7, #20]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d838      	bhi.n	8013b20 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013aae:	8afa      	ldrh	r2, [r7, #22]
 8013ab0:	8bfb      	ldrh	r3, [r7, #30]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	3308      	adds	r3, #8
 8013ab8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013ac2:	d106      	bne.n	8013ad2 <mem_trim+0x192>
 8013ac4:	4b1c      	ldr	r3, [pc, #112]	; (8013b38 <mem_trim+0x1f8>)
 8013ac6:	f240 3216 	movw	r2, #790	; 0x316
 8013aca:	4920      	ldr	r1, [pc, #128]	; (8013b4c <mem_trim+0x20c>)
 8013acc:	481c      	ldr	r0, [pc, #112]	; (8013b40 <mem_trim+0x200>)
 8013ace:	f007 fedb 	bl	801b888 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013ad2:	89fb      	ldrh	r3, [r7, #14]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff fd53 	bl	8013580 <ptr_to_mem>
 8013ada:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013adc:	4b1c      	ldr	r3, [pc, #112]	; (8013b50 <mem_trim+0x210>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d202      	bcs.n	8013aec <mem_trim+0x1ac>
      lfree = mem2;
 8013ae6:	4a1a      	ldr	r2, [pc, #104]	; (8013b50 <mem_trim+0x210>)
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	2200      	movs	r2, #0
 8013af0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	881a      	ldrh	r2, [r3, #0]
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	8afa      	ldrh	r2, [r7, #22]
 8013afe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	89fa      	ldrh	r2, [r7, #14]
 8013b04:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b0e:	d007      	beq.n	8013b20 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	881b      	ldrh	r3, [r3, #0]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff fd33 	bl	8013580 <ptr_to_mem>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	89fb      	ldrh	r3, [r7, #14]
 8013b1e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013b20:	4809      	ldr	r0, [pc, #36]	; (8013b48 <mem_trim+0x208>)
 8013b22:	f001 fc32 	bl	801538a <sys_mutex_unlock>
  return rmem;
 8013b26:	687b      	ldr	r3, [r7, #4]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3720      	adds	r7, #32
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	2400986c 	.word	0x2400986c
 8013b34:	24009870 	.word	0x24009870
 8013b38:	0801d308 	.word	0x0801d308
 8013b3c:	0801d4d0 	.word	0x0801d4d0
 8013b40:	0801d38c 	.word	0x0801d38c
 8013b44:	0801d4e8 	.word	0x0801d4e8
 8013b48:	24009874 	.word	0x24009874
 8013b4c:	0801d508 	.word	0x0801d508
 8013b50:	24009878 	.word	0x24009878

08013b54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b088      	sub	sp, #32
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013b5e:	88fb      	ldrh	r3, [r7, #6]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d101      	bne.n	8013b68 <mem_malloc+0x14>
    return NULL;
 8013b64:	2300      	movs	r3, #0
 8013b66:	e0e2      	b.n	8013d2e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013b68:	88fb      	ldrh	r3, [r7, #6]
 8013b6a:	3303      	adds	r3, #3
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	f023 0303 	bic.w	r3, r3, #3
 8013b72:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013b74:	8bbb      	ldrh	r3, [r7, #28]
 8013b76:	2b0b      	cmp	r3, #11
 8013b78:	d801      	bhi.n	8013b7e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013b7a:	230c      	movs	r3, #12
 8013b7c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013b7e:	8bbb      	ldrh	r3, [r7, #28]
 8013b80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b84:	d803      	bhi.n	8013b8e <mem_malloc+0x3a>
 8013b86:	8bba      	ldrh	r2, [r7, #28]
 8013b88:	88fb      	ldrh	r3, [r7, #6]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d201      	bcs.n	8013b92 <mem_malloc+0x3e>
    return NULL;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e0cd      	b.n	8013d2e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013b92:	4869      	ldr	r0, [pc, #420]	; (8013d38 <mem_malloc+0x1e4>)
 8013b94:	f001 fbea 	bl	801536c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b98:	4b68      	ldr	r3, [pc, #416]	; (8013d3c <mem_malloc+0x1e8>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7ff fd01 	bl	80135a4 <mem_to_ptr>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	83fb      	strh	r3, [r7, #30]
 8013ba6:	e0b7      	b.n	8013d18 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013ba8:	8bfb      	ldrh	r3, [r7, #30]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7ff fce8 	bl	8013580 <ptr_to_mem>
 8013bb0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	791b      	ldrb	r3, [r3, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f040 80a7 	bne.w	8013d0a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	881b      	ldrh	r3, [r3, #0]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	8bfb      	ldrh	r3, [r7, #30]
 8013bc4:	1ad3      	subs	r3, r2, r3
 8013bc6:	f1a3 0208 	sub.w	r2, r3, #8
 8013bca:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	f0c0 809c 	bcc.w	8013d0a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	8bfb      	ldrh	r3, [r7, #30]
 8013bda:	1ad3      	subs	r3, r2, r3
 8013bdc:	f1a3 0208 	sub.w	r2, r3, #8
 8013be0:	8bbb      	ldrh	r3, [r7, #28]
 8013be2:	3314      	adds	r3, #20
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d333      	bcc.n	8013c50 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013be8:	8bfa      	ldrh	r2, [r7, #30]
 8013bea:	8bbb      	ldrh	r3, [r7, #28]
 8013bec:	4413      	add	r3, r2
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	3308      	adds	r3, #8
 8013bf2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013bf4:	8a7b      	ldrh	r3, [r7, #18]
 8013bf6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013bfa:	d106      	bne.n	8013c0a <mem_malloc+0xb6>
 8013bfc:	4b50      	ldr	r3, [pc, #320]	; (8013d40 <mem_malloc+0x1ec>)
 8013bfe:	f240 3287 	movw	r2, #903	; 0x387
 8013c02:	4950      	ldr	r1, [pc, #320]	; (8013d44 <mem_malloc+0x1f0>)
 8013c04:	4850      	ldr	r0, [pc, #320]	; (8013d48 <mem_malloc+0x1f4>)
 8013c06:	f007 fe3f 	bl	801b888 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013c0a:	8a7b      	ldrh	r3, [r7, #18]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7ff fcb7 	bl	8013580 <ptr_to_mem>
 8013c12:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	881a      	ldrh	r2, [r3, #0]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	8bfa      	ldrh	r2, [r7, #30]
 8013c26:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	8a7a      	ldrh	r2, [r7, #18]
 8013c2c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2201      	movs	r2, #1
 8013c32:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	881b      	ldrh	r3, [r3, #0]
 8013c38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013c3c:	d00b      	beq.n	8013c56 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff fc9c 	bl	8013580 <ptr_to_mem>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	8a7b      	ldrh	r3, [r7, #18]
 8013c4c:	8053      	strh	r3, [r2, #2]
 8013c4e:	e002      	b.n	8013c56 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	2201      	movs	r2, #1
 8013c54:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013c56:	4b39      	ldr	r3, [pc, #228]	; (8013d3c <mem_malloc+0x1e8>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	697a      	ldr	r2, [r7, #20]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d127      	bne.n	8013cb0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013c60:	4b36      	ldr	r3, [pc, #216]	; (8013d3c <mem_malloc+0x1e8>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013c66:	e005      	b.n	8013c74 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7ff fc87 	bl	8013580 <ptr_to_mem>
 8013c72:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013c74:	69bb      	ldr	r3, [r7, #24]
 8013c76:	791b      	ldrb	r3, [r3, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d004      	beq.n	8013c86 <mem_malloc+0x132>
 8013c7c:	4b33      	ldr	r3, [pc, #204]	; (8013d4c <mem_malloc+0x1f8>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	69ba      	ldr	r2, [r7, #24]
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d1f0      	bne.n	8013c68 <mem_malloc+0x114>
          }
          lfree = cur;
 8013c86:	4a2d      	ldr	r2, [pc, #180]	; (8013d3c <mem_malloc+0x1e8>)
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013c8c:	4b2b      	ldr	r3, [pc, #172]	; (8013d3c <mem_malloc+0x1e8>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	4b2e      	ldr	r3, [pc, #184]	; (8013d4c <mem_malloc+0x1f8>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d00b      	beq.n	8013cb0 <mem_malloc+0x15c>
 8013c98:	4b28      	ldr	r3, [pc, #160]	; (8013d3c <mem_malloc+0x1e8>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	791b      	ldrb	r3, [r3, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d006      	beq.n	8013cb0 <mem_malloc+0x15c>
 8013ca2:	4b27      	ldr	r3, [pc, #156]	; (8013d40 <mem_malloc+0x1ec>)
 8013ca4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013ca8:	4929      	ldr	r1, [pc, #164]	; (8013d50 <mem_malloc+0x1fc>)
 8013caa:	4827      	ldr	r0, [pc, #156]	; (8013d48 <mem_malloc+0x1f4>)
 8013cac:	f007 fdec 	bl	801b888 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013cb0:	4821      	ldr	r0, [pc, #132]	; (8013d38 <mem_malloc+0x1e4>)
 8013cb2:	f001 fb6a 	bl	801538a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013cb6:	8bba      	ldrh	r2, [r7, #28]
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	4413      	add	r3, r2
 8013cbc:	3308      	adds	r3, #8
 8013cbe:	4a23      	ldr	r2, [pc, #140]	; (8013d4c <mem_malloc+0x1f8>)
 8013cc0:	6812      	ldr	r2, [r2, #0]
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d906      	bls.n	8013cd4 <mem_malloc+0x180>
 8013cc6:	4b1e      	ldr	r3, [pc, #120]	; (8013d40 <mem_malloc+0x1ec>)
 8013cc8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013ccc:	4921      	ldr	r1, [pc, #132]	; (8013d54 <mem_malloc+0x200>)
 8013cce:	481e      	ldr	r0, [pc, #120]	; (8013d48 <mem_malloc+0x1f4>)
 8013cd0:	f007 fdda 	bl	801b888 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	f003 0303 	and.w	r3, r3, #3
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d006      	beq.n	8013cec <mem_malloc+0x198>
 8013cde:	4b18      	ldr	r3, [pc, #96]	; (8013d40 <mem_malloc+0x1ec>)
 8013ce0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013ce4:	491c      	ldr	r1, [pc, #112]	; (8013d58 <mem_malloc+0x204>)
 8013ce6:	4818      	ldr	r0, [pc, #96]	; (8013d48 <mem_malloc+0x1f4>)
 8013ce8:	f007 fdce 	bl	801b888 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f003 0303 	and.w	r3, r3, #3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d006      	beq.n	8013d04 <mem_malloc+0x1b0>
 8013cf6:	4b12      	ldr	r3, [pc, #72]	; (8013d40 <mem_malloc+0x1ec>)
 8013cf8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013cfc:	4917      	ldr	r1, [pc, #92]	; (8013d5c <mem_malloc+0x208>)
 8013cfe:	4812      	ldr	r0, [pc, #72]	; (8013d48 <mem_malloc+0x1f4>)
 8013d00:	f007 fdc2 	bl	801b888 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	3308      	adds	r3, #8
 8013d08:	e011      	b.n	8013d2e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013d0a:	8bfb      	ldrh	r3, [r7, #30]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7ff fc37 	bl	8013580 <ptr_to_mem>
 8013d12:	4603      	mov	r3, r0
 8013d14:	881b      	ldrh	r3, [r3, #0]
 8013d16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013d18:	8bfa      	ldrh	r2, [r7, #30]
 8013d1a:	8bbb      	ldrh	r3, [r7, #28]
 8013d1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013d20:	429a      	cmp	r2, r3
 8013d22:	f4ff af41 	bcc.w	8013ba8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013d26:	4804      	ldr	r0, [pc, #16]	; (8013d38 <mem_malloc+0x1e4>)
 8013d28:	f001 fb2f 	bl	801538a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3720      	adds	r7, #32
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	24009874 	.word	0x24009874
 8013d3c:	24009878 	.word	0x24009878
 8013d40:	0801d308 	.word	0x0801d308
 8013d44:	0801d508 	.word	0x0801d508
 8013d48:	0801d38c 	.word	0x0801d38c
 8013d4c:	24009870 	.word	0x24009870
 8013d50:	0801d51c 	.word	0x0801d51c
 8013d54:	0801d538 	.word	0x0801d538
 8013d58:	0801d568 	.word	0x0801d568
 8013d5c:	0801d598 	.word	0x0801d598

08013d60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013d60:	b480      	push	{r7}
 8013d62:	b085      	sub	sp, #20
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	3303      	adds	r3, #3
 8013d76:	f023 0303 	bic.w	r3, r3, #3
 8013d7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	60fb      	str	r3, [r7, #12]
 8013d80:	e011      	b.n	8013da6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	461a      	mov	r2, r3
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	3301      	adds	r3, #1
 8013da4:	60fb      	str	r3, [r7, #12]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	885b      	ldrh	r3, [r3, #2]
 8013daa:	461a      	mov	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	4293      	cmp	r3, r2
 8013db0:	dbe7      	blt.n	8013d82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013db2:	bf00      	nop
 8013db4:	bf00      	nop
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	80fb      	strh	r3, [r7, #6]
 8013dca:	e009      	b.n	8013de0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013dcc:	88fb      	ldrh	r3, [r7, #6]
 8013dce:	4a08      	ldr	r2, [pc, #32]	; (8013df0 <memp_init+0x30>)
 8013dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff ffc3 	bl	8013d60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013dda:	88fb      	ldrh	r3, [r7, #6]
 8013ddc:	3301      	adds	r3, #1
 8013dde:	80fb      	strh	r3, [r7, #6]
 8013de0:	88fb      	ldrh	r3, [r7, #6]
 8013de2:	2b0c      	cmp	r3, #12
 8013de4:	d9f2      	bls.n	8013dcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013de6:	bf00      	nop
 8013de8:	bf00      	nop
 8013dea:	3708      	adds	r7, #8
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	0801fa28 	.word	0x0801fa28

08013df4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013dfc:	f001 faf2 	bl	80153e4 <sys_arch_protect>
 8013e00:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	689b      	ldr	r3, [r3, #8]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d015      	beq.n	8013e3c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	68ba      	ldr	r2, [r7, #8]
 8013e16:	6812      	ldr	r2, [r2, #0]
 8013e18:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	f003 0303 	and.w	r3, r3, #3
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d006      	beq.n	8013e32 <do_memp_malloc_pool+0x3e>
 8013e24:	4b09      	ldr	r3, [pc, #36]	; (8013e4c <do_memp_malloc_pool+0x58>)
 8013e26:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013e2a:	4909      	ldr	r1, [pc, #36]	; (8013e50 <do_memp_malloc_pool+0x5c>)
 8013e2c:	4809      	ldr	r0, [pc, #36]	; (8013e54 <do_memp_malloc_pool+0x60>)
 8013e2e:	f007 fd2b 	bl	801b888 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f001 fae4 	bl	8015400 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	e003      	b.n	8013e44 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f001 fadf 	bl	8015400 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	0801d5bc 	.word	0x0801d5bc
 8013e50:	0801d628 	.word	0x0801d628
 8013e54:	0801d64c 	.word	0x0801d64c

08013e58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <memp_malloc_pool+0x1c>
 8013e66:	4b0a      	ldr	r3, [pc, #40]	; (8013e90 <memp_malloc_pool+0x38>)
 8013e68:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013e6c:	4909      	ldr	r1, [pc, #36]	; (8013e94 <memp_malloc_pool+0x3c>)
 8013e6e:	480a      	ldr	r0, [pc, #40]	; (8013e98 <memp_malloc_pool+0x40>)
 8013e70:	f007 fd0a 	bl	801b888 <iprintf>
  if (desc == NULL) {
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d101      	bne.n	8013e7e <memp_malloc_pool+0x26>
    return NULL;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	e003      	b.n	8013e86 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7ff ffb8 	bl	8013df4 <do_memp_malloc_pool>
 8013e84:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	0801d5bc 	.word	0x0801d5bc
 8013e94:	0801d674 	.word	0x0801d674
 8013e98:	0801d64c 	.word	0x0801d64c

08013e9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	2b0c      	cmp	r3, #12
 8013eaa:	d908      	bls.n	8013ebe <memp_malloc+0x22>
 8013eac:	4b0a      	ldr	r3, [pc, #40]	; (8013ed8 <memp_malloc+0x3c>)
 8013eae:	f240 1257 	movw	r2, #343	; 0x157
 8013eb2:	490a      	ldr	r1, [pc, #40]	; (8013edc <memp_malloc+0x40>)
 8013eb4:	480a      	ldr	r0, [pc, #40]	; (8013ee0 <memp_malloc+0x44>)
 8013eb6:	f007 fce7 	bl	801b888 <iprintf>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	e008      	b.n	8013ed0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013ebe:	79fb      	ldrb	r3, [r7, #7]
 8013ec0:	4a08      	ldr	r2, [pc, #32]	; (8013ee4 <memp_malloc+0x48>)
 8013ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ff ff94 	bl	8013df4 <do_memp_malloc_pool>
 8013ecc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013ece:	68fb      	ldr	r3, [r7, #12]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3710      	adds	r7, #16
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	0801d5bc 	.word	0x0801d5bc
 8013edc:	0801d688 	.word	0x0801d688
 8013ee0:	0801d64c 	.word	0x0801d64c
 8013ee4:	0801fa28 	.word	0x0801fa28

08013ee8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	f003 0303 	and.w	r3, r3, #3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d006      	beq.n	8013f0a <do_memp_free_pool+0x22>
 8013efc:	4b0d      	ldr	r3, [pc, #52]	; (8013f34 <do_memp_free_pool+0x4c>)
 8013efe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013f02:	490d      	ldr	r1, [pc, #52]	; (8013f38 <do_memp_free_pool+0x50>)
 8013f04:	480d      	ldr	r0, [pc, #52]	; (8013f3c <do_memp_free_pool+0x54>)
 8013f06:	f007 fcbf 	bl	801b888 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013f0e:	f001 fa69 	bl	80153e4 <sys_arch_protect>
 8013f12:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	689b      	ldr	r3, [r3, #8]
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013f26:	68b8      	ldr	r0, [r7, #8]
 8013f28:	f001 fa6a 	bl	8015400 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013f2c:	bf00      	nop
 8013f2e:	3710      	adds	r7, #16
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	0801d5bc 	.word	0x0801d5bc
 8013f38:	0801d6a8 	.word	0x0801d6a8
 8013f3c:	0801d64c 	.word	0x0801d64c

08013f40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d106      	bne.n	8013f5e <memp_free_pool+0x1e>
 8013f50:	4b0a      	ldr	r3, [pc, #40]	; (8013f7c <memp_free_pool+0x3c>)
 8013f52:	f240 1295 	movw	r2, #405	; 0x195
 8013f56:	490a      	ldr	r1, [pc, #40]	; (8013f80 <memp_free_pool+0x40>)
 8013f58:	480a      	ldr	r0, [pc, #40]	; (8013f84 <memp_free_pool+0x44>)
 8013f5a:	f007 fc95 	bl	801b888 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d007      	beq.n	8013f74 <memp_free_pool+0x34>
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d004      	beq.n	8013f74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013f6a:	6839      	ldr	r1, [r7, #0]
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f7ff ffbb 	bl	8013ee8 <do_memp_free_pool>
 8013f72:	e000      	b.n	8013f76 <memp_free_pool+0x36>
    return;
 8013f74:	bf00      	nop
}
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	0801d5bc 	.word	0x0801d5bc
 8013f80:	0801d674 	.word	0x0801d674
 8013f84:	0801d64c 	.word	0x0801d64c

08013f88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6039      	str	r1, [r7, #0]
 8013f92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013f94:	79fb      	ldrb	r3, [r7, #7]
 8013f96:	2b0c      	cmp	r3, #12
 8013f98:	d907      	bls.n	8013faa <memp_free+0x22>
 8013f9a:	4b0c      	ldr	r3, [pc, #48]	; (8013fcc <memp_free+0x44>)
 8013f9c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013fa0:	490b      	ldr	r1, [pc, #44]	; (8013fd0 <memp_free+0x48>)
 8013fa2:	480c      	ldr	r0, [pc, #48]	; (8013fd4 <memp_free+0x4c>)
 8013fa4:	f007 fc70 	bl	801b888 <iprintf>
 8013fa8:	e00c      	b.n	8013fc4 <memp_free+0x3c>

  if (mem == NULL) {
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d008      	beq.n	8013fc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013fb0:	79fb      	ldrb	r3, [r7, #7]
 8013fb2:	4a09      	ldr	r2, [pc, #36]	; (8013fd8 <memp_free+0x50>)
 8013fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fb8:	6839      	ldr	r1, [r7, #0]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7ff ff94 	bl	8013ee8 <do_memp_free_pool>
 8013fc0:	e000      	b.n	8013fc4 <memp_free+0x3c>
    return;
 8013fc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	0801d5bc 	.word	0x0801d5bc
 8013fd0:	0801d6c8 	.word	0x0801d6c8
 8013fd4:	0801d64c 	.word	0x0801d64c
 8013fd8:	0801fa28 	.word	0x0801fa28

08013fdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013fdc:	b480      	push	{r7}
 8013fde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013fe0:	bf00      	nop
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe8:	4770      	bx	lr
	...

08013fec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b086      	sub	sp, #24
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	60b9      	str	r1, [r7, #8]
 8013ff6:	607a      	str	r2, [r7, #4]
 8013ff8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d108      	bne.n	8014012 <netif_add+0x26>
 8014000:	4b5b      	ldr	r3, [pc, #364]	; (8014170 <netif_add+0x184>)
 8014002:	f240 1227 	movw	r2, #295	; 0x127
 8014006:	495b      	ldr	r1, [pc, #364]	; (8014174 <netif_add+0x188>)
 8014008:	485b      	ldr	r0, [pc, #364]	; (8014178 <netif_add+0x18c>)
 801400a:	f007 fc3d 	bl	801b888 <iprintf>
 801400e:	2300      	movs	r3, #0
 8014010:	e0a9      	b.n	8014166 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	2b00      	cmp	r3, #0
 8014016:	d108      	bne.n	801402a <netif_add+0x3e>
 8014018:	4b55      	ldr	r3, [pc, #340]	; (8014170 <netif_add+0x184>)
 801401a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801401e:	4957      	ldr	r1, [pc, #348]	; (801417c <netif_add+0x190>)
 8014020:	4855      	ldr	r0, [pc, #340]	; (8014178 <netif_add+0x18c>)
 8014022:	f007 fc31 	bl	801b888 <iprintf>
 8014026:	2300      	movs	r3, #0
 8014028:	e09d      	b.n	8014166 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d101      	bne.n	8014034 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014030:	4b53      	ldr	r3, [pc, #332]	; (8014180 <netif_add+0x194>)
 8014032:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d101      	bne.n	801403e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801403a:	4b51      	ldr	r3, [pc, #324]	; (8014180 <netif_add+0x194>)
 801403c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d101      	bne.n	8014048 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014044:	4b4e      	ldr	r3, [pc, #312]	; (8014180 <netif_add+0x194>)
 8014046:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2200      	movs	r2, #0
 801404c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2200      	movs	r2, #0
 8014052:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2200      	movs	r2, #0
 8014058:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	4a49      	ldr	r2, [pc, #292]	; (8014184 <netif_add+0x198>)
 801405e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2200      	movs	r2, #0
 8014064:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2200      	movs	r2, #0
 801406a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	3324      	adds	r3, #36	; 0x24
 8014072:	2204      	movs	r2, #4
 8014074:	2100      	movs	r1, #0
 8014076:	4618      	mov	r0, r3
 8014078:	f007 fc6b 	bl	801b952 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	6a3a      	ldr	r2, [r7, #32]
 8014086:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014088:	4b3f      	ldr	r3, [pc, #252]	; (8014188 <netif_add+0x19c>)
 801408a:	781a      	ldrb	r2, [r3, #0]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014096:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	68b9      	ldr	r1, [r7, #8]
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f000 f914 	bl	80142cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80140a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	4798      	blx	r3
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d001      	beq.n	80140b4 <netif_add+0xc8>
    return NULL;
 80140b0:	2300      	movs	r3, #0
 80140b2:	e058      	b.n	8014166 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80140ba:	2bff      	cmp	r3, #255	; 0xff
 80140bc:	d103      	bne.n	80140c6 <netif_add+0xda>
        netif->num = 0;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2200      	movs	r2, #0
 80140c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80140c6:	2300      	movs	r3, #0
 80140c8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80140ca:	4b30      	ldr	r3, [pc, #192]	; (801418c <netif_add+0x1a0>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	617b      	str	r3, [r7, #20]
 80140d0:	e02b      	b.n	801412a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80140d2:	697a      	ldr	r2, [r7, #20]
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d106      	bne.n	80140e8 <netif_add+0xfc>
 80140da:	4b25      	ldr	r3, [pc, #148]	; (8014170 <netif_add+0x184>)
 80140dc:	f240 128b 	movw	r2, #395	; 0x18b
 80140e0:	492b      	ldr	r1, [pc, #172]	; (8014190 <netif_add+0x1a4>)
 80140e2:	4825      	ldr	r0, [pc, #148]	; (8014178 <netif_add+0x18c>)
 80140e4:	f007 fbd0 	bl	801b888 <iprintf>
        num_netifs++;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	3301      	adds	r3, #1
 80140ec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	2bff      	cmp	r3, #255	; 0xff
 80140f2:	dd06      	ble.n	8014102 <netif_add+0x116>
 80140f4:	4b1e      	ldr	r3, [pc, #120]	; (8014170 <netif_add+0x184>)
 80140f6:	f240 128d 	movw	r2, #397	; 0x18d
 80140fa:	4926      	ldr	r1, [pc, #152]	; (8014194 <netif_add+0x1a8>)
 80140fc:	481e      	ldr	r0, [pc, #120]	; (8014178 <netif_add+0x18c>)
 80140fe:	f007 fbc3 	bl	801b888 <iprintf>
        if (netif2->num == netif->num) {
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801410e:	429a      	cmp	r2, r3
 8014110:	d108      	bne.n	8014124 <netif_add+0x138>
          netif->num++;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014118:	3301      	adds	r3, #1
 801411a:	b2da      	uxtb	r2, r3
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8014122:	e005      	b.n	8014130 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	617b      	str	r3, [r7, #20]
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d1d0      	bne.n	80140d2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d1be      	bne.n	80140b4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801413c:	2bfe      	cmp	r3, #254	; 0xfe
 801413e:	d103      	bne.n	8014148 <netif_add+0x15c>
    netif_num = 0;
 8014140:	4b11      	ldr	r3, [pc, #68]	; (8014188 <netif_add+0x19c>)
 8014142:	2200      	movs	r2, #0
 8014144:	701a      	strb	r2, [r3, #0]
 8014146:	e006      	b.n	8014156 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801414e:	3301      	adds	r3, #1
 8014150:	b2da      	uxtb	r2, r3
 8014152:	4b0d      	ldr	r3, [pc, #52]	; (8014188 <netif_add+0x19c>)
 8014154:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014156:	4b0d      	ldr	r3, [pc, #52]	; (801418c <netif_add+0x1a0>)
 8014158:	681a      	ldr	r2, [r3, #0]
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801415e:	4a0b      	ldr	r2, [pc, #44]	; (801418c <netif_add+0x1a0>)
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014164:	68fb      	ldr	r3, [r7, #12]
}
 8014166:	4618      	mov	r0, r3
 8014168:	3718      	adds	r7, #24
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop
 8014170:	0801d6e4 	.word	0x0801d6e4
 8014174:	0801d7b0 	.word	0x0801d7b0
 8014178:	0801d76c 	.word	0x0801d76c
 801417c:	0801d7cc 	.word	0x0801d7cc
 8014180:	0801f984 	.word	0x0801f984
 8014184:	080145af 	.word	0x080145af
 8014188:	2400c970 	.word	0x2400c970
 801418c:	2400c968 	.word	0x2400c968
 8014190:	0801d7f0 	.word	0x0801d7f0
 8014194:	0801d804 	.word	0x0801d804

08014198 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f002 fc83 	bl	8016ab0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80141aa:	6839      	ldr	r1, [r7, #0]
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f007 fa3b 	bl	801b628 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80141b2:	bf00      	nop
 80141b4:	3708      	adds	r7, #8
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
	...

080141bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b086      	sub	sp, #24
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d106      	bne.n	80141dc <netif_do_set_ipaddr+0x20>
 80141ce:	4b1d      	ldr	r3, [pc, #116]	; (8014244 <netif_do_set_ipaddr+0x88>)
 80141d0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80141d4:	491c      	ldr	r1, [pc, #112]	; (8014248 <netif_do_set_ipaddr+0x8c>)
 80141d6:	481d      	ldr	r0, [pc, #116]	; (801424c <netif_do_set_ipaddr+0x90>)
 80141d8:	f007 fb56 	bl	801b888 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <netif_do_set_ipaddr+0x34>
 80141e2:	4b18      	ldr	r3, [pc, #96]	; (8014244 <netif_do_set_ipaddr+0x88>)
 80141e4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80141e8:	4917      	ldr	r1, [pc, #92]	; (8014248 <netif_do_set_ipaddr+0x8c>)
 80141ea:	4818      	ldr	r0, [pc, #96]	; (801424c <netif_do_set_ipaddr+0x90>)
 80141ec:	f007 fb4c 	bl	801b888 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	681a      	ldr	r2, [r3, #0]
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	3304      	adds	r3, #4
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d01c      	beq.n	8014238 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	3304      	adds	r3, #4
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801420e:	f107 0314 	add.w	r3, r7, #20
 8014212:	4619      	mov	r1, r3
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f7ff ffbf 	bl	8014198 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d002      	beq.n	8014226 <netif_do_set_ipaddr+0x6a>
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	e000      	b.n	8014228 <netif_do_set_ipaddr+0x6c>
 8014226:	2300      	movs	r3, #0
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801422c:	2101      	movs	r1, #1
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f000 f8d2 	bl	80143d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014234:	2301      	movs	r3, #1
 8014236:	e000      	b.n	801423a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014238:	2300      	movs	r3, #0
}
 801423a:	4618      	mov	r0, r3
 801423c:	3718      	adds	r7, #24
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	0801d6e4 	.word	0x0801d6e4
 8014248:	0801d834 	.word	0x0801d834
 801424c:	0801d76c 	.word	0x0801d76c

08014250 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014250:	b480      	push	{r7}
 8014252:	b085      	sub	sp, #20
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	3308      	adds	r3, #8
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	429a      	cmp	r2, r3
 8014268:	d00a      	beq.n	8014280 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d002      	beq.n	8014276 <netif_do_set_netmask+0x26>
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	e000      	b.n	8014278 <netif_do_set_netmask+0x28>
 8014276:	2300      	movs	r3, #0
 8014278:	68fa      	ldr	r2, [r7, #12]
 801427a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801427c:	2301      	movs	r3, #1
 801427e:	e000      	b.n	8014282 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014280:	2300      	movs	r3, #0
}
 8014282:	4618      	mov	r0, r3
 8014284:	3714      	adds	r7, #20
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr

0801428e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801428e:	b480      	push	{r7}
 8014290:	b085      	sub	sp, #20
 8014292:	af00      	add	r7, sp, #0
 8014294:	60f8      	str	r0, [r7, #12]
 8014296:	60b9      	str	r1, [r7, #8]
 8014298:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	330c      	adds	r3, #12
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d00a      	beq.n	80142be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d002      	beq.n	80142b4 <netif_do_set_gw+0x26>
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	e000      	b.n	80142b6 <netif_do_set_gw+0x28>
 80142b4:	2300      	movs	r3, #0
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80142ba:	2301      	movs	r3, #1
 80142bc:	e000      	b.n	80142c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3714      	adds	r7, #20
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr

080142cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b088      	sub	sp, #32
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
 80142d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80142da:	2300      	movs	r3, #0
 80142dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80142de:	2300      	movs	r3, #0
 80142e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80142e8:	4b1c      	ldr	r3, [pc, #112]	; (801435c <netif_set_addr+0x90>)
 80142ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d101      	bne.n	80142f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80142f2:	4b1a      	ldr	r3, [pc, #104]	; (801435c <netif_set_addr+0x90>)
 80142f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d101      	bne.n	8014300 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80142fc:	4b17      	ldr	r3, [pc, #92]	; (801435c <netif_set_addr+0x90>)
 80142fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d003      	beq.n	801430e <netif_set_addr+0x42>
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <netif_set_addr+0x46>
 801430e:	2301      	movs	r3, #1
 8014310:	e000      	b.n	8014314 <netif_set_addr+0x48>
 8014312:	2300      	movs	r3, #0
 8014314:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d006      	beq.n	801432a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801431c:	f107 0310 	add.w	r3, r7, #16
 8014320:	461a      	mov	r2, r3
 8014322:	68b9      	ldr	r1, [r7, #8]
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f7ff ff49 	bl	80141bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801432a:	69fa      	ldr	r2, [r7, #28]
 801432c:	6879      	ldr	r1, [r7, #4]
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff ff8e 	bl	8014250 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014334:	69ba      	ldr	r2, [r7, #24]
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	f7ff ffa8 	bl	801428e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d106      	bne.n	8014352 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014344:	f107 0310 	add.w	r3, r7, #16
 8014348:	461a      	mov	r2, r3
 801434a:	68b9      	ldr	r1, [r7, #8]
 801434c:	68f8      	ldr	r0, [r7, #12]
 801434e:	f7ff ff35 	bl	80141bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014352:	bf00      	nop
 8014354:	3720      	adds	r7, #32
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	0801f984 	.word	0x0801f984

08014360 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014368:	4a04      	ldr	r2, [pc, #16]	; (801437c <netif_set_default+0x1c>)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801436e:	bf00      	nop
 8014370:	370c      	adds	r7, #12
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	2400c96c 	.word	0x2400c96c

08014380 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d107      	bne.n	801439e <netif_set_up+0x1e>
 801438e:	4b0f      	ldr	r3, [pc, #60]	; (80143cc <netif_set_up+0x4c>)
 8014390:	f44f 7254 	mov.w	r2, #848	; 0x350
 8014394:	490e      	ldr	r1, [pc, #56]	; (80143d0 <netif_set_up+0x50>)
 8014396:	480f      	ldr	r0, [pc, #60]	; (80143d4 <netif_set_up+0x54>)
 8014398:	f007 fa76 	bl	801b888 <iprintf>
 801439c:	e013      	b.n	80143c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143a4:	f003 0301 	and.w	r3, r3, #1
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d10c      	bne.n	80143c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143b2:	f043 0301 	orr.w	r3, r3, #1
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80143be:	2103      	movs	r1, #3
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 f809 	bl	80143d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	0801d6e4 	.word	0x0801d6e4
 80143d0:	0801d8a4 	.word	0x0801d8a4
 80143d4:	0801d76c 	.word	0x0801d76c

080143d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	460b      	mov	r3, r1
 80143e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d106      	bne.n	80143f8 <netif_issue_reports+0x20>
 80143ea:	4b18      	ldr	r3, [pc, #96]	; (801444c <netif_issue_reports+0x74>)
 80143ec:	f240 326d 	movw	r2, #877	; 0x36d
 80143f0:	4917      	ldr	r1, [pc, #92]	; (8014450 <netif_issue_reports+0x78>)
 80143f2:	4818      	ldr	r0, [pc, #96]	; (8014454 <netif_issue_reports+0x7c>)
 80143f4:	f007 fa48 	bl	801b888 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143fe:	f003 0304 	and.w	r3, r3, #4
 8014402:	2b00      	cmp	r3, #0
 8014404:	d01e      	beq.n	8014444 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801440c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014410:	2b00      	cmp	r3, #0
 8014412:	d017      	beq.n	8014444 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014414:	78fb      	ldrb	r3, [r7, #3]
 8014416:	f003 0301 	and.w	r3, r3, #1
 801441a:	2b00      	cmp	r3, #0
 801441c:	d013      	beq.n	8014446 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	3304      	adds	r3, #4
 8014422:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014424:	2b00      	cmp	r3, #0
 8014426:	d00e      	beq.n	8014446 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801442e:	f003 0308 	and.w	r3, r3, #8
 8014432:	2b00      	cmp	r3, #0
 8014434:	d007      	beq.n	8014446 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	3304      	adds	r3, #4
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7fd fbfb 	bl	8011c38 <etharp_request>
 8014442:	e000      	b.n	8014446 <netif_issue_reports+0x6e>
    return;
 8014444:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	0801d6e4 	.word	0x0801d6e4
 8014450:	0801d8c0 	.word	0x0801d8c0
 8014454:	0801d76c 	.word	0x0801d76c

08014458 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d107      	bne.n	8014476 <netif_set_down+0x1e>
 8014466:	4b12      	ldr	r3, [pc, #72]	; (80144b0 <netif_set_down+0x58>)
 8014468:	f240 329b 	movw	r2, #923	; 0x39b
 801446c:	4911      	ldr	r1, [pc, #68]	; (80144b4 <netif_set_down+0x5c>)
 801446e:	4812      	ldr	r0, [pc, #72]	; (80144b8 <netif_set_down+0x60>)
 8014470:	f007 fa0a 	bl	801b888 <iprintf>
 8014474:	e019      	b.n	80144aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801447c:	f003 0301 	and.w	r3, r3, #1
 8014480:	2b00      	cmp	r3, #0
 8014482:	d012      	beq.n	80144aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801448a:	f023 0301 	bic.w	r3, r3, #1
 801448e:	b2da      	uxtb	r2, r3
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801449c:	f003 0308 	and.w	r3, r3, #8
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d002      	beq.n	80144aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f7fc ff81 	bl	80113ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80144aa:	3708      	adds	r7, #8
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	0801d6e4 	.word	0x0801d6e4
 80144b4:	0801d8e4 	.word	0x0801d8e4
 80144b8:	0801d76c 	.word	0x0801d76c

080144bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d107      	bne.n	80144da <netif_set_link_up+0x1e>
 80144ca:	4b15      	ldr	r3, [pc, #84]	; (8014520 <netif_set_link_up+0x64>)
 80144cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80144d0:	4914      	ldr	r1, [pc, #80]	; (8014524 <netif_set_link_up+0x68>)
 80144d2:	4815      	ldr	r0, [pc, #84]	; (8014528 <netif_set_link_up+0x6c>)
 80144d4:	f007 f9d8 	bl	801b888 <iprintf>
 80144d8:	e01e      	b.n	8014518 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144e0:	f003 0304 	and.w	r3, r3, #4
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d117      	bne.n	8014518 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144ee:	f043 0304 	orr.w	r3, r3, #4
 80144f2:	b2da      	uxtb	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7fb f9c6 	bl	800f88c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014500:	2103      	movs	r1, #3
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7ff ff68 	bl	80143d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	69db      	ldr	r3, [r3, #28]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d003      	beq.n	8014518 <netif_set_link_up+0x5c>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	69db      	ldr	r3, [r3, #28]
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	0801d6e4 	.word	0x0801d6e4
 8014524:	0801d904 	.word	0x0801d904
 8014528:	0801d76c 	.word	0x0801d76c

0801452c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d107      	bne.n	801454a <netif_set_link_down+0x1e>
 801453a:	4b11      	ldr	r3, [pc, #68]	; (8014580 <netif_set_link_down+0x54>)
 801453c:	f240 4206 	movw	r2, #1030	; 0x406
 8014540:	4910      	ldr	r1, [pc, #64]	; (8014584 <netif_set_link_down+0x58>)
 8014542:	4811      	ldr	r0, [pc, #68]	; (8014588 <netif_set_link_down+0x5c>)
 8014544:	f007 f9a0 	bl	801b888 <iprintf>
 8014548:	e017      	b.n	801457a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014550:	f003 0304 	and.w	r3, r3, #4
 8014554:	2b00      	cmp	r3, #0
 8014556:	d010      	beq.n	801457a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801455e:	f023 0304 	bic.w	r3, r3, #4
 8014562:	b2da      	uxtb	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	69db      	ldr	r3, [r3, #28]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <netif_set_link_down+0x4e>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	69db      	ldr	r3, [r3, #28]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	0801d6e4 	.word	0x0801d6e4
 8014584:	0801d928 	.word	0x0801d928
 8014588:	0801d76c 	.word	0x0801d76c

0801458c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d002      	beq.n	80145a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	683a      	ldr	r2, [r7, #0]
 80145a0:	61da      	str	r2, [r3, #28]
  }
}
 80145a2:	bf00      	nop
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80145ae:	b480      	push	{r7}
 80145b0:	b085      	sub	sp, #20
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	60f8      	str	r0, [r7, #12]
 80145b6:	60b9      	str	r1, [r7, #8]
 80145b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80145ba:	f06f 030b 	mvn.w	r3, #11
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3714      	adds	r7, #20
 80145c2:	46bd      	mov	sp, r7
 80145c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c8:	4770      	bx	lr
	...

080145cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	4603      	mov	r3, r0
 80145d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80145d6:	79fb      	ldrb	r3, [r7, #7]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d013      	beq.n	8014604 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80145dc:	4b0d      	ldr	r3, [pc, #52]	; (8014614 <netif_get_by_index+0x48>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	60fb      	str	r3, [r7, #12]
 80145e2:	e00c      	b.n	80145fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80145ea:	3301      	adds	r3, #1
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	79fa      	ldrb	r2, [r7, #7]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d101      	bne.n	80145f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	e006      	b.n	8014606 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	60fb      	str	r3, [r7, #12]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1ef      	bne.n	80145e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3714      	adds	r7, #20
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop
 8014614:	2400c968 	.word	0x2400c968

08014618 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801461e:	f000 fee1 	bl	80153e4 <sys_arch_protect>
 8014622:	6038      	str	r0, [r7, #0]
 8014624:	4b0d      	ldr	r3, [pc, #52]	; (801465c <pbuf_free_ooseq+0x44>)
 8014626:	2200      	movs	r2, #0
 8014628:	701a      	strb	r2, [r3, #0]
 801462a:	6838      	ldr	r0, [r7, #0]
 801462c:	f000 fee8 	bl	8015400 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014630:	4b0b      	ldr	r3, [pc, #44]	; (8014660 <pbuf_free_ooseq+0x48>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	607b      	str	r3, [r7, #4]
 8014636:	e00a      	b.n	801464e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801463c:	2b00      	cmp	r3, #0
 801463e:	d003      	beq.n	8014648 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f002 fa73 	bl	8016b2c <tcp_free_ooseq>
      return;
 8014646:	e005      	b.n	8014654 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	607b      	str	r3, [r7, #4]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d1f1      	bne.n	8014638 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014654:	3708      	adds	r7, #8
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	2400c971 	.word	0x2400c971
 8014660:	2400c988 	.word	0x2400c988

08014664 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801466c:	f7ff ffd4 	bl	8014618 <pbuf_free_ooseq>
}
 8014670:	bf00      	nop
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801467e:	f000 feb1 	bl	80153e4 <sys_arch_protect>
 8014682:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014684:	4b0f      	ldr	r3, [pc, #60]	; (80146c4 <pbuf_pool_is_empty+0x4c>)
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801468a:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <pbuf_pool_is_empty+0x4c>)
 801468c:	2201      	movs	r2, #1
 801468e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f000 feb5 	bl	8015400 <sys_arch_unprotect>

  if (!queued) {
 8014696:	78fb      	ldrb	r3, [r7, #3]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10f      	bne.n	80146bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801469c:	2100      	movs	r1, #0
 801469e:	480a      	ldr	r0, [pc, #40]	; (80146c8 <pbuf_pool_is_empty+0x50>)
 80146a0:	f006 f90e 	bl	801a8c0 <tcpip_try_callback>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d008      	beq.n	80146bc <pbuf_pool_is_empty+0x44>
 80146aa:	f000 fe9b 	bl	80153e4 <sys_arch_protect>
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	4b04      	ldr	r3, [pc, #16]	; (80146c4 <pbuf_pool_is_empty+0x4c>)
 80146b2:	2200      	movs	r2, #0
 80146b4:	701a      	strb	r2, [r3, #0]
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 fea2 	bl	8015400 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80146bc:	bf00      	nop
 80146be:	3708      	adds	r7, #8
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	2400c971 	.word	0x2400c971
 80146c8:	08014665 	.word	0x08014665

080146cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	4611      	mov	r1, r2
 80146d8:	461a      	mov	r2, r3
 80146da:	460b      	mov	r3, r1
 80146dc:	80fb      	strh	r3, [r7, #6]
 80146de:	4613      	mov	r3, r2
 80146e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2200      	movs	r2, #0
 80146e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	88fa      	ldrh	r2, [r7, #6]
 80146f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	88ba      	ldrh	r2, [r7, #4]
 80146f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80146fa:	8b3b      	ldrh	r3, [r7, #24]
 80146fc:	b2da      	uxtb	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	7f3a      	ldrb	r2, [r7, #28]
 8014706:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2201      	movs	r2, #1
 801470c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2200      	movs	r2, #0
 8014712:	73da      	strb	r2, [r3, #15]
}
 8014714:	bf00      	nop
 8014716:	3714      	adds	r7, #20
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr

08014720 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b08c      	sub	sp, #48	; 0x30
 8014724:	af02      	add	r7, sp, #8
 8014726:	4603      	mov	r3, r0
 8014728:	71fb      	strb	r3, [r7, #7]
 801472a:	460b      	mov	r3, r1
 801472c:	80bb      	strh	r3, [r7, #4]
 801472e:	4613      	mov	r3, r2
 8014730:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014732:	79fb      	ldrb	r3, [r7, #7]
 8014734:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014736:	887b      	ldrh	r3, [r7, #2]
 8014738:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801473c:	d07f      	beq.n	801483e <pbuf_alloc+0x11e>
 801473e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014742:	f300 80c8 	bgt.w	80148d6 <pbuf_alloc+0x1b6>
 8014746:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801474a:	d010      	beq.n	801476e <pbuf_alloc+0x4e>
 801474c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014750:	f300 80c1 	bgt.w	80148d6 <pbuf_alloc+0x1b6>
 8014754:	2b01      	cmp	r3, #1
 8014756:	d002      	beq.n	801475e <pbuf_alloc+0x3e>
 8014758:	2b41      	cmp	r3, #65	; 0x41
 801475a:	f040 80bc 	bne.w	80148d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801475e:	887a      	ldrh	r2, [r7, #2]
 8014760:	88bb      	ldrh	r3, [r7, #4]
 8014762:	4619      	mov	r1, r3
 8014764:	2000      	movs	r0, #0
 8014766:	f000 f8d1 	bl	801490c <pbuf_alloc_reference>
 801476a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801476c:	e0bd      	b.n	80148ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801476e:	2300      	movs	r3, #0
 8014770:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014772:	2300      	movs	r3, #0
 8014774:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014776:	88bb      	ldrh	r3, [r7, #4]
 8014778:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801477a:	200c      	movs	r0, #12
 801477c:	f7ff fb8e 	bl	8013e9c <memp_malloc>
 8014780:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d109      	bne.n	801479c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014788:	f7ff ff76 	bl	8014678 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	2b00      	cmp	r3, #0
 8014790:	d002      	beq.n	8014798 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014794:	f000 faa8 	bl	8014ce8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014798:	2300      	movs	r3, #0
 801479a:	e0a7      	b.n	80148ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801479c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801479e:	3303      	adds	r3, #3
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	f023 0303 	bic.w	r3, r3, #3
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	8b7a      	ldrh	r2, [r7, #26]
 80147b0:	4293      	cmp	r3, r2
 80147b2:	bf28      	it	cs
 80147b4:	4613      	movcs	r3, r2
 80147b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80147b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147ba:	3310      	adds	r3, #16
 80147bc:	693a      	ldr	r2, [r7, #16]
 80147be:	4413      	add	r3, r2
 80147c0:	3303      	adds	r3, #3
 80147c2:	f023 0303 	bic.w	r3, r3, #3
 80147c6:	4618      	mov	r0, r3
 80147c8:	89f9      	ldrh	r1, [r7, #14]
 80147ca:	8b7a      	ldrh	r2, [r7, #26]
 80147cc:	2300      	movs	r3, #0
 80147ce:	9301      	str	r3, [sp, #4]
 80147d0:	887b      	ldrh	r3, [r7, #2]
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	460b      	mov	r3, r1
 80147d6:	4601      	mov	r1, r0
 80147d8:	6938      	ldr	r0, [r7, #16]
 80147da:	f7ff ff77 	bl	80146cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	f003 0303 	and.w	r3, r3, #3
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d006      	beq.n	80147f8 <pbuf_alloc+0xd8>
 80147ea:	4b42      	ldr	r3, [pc, #264]	; (80148f4 <pbuf_alloc+0x1d4>)
 80147ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80147f0:	4941      	ldr	r1, [pc, #260]	; (80148f8 <pbuf_alloc+0x1d8>)
 80147f2:	4842      	ldr	r0, [pc, #264]	; (80148fc <pbuf_alloc+0x1dc>)
 80147f4:	f007 f848 	bl	801b888 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80147f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147fa:	3303      	adds	r3, #3
 80147fc:	f023 0303 	bic.w	r3, r3, #3
 8014800:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014804:	d106      	bne.n	8014814 <pbuf_alloc+0xf4>
 8014806:	4b3b      	ldr	r3, [pc, #236]	; (80148f4 <pbuf_alloc+0x1d4>)
 8014808:	f44f 7281 	mov.w	r2, #258	; 0x102
 801480c:	493c      	ldr	r1, [pc, #240]	; (8014900 <pbuf_alloc+0x1e0>)
 801480e:	483b      	ldr	r0, [pc, #236]	; (80148fc <pbuf_alloc+0x1dc>)
 8014810:	f007 f83a 	bl	801b888 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014816:	2b00      	cmp	r3, #0
 8014818:	d102      	bne.n	8014820 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	627b      	str	r3, [r7, #36]	; 0x24
 801481e:	e002      	b.n	8014826 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	693a      	ldr	r2, [r7, #16]
 8014824:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801482a:	8b7a      	ldrh	r2, [r7, #26]
 801482c:	89fb      	ldrh	r3, [r7, #14]
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014832:	2300      	movs	r3, #0
 8014834:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014836:	8b7b      	ldrh	r3, [r7, #26]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d19e      	bne.n	801477a <pbuf_alloc+0x5a>
      break;
 801483c:	e055      	b.n	80148ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801483e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014840:	3303      	adds	r3, #3
 8014842:	b29b      	uxth	r3, r3
 8014844:	f023 0303 	bic.w	r3, r3, #3
 8014848:	b29a      	uxth	r2, r3
 801484a:	88bb      	ldrh	r3, [r7, #4]
 801484c:	3303      	adds	r3, #3
 801484e:	b29b      	uxth	r3, r3
 8014850:	f023 0303 	bic.w	r3, r3, #3
 8014854:	b29b      	uxth	r3, r3
 8014856:	4413      	add	r3, r2
 8014858:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801485a:	8b3b      	ldrh	r3, [r7, #24]
 801485c:	3310      	adds	r3, #16
 801485e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014860:	8b3a      	ldrh	r2, [r7, #24]
 8014862:	88bb      	ldrh	r3, [r7, #4]
 8014864:	3303      	adds	r3, #3
 8014866:	f023 0303 	bic.w	r3, r3, #3
 801486a:	429a      	cmp	r2, r3
 801486c:	d306      	bcc.n	801487c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801486e:	8afa      	ldrh	r2, [r7, #22]
 8014870:	88bb      	ldrh	r3, [r7, #4]
 8014872:	3303      	adds	r3, #3
 8014874:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014878:	429a      	cmp	r2, r3
 801487a:	d201      	bcs.n	8014880 <pbuf_alloc+0x160>
        return NULL;
 801487c:	2300      	movs	r3, #0
 801487e:	e035      	b.n	80148ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014880:	8afb      	ldrh	r3, [r7, #22]
 8014882:	4618      	mov	r0, r3
 8014884:	f7ff f966 	bl	8013b54 <mem_malloc>
 8014888:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488c:	2b00      	cmp	r3, #0
 801488e:	d101      	bne.n	8014894 <pbuf_alloc+0x174>
        return NULL;
 8014890:	2300      	movs	r3, #0
 8014892:	e02b      	b.n	80148ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014896:	3310      	adds	r3, #16
 8014898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801489a:	4413      	add	r3, r2
 801489c:	3303      	adds	r3, #3
 801489e:	f023 0303 	bic.w	r3, r3, #3
 80148a2:	4618      	mov	r0, r3
 80148a4:	88b9      	ldrh	r1, [r7, #4]
 80148a6:	88ba      	ldrh	r2, [r7, #4]
 80148a8:	2300      	movs	r3, #0
 80148aa:	9301      	str	r3, [sp, #4]
 80148ac:	887b      	ldrh	r3, [r7, #2]
 80148ae:	9300      	str	r3, [sp, #0]
 80148b0:	460b      	mov	r3, r1
 80148b2:	4601      	mov	r1, r0
 80148b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148b6:	f7ff ff09 	bl	80146cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80148ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	f003 0303 	and.w	r3, r3, #3
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d010      	beq.n	80148e8 <pbuf_alloc+0x1c8>
 80148c6:	4b0b      	ldr	r3, [pc, #44]	; (80148f4 <pbuf_alloc+0x1d4>)
 80148c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80148cc:	490d      	ldr	r1, [pc, #52]	; (8014904 <pbuf_alloc+0x1e4>)
 80148ce:	480b      	ldr	r0, [pc, #44]	; (80148fc <pbuf_alloc+0x1dc>)
 80148d0:	f006 ffda 	bl	801b888 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80148d4:	e008      	b.n	80148e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80148d6:	4b07      	ldr	r3, [pc, #28]	; (80148f4 <pbuf_alloc+0x1d4>)
 80148d8:	f240 1227 	movw	r2, #295	; 0x127
 80148dc:	490a      	ldr	r1, [pc, #40]	; (8014908 <pbuf_alloc+0x1e8>)
 80148de:	4807      	ldr	r0, [pc, #28]	; (80148fc <pbuf_alloc+0x1dc>)
 80148e0:	f006 ffd2 	bl	801b888 <iprintf>
      return NULL;
 80148e4:	2300      	movs	r3, #0
 80148e6:	e001      	b.n	80148ec <pbuf_alloc+0x1cc>
      break;
 80148e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3728      	adds	r7, #40	; 0x28
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	0801d94c 	.word	0x0801d94c
 80148f8:	0801d9b8 	.word	0x0801d9b8
 80148fc:	0801d9e8 	.word	0x0801d9e8
 8014900:	0801da10 	.word	0x0801da10
 8014904:	0801da44 	.word	0x0801da44
 8014908:	0801da70 	.word	0x0801da70

0801490c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b086      	sub	sp, #24
 8014910:	af02      	add	r7, sp, #8
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	460b      	mov	r3, r1
 8014916:	807b      	strh	r3, [r7, #2]
 8014918:	4613      	mov	r3, r2
 801491a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801491c:	883b      	ldrh	r3, [r7, #0]
 801491e:	2b41      	cmp	r3, #65	; 0x41
 8014920:	d009      	beq.n	8014936 <pbuf_alloc_reference+0x2a>
 8014922:	883b      	ldrh	r3, [r7, #0]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d006      	beq.n	8014936 <pbuf_alloc_reference+0x2a>
 8014928:	4b0f      	ldr	r3, [pc, #60]	; (8014968 <pbuf_alloc_reference+0x5c>)
 801492a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801492e:	490f      	ldr	r1, [pc, #60]	; (801496c <pbuf_alloc_reference+0x60>)
 8014930:	480f      	ldr	r0, [pc, #60]	; (8014970 <pbuf_alloc_reference+0x64>)
 8014932:	f006 ffa9 	bl	801b888 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014936:	200b      	movs	r0, #11
 8014938:	f7ff fab0 	bl	8013e9c <memp_malloc>
 801493c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d101      	bne.n	8014948 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014944:	2300      	movs	r3, #0
 8014946:	e00b      	b.n	8014960 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014948:	8879      	ldrh	r1, [r7, #2]
 801494a:	887a      	ldrh	r2, [r7, #2]
 801494c:	2300      	movs	r3, #0
 801494e:	9301      	str	r3, [sp, #4]
 8014950:	883b      	ldrh	r3, [r7, #0]
 8014952:	9300      	str	r3, [sp, #0]
 8014954:	460b      	mov	r3, r1
 8014956:	6879      	ldr	r1, [r7, #4]
 8014958:	68f8      	ldr	r0, [r7, #12]
 801495a:	f7ff feb7 	bl	80146cc <pbuf_init_alloced_pbuf>
  return p;
 801495e:	68fb      	ldr	r3, [r7, #12]
}
 8014960:	4618      	mov	r0, r3
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	0801d94c 	.word	0x0801d94c
 801496c:	0801da8c 	.word	0x0801da8c
 8014970:	0801d9e8 	.word	0x0801d9e8

08014974 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b088      	sub	sp, #32
 8014978:	af02      	add	r7, sp, #8
 801497a:	607b      	str	r3, [r7, #4]
 801497c:	4603      	mov	r3, r0
 801497e:	73fb      	strb	r3, [r7, #15]
 8014980:	460b      	mov	r3, r1
 8014982:	81bb      	strh	r3, [r7, #12]
 8014984:	4613      	mov	r3, r2
 8014986:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014988:	7bfb      	ldrb	r3, [r7, #15]
 801498a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801498c:	8a7b      	ldrh	r3, [r7, #18]
 801498e:	3303      	adds	r3, #3
 8014990:	f023 0203 	bic.w	r2, r3, #3
 8014994:	89bb      	ldrh	r3, [r7, #12]
 8014996:	441a      	add	r2, r3
 8014998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801499a:	429a      	cmp	r2, r3
 801499c:	d901      	bls.n	80149a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801499e:	2300      	movs	r3, #0
 80149a0:	e018      	b.n	80149d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d007      	beq.n	80149b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80149a8:	8a7b      	ldrh	r3, [r7, #18]
 80149aa:	3303      	adds	r3, #3
 80149ac:	f023 0303 	bic.w	r3, r3, #3
 80149b0:	6a3a      	ldr	r2, [r7, #32]
 80149b2:	4413      	add	r3, r2
 80149b4:	617b      	str	r3, [r7, #20]
 80149b6:	e001      	b.n	80149bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80149b8:	2300      	movs	r3, #0
 80149ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	89b9      	ldrh	r1, [r7, #12]
 80149c0:	89ba      	ldrh	r2, [r7, #12]
 80149c2:	2302      	movs	r3, #2
 80149c4:	9301      	str	r3, [sp, #4]
 80149c6:	897b      	ldrh	r3, [r7, #10]
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	460b      	mov	r3, r1
 80149cc:	6979      	ldr	r1, [r7, #20]
 80149ce:	f7ff fe7d 	bl	80146cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80149d2:	687b      	ldr	r3, [r7, #4]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3718      	adds	r7, #24
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	460b      	mov	r3, r1
 80149e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d106      	bne.n	80149fc <pbuf_realloc+0x20>
 80149ee:	4b3a      	ldr	r3, [pc, #232]	; (8014ad8 <pbuf_realloc+0xfc>)
 80149f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80149f4:	4939      	ldr	r1, [pc, #228]	; (8014adc <pbuf_realloc+0x100>)
 80149f6:	483a      	ldr	r0, [pc, #232]	; (8014ae0 <pbuf_realloc+0x104>)
 80149f8:	f006 ff46 	bl	801b888 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	891b      	ldrh	r3, [r3, #8]
 8014a00:	887a      	ldrh	r2, [r7, #2]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d263      	bcs.n	8014ace <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	891a      	ldrh	r2, [r3, #8]
 8014a0a:	887b      	ldrh	r3, [r7, #2]
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014a10:	887b      	ldrh	r3, [r7, #2]
 8014a12:	817b      	strh	r3, [r7, #10]
  q = p;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014a18:	e018      	b.n	8014a4c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	895b      	ldrh	r3, [r3, #10]
 8014a1e:	897a      	ldrh	r2, [r7, #10]
 8014a20:	1ad3      	subs	r3, r2, r3
 8014a22:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	891a      	ldrh	r2, [r3, #8]
 8014a28:	893b      	ldrh	r3, [r7, #8]
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	b29a      	uxth	r2, r3
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d106      	bne.n	8014a4c <pbuf_realloc+0x70>
 8014a3e:	4b26      	ldr	r3, [pc, #152]	; (8014ad8 <pbuf_realloc+0xfc>)
 8014a40:	f240 12af 	movw	r2, #431	; 0x1af
 8014a44:	4927      	ldr	r1, [pc, #156]	; (8014ae4 <pbuf_realloc+0x108>)
 8014a46:	4826      	ldr	r0, [pc, #152]	; (8014ae0 <pbuf_realloc+0x104>)
 8014a48:	f006 ff1e 	bl	801b888 <iprintf>
  while (rem_len > q->len) {
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	895b      	ldrh	r3, [r3, #10]
 8014a50:	897a      	ldrh	r2, [r7, #10]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d8e1      	bhi.n	8014a1a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	7b1b      	ldrb	r3, [r3, #12]
 8014a5a:	f003 030f 	and.w	r3, r3, #15
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d121      	bne.n	8014aa6 <pbuf_realloc+0xca>
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	895b      	ldrh	r3, [r3, #10]
 8014a66:	897a      	ldrh	r2, [r7, #10]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d01c      	beq.n	8014aa6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	7b5b      	ldrb	r3, [r3, #13]
 8014a70:	f003 0302 	and.w	r3, r3, #2
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d116      	bne.n	8014aa6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	685a      	ldr	r2, [r3, #4]
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	897b      	ldrh	r3, [r7, #10]
 8014a84:	4413      	add	r3, r2
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	4619      	mov	r1, r3
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f7fe ff58 	bl	8013940 <mem_trim>
 8014a90:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d106      	bne.n	8014aa6 <pbuf_realloc+0xca>
 8014a98:	4b0f      	ldr	r3, [pc, #60]	; (8014ad8 <pbuf_realloc+0xfc>)
 8014a9a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014a9e:	4912      	ldr	r1, [pc, #72]	; (8014ae8 <pbuf_realloc+0x10c>)
 8014aa0:	480f      	ldr	r0, [pc, #60]	; (8014ae0 <pbuf_realloc+0x104>)
 8014aa2:	f006 fef1 	bl	801b888 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	897a      	ldrh	r2, [r7, #10]
 8014aaa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	895a      	ldrh	r2, [r3, #10]
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d004      	beq.n	8014ac6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f000 f911 	bl	8014ce8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	601a      	str	r2, [r3, #0]
 8014acc:	e000      	b.n	8014ad0 <pbuf_realloc+0xf4>
    return;
 8014ace:	bf00      	nop

}
 8014ad0:	3710      	adds	r7, #16
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	0801d94c 	.word	0x0801d94c
 8014adc:	0801daa0 	.word	0x0801daa0
 8014ae0:	0801d9e8 	.word	0x0801d9e8
 8014ae4:	0801dab8 	.word	0x0801dab8
 8014ae8:	0801dad0 	.word	0x0801dad0

08014aec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	4613      	mov	r3, r2
 8014af8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d106      	bne.n	8014b0e <pbuf_add_header_impl+0x22>
 8014b00:	4b2b      	ldr	r3, [pc, #172]	; (8014bb0 <pbuf_add_header_impl+0xc4>)
 8014b02:	f240 12df 	movw	r2, #479	; 0x1df
 8014b06:	492b      	ldr	r1, [pc, #172]	; (8014bb4 <pbuf_add_header_impl+0xc8>)
 8014b08:	482b      	ldr	r0, [pc, #172]	; (8014bb8 <pbuf_add_header_impl+0xcc>)
 8014b0a:	f006 febd 	bl	801b888 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d003      	beq.n	8014b1c <pbuf_add_header_impl+0x30>
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b1a:	d301      	bcc.n	8014b20 <pbuf_add_header_impl+0x34>
    return 1;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	e043      	b.n	8014ba8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d101      	bne.n	8014b2a <pbuf_add_header_impl+0x3e>
    return 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	e03e      	b.n	8014ba8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	891a      	ldrh	r2, [r3, #8]
 8014b32:	8a7b      	ldrh	r3, [r7, #18]
 8014b34:	4413      	add	r3, r2
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	8a7a      	ldrh	r2, [r7, #18]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d901      	bls.n	8014b42 <pbuf_add_header_impl+0x56>
    return 1;
 8014b3e:	2301      	movs	r3, #1
 8014b40:	e032      	b.n	8014ba8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	7b1b      	ldrb	r3, [r3, #12]
 8014b46:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014b48:	8a3b      	ldrh	r3, [r7, #16]
 8014b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d00c      	beq.n	8014b6c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	685a      	ldr	r2, [r3, #4]
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	425b      	negs	r3, r3
 8014b5a:	4413      	add	r3, r2
 8014b5c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	3310      	adds	r3, #16
 8014b62:	697a      	ldr	r2, [r7, #20]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d20d      	bcs.n	8014b84 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014b68:	2301      	movs	r3, #1
 8014b6a:	e01d      	b.n	8014ba8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014b6c:	79fb      	ldrb	r3, [r7, #7]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d006      	beq.n	8014b80 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	425b      	negs	r3, r3
 8014b7a:	4413      	add	r3, r2
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e001      	b.n	8014b84 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014b80:	2301      	movs	r3, #1
 8014b82:	e011      	b.n	8014ba8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	697a      	ldr	r2, [r7, #20]
 8014b88:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	895a      	ldrh	r2, [r3, #10]
 8014b8e:	8a7b      	ldrh	r3, [r7, #18]
 8014b90:	4413      	add	r3, r2
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	891a      	ldrh	r2, [r3, #8]
 8014b9c:	8a7b      	ldrh	r3, [r7, #18]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	b29a      	uxth	r2, r3
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	811a      	strh	r2, [r3, #8]


  return 0;
 8014ba6:	2300      	movs	r3, #0
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3718      	adds	r7, #24
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	0801d94c 	.word	0x0801d94c
 8014bb4:	0801daec 	.word	0x0801daec
 8014bb8:	0801d9e8 	.word	0x0801d9e8

08014bbc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	6839      	ldr	r1, [r7, #0]
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f7ff ff8e 	bl	8014aec <pbuf_add_header_impl>
 8014bd0:	4603      	mov	r3, r0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3708      	adds	r7, #8
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
	...

08014bdc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d106      	bne.n	8014bfa <pbuf_remove_header+0x1e>
 8014bec:	4b20      	ldr	r3, [pc, #128]	; (8014c70 <pbuf_remove_header+0x94>)
 8014bee:	f240 224b 	movw	r2, #587	; 0x24b
 8014bf2:	4920      	ldr	r1, [pc, #128]	; (8014c74 <pbuf_remove_header+0x98>)
 8014bf4:	4820      	ldr	r0, [pc, #128]	; (8014c78 <pbuf_remove_header+0x9c>)
 8014bf6:	f006 fe47 	bl	801b888 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d003      	beq.n	8014c08 <pbuf_remove_header+0x2c>
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c06:	d301      	bcc.n	8014c0c <pbuf_remove_header+0x30>
    return 1;
 8014c08:	2301      	movs	r3, #1
 8014c0a:	e02c      	b.n	8014c66 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d101      	bne.n	8014c16 <pbuf_remove_header+0x3a>
    return 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	e027      	b.n	8014c66 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	895b      	ldrh	r3, [r3, #10]
 8014c1e:	89fa      	ldrh	r2, [r7, #14]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d908      	bls.n	8014c36 <pbuf_remove_header+0x5a>
 8014c24:	4b12      	ldr	r3, [pc, #72]	; (8014c70 <pbuf_remove_header+0x94>)
 8014c26:	f240 2255 	movw	r2, #597	; 0x255
 8014c2a:	4914      	ldr	r1, [pc, #80]	; (8014c7c <pbuf_remove_header+0xa0>)
 8014c2c:	4812      	ldr	r0, [pc, #72]	; (8014c78 <pbuf_remove_header+0x9c>)
 8014c2e:	f006 fe2b 	bl	801b888 <iprintf>
 8014c32:	2301      	movs	r3, #1
 8014c34:	e017      	b.n	8014c66 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	685a      	ldr	r2, [r3, #4]
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	441a      	add	r2, r3
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	895a      	ldrh	r2, [r3, #10]
 8014c4c:	89fb      	ldrh	r3, [r7, #14]
 8014c4e:	1ad3      	subs	r3, r2, r3
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	891a      	ldrh	r2, [r3, #8]
 8014c5a:	89fb      	ldrh	r3, [r7, #14]
 8014c5c:	1ad3      	subs	r3, r2, r3
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014c64:	2300      	movs	r3, #0
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	0801d94c 	.word	0x0801d94c
 8014c74:	0801daec 	.word	0x0801daec
 8014c78:	0801d9e8 	.word	0x0801d9e8
 8014c7c:	0801daf8 	.word	0x0801daf8

08014c80 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	460b      	mov	r3, r1
 8014c8a:	807b      	strh	r3, [r7, #2]
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	da08      	bge.n	8014caa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c9c:	425b      	negs	r3, r3
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f7ff ff9b 	bl	8014bdc <pbuf_remove_header>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	e007      	b.n	8014cba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cae:	787a      	ldrb	r2, [r7, #1]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff ff1a 	bl	8014aec <pbuf_add_header_impl>
 8014cb8:	4603      	mov	r3, r0
  }
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3708      	adds	r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}

08014cc2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014cc2:	b580      	push	{r7, lr}
 8014cc4:	b082      	sub	sp, #8
 8014cc6:	af00      	add	r7, sp, #0
 8014cc8:	6078      	str	r0, [r7, #4]
 8014cca:	460b      	mov	r3, r1
 8014ccc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7ff ffd2 	bl	8014c80 <pbuf_header_impl>
 8014cdc:	4603      	mov	r3, r0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3708      	adds	r7, #8
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
	...

08014ce8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b088      	sub	sp, #32
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d10b      	bne.n	8014d0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d106      	bne.n	8014d0a <pbuf_free+0x22>
 8014cfc:	4b3b      	ldr	r3, [pc, #236]	; (8014dec <pbuf_free+0x104>)
 8014cfe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014d02:	493b      	ldr	r1, [pc, #236]	; (8014df0 <pbuf_free+0x108>)
 8014d04:	483b      	ldr	r0, [pc, #236]	; (8014df4 <pbuf_free+0x10c>)
 8014d06:	f006 fdbf 	bl	801b888 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	e069      	b.n	8014de2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014d12:	e062      	b.n	8014dda <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014d14:	f000 fb66 	bl	80153e4 <sys_arch_protect>
 8014d18:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	7b9b      	ldrb	r3, [r3, #14]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d106      	bne.n	8014d30 <pbuf_free+0x48>
 8014d22:	4b32      	ldr	r3, [pc, #200]	; (8014dec <pbuf_free+0x104>)
 8014d24:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014d28:	4933      	ldr	r1, [pc, #204]	; (8014df8 <pbuf_free+0x110>)
 8014d2a:	4832      	ldr	r0, [pc, #200]	; (8014df4 <pbuf_free+0x10c>)
 8014d2c:	f006 fdac 	bl	801b888 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	7b9b      	ldrb	r3, [r3, #14]
 8014d34:	3b01      	subs	r3, #1
 8014d36:	b2da      	uxtb	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	739a      	strb	r2, [r3, #14]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	7b9b      	ldrb	r3, [r3, #14]
 8014d40:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014d42:	69b8      	ldr	r0, [r7, #24]
 8014d44:	f000 fb5c 	bl	8015400 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014d48:	7dfb      	ldrb	r3, [r7, #23]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d143      	bne.n	8014dd6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	7b1b      	ldrb	r3, [r3, #12]
 8014d58:	f003 030f 	and.w	r3, r3, #15
 8014d5c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	7b5b      	ldrb	r3, [r3, #13]
 8014d62:	f003 0302 	and.w	r3, r3, #2
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d011      	beq.n	8014d8e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	691b      	ldr	r3, [r3, #16]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d106      	bne.n	8014d84 <pbuf_free+0x9c>
 8014d76:	4b1d      	ldr	r3, [pc, #116]	; (8014dec <pbuf_free+0x104>)
 8014d78:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014d7c:	491f      	ldr	r1, [pc, #124]	; (8014dfc <pbuf_free+0x114>)
 8014d7e:	481d      	ldr	r0, [pc, #116]	; (8014df4 <pbuf_free+0x10c>)
 8014d80:	f006 fd82 	bl	801b888 <iprintf>
        pc->custom_free_function(p);
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	691b      	ldr	r3, [r3, #16]
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	4798      	blx	r3
 8014d8c:	e01d      	b.n	8014dca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014d8e:	7bfb      	ldrb	r3, [r7, #15]
 8014d90:	2b02      	cmp	r3, #2
 8014d92:	d104      	bne.n	8014d9e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014d94:	6879      	ldr	r1, [r7, #4]
 8014d96:	200c      	movs	r0, #12
 8014d98:	f7ff f8f6 	bl	8013f88 <memp_free>
 8014d9c:	e015      	b.n	8014dca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014d9e:	7bfb      	ldrb	r3, [r7, #15]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d104      	bne.n	8014dae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014da4:	6879      	ldr	r1, [r7, #4]
 8014da6:	200b      	movs	r0, #11
 8014da8:	f7ff f8ee 	bl	8013f88 <memp_free>
 8014dac:	e00d      	b.n	8014dca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014dae:	7bfb      	ldrb	r3, [r7, #15]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d103      	bne.n	8014dbc <pbuf_free+0xd4>
          mem_free(p);
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7fe fd33 	bl	8013820 <mem_free>
 8014dba:	e006      	b.n	8014dca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014dbc:	4b0b      	ldr	r3, [pc, #44]	; (8014dec <pbuf_free+0x104>)
 8014dbe:	f240 320f 	movw	r2, #783	; 0x30f
 8014dc2:	490f      	ldr	r1, [pc, #60]	; (8014e00 <pbuf_free+0x118>)
 8014dc4:	480b      	ldr	r0, [pc, #44]	; (8014df4 <pbuf_free+0x10c>)
 8014dc6:	f006 fd5f 	bl	801b888 <iprintf>
        }
      }
      count++;
 8014dca:	7ffb      	ldrb	r3, [r7, #31]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	607b      	str	r3, [r7, #4]
 8014dd4:	e001      	b.n	8014dda <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d199      	bne.n	8014d14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3720      	adds	r7, #32
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	0801d94c 	.word	0x0801d94c
 8014df0:	0801daec 	.word	0x0801daec
 8014df4:	0801d9e8 	.word	0x0801d9e8
 8014df8:	0801db18 	.word	0x0801db18
 8014dfc:	0801db30 	.word	0x0801db30
 8014e00:	0801db54 	.word	0x0801db54

08014e04 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014e10:	e005      	b.n	8014e1e <pbuf_clen+0x1a>
    ++len;
 8014e12:	89fb      	ldrh	r3, [r7, #14]
 8014e14:	3301      	adds	r3, #1
 8014e16:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d1f6      	bne.n	8014e12 <pbuf_clen+0xe>
  }
  return len;
 8014e24:	89fb      	ldrh	r3, [r7, #14]
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3714      	adds	r7, #20
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr
	...

08014e34 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d016      	beq.n	8014e70 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014e42:	f000 facf 	bl	80153e4 <sys_arch_protect>
 8014e46:	60f8      	str	r0, [r7, #12]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	7b9b      	ldrb	r3, [r3, #14]
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	b2da      	uxtb	r2, r3
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	739a      	strb	r2, [r3, #14]
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f000 fad3 	bl	8015400 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	7b9b      	ldrb	r3, [r3, #14]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <pbuf_ref+0x3c>
 8014e62:	4b05      	ldr	r3, [pc, #20]	; (8014e78 <pbuf_ref+0x44>)
 8014e64:	f240 3242 	movw	r2, #834	; 0x342
 8014e68:	4904      	ldr	r1, [pc, #16]	; (8014e7c <pbuf_ref+0x48>)
 8014e6a:	4805      	ldr	r0, [pc, #20]	; (8014e80 <pbuf_ref+0x4c>)
 8014e6c:	f006 fd0c 	bl	801b888 <iprintf>
  }
}
 8014e70:	bf00      	nop
 8014e72:	3710      	adds	r7, #16
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	0801d94c 	.word	0x0801d94c
 8014e7c:	0801db68 	.word	0x0801db68
 8014e80:	0801d9e8 	.word	0x0801d9e8

08014e84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d002      	beq.n	8014e9a <pbuf_cat+0x16>
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d107      	bne.n	8014eaa <pbuf_cat+0x26>
 8014e9a:	4b20      	ldr	r3, [pc, #128]	; (8014f1c <pbuf_cat+0x98>)
 8014e9c:	f240 3259 	movw	r2, #857	; 0x359
 8014ea0:	491f      	ldr	r1, [pc, #124]	; (8014f20 <pbuf_cat+0x9c>)
 8014ea2:	4820      	ldr	r0, [pc, #128]	; (8014f24 <pbuf_cat+0xa0>)
 8014ea4:	f006 fcf0 	bl	801b888 <iprintf>
 8014ea8:	e034      	b.n	8014f14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	60fb      	str	r3, [r7, #12]
 8014eae:	e00a      	b.n	8014ec6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	891a      	ldrh	r2, [r3, #8]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	891b      	ldrh	r3, [r3, #8]
 8014eb8:	4413      	add	r3, r2
 8014eba:	b29a      	uxth	r2, r3
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	60fb      	str	r3, [r7, #12]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d1f0      	bne.n	8014eb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	891a      	ldrh	r2, [r3, #8]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	895b      	ldrh	r3, [r3, #10]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d006      	beq.n	8014ee8 <pbuf_cat+0x64>
 8014eda:	4b10      	ldr	r3, [pc, #64]	; (8014f1c <pbuf_cat+0x98>)
 8014edc:	f240 3262 	movw	r2, #866	; 0x362
 8014ee0:	4911      	ldr	r1, [pc, #68]	; (8014f28 <pbuf_cat+0xa4>)
 8014ee2:	4810      	ldr	r0, [pc, #64]	; (8014f24 <pbuf_cat+0xa0>)
 8014ee4:	f006 fcd0 	bl	801b888 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d006      	beq.n	8014efe <pbuf_cat+0x7a>
 8014ef0:	4b0a      	ldr	r3, [pc, #40]	; (8014f1c <pbuf_cat+0x98>)
 8014ef2:	f240 3263 	movw	r2, #867	; 0x363
 8014ef6:	490d      	ldr	r1, [pc, #52]	; (8014f2c <pbuf_cat+0xa8>)
 8014ef8:	480a      	ldr	r0, [pc, #40]	; (8014f24 <pbuf_cat+0xa0>)
 8014efa:	f006 fcc5 	bl	801b888 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	891a      	ldrh	r2, [r3, #8]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	891b      	ldrh	r3, [r3, #8]
 8014f06:	4413      	add	r3, r2
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	683a      	ldr	r2, [r7, #0]
 8014f12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	0801d94c 	.word	0x0801d94c
 8014f20:	0801db7c 	.word	0x0801db7c
 8014f24:	0801d9e8 	.word	0x0801d9e8
 8014f28:	0801dbb4 	.word	0x0801dbb4
 8014f2c:	0801dbe4 	.word	0x0801dbe4

08014f30 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014f3a:	6839      	ldr	r1, [r7, #0]
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f7ff ffa1 	bl	8014e84 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014f42:	6838      	ldr	r0, [r7, #0]
 8014f44:	f7ff ff76 	bl	8014e34 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014f48:	bf00      	nop
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b086      	sub	sp, #24
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	617b      	str	r3, [r7, #20]
 8014f5e:	2300      	movs	r3, #0
 8014f60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d008      	beq.n	8014f7a <pbuf_copy+0x2a>
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d005      	beq.n	8014f7a <pbuf_copy+0x2a>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	891a      	ldrh	r2, [r3, #8]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	891b      	ldrh	r3, [r3, #8]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d209      	bcs.n	8014f8e <pbuf_copy+0x3e>
 8014f7a:	4b57      	ldr	r3, [pc, #348]	; (80150d8 <pbuf_copy+0x188>)
 8014f7c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014f80:	4956      	ldr	r1, [pc, #344]	; (80150dc <pbuf_copy+0x18c>)
 8014f82:	4857      	ldr	r0, [pc, #348]	; (80150e0 <pbuf_copy+0x190>)
 8014f84:	f006 fc80 	bl	801b888 <iprintf>
 8014f88:	f06f 030f 	mvn.w	r3, #15
 8014f8c:	e09f      	b.n	80150ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	895b      	ldrh	r3, [r3, #10]
 8014f92:	461a      	mov	r2, r3
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	1ad2      	subs	r2, r2, r3
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	895b      	ldrh	r3, [r3, #10]
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	1acb      	subs	r3, r1, r3
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	d306      	bcc.n	8014fb4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	895b      	ldrh	r3, [r3, #10]
 8014faa:	461a      	mov	r2, r3
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	1ad3      	subs	r3, r2, r3
 8014fb0:	60fb      	str	r3, [r7, #12]
 8014fb2:	e005      	b.n	8014fc0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	895b      	ldrh	r3, [r3, #10]
 8014fb8:	461a      	mov	r2, r3
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	1ad3      	subs	r3, r2, r3
 8014fbe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	685a      	ldr	r2, [r3, #4]
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	18d0      	adds	r0, r2, r3
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	685a      	ldr	r2, [r3, #4]
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	4413      	add	r3, r2
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	f006 fd33 	bl	801ba3e <memcpy>
    offset_to += len;
 8014fd8:	697a      	ldr	r2, [r7, #20]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	4413      	add	r3, r2
 8014fde:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014fe0:	693a      	ldr	r2, [r7, #16]
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	895b      	ldrh	r3, [r3, #10]
 8014fec:	461a      	mov	r2, r3
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d906      	bls.n	8015002 <pbuf_copy+0xb2>
 8014ff4:	4b38      	ldr	r3, [pc, #224]	; (80150d8 <pbuf_copy+0x188>)
 8014ff6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014ffa:	493a      	ldr	r1, [pc, #232]	; (80150e4 <pbuf_copy+0x194>)
 8014ffc:	4838      	ldr	r0, [pc, #224]	; (80150e0 <pbuf_copy+0x190>)
 8014ffe:	f006 fc43 	bl	801b888 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	895b      	ldrh	r3, [r3, #10]
 8015006:	461a      	mov	r2, r3
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	4293      	cmp	r3, r2
 801500c:	d906      	bls.n	801501c <pbuf_copy+0xcc>
 801500e:	4b32      	ldr	r3, [pc, #200]	; (80150d8 <pbuf_copy+0x188>)
 8015010:	f240 32da 	movw	r2, #986	; 0x3da
 8015014:	4934      	ldr	r1, [pc, #208]	; (80150e8 <pbuf_copy+0x198>)
 8015016:	4832      	ldr	r0, [pc, #200]	; (80150e0 <pbuf_copy+0x190>)
 8015018:	f006 fc36 	bl	801b888 <iprintf>
    if (offset_from >= p_from->len) {
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	895b      	ldrh	r3, [r3, #10]
 8015020:	461a      	mov	r2, r3
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	4293      	cmp	r3, r2
 8015026:	d304      	bcc.n	8015032 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015028:	2300      	movs	r3, #0
 801502a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	895b      	ldrh	r3, [r3, #10]
 8015036:	461a      	mov	r2, r3
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	4293      	cmp	r3, r2
 801503c:	d114      	bne.n	8015068 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801503e:	2300      	movs	r3, #0
 8015040:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10c      	bne.n	8015068 <pbuf_copy+0x118>
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d009      	beq.n	8015068 <pbuf_copy+0x118>
 8015054:	4b20      	ldr	r3, [pc, #128]	; (80150d8 <pbuf_copy+0x188>)
 8015056:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801505a:	4924      	ldr	r1, [pc, #144]	; (80150ec <pbuf_copy+0x19c>)
 801505c:	4820      	ldr	r0, [pc, #128]	; (80150e0 <pbuf_copy+0x190>)
 801505e:	f006 fc13 	bl	801b888 <iprintf>
 8015062:	f06f 030f 	mvn.w	r3, #15
 8015066:	e032      	b.n	80150ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d013      	beq.n	8015096 <pbuf_copy+0x146>
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	895a      	ldrh	r2, [r3, #10]
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	891b      	ldrh	r3, [r3, #8]
 8015076:	429a      	cmp	r2, r3
 8015078:	d10d      	bne.n	8015096 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d009      	beq.n	8015096 <pbuf_copy+0x146>
 8015082:	4b15      	ldr	r3, [pc, #84]	; (80150d8 <pbuf_copy+0x188>)
 8015084:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8015088:	4919      	ldr	r1, [pc, #100]	; (80150f0 <pbuf_copy+0x1a0>)
 801508a:	4815      	ldr	r0, [pc, #84]	; (80150e0 <pbuf_copy+0x190>)
 801508c:	f006 fbfc 	bl	801b888 <iprintf>
 8015090:	f06f 0305 	mvn.w	r3, #5
 8015094:	e01b      	b.n	80150ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d013      	beq.n	80150c4 <pbuf_copy+0x174>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	895a      	ldrh	r2, [r3, #10]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	891b      	ldrh	r3, [r3, #8]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d10d      	bne.n	80150c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d009      	beq.n	80150c4 <pbuf_copy+0x174>
 80150b0:	4b09      	ldr	r3, [pc, #36]	; (80150d8 <pbuf_copy+0x188>)
 80150b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80150b6:	490e      	ldr	r1, [pc, #56]	; (80150f0 <pbuf_copy+0x1a0>)
 80150b8:	4809      	ldr	r0, [pc, #36]	; (80150e0 <pbuf_copy+0x190>)
 80150ba:	f006 fbe5 	bl	801b888 <iprintf>
 80150be:	f06f 0305 	mvn.w	r3, #5
 80150c2:	e004      	b.n	80150ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f47f af61 	bne.w	8014f8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80150cc:	2300      	movs	r3, #0
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3718      	adds	r7, #24
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	0801d94c 	.word	0x0801d94c
 80150dc:	0801dc30 	.word	0x0801dc30
 80150e0:	0801d9e8 	.word	0x0801d9e8
 80150e4:	0801dc60 	.word	0x0801dc60
 80150e8:	0801dc78 	.word	0x0801dc78
 80150ec:	0801dc94 	.word	0x0801dc94
 80150f0:	0801dca4 	.word	0x0801dca4

080150f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b088      	sub	sp, #32
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	4611      	mov	r1, r2
 8015100:	461a      	mov	r2, r3
 8015102:	460b      	mov	r3, r1
 8015104:	80fb      	strh	r3, [r7, #6]
 8015106:	4613      	mov	r3, r2
 8015108:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801510a:	2300      	movs	r3, #0
 801510c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801510e:	2300      	movs	r3, #0
 8015110:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d108      	bne.n	801512a <pbuf_copy_partial+0x36>
 8015118:	4b2b      	ldr	r3, [pc, #172]	; (80151c8 <pbuf_copy_partial+0xd4>)
 801511a:	f240 420a 	movw	r2, #1034	; 0x40a
 801511e:	492b      	ldr	r1, [pc, #172]	; (80151cc <pbuf_copy_partial+0xd8>)
 8015120:	482b      	ldr	r0, [pc, #172]	; (80151d0 <pbuf_copy_partial+0xdc>)
 8015122:	f006 fbb1 	bl	801b888 <iprintf>
 8015126:	2300      	movs	r3, #0
 8015128:	e04a      	b.n	80151c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d108      	bne.n	8015142 <pbuf_copy_partial+0x4e>
 8015130:	4b25      	ldr	r3, [pc, #148]	; (80151c8 <pbuf_copy_partial+0xd4>)
 8015132:	f240 420b 	movw	r2, #1035	; 0x40b
 8015136:	4927      	ldr	r1, [pc, #156]	; (80151d4 <pbuf_copy_partial+0xe0>)
 8015138:	4825      	ldr	r0, [pc, #148]	; (80151d0 <pbuf_copy_partial+0xdc>)
 801513a:	f006 fba5 	bl	801b888 <iprintf>
 801513e:	2300      	movs	r3, #0
 8015140:	e03e      	b.n	80151c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	61fb      	str	r3, [r7, #28]
 8015146:	e034      	b.n	80151b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015148:	88bb      	ldrh	r3, [r7, #4]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d00a      	beq.n	8015164 <pbuf_copy_partial+0x70>
 801514e:	69fb      	ldr	r3, [r7, #28]
 8015150:	895b      	ldrh	r3, [r3, #10]
 8015152:	88ba      	ldrh	r2, [r7, #4]
 8015154:	429a      	cmp	r2, r3
 8015156:	d305      	bcc.n	8015164 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	895b      	ldrh	r3, [r3, #10]
 801515c:	88ba      	ldrh	r2, [r7, #4]
 801515e:	1ad3      	subs	r3, r2, r3
 8015160:	80bb      	strh	r3, [r7, #4]
 8015162:	e023      	b.n	80151ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	895a      	ldrh	r2, [r3, #10]
 8015168:	88bb      	ldrh	r3, [r7, #4]
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801516e:	8b3a      	ldrh	r2, [r7, #24]
 8015170:	88fb      	ldrh	r3, [r7, #6]
 8015172:	429a      	cmp	r2, r3
 8015174:	d901      	bls.n	801517a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015176:	88fb      	ldrh	r3, [r7, #6]
 8015178:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801517a:	8b7b      	ldrh	r3, [r7, #26]
 801517c:	68ba      	ldr	r2, [r7, #8]
 801517e:	18d0      	adds	r0, r2, r3
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	685a      	ldr	r2, [r3, #4]
 8015184:	88bb      	ldrh	r3, [r7, #4]
 8015186:	4413      	add	r3, r2
 8015188:	8b3a      	ldrh	r2, [r7, #24]
 801518a:	4619      	mov	r1, r3
 801518c:	f006 fc57 	bl	801ba3e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015190:	8afa      	ldrh	r2, [r7, #22]
 8015192:	8b3b      	ldrh	r3, [r7, #24]
 8015194:	4413      	add	r3, r2
 8015196:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015198:	8b7a      	ldrh	r2, [r7, #26]
 801519a:	8b3b      	ldrh	r3, [r7, #24]
 801519c:	4413      	add	r3, r2
 801519e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80151a0:	88fa      	ldrh	r2, [r7, #6]
 80151a2:	8b3b      	ldrh	r3, [r7, #24]
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80151a8:	2300      	movs	r3, #0
 80151aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	61fb      	str	r3, [r7, #28]
 80151b2:	88fb      	ldrh	r3, [r7, #6]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d002      	beq.n	80151be <pbuf_copy_partial+0xca>
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d1c4      	bne.n	8015148 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80151be:	8afb      	ldrh	r3, [r7, #22]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3720      	adds	r7, #32
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	0801d94c 	.word	0x0801d94c
 80151cc:	0801dcd0 	.word	0x0801dcd0
 80151d0:	0801d9e8 	.word	0x0801d9e8
 80151d4:	0801dcf0 	.word	0x0801dcf0

080151d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b084      	sub	sp, #16
 80151dc:	af00      	add	r7, sp, #0
 80151de:	4603      	mov	r3, r0
 80151e0:	603a      	str	r2, [r7, #0]
 80151e2:	71fb      	strb	r3, [r7, #7]
 80151e4:	460b      	mov	r3, r1
 80151e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	8919      	ldrh	r1, [r3, #8]
 80151ec:	88ba      	ldrh	r2, [r7, #4]
 80151ee:	79fb      	ldrb	r3, [r7, #7]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff fa95 	bl	8014720 <pbuf_alloc>
 80151f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d101      	bne.n	8015202 <pbuf_clone+0x2a>
    return NULL;
 80151fe:	2300      	movs	r3, #0
 8015200:	e011      	b.n	8015226 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f7ff fea3 	bl	8014f50 <pbuf_copy>
 801520a:	4603      	mov	r3, r0
 801520c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801520e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d006      	beq.n	8015224 <pbuf_clone+0x4c>
 8015216:	4b06      	ldr	r3, [pc, #24]	; (8015230 <pbuf_clone+0x58>)
 8015218:	f240 5224 	movw	r2, #1316	; 0x524
 801521c:	4905      	ldr	r1, [pc, #20]	; (8015234 <pbuf_clone+0x5c>)
 801521e:	4806      	ldr	r0, [pc, #24]	; (8015238 <pbuf_clone+0x60>)
 8015220:	f006 fb32 	bl	801b888 <iprintf>
  return q;
 8015224:	68fb      	ldr	r3, [r7, #12]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	0801d94c 	.word	0x0801d94c
 8015234:	0801ddfc 	.word	0x0801ddfc
 8015238:	0801d9e8 	.word	0x0801d9e8

0801523c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	2200      	movs	r2, #0
 801524a:	2104      	movs	r1, #4
 801524c:	4618      	mov	r0, r3
 801524e:	f7f6 fc6d 	bl	800bb2c <osMessageQueueNew>
 8015252:	4602      	mov	r2, r0
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d102      	bne.n	8015266 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015260:	f04f 33ff 	mov.w	r3, #4294967295
 8015264:	e000      	b.n	8015268 <sys_mbox_new+0x2c>

  return ERR_OK;
 8015266:	2300      	movs	r3, #0
}
 8015268:	4618      	mov	r0, r3
 801526a:	3708      	adds	r7, #8
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}

08015270 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6818      	ldr	r0, [r3, #0]
 801527e:	4639      	mov	r1, r7
 8015280:	2300      	movs	r3, #0
 8015282:	2200      	movs	r2, #0
 8015284:	f7f6 fcc6 	bl	800bc14 <osMessageQueuePut>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d102      	bne.n	8015294 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	73fb      	strb	r3, [r7, #15]
 8015292:	e001      	b.n	8015298 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015294:	23ff      	movs	r3, #255	; 0xff
 8015296:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801529c:	4618      	mov	r0, r3
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80152b0:	f7f6 f94c 	bl	800b54c <osKernelGetTickCount>
 80152b4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d013      	beq.n	80152e4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6818      	ldr	r0, [r3, #0]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	68b9      	ldr	r1, [r7, #8]
 80152c6:	f7f6 fd05 	bl	800bcd4 <osMessageQueueGet>
 80152ca:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d105      	bne.n	80152de <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80152d2:	f7f6 f93b 	bl	800b54c <osKernelGetTickCount>
 80152d6:	4602      	mov	r2, r0
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	e00f      	b.n	80152fe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80152de:	f04f 33ff 	mov.w	r3, #4294967295
 80152e2:	e00c      	b.n	80152fe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	6818      	ldr	r0, [r3, #0]
 80152e8:	f04f 33ff 	mov.w	r3, #4294967295
 80152ec:	2200      	movs	r2, #0
 80152ee:	68b9      	ldr	r1, [r7, #8]
 80152f0:	f7f6 fcf0 	bl	800bcd4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80152f4:	f7f6 f92a 	bl	800b54c <osKernelGetTickCount>
 80152f8:	4602      	mov	r2, r0
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3718      	adds	r7, #24
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015306:	b480      	push	{r7}
 8015308:	b083      	sub	sp, #12
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d101      	bne.n	801531a <sys_mbox_valid+0x14>
    return 0;
 8015316:	2300      	movs	r3, #0
 8015318:	e000      	b.n	801531c <sys_mbox_valid+0x16>
  else
    return 1;
 801531a:	2301      	movs	r3, #1
}
 801531c:	4618      	mov	r0, r3
 801531e:	370c      	adds	r7, #12
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr

08015328 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801532c:	2000      	movs	r0, #0
 801532e:	f7f6 f9cf 	bl	800b6d0 <osMutexNew>
 8015332:	4603      	mov	r3, r0
 8015334:	4a01      	ldr	r2, [pc, #4]	; (801533c <sys_init+0x14>)
 8015336:	6013      	str	r3, [r2, #0]
#endif
}
 8015338:	bf00      	nop
 801533a:	bd80      	pop	{r7, pc}
 801533c:	2400c978 	.word	0x2400c978

08015340 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015348:	2000      	movs	r0, #0
 801534a:	f7f6 f9c1 	bl	800b6d0 <osMutexNew>
 801534e:	4602      	mov	r2, r0
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d102      	bne.n	8015362 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801535c:	f04f 33ff 	mov.w	r3, #4294967295
 8015360:	e000      	b.n	8015364 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015362:	2300      	movs	r3, #0
}
 8015364:	4618      	mov	r0, r3
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f04f 31ff 	mov.w	r1, #4294967295
 801537c:	4618      	mov	r0, r3
 801537e:	f7f6 fa2d 	bl	800b7dc <osMutexAcquire>
#endif
}
 8015382:	bf00      	nop
 8015384:	3708      	adds	r7, #8
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4618      	mov	r0, r3
 8015398:	f7f6 fa6b 	bl	800b872 <osMutexRelease>
}
 801539c:	bf00      	nop
 801539e:	3708      	adds	r7, #8
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b08e      	sub	sp, #56	; 0x38
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	60b9      	str	r1, [r7, #8]
 80153ae:	607a      	str	r2, [r7, #4]
 80153b0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80153b2:	f107 0314 	add.w	r3, r7, #20
 80153b6:	2224      	movs	r2, #36	; 0x24
 80153b8:	2100      	movs	r1, #0
 80153ba:	4618      	mov	r0, r3
 80153bc:	f006 fac9 	bl	801b952 <memset>
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	617b      	str	r3, [r7, #20]
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80153c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80153cc:	f107 0314 	add.w	r3, r7, #20
 80153d0:	461a      	mov	r2, r3
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	68b8      	ldr	r0, [r7, #8]
 80153d6:	f7f6 f8ce 	bl	800b576 <osThreadNew>
 80153da:	4603      	mov	r3, r0
#endif
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3738      	adds	r7, #56	; 0x38
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80153e8:	4b04      	ldr	r3, [pc, #16]	; (80153fc <sys_arch_protect+0x18>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	f04f 31ff 	mov.w	r1, #4294967295
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7f6 f9f3 	bl	800b7dc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80153f6:	2301      	movs	r3, #1
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	2400c978 	.word	0x2400c978

08015400 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015408:	4b04      	ldr	r3, [pc, #16]	; (801541c <sys_arch_unprotect+0x1c>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	4618      	mov	r0, r3
 801540e:	f7f6 fa30 	bl	800b872 <osMutexRelease>
}
 8015412:	bf00      	nop
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	2400c978 	.word	0x2400c978

08015420 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015424:	f006 f930 	bl	801b688 <rand>
 8015428:	4603      	mov	r3, r0
 801542a:	b29b      	uxth	r3, r3
 801542c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015430:	b29b      	uxth	r3, r3
 8015432:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015436:	b29a      	uxth	r2, r3
 8015438:	4b01      	ldr	r3, [pc, #4]	; (8015440 <tcp_init+0x20>)
 801543a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801543c:	bf00      	nop
 801543e:	bd80      	pop	{r7, pc}
 8015440:	2400002c 	.word	0x2400002c

08015444 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b082      	sub	sp, #8
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	7d1b      	ldrb	r3, [r3, #20]
 8015450:	2b01      	cmp	r3, #1
 8015452:	d105      	bne.n	8015460 <tcp_free+0x1c>
 8015454:	4b06      	ldr	r3, [pc, #24]	; (8015470 <tcp_free+0x2c>)
 8015456:	22d4      	movs	r2, #212	; 0xd4
 8015458:	4906      	ldr	r1, [pc, #24]	; (8015474 <tcp_free+0x30>)
 801545a:	4807      	ldr	r0, [pc, #28]	; (8015478 <tcp_free+0x34>)
 801545c:	f006 fa14 	bl	801b888 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015460:	6879      	ldr	r1, [r7, #4]
 8015462:	2001      	movs	r0, #1
 8015464:	f7fe fd90 	bl	8013f88 <memp_free>
}
 8015468:	bf00      	nop
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}
 8015470:	0801de88 	.word	0x0801de88
 8015474:	0801def4 	.word	0x0801def4
 8015478:	0801df08 	.word	0x0801df08

0801547c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7d1b      	ldrb	r3, [r3, #20]
 8015488:	2b01      	cmp	r3, #1
 801548a:	d105      	bne.n	8015498 <tcp_free_listen+0x1c>
 801548c:	4b06      	ldr	r3, [pc, #24]	; (80154a8 <tcp_free_listen+0x2c>)
 801548e:	22df      	movs	r2, #223	; 0xdf
 8015490:	4906      	ldr	r1, [pc, #24]	; (80154ac <tcp_free_listen+0x30>)
 8015492:	4807      	ldr	r0, [pc, #28]	; (80154b0 <tcp_free_listen+0x34>)
 8015494:	f006 f9f8 	bl	801b888 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015498:	6879      	ldr	r1, [r7, #4]
 801549a:	2002      	movs	r0, #2
 801549c:	f7fe fd74 	bl	8013f88 <memp_free>
}
 80154a0:	bf00      	nop
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	0801de88 	.word	0x0801de88
 80154ac:	0801df30 	.word	0x0801df30
 80154b0:	0801df08 	.word	0x0801df08

080154b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80154b8:	f000 fea2 	bl	8016200 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80154bc:	4b07      	ldr	r3, [pc, #28]	; (80154dc <tcp_tmr+0x28>)
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	3301      	adds	r3, #1
 80154c2:	b2da      	uxtb	r2, r3
 80154c4:	4b05      	ldr	r3, [pc, #20]	; (80154dc <tcp_tmr+0x28>)
 80154c6:	701a      	strb	r2, [r3, #0]
 80154c8:	4b04      	ldr	r3, [pc, #16]	; (80154dc <tcp_tmr+0x28>)
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	f003 0301 	and.w	r3, r3, #1
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d001      	beq.n	80154d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80154d4:	f000 fb54 	bl	8015b80 <tcp_slowtmr>
  }
}
 80154d8:	bf00      	nop
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	2400c991 	.word	0x2400c991

080154e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d105      	bne.n	80154fc <tcp_remove_listener+0x1c>
 80154f0:	4b0d      	ldr	r3, [pc, #52]	; (8015528 <tcp_remove_listener+0x48>)
 80154f2:	22ff      	movs	r2, #255	; 0xff
 80154f4:	490d      	ldr	r1, [pc, #52]	; (801552c <tcp_remove_listener+0x4c>)
 80154f6:	480e      	ldr	r0, [pc, #56]	; (8015530 <tcp_remove_listener+0x50>)
 80154f8:	f006 f9c6 	bl	801b888 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	60fb      	str	r3, [r7, #12]
 8015500:	e00a      	b.n	8015518 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	429a      	cmp	r2, r3
 801550a:	d102      	bne.n	8015512 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2200      	movs	r2, #0
 8015510:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	60fb      	str	r3, [r7, #12]
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1f1      	bne.n	8015502 <tcp_remove_listener+0x22>
    }
  }
}
 801551e:	bf00      	nop
 8015520:	bf00      	nop
 8015522:	3710      	adds	r7, #16
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	0801de88 	.word	0x0801de88
 801552c:	0801df4c 	.word	0x0801df4c
 8015530:	0801df08 	.word	0x0801df08

08015534 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d106      	bne.n	8015550 <tcp_listen_closed+0x1c>
 8015542:	4b14      	ldr	r3, [pc, #80]	; (8015594 <tcp_listen_closed+0x60>)
 8015544:	f240 1211 	movw	r2, #273	; 0x111
 8015548:	4913      	ldr	r1, [pc, #76]	; (8015598 <tcp_listen_closed+0x64>)
 801554a:	4814      	ldr	r0, [pc, #80]	; (801559c <tcp_listen_closed+0x68>)
 801554c:	f006 f99c 	bl	801b888 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	7d1b      	ldrb	r3, [r3, #20]
 8015554:	2b01      	cmp	r3, #1
 8015556:	d006      	beq.n	8015566 <tcp_listen_closed+0x32>
 8015558:	4b0e      	ldr	r3, [pc, #56]	; (8015594 <tcp_listen_closed+0x60>)
 801555a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801555e:	4910      	ldr	r1, [pc, #64]	; (80155a0 <tcp_listen_closed+0x6c>)
 8015560:	480e      	ldr	r0, [pc, #56]	; (801559c <tcp_listen_closed+0x68>)
 8015562:	f006 f991 	bl	801b888 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015566:	2301      	movs	r3, #1
 8015568:	60fb      	str	r3, [r7, #12]
 801556a:	e00b      	b.n	8015584 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801556c:	4a0d      	ldr	r2, [pc, #52]	; (80155a4 <tcp_listen_closed+0x70>)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	6879      	ldr	r1, [r7, #4]
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff ffb1 	bl	80154e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	3301      	adds	r3, #1
 8015582:	60fb      	str	r3, [r7, #12]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b03      	cmp	r3, #3
 8015588:	d9f0      	bls.n	801556c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801558a:	bf00      	nop
 801558c:	bf00      	nop
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801de88 	.word	0x0801de88
 8015598:	0801df74 	.word	0x0801df74
 801559c:	0801df08 	.word	0x0801df08
 80155a0:	0801df80 	.word	0x0801df80
 80155a4:	0801fa74 	.word	0x0801fa74

080155a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80155a8:	b5b0      	push	{r4, r5, r7, lr}
 80155aa:	b088      	sub	sp, #32
 80155ac:	af04      	add	r7, sp, #16
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	460b      	mov	r3, r1
 80155b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d106      	bne.n	80155c8 <tcp_close_shutdown+0x20>
 80155ba:	4b63      	ldr	r3, [pc, #396]	; (8015748 <tcp_close_shutdown+0x1a0>)
 80155bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80155c0:	4962      	ldr	r1, [pc, #392]	; (801574c <tcp_close_shutdown+0x1a4>)
 80155c2:	4863      	ldr	r0, [pc, #396]	; (8015750 <tcp_close_shutdown+0x1a8>)
 80155c4:	f006 f960 	bl	801b888 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80155c8:	78fb      	ldrb	r3, [r7, #3]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d066      	beq.n	801569c <tcp_close_shutdown+0xf4>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	7d1b      	ldrb	r3, [r3, #20]
 80155d2:	2b04      	cmp	r3, #4
 80155d4:	d003      	beq.n	80155de <tcp_close_shutdown+0x36>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	7d1b      	ldrb	r3, [r3, #20]
 80155da:	2b07      	cmp	r3, #7
 80155dc:	d15e      	bne.n	801569c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d104      	bne.n	80155f0 <tcp_close_shutdown+0x48>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80155ee:	d055      	beq.n	801569c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8b5b      	ldrh	r3, [r3, #26]
 80155f4:	f003 0310 	and.w	r3, r3, #16
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d106      	bne.n	801560a <tcp_close_shutdown+0x62>
 80155fc:	4b52      	ldr	r3, [pc, #328]	; (8015748 <tcp_close_shutdown+0x1a0>)
 80155fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015602:	4954      	ldr	r1, [pc, #336]	; (8015754 <tcp_close_shutdown+0x1ac>)
 8015604:	4852      	ldr	r0, [pc, #328]	; (8015750 <tcp_close_shutdown+0x1a8>)
 8015606:	f006 f93f 	bl	801b888 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015612:	687d      	ldr	r5, [r7, #4]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	3304      	adds	r3, #4
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	8ad2      	ldrh	r2, [r2, #22]
 801561c:	6879      	ldr	r1, [r7, #4]
 801561e:	8b09      	ldrh	r1, [r1, #24]
 8015620:	9102      	str	r1, [sp, #8]
 8015622:	9201      	str	r2, [sp, #4]
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	462b      	mov	r3, r5
 8015628:	4622      	mov	r2, r4
 801562a:	4601      	mov	r1, r0
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f004 fe91 	bl	801a354 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f001 f8c6 	bl	80167c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015638:	4b47      	ldr	r3, [pc, #284]	; (8015758 <tcp_close_shutdown+0x1b0>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	429a      	cmp	r2, r3
 8015640:	d105      	bne.n	801564e <tcp_close_shutdown+0xa6>
 8015642:	4b45      	ldr	r3, [pc, #276]	; (8015758 <tcp_close_shutdown+0x1b0>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	4a43      	ldr	r2, [pc, #268]	; (8015758 <tcp_close_shutdown+0x1b0>)
 801564a:	6013      	str	r3, [r2, #0]
 801564c:	e013      	b.n	8015676 <tcp_close_shutdown+0xce>
 801564e:	4b42      	ldr	r3, [pc, #264]	; (8015758 <tcp_close_shutdown+0x1b0>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	60fb      	str	r3, [r7, #12]
 8015654:	e00c      	b.n	8015670 <tcp_close_shutdown+0xc8>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	429a      	cmp	r2, r3
 801565e:	d104      	bne.n	801566a <tcp_close_shutdown+0xc2>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	68da      	ldr	r2, [r3, #12]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	60da      	str	r2, [r3, #12]
 8015668:	e005      	b.n	8015676 <tcp_close_shutdown+0xce>
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	60fb      	str	r3, [r7, #12]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1ef      	bne.n	8015656 <tcp_close_shutdown+0xae>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	60da      	str	r2, [r3, #12]
 801567c:	4b37      	ldr	r3, [pc, #220]	; (801575c <tcp_close_shutdown+0x1b4>)
 801567e:	2201      	movs	r2, #1
 8015680:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015682:	4b37      	ldr	r3, [pc, #220]	; (8015760 <tcp_close_shutdown+0x1b8>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	687a      	ldr	r2, [r7, #4]
 8015688:	429a      	cmp	r2, r3
 801568a:	d102      	bne.n	8015692 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801568c:	f003 fd5e 	bl	801914c <tcp_trigger_input_pcb_close>
 8015690:	e002      	b.n	8015698 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7ff fed6 	bl	8015444 <tcp_free>
      }
      return ERR_OK;
 8015698:	2300      	movs	r3, #0
 801569a:	e050      	b.n	801573e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	7d1b      	ldrb	r3, [r3, #20]
 80156a0:	2b02      	cmp	r3, #2
 80156a2:	d03b      	beq.n	801571c <tcp_close_shutdown+0x174>
 80156a4:	2b02      	cmp	r3, #2
 80156a6:	dc44      	bgt.n	8015732 <tcp_close_shutdown+0x18a>
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d002      	beq.n	80156b2 <tcp_close_shutdown+0x10a>
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d02a      	beq.n	8015706 <tcp_close_shutdown+0x15e>
 80156b0:	e03f      	b.n	8015732 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	8adb      	ldrh	r3, [r3, #22]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d021      	beq.n	80156fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80156ba:	4b2a      	ldr	r3, [pc, #168]	; (8015764 <tcp_close_shutdown+0x1bc>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d105      	bne.n	80156d0 <tcp_close_shutdown+0x128>
 80156c4:	4b27      	ldr	r3, [pc, #156]	; (8015764 <tcp_close_shutdown+0x1bc>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	4a26      	ldr	r2, [pc, #152]	; (8015764 <tcp_close_shutdown+0x1bc>)
 80156cc:	6013      	str	r3, [r2, #0]
 80156ce:	e013      	b.n	80156f8 <tcp_close_shutdown+0x150>
 80156d0:	4b24      	ldr	r3, [pc, #144]	; (8015764 <tcp_close_shutdown+0x1bc>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	60bb      	str	r3, [r7, #8]
 80156d6:	e00c      	b.n	80156f2 <tcp_close_shutdown+0x14a>
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	687a      	ldr	r2, [r7, #4]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d104      	bne.n	80156ec <tcp_close_shutdown+0x144>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	68da      	ldr	r2, [r3, #12]
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	60da      	str	r2, [r3, #12]
 80156ea:	e005      	b.n	80156f8 <tcp_close_shutdown+0x150>
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	60bb      	str	r3, [r7, #8]
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d1ef      	bne.n	80156d8 <tcp_close_shutdown+0x130>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2200      	movs	r2, #0
 80156fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7ff fea0 	bl	8015444 <tcp_free>
      break;
 8015704:	e01a      	b.n	801573c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7ff ff14 	bl	8015534 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801570c:	6879      	ldr	r1, [r7, #4]
 801570e:	4816      	ldr	r0, [pc, #88]	; (8015768 <tcp_close_shutdown+0x1c0>)
 8015710:	f001 f8a8 	bl	8016864 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7ff feb1 	bl	801547c <tcp_free_listen>
      break;
 801571a:	e00f      	b.n	801573c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801571c:	6879      	ldr	r1, [r7, #4]
 801571e:	480e      	ldr	r0, [pc, #56]	; (8015758 <tcp_close_shutdown+0x1b0>)
 8015720:	f001 f8a0 	bl	8016864 <tcp_pcb_remove>
 8015724:	4b0d      	ldr	r3, [pc, #52]	; (801575c <tcp_close_shutdown+0x1b4>)
 8015726:	2201      	movs	r2, #1
 8015728:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f7ff fe8a 	bl	8015444 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015730:	e004      	b.n	801573c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 f81a 	bl	801576c <tcp_close_shutdown_fin>
 8015738:	4603      	mov	r3, r0
 801573a:	e000      	b.n	801573e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801573c:	2300      	movs	r3, #0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3710      	adds	r7, #16
 8015742:	46bd      	mov	sp, r7
 8015744:	bdb0      	pop	{r4, r5, r7, pc}
 8015746:	bf00      	nop
 8015748:	0801de88 	.word	0x0801de88
 801574c:	0801df98 	.word	0x0801df98
 8015750:	0801df08 	.word	0x0801df08
 8015754:	0801dfb8 	.word	0x0801dfb8
 8015758:	2400c988 	.word	0x2400c988
 801575c:	2400c990 	.word	0x2400c990
 8015760:	2400c9c8 	.word	0x2400c9c8
 8015764:	2400c980 	.word	0x2400c980
 8015768:	2400c984 	.word	0x2400c984

0801576c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b084      	sub	sp, #16
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d106      	bne.n	8015788 <tcp_close_shutdown_fin+0x1c>
 801577a:	4b2e      	ldr	r3, [pc, #184]	; (8015834 <tcp_close_shutdown_fin+0xc8>)
 801577c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015780:	492d      	ldr	r1, [pc, #180]	; (8015838 <tcp_close_shutdown_fin+0xcc>)
 8015782:	482e      	ldr	r0, [pc, #184]	; (801583c <tcp_close_shutdown_fin+0xd0>)
 8015784:	f006 f880 	bl	801b888 <iprintf>

  switch (pcb->state) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	7d1b      	ldrb	r3, [r3, #20]
 801578c:	2b07      	cmp	r3, #7
 801578e:	d020      	beq.n	80157d2 <tcp_close_shutdown_fin+0x66>
 8015790:	2b07      	cmp	r3, #7
 8015792:	dc2b      	bgt.n	80157ec <tcp_close_shutdown_fin+0x80>
 8015794:	2b03      	cmp	r3, #3
 8015796:	d002      	beq.n	801579e <tcp_close_shutdown_fin+0x32>
 8015798:	2b04      	cmp	r3, #4
 801579a:	d00d      	beq.n	80157b8 <tcp_close_shutdown_fin+0x4c>
 801579c:	e026      	b.n	80157ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f003 fee6 	bl	8019570 <tcp_send_fin>
 80157a4:	4603      	mov	r3, r0
 80157a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80157a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d11f      	bne.n	80157f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2205      	movs	r2, #5
 80157b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80157b6:	e01b      	b.n	80157f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f003 fed9 	bl	8019570 <tcp_send_fin>
 80157be:	4603      	mov	r3, r0
 80157c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80157c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d114      	bne.n	80157f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2205      	movs	r2, #5
 80157ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80157d0:	e010      	b.n	80157f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f003 fecc 	bl	8019570 <tcp_send_fin>
 80157d8:	4603      	mov	r3, r0
 80157da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80157dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d109      	bne.n	80157f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2209      	movs	r2, #9
 80157e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80157ea:	e005      	b.n	80157f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	e01c      	b.n	801582a <tcp_close_shutdown_fin+0xbe>
      break;
 80157f0:	bf00      	nop
 80157f2:	e002      	b.n	80157fa <tcp_close_shutdown_fin+0x8e>
      break;
 80157f4:	bf00      	nop
 80157f6:	e000      	b.n	80157fa <tcp_close_shutdown_fin+0x8e>
      break;
 80157f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80157fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d103      	bne.n	801580a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f003 fff2 	bl	80197ec <tcp_output>
 8015808:	e00d      	b.n	8015826 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015812:	d108      	bne.n	8015826 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	8b5b      	ldrh	r3, [r3, #26]
 8015818:	f043 0308 	orr.w	r3, r3, #8
 801581c:	b29a      	uxth	r2, r3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	e001      	b.n	801582a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3710      	adds	r7, #16
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	0801de88 	.word	0x0801de88
 8015838:	0801df74 	.word	0x0801df74
 801583c:	0801df08 	.word	0x0801df08

08015840 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d109      	bne.n	8015862 <tcp_close+0x22>
 801584e:	4b0f      	ldr	r3, [pc, #60]	; (801588c <tcp_close+0x4c>)
 8015850:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015854:	490e      	ldr	r1, [pc, #56]	; (8015890 <tcp_close+0x50>)
 8015856:	480f      	ldr	r0, [pc, #60]	; (8015894 <tcp_close+0x54>)
 8015858:	f006 f816 	bl	801b888 <iprintf>
 801585c:	f06f 030f 	mvn.w	r3, #15
 8015860:	e00f      	b.n	8015882 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	7d1b      	ldrb	r3, [r3, #20]
 8015866:	2b01      	cmp	r3, #1
 8015868:	d006      	beq.n	8015878 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	8b5b      	ldrh	r3, [r3, #26]
 801586e:	f043 0310 	orr.w	r3, r3, #16
 8015872:	b29a      	uxth	r2, r3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015878:	2101      	movs	r1, #1
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f7ff fe94 	bl	80155a8 <tcp_close_shutdown>
 8015880:	4603      	mov	r3, r0
}
 8015882:	4618      	mov	r0, r3
 8015884:	3708      	adds	r7, #8
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	0801de88 	.word	0x0801de88
 8015890:	0801dfd4 	.word	0x0801dfd4
 8015894:	0801df08 	.word	0x0801df08

08015898 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08e      	sub	sp, #56	; 0x38
 801589c:	af04      	add	r7, sp, #16
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d107      	bne.n	80158b8 <tcp_abandon+0x20>
 80158a8:	4b52      	ldr	r3, [pc, #328]	; (80159f4 <tcp_abandon+0x15c>)
 80158aa:	f240 223d 	movw	r2, #573	; 0x23d
 80158ae:	4952      	ldr	r1, [pc, #328]	; (80159f8 <tcp_abandon+0x160>)
 80158b0:	4852      	ldr	r0, [pc, #328]	; (80159fc <tcp_abandon+0x164>)
 80158b2:	f005 ffe9 	bl	801b888 <iprintf>
 80158b6:	e099      	b.n	80159ec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	7d1b      	ldrb	r3, [r3, #20]
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d106      	bne.n	80158ce <tcp_abandon+0x36>
 80158c0:	4b4c      	ldr	r3, [pc, #304]	; (80159f4 <tcp_abandon+0x15c>)
 80158c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80158c6:	494e      	ldr	r1, [pc, #312]	; (8015a00 <tcp_abandon+0x168>)
 80158c8:	484c      	ldr	r0, [pc, #304]	; (80159fc <tcp_abandon+0x164>)
 80158ca:	f005 ffdd 	bl	801b888 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	7d1b      	ldrb	r3, [r3, #20]
 80158d2:	2b0a      	cmp	r3, #10
 80158d4:	d107      	bne.n	80158e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80158d6:	6879      	ldr	r1, [r7, #4]
 80158d8:	484a      	ldr	r0, [pc, #296]	; (8015a04 <tcp_abandon+0x16c>)
 80158da:	f000 ffc3 	bl	8016864 <tcp_pcb_remove>
    tcp_free(pcb);
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f7ff fdb0 	bl	8015444 <tcp_free>
 80158e4:	e082      	b.n	80159ec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80158e6:	2300      	movs	r3, #0
 80158e8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80158ea:	2300      	movs	r3, #0
 80158ec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015900:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	7d1b      	ldrb	r3, [r3, #20]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d126      	bne.n	801595e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	8adb      	ldrh	r3, [r3, #22]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d02e      	beq.n	8015976 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015918:	4b3b      	ldr	r3, [pc, #236]	; (8015a08 <tcp_abandon+0x170>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	687a      	ldr	r2, [r7, #4]
 801591e:	429a      	cmp	r2, r3
 8015920:	d105      	bne.n	801592e <tcp_abandon+0x96>
 8015922:	4b39      	ldr	r3, [pc, #228]	; (8015a08 <tcp_abandon+0x170>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	4a37      	ldr	r2, [pc, #220]	; (8015a08 <tcp_abandon+0x170>)
 801592a:	6013      	str	r3, [r2, #0]
 801592c:	e013      	b.n	8015956 <tcp_abandon+0xbe>
 801592e:	4b36      	ldr	r3, [pc, #216]	; (8015a08 <tcp_abandon+0x170>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	61fb      	str	r3, [r7, #28]
 8015934:	e00c      	b.n	8015950 <tcp_abandon+0xb8>
 8015936:	69fb      	ldr	r3, [r7, #28]
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	429a      	cmp	r2, r3
 801593e:	d104      	bne.n	801594a <tcp_abandon+0xb2>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	68da      	ldr	r2, [r3, #12]
 8015944:	69fb      	ldr	r3, [r7, #28]
 8015946:	60da      	str	r2, [r3, #12]
 8015948:	e005      	b.n	8015956 <tcp_abandon+0xbe>
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	61fb      	str	r3, [r7, #28]
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d1ef      	bne.n	8015936 <tcp_abandon+0x9e>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2200      	movs	r2, #0
 801595a:	60da      	str	r2, [r3, #12]
 801595c:	e00b      	b.n	8015976 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	8adb      	ldrh	r3, [r3, #22]
 8015966:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015968:	6879      	ldr	r1, [r7, #4]
 801596a:	4828      	ldr	r0, [pc, #160]	; (8015a0c <tcp_abandon+0x174>)
 801596c:	f000 ff7a 	bl	8016864 <tcp_pcb_remove>
 8015970:	4b27      	ldr	r3, [pc, #156]	; (8015a10 <tcp_abandon+0x178>)
 8015972:	2201      	movs	r2, #1
 8015974:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801597a:	2b00      	cmp	r3, #0
 801597c:	d004      	beq.n	8015988 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015982:	4618      	mov	r0, r3
 8015984:	f000 fd1c 	bl	80163c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801598c:	2b00      	cmp	r3, #0
 801598e:	d004      	beq.n	801599a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015994:	4618      	mov	r0, r3
 8015996:	f000 fd13 	bl	80163c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d004      	beq.n	80159ac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159a6:	4618      	mov	r0, r3
 80159a8:	f000 fd0a 	bl	80163c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80159ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00e      	beq.n	80159d0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80159b2:	6879      	ldr	r1, [r7, #4]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	3304      	adds	r3, #4
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	8b12      	ldrh	r2, [r2, #24]
 80159bc:	9202      	str	r2, [sp, #8]
 80159be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80159c0:	9201      	str	r2, [sp, #4]
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	460b      	mov	r3, r1
 80159c6:	697a      	ldr	r2, [r7, #20]
 80159c8:	69b9      	ldr	r1, [r7, #24]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f004 fcc2 	bl	801a354 <tcp_rst>
    }
    last_state = pcb->state;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	7d1b      	ldrb	r3, [r3, #20]
 80159d4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f7ff fd34 	bl	8015444 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d004      	beq.n	80159ec <tcp_abandon+0x154>
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	f06f 010c 	mvn.w	r1, #12
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	4798      	blx	r3
  }
}
 80159ec:	3728      	adds	r7, #40	; 0x28
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	0801de88 	.word	0x0801de88
 80159f8:	0801e008 	.word	0x0801e008
 80159fc:	0801df08 	.word	0x0801df08
 8015a00:	0801e024 	.word	0x0801e024
 8015a04:	2400c98c 	.word	0x2400c98c
 8015a08:	2400c980 	.word	0x2400c980
 8015a0c:	2400c988 	.word	0x2400c988
 8015a10:	2400c990 	.word	0x2400c990

08015a14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015a1c:	2101      	movs	r1, #1
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7ff ff3a 	bl	8015898 <tcp_abandon>
}
 8015a24:	bf00      	nop
 8015a26:	3708      	adds	r7, #8
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d106      	bne.n	8015a48 <tcp_update_rcv_ann_wnd+0x1c>
 8015a3a:	4b25      	ldr	r3, [pc, #148]	; (8015ad0 <tcp_update_rcv_ann_wnd+0xa4>)
 8015a3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015a40:	4924      	ldr	r1, [pc, #144]	; (8015ad4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015a42:	4825      	ldr	r0, [pc, #148]	; (8015ad8 <tcp_update_rcv_ann_wnd+0xac>)
 8015a44:	f005 ff20 	bl	801b888 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a4c:	687a      	ldr	r2, [r7, #4]
 8015a4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015a50:	4413      	add	r3, r2
 8015a52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015a5c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015a60:	bf28      	it	cs
 8015a62:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015a66:	b292      	uxth	r2, r2
 8015a68:	4413      	add	r3, r2
 8015a6a:	68fa      	ldr	r2, [r7, #12]
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	db08      	blt.n	8015a84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a7e:	68fa      	ldr	r2, [r7, #12]
 8015a80:	1ad3      	subs	r3, r2, r3
 8015a82:	e020      	b.n	8015ac6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	dd03      	ble.n	8015a9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2200      	movs	r2, #0
 8015a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015a98:	e014      	b.n	8015ac4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa2:	1ad3      	subs	r3, r2, r3
 8015aa4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015aac:	d306      	bcc.n	8015abc <tcp_update_rcv_ann_wnd+0x90>
 8015aae:	4b08      	ldr	r3, [pc, #32]	; (8015ad0 <tcp_update_rcv_ann_wnd+0xa4>)
 8015ab0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015ab4:	4909      	ldr	r1, [pc, #36]	; (8015adc <tcp_update_rcv_ann_wnd+0xb0>)
 8015ab6:	4808      	ldr	r0, [pc, #32]	; (8015ad8 <tcp_update_rcv_ann_wnd+0xac>)
 8015ab8:	f005 fee6 	bl	801b888 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015ac4:	2300      	movs	r3, #0
  }
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	0801de88 	.word	0x0801de88
 8015ad4:	0801e120 	.word	0x0801e120
 8015ad8:	0801df08 	.word	0x0801df08
 8015adc:	0801e144 	.word	0x0801e144

08015ae0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	460b      	mov	r3, r1
 8015aea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d107      	bne.n	8015b02 <tcp_recved+0x22>
 8015af2:	4b1f      	ldr	r3, [pc, #124]	; (8015b70 <tcp_recved+0x90>)
 8015af4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015af8:	491e      	ldr	r1, [pc, #120]	; (8015b74 <tcp_recved+0x94>)
 8015afa:	481f      	ldr	r0, [pc, #124]	; (8015b78 <tcp_recved+0x98>)
 8015afc:	f005 fec4 	bl	801b888 <iprintf>
 8015b00:	e032      	b.n	8015b68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	7d1b      	ldrb	r3, [r3, #20]
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	d106      	bne.n	8015b18 <tcp_recved+0x38>
 8015b0a:	4b19      	ldr	r3, [pc, #100]	; (8015b70 <tcp_recved+0x90>)
 8015b0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015b10:	491a      	ldr	r1, [pc, #104]	; (8015b7c <tcp_recved+0x9c>)
 8015b12:	4819      	ldr	r0, [pc, #100]	; (8015b78 <tcp_recved+0x98>)
 8015b14:	f005 feb8 	bl	801b888 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015b1c:	887b      	ldrh	r3, [r7, #2]
 8015b1e:	4413      	add	r3, r2
 8015b20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015b22:	89fb      	ldrh	r3, [r7, #14]
 8015b24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015b28:	d804      	bhi.n	8015b34 <tcp_recved+0x54>
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b2e:	89fa      	ldrh	r2, [r7, #14]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d204      	bcs.n	8015b3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015b3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8015b3c:	e002      	b.n	8015b44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	89fa      	ldrh	r2, [r7, #14]
 8015b42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f7ff ff71 	bl	8015a2c <tcp_update_rcv_ann_wnd>
 8015b4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015b52:	d309      	bcc.n	8015b68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	8b5b      	ldrh	r3, [r3, #26]
 8015b58:	f043 0302 	orr.w	r3, r3, #2
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f003 fe42 	bl	80197ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	0801de88 	.word	0x0801de88
 8015b74:	0801e160 	.word	0x0801e160
 8015b78:	0801df08 	.word	0x0801df08
 8015b7c:	0801e178 	.word	0x0801e178

08015b80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015b80:	b5b0      	push	{r4, r5, r7, lr}
 8015b82:	b090      	sub	sp, #64	; 0x40
 8015b84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015b8c:	4b94      	ldr	r3, [pc, #592]	; (8015de0 <tcp_slowtmr+0x260>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	3301      	adds	r3, #1
 8015b92:	4a93      	ldr	r2, [pc, #588]	; (8015de0 <tcp_slowtmr+0x260>)
 8015b94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015b96:	4b93      	ldr	r3, [pc, #588]	; (8015de4 <tcp_slowtmr+0x264>)
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	b2da      	uxtb	r2, r3
 8015b9e:	4b91      	ldr	r3, [pc, #580]	; (8015de4 <tcp_slowtmr+0x264>)
 8015ba0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015ba6:	4b90      	ldr	r3, [pc, #576]	; (8015de8 <tcp_slowtmr+0x268>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015bac:	e29d      	b.n	80160ea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb0:	7d1b      	ldrb	r3, [r3, #20]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d106      	bne.n	8015bc4 <tcp_slowtmr+0x44>
 8015bb6:	4b8d      	ldr	r3, [pc, #564]	; (8015dec <tcp_slowtmr+0x26c>)
 8015bb8:	f240 42be 	movw	r2, #1214	; 0x4be
 8015bbc:	498c      	ldr	r1, [pc, #560]	; (8015df0 <tcp_slowtmr+0x270>)
 8015bbe:	488d      	ldr	r0, [pc, #564]	; (8015df4 <tcp_slowtmr+0x274>)
 8015bc0:	f005 fe62 	bl	801b888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc6:	7d1b      	ldrb	r3, [r3, #20]
 8015bc8:	2b01      	cmp	r3, #1
 8015bca:	d106      	bne.n	8015bda <tcp_slowtmr+0x5a>
 8015bcc:	4b87      	ldr	r3, [pc, #540]	; (8015dec <tcp_slowtmr+0x26c>)
 8015bce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015bd2:	4989      	ldr	r1, [pc, #548]	; (8015df8 <tcp_slowtmr+0x278>)
 8015bd4:	4887      	ldr	r0, [pc, #540]	; (8015df4 <tcp_slowtmr+0x274>)
 8015bd6:	f005 fe57 	bl	801b888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bdc:	7d1b      	ldrb	r3, [r3, #20]
 8015bde:	2b0a      	cmp	r3, #10
 8015be0:	d106      	bne.n	8015bf0 <tcp_slowtmr+0x70>
 8015be2:	4b82      	ldr	r3, [pc, #520]	; (8015dec <tcp_slowtmr+0x26c>)
 8015be4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015be8:	4984      	ldr	r1, [pc, #528]	; (8015dfc <tcp_slowtmr+0x27c>)
 8015bea:	4882      	ldr	r0, [pc, #520]	; (8015df4 <tcp_slowtmr+0x274>)
 8015bec:	f005 fe4c 	bl	801b888 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf2:	7f9a      	ldrb	r2, [r3, #30]
 8015bf4:	4b7b      	ldr	r3, [pc, #492]	; (8015de4 <tcp_slowtmr+0x264>)
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d105      	bne.n	8015c08 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015c06:	e270      	b.n	80160ea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015c08:	4b76      	ldr	r3, [pc, #472]	; (8015de4 <tcp_slowtmr+0x264>)
 8015c0a:	781a      	ldrb	r2, [r3, #0]
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015c10:	2300      	movs	r3, #0
 8015c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015c16:	2300      	movs	r3, #0
 8015c18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1e:	7d1b      	ldrb	r3, [r3, #20]
 8015c20:	2b02      	cmp	r3, #2
 8015c22:	d10a      	bne.n	8015c3a <tcp_slowtmr+0xba>
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c2a:	2b05      	cmp	r3, #5
 8015c2c:	d905      	bls.n	8015c3a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c32:	3301      	adds	r3, #1
 8015c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c38:	e11e      	b.n	8015e78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c40:	2b0b      	cmp	r3, #11
 8015c42:	d905      	bls.n	8015c50 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c48:	3301      	adds	r3, #1
 8015c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c4e:	e113      	b.n	8015e78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d075      	beq.n	8015d46 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <tcp_slowtmr+0xf0>
 8015c62:	4b62      	ldr	r3, [pc, #392]	; (8015dec <tcp_slowtmr+0x26c>)
 8015c64:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015c68:	4965      	ldr	r1, [pc, #404]	; (8015e00 <tcp_slowtmr+0x280>)
 8015c6a:	4862      	ldr	r0, [pc, #392]	; (8015df4 <tcp_slowtmr+0x274>)
 8015c6c:	f005 fe0c 	bl	801b888 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d106      	bne.n	8015c86 <tcp_slowtmr+0x106>
 8015c78:	4b5c      	ldr	r3, [pc, #368]	; (8015dec <tcp_slowtmr+0x26c>)
 8015c7a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015c7e:	4961      	ldr	r1, [pc, #388]	; (8015e04 <tcp_slowtmr+0x284>)
 8015c80:	485c      	ldr	r0, [pc, #368]	; (8015df4 <tcp_slowtmr+0x274>)
 8015c82:	f005 fe01 	bl	801b888 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015c8c:	2b0b      	cmp	r3, #11
 8015c8e:	d905      	bls.n	8015c9c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c94:	3301      	adds	r3, #1
 8015c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c9a:	e0ed      	b.n	8015e78 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015ca2:	3b01      	subs	r3, #1
 8015ca4:	4a58      	ldr	r2, [pc, #352]	; (8015e08 <tcp_slowtmr+0x288>)
 8015ca6:	5cd3      	ldrb	r3, [r2, r3]
 8015ca8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015cb0:	7c7a      	ldrb	r2, [r7, #17]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d907      	bls.n	8015cc6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	b2da      	uxtb	r2, r3
 8015cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015ccc:	7c7a      	ldrb	r2, [r7, #17]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	f200 80d2 	bhi.w	8015e78 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d108      	bne.n	8015cf4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ce4:	f004 fc2a 	bl	801a53c <tcp_zero_window_probe>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d014      	beq.n	8015d18 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015cee:	2300      	movs	r3, #0
 8015cf0:	623b      	str	r3, [r7, #32]
 8015cf2:	e011      	b.n	8015d18 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015cfa:	4619      	mov	r1, r3
 8015cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cfe:	f003 faef 	bl	80192e0 <tcp_split_unsent_seg>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d107      	bne.n	8015d18 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d0a:	f003 fd6f 	bl	80197ec <tcp_output>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d101      	bne.n	8015d18 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015d18:	6a3b      	ldr	r3, [r7, #32]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	f000 80ac 	beq.w	8015e78 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d22:	2200      	movs	r2, #0
 8015d24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d2e:	2b06      	cmp	r3, #6
 8015d30:	f200 80a2 	bhi.w	8015e78 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	b2da      	uxtb	r2, r3
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015d44:	e098      	b.n	8015e78 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	db0f      	blt.n	8015d70 <tcp_slowtmr+0x1f0>
 8015d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d56:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	d008      	beq.n	8015d70 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	3301      	adds	r3, #1
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	b21a      	sxth	r2, r3
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	db7b      	blt.n	8015e78 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d82:	f004 f827 	bl	8019dd4 <tcp_rexmit_rto_prepare>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d007      	beq.n	8015d9c <tcp_slowtmr+0x21c>
 8015d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d171      	bne.n	8015e78 <tcp_slowtmr+0x2f8>
 8015d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d06d      	beq.n	8015e78 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	7d1b      	ldrb	r3, [r3, #20]
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	d03a      	beq.n	8015e1a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015daa:	2b0c      	cmp	r3, #12
 8015dac:	bf28      	it	cs
 8015dae:	230c      	movcs	r3, #12
 8015db0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015db8:	10db      	asrs	r3, r3, #3
 8015dba:	b21b      	sxth	r3, r3
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015dc4:	4413      	add	r3, r2
 8015dc6:	7efa      	ldrb	r2, [r7, #27]
 8015dc8:	4910      	ldr	r1, [pc, #64]	; (8015e0c <tcp_slowtmr+0x28c>)
 8015dca:	5c8a      	ldrb	r2, [r1, r2]
 8015dcc:	4093      	lsls	r3, r2
 8015dce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015dd6:	4293      	cmp	r3, r2
 8015dd8:	dc1a      	bgt.n	8015e10 <tcp_slowtmr+0x290>
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	b21a      	sxth	r2, r3
 8015dde:	e019      	b.n	8015e14 <tcp_slowtmr+0x294>
 8015de0:	2400c97c 	.word	0x2400c97c
 8015de4:	2400c992 	.word	0x2400c992
 8015de8:	2400c988 	.word	0x2400c988
 8015dec:	0801de88 	.word	0x0801de88
 8015df0:	0801e208 	.word	0x0801e208
 8015df4:	0801df08 	.word	0x0801df08
 8015df8:	0801e234 	.word	0x0801e234
 8015dfc:	0801e260 	.word	0x0801e260
 8015e00:	0801e290 	.word	0x0801e290
 8015e04:	0801e2c4 	.word	0x0801e2c4
 8015e08:	0801fa6c 	.word	0x0801fa6c
 8015e0c:	0801fa5c 	.word	0x0801fa5c
 8015e10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	bf28      	it	cs
 8015e30:	4613      	movcs	r3, r2
 8015e32:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015e34:	8a7b      	ldrh	r3, [r7, #18]
 8015e36:	085b      	lsrs	r3, r3, #1
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e4a:	005b      	lsls	r3, r3, #1
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d206      	bcs.n	8015e60 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e56:	005b      	lsls	r3, r3, #1
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e62:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e74:	f004 f81e 	bl	8019eb4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7a:	7d1b      	ldrb	r3, [r3, #20]
 8015e7c:	2b06      	cmp	r3, #6
 8015e7e:	d111      	bne.n	8015ea4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e82:	8b5b      	ldrh	r3, [r3, #26]
 8015e84:	f003 0310 	and.w	r3, r3, #16
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d00b      	beq.n	8015ea4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e8c:	4b9c      	ldr	r3, [pc, #624]	; (8016100 <tcp_slowtmr+0x580>)
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e92:	6a1b      	ldr	r3, [r3, #32]
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	2b28      	cmp	r3, #40	; 0x28
 8015e98:	d904      	bls.n	8015ea4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	7a5b      	ldrb	r3, [r3, #9]
 8015ea8:	f003 0308 	and.w	r3, r3, #8
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d04a      	beq.n	8015f46 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8015eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015eb4:	2b04      	cmp	r3, #4
 8015eb6:	d003      	beq.n	8015ec0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015ebc:	2b07      	cmp	r3, #7
 8015ebe:	d142      	bne.n	8015f46 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ec0:	4b8f      	ldr	r3, [pc, #572]	; (8016100 <tcp_slowtmr+0x580>)
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec6:	6a1b      	ldr	r3, [r3, #32]
 8015ec8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015ed0:	4b8c      	ldr	r3, [pc, #560]	; (8016104 <tcp_slowtmr+0x584>)
 8015ed2:	440b      	add	r3, r1
 8015ed4:	498c      	ldr	r1, [pc, #560]	; (8016108 <tcp_slowtmr+0x588>)
 8015ed6:	fba1 1303 	umull	r1, r3, r1, r3
 8015eda:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d90a      	bls.n	8015ef6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015eee:	3301      	adds	r3, #1
 8015ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015ef4:	e027      	b.n	8015f46 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ef6:	4b82      	ldr	r3, [pc, #520]	; (8016100 <tcp_slowtmr+0x580>)
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efc:	6a1b      	ldr	r3, [r3, #32]
 8015efe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f02:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	4b7f      	ldr	r3, [pc, #508]	; (801610c <tcp_slowtmr+0x58c>)
 8015f10:	fb00 f303 	mul.w	r3, r0, r3
 8015f14:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015f16:	497c      	ldr	r1, [pc, #496]	; (8016108 <tcp_slowtmr+0x588>)
 8015f18:	fba1 1303 	umull	r1, r3, r1, r3
 8015f1c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d911      	bls.n	8015f46 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8015f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f24:	f004 faca 	bl	801a4bc <tcp_keepalive>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015f2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d107      	bne.n	8015f46 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8015f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f38:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	b2da      	uxtb	r2, r3
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d011      	beq.n	8015f72 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015f4e:	4b6c      	ldr	r3, [pc, #432]	; (8016100 <tcp_slowtmr+0x580>)
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f54:	6a1b      	ldr	r3, [r3, #32]
 8015f56:	1ad2      	subs	r2, r2, r3
 8015f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015f5e:	4619      	mov	r1, r3
 8015f60:	460b      	mov	r3, r1
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	440b      	add	r3, r1
 8015f66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d302      	bcc.n	8015f72 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f6e:	f000 fddd 	bl	8016b2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f74:	7d1b      	ldrb	r3, [r3, #20]
 8015f76:	2b03      	cmp	r3, #3
 8015f78:	d10b      	bne.n	8015f92 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f7a:	4b61      	ldr	r3, [pc, #388]	; (8016100 <tcp_slowtmr+0x580>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f80:	6a1b      	ldr	r3, [r3, #32]
 8015f82:	1ad3      	subs	r3, r2, r3
 8015f84:	2b28      	cmp	r3, #40	; 0x28
 8015f86:	d904      	bls.n	8015f92 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f94:	7d1b      	ldrb	r3, [r3, #20]
 8015f96:	2b09      	cmp	r3, #9
 8015f98:	d10b      	bne.n	8015fb2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015f9a:	4b59      	ldr	r3, [pc, #356]	; (8016100 <tcp_slowtmr+0x580>)
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa0:	6a1b      	ldr	r3, [r3, #32]
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	2bf0      	cmp	r3, #240	; 0xf0
 8015fa6:	d904      	bls.n	8015fb2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8015fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fac:	3301      	adds	r3, #1
 8015fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d060      	beq.n	801607c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fc0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015fc4:	f000 fbfe 	bl	80167c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d010      	beq.n	8015ff0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015fce:	4b50      	ldr	r3, [pc, #320]	; (8016110 <tcp_slowtmr+0x590>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d106      	bne.n	8015fe6 <tcp_slowtmr+0x466>
 8015fd8:	4b4e      	ldr	r3, [pc, #312]	; (8016114 <tcp_slowtmr+0x594>)
 8015fda:	f240 526d 	movw	r2, #1389	; 0x56d
 8015fde:	494e      	ldr	r1, [pc, #312]	; (8016118 <tcp_slowtmr+0x598>)
 8015fe0:	484e      	ldr	r0, [pc, #312]	; (801611c <tcp_slowtmr+0x59c>)
 8015fe2:	f005 fc51 	bl	801b888 <iprintf>
        prev->next = pcb->next;
 8015fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe8:	68da      	ldr	r2, [r3, #12]
 8015fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fec:	60da      	str	r2, [r3, #12]
 8015fee:	e00f      	b.n	8016010 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015ff0:	4b47      	ldr	r3, [pc, #284]	; (8016110 <tcp_slowtmr+0x590>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d006      	beq.n	8016008 <tcp_slowtmr+0x488>
 8015ffa:	4b46      	ldr	r3, [pc, #280]	; (8016114 <tcp_slowtmr+0x594>)
 8015ffc:	f240 5271 	movw	r2, #1393	; 0x571
 8016000:	4947      	ldr	r1, [pc, #284]	; (8016120 <tcp_slowtmr+0x5a0>)
 8016002:	4846      	ldr	r0, [pc, #280]	; (801611c <tcp_slowtmr+0x59c>)
 8016004:	f005 fc40 	bl	801b888 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	4a40      	ldr	r2, [pc, #256]	; (8016110 <tcp_slowtmr+0x590>)
 801600e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016014:	2b00      	cmp	r3, #0
 8016016:	d013      	beq.n	8016040 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801601a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801601e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016020:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016024:	3304      	adds	r3, #4
 8016026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016028:	8ad2      	ldrh	r2, [r2, #22]
 801602a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801602c:	8b09      	ldrh	r1, [r1, #24]
 801602e:	9102      	str	r1, [sp, #8]
 8016030:	9201      	str	r2, [sp, #4]
 8016032:	9300      	str	r3, [sp, #0]
 8016034:	462b      	mov	r3, r5
 8016036:	4622      	mov	r2, r4
 8016038:	4601      	mov	r1, r0
 801603a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801603c:	f004 f98a 	bl	801a354 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016042:	691b      	ldr	r3, [r3, #16]
 8016044:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016048:	7d1b      	ldrb	r3, [r3, #20]
 801604a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016056:	6838      	ldr	r0, [r7, #0]
 8016058:	f7ff f9f4 	bl	8015444 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801605c:	4b31      	ldr	r3, [pc, #196]	; (8016124 <tcp_slowtmr+0x5a4>)
 801605e:	2200      	movs	r2, #0
 8016060:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d004      	beq.n	8016072 <tcp_slowtmr+0x4f2>
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f06f 010c 	mvn.w	r1, #12
 801606e:	68b8      	ldr	r0, [r7, #8]
 8016070:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016072:	4b2c      	ldr	r3, [pc, #176]	; (8016124 <tcp_slowtmr+0x5a4>)
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d037      	beq.n	80160ea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801607a:	e592      	b.n	8015ba2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016088:	7f1b      	ldrb	r3, [r3, #28]
 801608a:	3301      	adds	r3, #1
 801608c:	b2da      	uxtb	r2, r3
 801608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016090:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016094:	7f1a      	ldrb	r2, [r3, #28]
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	7f5b      	ldrb	r3, [r3, #29]
 801609a:	429a      	cmp	r2, r3
 801609c:	d325      	bcc.n	80160ea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	2200      	movs	r2, #0
 80160a2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80160a4:	4b1f      	ldr	r3, [pc, #124]	; (8016124 <tcp_slowtmr+0x5a4>)
 80160a6:	2200      	movs	r2, #0
 80160a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80160aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d00b      	beq.n	80160cc <tcp_slowtmr+0x54c>
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160bc:	6912      	ldr	r2, [r2, #16]
 80160be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160c0:	4610      	mov	r0, r2
 80160c2:	4798      	blx	r3
 80160c4:	4603      	mov	r3, r0
 80160c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80160ca:	e002      	b.n	80160d2 <tcp_slowtmr+0x552>
 80160cc:	2300      	movs	r3, #0
 80160ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80160d2:	4b14      	ldr	r3, [pc, #80]	; (8016124 <tcp_slowtmr+0x5a4>)
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d000      	beq.n	80160dc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80160da:	e562      	b.n	8015ba2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80160dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d102      	bne.n	80160ea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80160e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160e6:	f003 fb81 	bl	80197ec <tcp_output>
  while (pcb != NULL) {
 80160ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	f47f ad5e 	bne.w	8015bae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80160f2:	2300      	movs	r3, #0
 80160f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80160f6:	4b0c      	ldr	r3, [pc, #48]	; (8016128 <tcp_slowtmr+0x5a8>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80160fc:	e069      	b.n	80161d2 <tcp_slowtmr+0x652>
 80160fe:	bf00      	nop
 8016100:	2400c97c 	.word	0x2400c97c
 8016104:	000a4cb8 	.word	0x000a4cb8
 8016108:	10624dd3 	.word	0x10624dd3
 801610c:	000124f8 	.word	0x000124f8
 8016110:	2400c988 	.word	0x2400c988
 8016114:	0801de88 	.word	0x0801de88
 8016118:	0801e2fc 	.word	0x0801e2fc
 801611c:	0801df08 	.word	0x0801df08
 8016120:	0801e328 	.word	0x0801e328
 8016124:	2400c990 	.word	0x2400c990
 8016128:	2400c98c 	.word	0x2400c98c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612e:	7d1b      	ldrb	r3, [r3, #20]
 8016130:	2b0a      	cmp	r3, #10
 8016132:	d006      	beq.n	8016142 <tcp_slowtmr+0x5c2>
 8016134:	4b2b      	ldr	r3, [pc, #172]	; (80161e4 <tcp_slowtmr+0x664>)
 8016136:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801613a:	492b      	ldr	r1, [pc, #172]	; (80161e8 <tcp_slowtmr+0x668>)
 801613c:	482b      	ldr	r0, [pc, #172]	; (80161ec <tcp_slowtmr+0x66c>)
 801613e:	f005 fba3 	bl	801b888 <iprintf>
    pcb_remove = 0;
 8016142:	2300      	movs	r3, #0
 8016144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016148:	4b29      	ldr	r3, [pc, #164]	; (80161f0 <tcp_slowtmr+0x670>)
 801614a:	681a      	ldr	r2, [r3, #0]
 801614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614e:	6a1b      	ldr	r3, [r3, #32]
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	2bf0      	cmp	r3, #240	; 0xf0
 8016154:	d904      	bls.n	8016160 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801615a:	3301      	adds	r3, #1
 801615c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016164:	2b00      	cmp	r3, #0
 8016166:	d02f      	beq.n	80161c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801616a:	f000 fb2b 	bl	80167c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016170:	2b00      	cmp	r3, #0
 8016172:	d010      	beq.n	8016196 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016174:	4b1f      	ldr	r3, [pc, #124]	; (80161f4 <tcp_slowtmr+0x674>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801617a:	429a      	cmp	r2, r3
 801617c:	d106      	bne.n	801618c <tcp_slowtmr+0x60c>
 801617e:	4b19      	ldr	r3, [pc, #100]	; (80161e4 <tcp_slowtmr+0x664>)
 8016180:	f240 52af 	movw	r2, #1455	; 0x5af
 8016184:	491c      	ldr	r1, [pc, #112]	; (80161f8 <tcp_slowtmr+0x678>)
 8016186:	4819      	ldr	r0, [pc, #100]	; (80161ec <tcp_slowtmr+0x66c>)
 8016188:	f005 fb7e 	bl	801b888 <iprintf>
        prev->next = pcb->next;
 801618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618e:	68da      	ldr	r2, [r3, #12]
 8016190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016192:	60da      	str	r2, [r3, #12]
 8016194:	e00f      	b.n	80161b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016196:	4b17      	ldr	r3, [pc, #92]	; (80161f4 <tcp_slowtmr+0x674>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801619c:	429a      	cmp	r2, r3
 801619e:	d006      	beq.n	80161ae <tcp_slowtmr+0x62e>
 80161a0:	4b10      	ldr	r3, [pc, #64]	; (80161e4 <tcp_slowtmr+0x664>)
 80161a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80161a6:	4915      	ldr	r1, [pc, #84]	; (80161fc <tcp_slowtmr+0x67c>)
 80161a8:	4810      	ldr	r0, [pc, #64]	; (80161ec <tcp_slowtmr+0x66c>)
 80161aa:	f005 fb6d 	bl	801b888 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80161ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b0:	68db      	ldr	r3, [r3, #12]
 80161b2:	4a10      	ldr	r2, [pc, #64]	; (80161f4 <tcp_slowtmr+0x674>)
 80161b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80161b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80161ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161bc:	68db      	ldr	r3, [r3, #12]
 80161be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80161c0:	69f8      	ldr	r0, [r7, #28]
 80161c2:	f7ff f93f 	bl	8015444 <tcp_free>
 80161c6:	e004      	b.n	80161d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80161c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80161cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ce:	68db      	ldr	r3, [r3, #12]
 80161d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80161d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d1a9      	bne.n	801612c <tcp_slowtmr+0x5ac>
    }
  }
}
 80161d8:	bf00      	nop
 80161da:	bf00      	nop
 80161dc:	3730      	adds	r7, #48	; 0x30
 80161de:	46bd      	mov	sp, r7
 80161e0:	bdb0      	pop	{r4, r5, r7, pc}
 80161e2:	bf00      	nop
 80161e4:	0801de88 	.word	0x0801de88
 80161e8:	0801e354 	.word	0x0801e354
 80161ec:	0801df08 	.word	0x0801df08
 80161f0:	2400c97c 	.word	0x2400c97c
 80161f4:	2400c98c 	.word	0x2400c98c
 80161f8:	0801e384 	.word	0x0801e384
 80161fc:	0801e3ac 	.word	0x0801e3ac

08016200 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016206:	4b2d      	ldr	r3, [pc, #180]	; (80162bc <tcp_fasttmr+0xbc>)
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	3301      	adds	r3, #1
 801620c:	b2da      	uxtb	r2, r3
 801620e:	4b2b      	ldr	r3, [pc, #172]	; (80162bc <tcp_fasttmr+0xbc>)
 8016210:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016212:	4b2b      	ldr	r3, [pc, #172]	; (80162c0 <tcp_fasttmr+0xc0>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016218:	e048      	b.n	80162ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	7f9a      	ldrb	r2, [r3, #30]
 801621e:	4b27      	ldr	r3, [pc, #156]	; (80162bc <tcp_fasttmr+0xbc>)
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	429a      	cmp	r2, r3
 8016224:	d03f      	beq.n	80162a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016226:	4b25      	ldr	r3, [pc, #148]	; (80162bc <tcp_fasttmr+0xbc>)
 8016228:	781a      	ldrb	r2, [r3, #0]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	8b5b      	ldrh	r3, [r3, #26]
 8016232:	f003 0301 	and.w	r3, r3, #1
 8016236:	2b00      	cmp	r3, #0
 8016238:	d010      	beq.n	801625c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	8b5b      	ldrh	r3, [r3, #26]
 801623e:	f043 0302 	orr.w	r3, r3, #2
 8016242:	b29a      	uxth	r2, r3
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f003 facf 	bl	80197ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	8b5b      	ldrh	r3, [r3, #26]
 8016252:	f023 0303 	bic.w	r3, r3, #3
 8016256:	b29a      	uxth	r2, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	8b5b      	ldrh	r3, [r3, #26]
 8016260:	f003 0308 	and.w	r3, r3, #8
 8016264:	2b00      	cmp	r3, #0
 8016266:	d009      	beq.n	801627c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	8b5b      	ldrh	r3, [r3, #26]
 801626c:	f023 0308 	bic.w	r3, r3, #8
 8016270:	b29a      	uxth	r2, r3
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7ff fa78 	bl	801576c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016286:	2b00      	cmp	r3, #0
 8016288:	d00a      	beq.n	80162a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801628a:	4b0e      	ldr	r3, [pc, #56]	; (80162c4 <tcp_fasttmr+0xc4>)
 801628c:	2200      	movs	r2, #0
 801628e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f819 	bl	80162c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016296:	4b0b      	ldr	r3, [pc, #44]	; (80162c4 <tcp_fasttmr+0xc4>)
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d000      	beq.n	80162a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801629e:	e7b8      	b.n	8016212 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	607b      	str	r3, [r7, #4]
 80162a4:	e002      	b.n	80162ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	68db      	ldr	r3, [r3, #12]
 80162aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d1b3      	bne.n	801621a <tcp_fasttmr+0x1a>
    }
  }
}
 80162b2:	bf00      	nop
 80162b4:	bf00      	nop
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	2400c992 	.word	0x2400c992
 80162c0:	2400c988 	.word	0x2400c988
 80162c4:	2400c990 	.word	0x2400c990

080162c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80162c8:	b590      	push	{r4, r7, lr}
 80162ca:	b085      	sub	sp, #20
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d109      	bne.n	80162ea <tcp_process_refused_data+0x22>
 80162d6:	4b37      	ldr	r3, [pc, #220]	; (80163b4 <tcp_process_refused_data+0xec>)
 80162d8:	f240 6209 	movw	r2, #1545	; 0x609
 80162dc:	4936      	ldr	r1, [pc, #216]	; (80163b8 <tcp_process_refused_data+0xf0>)
 80162de:	4837      	ldr	r0, [pc, #220]	; (80163bc <tcp_process_refused_data+0xf4>)
 80162e0:	f005 fad2 	bl	801b888 <iprintf>
 80162e4:	f06f 030f 	mvn.w	r3, #15
 80162e8:	e060      	b.n	80163ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162ee:	7b5b      	ldrb	r3, [r3, #13]
 80162f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2200      	movs	r2, #0
 80162fc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016304:	2b00      	cmp	r3, #0
 8016306:	d00b      	beq.n	8016320 <tcp_process_refused_data+0x58>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6918      	ldr	r0, [r3, #16]
 8016312:	2300      	movs	r3, #0
 8016314:	68ba      	ldr	r2, [r7, #8]
 8016316:	6879      	ldr	r1, [r7, #4]
 8016318:	47a0      	blx	r4
 801631a:	4603      	mov	r3, r0
 801631c:	73fb      	strb	r3, [r7, #15]
 801631e:	e007      	b.n	8016330 <tcp_process_refused_data+0x68>
 8016320:	2300      	movs	r3, #0
 8016322:	68ba      	ldr	r2, [r7, #8]
 8016324:	6879      	ldr	r1, [r7, #4]
 8016326:	2000      	movs	r0, #0
 8016328:	f000 f8a4 	bl	8016474 <tcp_recv_null>
 801632c:	4603      	mov	r3, r0
 801632e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d12a      	bne.n	801638e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016338:	7bbb      	ldrb	r3, [r7, #14]
 801633a:	f003 0320 	and.w	r3, r3, #32
 801633e:	2b00      	cmp	r3, #0
 8016340:	d033      	beq.n	80163aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016346:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801634a:	d005      	beq.n	8016358 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016350:	3301      	adds	r3, #1
 8016352:	b29a      	uxth	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801635e:	2b00      	cmp	r3, #0
 8016360:	d00b      	beq.n	801637a <tcp_process_refused_data+0xb2>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	6918      	ldr	r0, [r3, #16]
 801636c:	2300      	movs	r3, #0
 801636e:	2200      	movs	r2, #0
 8016370:	6879      	ldr	r1, [r7, #4]
 8016372:	47a0      	blx	r4
 8016374:	4603      	mov	r3, r0
 8016376:	73fb      	strb	r3, [r7, #15]
 8016378:	e001      	b.n	801637e <tcp_process_refused_data+0xb6>
 801637a:	2300      	movs	r3, #0
 801637c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801637e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016382:	f113 0f0d 	cmn.w	r3, #13
 8016386:	d110      	bne.n	80163aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016388:	f06f 030c 	mvn.w	r3, #12
 801638c:	e00e      	b.n	80163ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801638e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016392:	f113 0f0d 	cmn.w	r3, #13
 8016396:	d102      	bne.n	801639e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016398:	f06f 030c 	mvn.w	r3, #12
 801639c:	e006      	b.n	80163ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	68ba      	ldr	r2, [r7, #8]
 80163a2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80163a4:	f06f 0304 	mvn.w	r3, #4
 80163a8:	e000      	b.n	80163ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80163aa:	2300      	movs	r3, #0
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3714      	adds	r7, #20
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd90      	pop	{r4, r7, pc}
 80163b4:	0801de88 	.word	0x0801de88
 80163b8:	0801e3d4 	.word	0x0801e3d4
 80163bc:	0801df08 	.word	0x0801df08

080163c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80163c8:	e007      	b.n	80163da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f000 f80a 	bl	80163ea <tcp_seg_free>
    seg = next;
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1f4      	bne.n	80163ca <tcp_segs_free+0xa>
  }
}
 80163e0:	bf00      	nop
 80163e2:	bf00      	nop
 80163e4:	3710      	adds	r7, #16
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}

080163ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80163ea:	b580      	push	{r7, lr}
 80163ec:	b082      	sub	sp, #8
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00c      	beq.n	8016412 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d004      	beq.n	801640a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	4618      	mov	r0, r3
 8016406:	f7fe fc6f 	bl	8014ce8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801640a:	6879      	ldr	r1, [r7, #4]
 801640c:	2003      	movs	r0, #3
 801640e:	f7fd fdbb 	bl	8013f88 <memp_free>
  }
}
 8016412:	bf00      	nop
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
	...

0801641c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d106      	bne.n	8016438 <tcp_seg_copy+0x1c>
 801642a:	4b0f      	ldr	r3, [pc, #60]	; (8016468 <tcp_seg_copy+0x4c>)
 801642c:	f240 6282 	movw	r2, #1666	; 0x682
 8016430:	490e      	ldr	r1, [pc, #56]	; (801646c <tcp_seg_copy+0x50>)
 8016432:	480f      	ldr	r0, [pc, #60]	; (8016470 <tcp_seg_copy+0x54>)
 8016434:	f005 fa28 	bl	801b888 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016438:	2003      	movs	r0, #3
 801643a:	f7fd fd2f 	bl	8013e9c <memp_malloc>
 801643e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d101      	bne.n	801644a <tcp_seg_copy+0x2e>
    return NULL;
 8016446:	2300      	movs	r3, #0
 8016448:	e00a      	b.n	8016460 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801644a:	2210      	movs	r2, #16
 801644c:	6879      	ldr	r1, [r7, #4]
 801644e:	68f8      	ldr	r0, [r7, #12]
 8016450:	f005 faf5 	bl	801ba3e <memcpy>
  pbuf_ref(cseg->p);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	685b      	ldr	r3, [r3, #4]
 8016458:	4618      	mov	r0, r3
 801645a:	f7fe fceb 	bl	8014e34 <pbuf_ref>
  return cseg;
 801645e:	68fb      	ldr	r3, [r7, #12]
}
 8016460:	4618      	mov	r0, r3
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	0801de88 	.word	0x0801de88
 801646c:	0801e418 	.word	0x0801e418
 8016470:	0801df08 	.word	0x0801df08

08016474 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
 8016480:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d109      	bne.n	801649c <tcp_recv_null+0x28>
 8016488:	4b12      	ldr	r3, [pc, #72]	; (80164d4 <tcp_recv_null+0x60>)
 801648a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801648e:	4912      	ldr	r1, [pc, #72]	; (80164d8 <tcp_recv_null+0x64>)
 8016490:	4812      	ldr	r0, [pc, #72]	; (80164dc <tcp_recv_null+0x68>)
 8016492:	f005 f9f9 	bl	801b888 <iprintf>
 8016496:	f06f 030f 	mvn.w	r3, #15
 801649a:	e016      	b.n	80164ca <tcp_recv_null+0x56>

  if (p != NULL) {
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d009      	beq.n	80164b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	891b      	ldrh	r3, [r3, #8]
 80164a6:	4619      	mov	r1, r3
 80164a8:	68b8      	ldr	r0, [r7, #8]
 80164aa:	f7ff fb19 	bl	8015ae0 <tcp_recved>
    pbuf_free(p);
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f7fe fc1a 	bl	8014ce8 <pbuf_free>
 80164b4:	e008      	b.n	80164c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80164b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d104      	bne.n	80164c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80164be:	68b8      	ldr	r0, [r7, #8]
 80164c0:	f7ff f9be 	bl	8015840 <tcp_close>
 80164c4:	4603      	mov	r3, r0
 80164c6:	e000      	b.n	80164ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3710      	adds	r7, #16
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	0801de88 	.word	0x0801de88
 80164d8:	0801e434 	.word	0x0801e434
 80164dc:	0801df08 	.word	0x0801df08

080164e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b086      	sub	sp, #24
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	4603      	mov	r3, r0
 80164e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80164ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	db01      	blt.n	80164f6 <tcp_kill_prio+0x16>
 80164f2:	79fb      	ldrb	r3, [r7, #7]
 80164f4:	e000      	b.n	80164f8 <tcp_kill_prio+0x18>
 80164f6:	237f      	movs	r3, #127	; 0x7f
 80164f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80164fa:	7afb      	ldrb	r3, [r7, #11]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d034      	beq.n	801656a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016500:	7afb      	ldrb	r3, [r7, #11]
 8016502:	3b01      	subs	r3, #1
 8016504:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016506:	2300      	movs	r3, #0
 8016508:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801650a:	2300      	movs	r3, #0
 801650c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801650e:	4b19      	ldr	r3, [pc, #100]	; (8016574 <tcp_kill_prio+0x94>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	617b      	str	r3, [r7, #20]
 8016514:	e01f      	b.n	8016556 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	7d5b      	ldrb	r3, [r3, #21]
 801651a:	7afa      	ldrb	r2, [r7, #11]
 801651c:	429a      	cmp	r2, r3
 801651e:	d80c      	bhi.n	801653a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016524:	7afa      	ldrb	r2, [r7, #11]
 8016526:	429a      	cmp	r2, r3
 8016528:	d112      	bne.n	8016550 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801652a:	4b13      	ldr	r3, [pc, #76]	; (8016578 <tcp_kill_prio+0x98>)
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	6a1b      	ldr	r3, [r3, #32]
 8016532:	1ad3      	subs	r3, r2, r3
 8016534:	68fa      	ldr	r2, [r7, #12]
 8016536:	429a      	cmp	r2, r3
 8016538:	d80a      	bhi.n	8016550 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801653a:	4b0f      	ldr	r3, [pc, #60]	; (8016578 <tcp_kill_prio+0x98>)
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	6a1b      	ldr	r3, [r3, #32]
 8016542:	1ad3      	subs	r3, r2, r3
 8016544:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	7d5b      	ldrb	r3, [r3, #21]
 801654e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016550:	697b      	ldr	r3, [r7, #20]
 8016552:	68db      	ldr	r3, [r3, #12]
 8016554:	617b      	str	r3, [r7, #20]
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1dc      	bne.n	8016516 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801655c:	693b      	ldr	r3, [r7, #16]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d004      	beq.n	801656c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016562:	6938      	ldr	r0, [r7, #16]
 8016564:	f7ff fa56 	bl	8015a14 <tcp_abort>
 8016568:	e000      	b.n	801656c <tcp_kill_prio+0x8c>
    return;
 801656a:	bf00      	nop
  }
}
 801656c:	3718      	adds	r7, #24
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	2400c988 	.word	0x2400c988
 8016578:	2400c97c 	.word	0x2400c97c

0801657c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	4603      	mov	r3, r0
 8016584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016586:	79fb      	ldrb	r3, [r7, #7]
 8016588:	2b08      	cmp	r3, #8
 801658a:	d009      	beq.n	80165a0 <tcp_kill_state+0x24>
 801658c:	79fb      	ldrb	r3, [r7, #7]
 801658e:	2b09      	cmp	r3, #9
 8016590:	d006      	beq.n	80165a0 <tcp_kill_state+0x24>
 8016592:	4b1a      	ldr	r3, [pc, #104]	; (80165fc <tcp_kill_state+0x80>)
 8016594:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016598:	4919      	ldr	r1, [pc, #100]	; (8016600 <tcp_kill_state+0x84>)
 801659a:	481a      	ldr	r0, [pc, #104]	; (8016604 <tcp_kill_state+0x88>)
 801659c:	f005 f974 	bl	801b888 <iprintf>

  inactivity = 0;
 80165a0:	2300      	movs	r3, #0
 80165a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80165a4:	2300      	movs	r3, #0
 80165a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165a8:	4b17      	ldr	r3, [pc, #92]	; (8016608 <tcp_kill_state+0x8c>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	617b      	str	r3, [r7, #20]
 80165ae:	e017      	b.n	80165e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	7d1b      	ldrb	r3, [r3, #20]
 80165b4:	79fa      	ldrb	r2, [r7, #7]
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d10f      	bne.n	80165da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80165ba:	4b14      	ldr	r3, [pc, #80]	; (801660c <tcp_kill_state+0x90>)
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	6a1b      	ldr	r3, [r3, #32]
 80165c2:	1ad3      	subs	r3, r2, r3
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d807      	bhi.n	80165da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80165ca:	4b10      	ldr	r3, [pc, #64]	; (801660c <tcp_kill_state+0x90>)
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	6a1b      	ldr	r3, [r3, #32]
 80165d2:	1ad3      	subs	r3, r2, r3
 80165d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	68db      	ldr	r3, [r3, #12]
 80165de:	617b      	str	r3, [r7, #20]
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d1e4      	bne.n	80165b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d003      	beq.n	80165f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80165ec:	2100      	movs	r1, #0
 80165ee:	6938      	ldr	r0, [r7, #16]
 80165f0:	f7ff f952 	bl	8015898 <tcp_abandon>
  }
}
 80165f4:	bf00      	nop
 80165f6:	3718      	adds	r7, #24
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	0801de88 	.word	0x0801de88
 8016600:	0801e450 	.word	0x0801e450
 8016604:	0801df08 	.word	0x0801df08
 8016608:	2400c988 	.word	0x2400c988
 801660c:	2400c97c 	.word	0x2400c97c

08016610 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801661e:	4b12      	ldr	r3, [pc, #72]	; (8016668 <tcp_kill_timewait+0x58>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	e012      	b.n	801664c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016626:	4b11      	ldr	r3, [pc, #68]	; (801666c <tcp_kill_timewait+0x5c>)
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	6a1b      	ldr	r3, [r3, #32]
 801662e:	1ad3      	subs	r3, r2, r3
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	429a      	cmp	r2, r3
 8016634:	d807      	bhi.n	8016646 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016636:	4b0d      	ldr	r3, [pc, #52]	; (801666c <tcp_kill_timewait+0x5c>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	6a1b      	ldr	r3, [r3, #32]
 801663e:	1ad3      	subs	r3, r2, r3
 8016640:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	60fb      	str	r3, [r7, #12]
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d1e9      	bne.n	8016626 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d002      	beq.n	801665e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016658:	68b8      	ldr	r0, [r7, #8]
 801665a:	f7ff f9db 	bl	8015a14 <tcp_abort>
  }
}
 801665e:	bf00      	nop
 8016660:	3710      	adds	r7, #16
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	2400c98c 	.word	0x2400c98c
 801666c:	2400c97c 	.word	0x2400c97c

08016670 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016676:	4b10      	ldr	r3, [pc, #64]	; (80166b8 <tcp_handle_closepend+0x48>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801667c:	e014      	b.n	80166a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	68db      	ldr	r3, [r3, #12]
 8016682:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	8b5b      	ldrh	r3, [r3, #26]
 8016688:	f003 0308 	and.w	r3, r3, #8
 801668c:	2b00      	cmp	r3, #0
 801668e:	d009      	beq.n	80166a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	8b5b      	ldrh	r3, [r3, #26]
 8016694:	f023 0308 	bic.w	r3, r3, #8
 8016698:	b29a      	uxth	r2, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f7ff f864 	bl	801576c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d1e7      	bne.n	801667e <tcp_handle_closepend+0xe>
  }
}
 80166ae:	bf00      	nop
 80166b0:	bf00      	nop
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	2400c988 	.word	0x2400c988

080166bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	4603      	mov	r3, r0
 80166c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80166c6:	2001      	movs	r0, #1
 80166c8:	f7fd fbe8 	bl	8013e9c <memp_malloc>
 80166cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d126      	bne.n	8016722 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80166d4:	f7ff ffcc 	bl	8016670 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80166d8:	f7ff ff9a 	bl	8016610 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80166dc:	2001      	movs	r0, #1
 80166de:	f7fd fbdd 	bl	8013e9c <memp_malloc>
 80166e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d11b      	bne.n	8016722 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80166ea:	2009      	movs	r0, #9
 80166ec:	f7ff ff46 	bl	801657c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80166f0:	2001      	movs	r0, #1
 80166f2:	f7fd fbd3 	bl	8013e9c <memp_malloc>
 80166f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d111      	bne.n	8016722 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80166fe:	2008      	movs	r0, #8
 8016700:	f7ff ff3c 	bl	801657c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016704:	2001      	movs	r0, #1
 8016706:	f7fd fbc9 	bl	8013e9c <memp_malloc>
 801670a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d107      	bne.n	8016722 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016712:	79fb      	ldrb	r3, [r7, #7]
 8016714:	4618      	mov	r0, r3
 8016716:	f7ff fee3 	bl	80164e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801671a:	2001      	movs	r0, #1
 801671c:	f7fd fbbe 	bl	8013e9c <memp_malloc>
 8016720:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d03f      	beq.n	80167a8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016728:	229c      	movs	r2, #156	; 0x9c
 801672a:	2100      	movs	r1, #0
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f005 f910 	bl	801b952 <memset>
    pcb->prio = prio;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	79fa      	ldrb	r2, [r7, #7]
 8016736:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801673e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016748:	855a      	strh	r2, [r3, #42]	; 0x2a
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	22ff      	movs	r2, #255	; 0xff
 8016756:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801675e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2206      	movs	r2, #6
 8016764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	2206      	movs	r2, #6
 801676c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016774:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	2201      	movs	r2, #1
 801677a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801677e:	4b0d      	ldr	r3, [pc, #52]	; (80167b4 <tcp_alloc+0xf8>)
 8016780:	681a      	ldr	r2, [r3, #0]
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016786:	4b0c      	ldr	r3, [pc, #48]	; (80167b8 <tcp_alloc+0xfc>)
 8016788:	781a      	ldrb	r2, [r3, #0]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016794:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	4a08      	ldr	r2, [pc, #32]	; (80167bc <tcp_alloc+0x100>)
 801679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	4a07      	ldr	r2, [pc, #28]	; (80167c0 <tcp_alloc+0x104>)
 80167a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80167a8:	68fb      	ldr	r3, [r7, #12]
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3710      	adds	r7, #16
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	2400c97c 	.word	0x2400c97c
 80167b8:	2400c992 	.word	0x2400c992
 80167bc:	08016475 	.word	0x08016475
 80167c0:	006ddd00 	.word	0x006ddd00

080167c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d107      	bne.n	80167e2 <tcp_pcb_purge+0x1e>
 80167d2:	4b21      	ldr	r3, [pc, #132]	; (8016858 <tcp_pcb_purge+0x94>)
 80167d4:	f640 0251 	movw	r2, #2129	; 0x851
 80167d8:	4920      	ldr	r1, [pc, #128]	; (801685c <tcp_pcb_purge+0x98>)
 80167da:	4821      	ldr	r0, [pc, #132]	; (8016860 <tcp_pcb_purge+0x9c>)
 80167dc:	f005 f854 	bl	801b888 <iprintf>
 80167e0:	e037      	b.n	8016852 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	7d1b      	ldrb	r3, [r3, #20]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d033      	beq.n	8016852 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80167ee:	2b0a      	cmp	r3, #10
 80167f0:	d02f      	beq.n	8016852 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d02b      	beq.n	8016852 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d007      	beq.n	8016812 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016806:	4618      	mov	r0, r3
 8016808:	f7fe fa6e 	bl	8014ce8 <pbuf_free>
      pcb->refused_data = NULL;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	2200      	movs	r2, #0
 8016810:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016816:	2b00      	cmp	r3, #0
 8016818:	d002      	beq.n	8016820 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	f000 f986 	bl	8016b2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016826:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801682c:	4618      	mov	r0, r3
 801682e:	f7ff fdc7 	bl	80163c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016836:	4618      	mov	r0, r3
 8016838:	f7ff fdc2 	bl	80163c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2200      	movs	r2, #0
 8016840:	66da      	str	r2, [r3, #108]	; 0x6c
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2200      	movs	r2, #0
 801684e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016852:	3708      	adds	r7, #8
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}
 8016858:	0801de88 	.word	0x0801de88
 801685c:	0801e510 	.word	0x0801e510
 8016860:	0801df08 	.word	0x0801df08

08016864 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d106      	bne.n	8016882 <tcp_pcb_remove+0x1e>
 8016874:	4b3e      	ldr	r3, [pc, #248]	; (8016970 <tcp_pcb_remove+0x10c>)
 8016876:	f640 0283 	movw	r2, #2179	; 0x883
 801687a:	493e      	ldr	r1, [pc, #248]	; (8016974 <tcp_pcb_remove+0x110>)
 801687c:	483e      	ldr	r0, [pc, #248]	; (8016978 <tcp_pcb_remove+0x114>)
 801687e:	f005 f803 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d106      	bne.n	8016896 <tcp_pcb_remove+0x32>
 8016888:	4b39      	ldr	r3, [pc, #228]	; (8016970 <tcp_pcb_remove+0x10c>)
 801688a:	f640 0284 	movw	r2, #2180	; 0x884
 801688e:	493b      	ldr	r1, [pc, #236]	; (801697c <tcp_pcb_remove+0x118>)
 8016890:	4839      	ldr	r0, [pc, #228]	; (8016978 <tcp_pcb_remove+0x114>)
 8016892:	f004 fff9 	bl	801b888 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	683a      	ldr	r2, [r7, #0]
 801689c:	429a      	cmp	r2, r3
 801689e:	d105      	bne.n	80168ac <tcp_pcb_remove+0x48>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	68da      	ldr	r2, [r3, #12]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	601a      	str	r2, [r3, #0]
 80168aa:	e013      	b.n	80168d4 <tcp_pcb_remove+0x70>
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	60fb      	str	r3, [r7, #12]
 80168b2:	e00c      	b.n	80168ce <tcp_pcb_remove+0x6a>
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	683a      	ldr	r2, [r7, #0]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d104      	bne.n	80168c8 <tcp_pcb_remove+0x64>
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	68da      	ldr	r2, [r3, #12]
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	60da      	str	r2, [r3, #12]
 80168c6:	e005      	b.n	80168d4 <tcp_pcb_remove+0x70>
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	68db      	ldr	r3, [r3, #12]
 80168cc:	60fb      	str	r3, [r7, #12]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d1ef      	bne.n	80168b4 <tcp_pcb_remove+0x50>
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	2200      	movs	r2, #0
 80168d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80168da:	6838      	ldr	r0, [r7, #0]
 80168dc:	f7ff ff72 	bl	80167c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	7d1b      	ldrb	r3, [r3, #20]
 80168e4:	2b0a      	cmp	r3, #10
 80168e6:	d013      	beq.n	8016910 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d00f      	beq.n	8016910 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	8b5b      	ldrh	r3, [r3, #26]
 80168f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d009      	beq.n	8016910 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	8b5b      	ldrh	r3, [r3, #26]
 8016900:	f043 0302 	orr.w	r3, r3, #2
 8016904:	b29a      	uxth	r2, r3
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801690a:	6838      	ldr	r0, [r7, #0]
 801690c:	f002 ff6e 	bl	80197ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	7d1b      	ldrb	r3, [r3, #20]
 8016914:	2b01      	cmp	r3, #1
 8016916:	d020      	beq.n	801695a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801691c:	2b00      	cmp	r3, #0
 801691e:	d006      	beq.n	801692e <tcp_pcb_remove+0xca>
 8016920:	4b13      	ldr	r3, [pc, #76]	; (8016970 <tcp_pcb_remove+0x10c>)
 8016922:	f640 0293 	movw	r2, #2195	; 0x893
 8016926:	4916      	ldr	r1, [pc, #88]	; (8016980 <tcp_pcb_remove+0x11c>)
 8016928:	4813      	ldr	r0, [pc, #76]	; (8016978 <tcp_pcb_remove+0x114>)
 801692a:	f004 ffad 	bl	801b888 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016932:	2b00      	cmp	r3, #0
 8016934:	d006      	beq.n	8016944 <tcp_pcb_remove+0xe0>
 8016936:	4b0e      	ldr	r3, [pc, #56]	; (8016970 <tcp_pcb_remove+0x10c>)
 8016938:	f640 0294 	movw	r2, #2196	; 0x894
 801693c:	4911      	ldr	r1, [pc, #68]	; (8016984 <tcp_pcb_remove+0x120>)
 801693e:	480e      	ldr	r0, [pc, #56]	; (8016978 <tcp_pcb_remove+0x114>)
 8016940:	f004 ffa2 	bl	801b888 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016948:	2b00      	cmp	r3, #0
 801694a:	d006      	beq.n	801695a <tcp_pcb_remove+0xf6>
 801694c:	4b08      	ldr	r3, [pc, #32]	; (8016970 <tcp_pcb_remove+0x10c>)
 801694e:	f640 0296 	movw	r2, #2198	; 0x896
 8016952:	490d      	ldr	r1, [pc, #52]	; (8016988 <tcp_pcb_remove+0x124>)
 8016954:	4808      	ldr	r0, [pc, #32]	; (8016978 <tcp_pcb_remove+0x114>)
 8016956:	f004 ff97 	bl	801b888 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	2200      	movs	r2, #0
 801695e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	2200      	movs	r2, #0
 8016964:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016966:	bf00      	nop
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	0801de88 	.word	0x0801de88
 8016974:	0801e52c 	.word	0x0801e52c
 8016978:	0801df08 	.word	0x0801df08
 801697c:	0801e548 	.word	0x0801e548
 8016980:	0801e568 	.word	0x0801e568
 8016984:	0801e580 	.word	0x0801e580
 8016988:	0801e59c 	.word	0x0801e59c

0801698c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d106      	bne.n	80169a8 <tcp_next_iss+0x1c>
 801699a:	4b0a      	ldr	r3, [pc, #40]	; (80169c4 <tcp_next_iss+0x38>)
 801699c:	f640 02af 	movw	r2, #2223	; 0x8af
 80169a0:	4909      	ldr	r1, [pc, #36]	; (80169c8 <tcp_next_iss+0x3c>)
 80169a2:	480a      	ldr	r0, [pc, #40]	; (80169cc <tcp_next_iss+0x40>)
 80169a4:	f004 ff70 	bl	801b888 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80169a8:	4b09      	ldr	r3, [pc, #36]	; (80169d0 <tcp_next_iss+0x44>)
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	4b09      	ldr	r3, [pc, #36]	; (80169d4 <tcp_next_iss+0x48>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4413      	add	r3, r2
 80169b2:	4a07      	ldr	r2, [pc, #28]	; (80169d0 <tcp_next_iss+0x44>)
 80169b4:	6013      	str	r3, [r2, #0]
  return iss;
 80169b6:	4b06      	ldr	r3, [pc, #24]	; (80169d0 <tcp_next_iss+0x44>)
 80169b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	0801de88 	.word	0x0801de88
 80169c8:	0801e5b4 	.word	0x0801e5b4
 80169cc:	0801df08 	.word	0x0801df08
 80169d0:	24000030 	.word	0x24000030
 80169d4:	2400c97c 	.word	0x2400c97c

080169d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b086      	sub	sp, #24
 80169dc:	af00      	add	r7, sp, #0
 80169de:	4603      	mov	r3, r0
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	607a      	str	r2, [r7, #4]
 80169e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d106      	bne.n	80169fa <tcp_eff_send_mss_netif+0x22>
 80169ec:	4b14      	ldr	r3, [pc, #80]	; (8016a40 <tcp_eff_send_mss_netif+0x68>)
 80169ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80169f2:	4914      	ldr	r1, [pc, #80]	; (8016a44 <tcp_eff_send_mss_netif+0x6c>)
 80169f4:	4814      	ldr	r0, [pc, #80]	; (8016a48 <tcp_eff_send_mss_netif+0x70>)
 80169f6:	f004 ff47 	bl	801b888 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d101      	bne.n	8016a04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016a00:	89fb      	ldrh	r3, [r7, #14]
 8016a02:	e019      	b.n	8016a38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016a0a:	8afb      	ldrh	r3, [r7, #22]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d012      	beq.n	8016a36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016a10:	2328      	movs	r3, #40	; 0x28
 8016a12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016a14:	8afa      	ldrh	r2, [r7, #22]
 8016a16:	8abb      	ldrh	r3, [r7, #20]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d904      	bls.n	8016a26 <tcp_eff_send_mss_netif+0x4e>
 8016a1c:	8afa      	ldrh	r2, [r7, #22]
 8016a1e:	8abb      	ldrh	r3, [r7, #20]
 8016a20:	1ad3      	subs	r3, r2, r3
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	e000      	b.n	8016a28 <tcp_eff_send_mss_netif+0x50>
 8016a26:	2300      	movs	r3, #0
 8016a28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016a2a:	8a7a      	ldrh	r2, [r7, #18]
 8016a2c:	89fb      	ldrh	r3, [r7, #14]
 8016a2e:	4293      	cmp	r3, r2
 8016a30:	bf28      	it	cs
 8016a32:	4613      	movcs	r3, r2
 8016a34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016a36:	89fb      	ldrh	r3, [r7, #14]
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3718      	adds	r7, #24
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	0801de88 	.word	0x0801de88
 8016a44:	0801e5d0 	.word	0x0801e5d0
 8016a48:	0801df08 	.word	0x0801df08

08016a4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b084      	sub	sp, #16
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d119      	bne.n	8016a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016a60:	4b10      	ldr	r3, [pc, #64]	; (8016aa4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016a62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016a66:	4910      	ldr	r1, [pc, #64]	; (8016aa8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016a68:	4810      	ldr	r0, [pc, #64]	; (8016aac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016a6a:	f004 ff0d 	bl	801b888 <iprintf>

  while (pcb != NULL) {
 8016a6e:	e011      	b.n	8016a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d108      	bne.n	8016a8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	68db      	ldr	r3, [r3, #12]
 8016a80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016a82:	68f8      	ldr	r0, [r7, #12]
 8016a84:	f7fe ffc6 	bl	8015a14 <tcp_abort>
      pcb = next;
 8016a88:	68bb      	ldr	r3, [r7, #8]
 8016a8a:	60fb      	str	r3, [r7, #12]
 8016a8c:	e002      	b.n	8016a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	68db      	ldr	r3, [r3, #12]
 8016a92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d1ea      	bne.n	8016a70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016a9a:	bf00      	nop
 8016a9c:	bf00      	nop
 8016a9e:	3710      	adds	r7, #16
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	0801de88 	.word	0x0801de88
 8016aa8:	0801e5f8 	.word	0x0801e5f8
 8016aac:	0801df08 	.word	0x0801df08

08016ab0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d02a      	beq.n	8016b16 <tcp_netif_ip_addr_changed+0x66>
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d026      	beq.n	8016b16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016ac8:	4b15      	ldr	r3, [pc, #84]	; (8016b20 <tcp_netif_ip_addr_changed+0x70>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	4619      	mov	r1, r3
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7ff ffbc 	bl	8016a4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016ad4:	4b13      	ldr	r3, [pc, #76]	; (8016b24 <tcp_netif_ip_addr_changed+0x74>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f7ff ffb6 	bl	8016a4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d017      	beq.n	8016b16 <tcp_netif_ip_addr_changed+0x66>
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d013      	beq.n	8016b16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016aee:	4b0e      	ldr	r3, [pc, #56]	; (8016b28 <tcp_netif_ip_addr_changed+0x78>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	60fb      	str	r3, [r7, #12]
 8016af4:	e00c      	b.n	8016b10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681a      	ldr	r2, [r3, #0]
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d103      	bne.n	8016b0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	68db      	ldr	r3, [r3, #12]
 8016b0e:	60fb      	str	r3, [r7, #12]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d1ef      	bne.n	8016af6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016b16:	bf00      	nop
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	2400c988 	.word	0x2400c988
 8016b24:	2400c980 	.word	0x2400c980
 8016b28:	2400c984 	.word	0x2400c984

08016b2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d007      	beq.n	8016b4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7ff fc3d 	bl	80163c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2200      	movs	r2, #0
 8016b4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016b4c:	bf00      	nop
 8016b4e:	3708      	adds	r7, #8
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016b54:	b590      	push	{r4, r7, lr}
 8016b56:	b08d      	sub	sp, #52	; 0x34
 8016b58:	af04      	add	r7, sp, #16
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d105      	bne.n	8016b70 <tcp_input+0x1c>
 8016b64:	4b9b      	ldr	r3, [pc, #620]	; (8016dd4 <tcp_input+0x280>)
 8016b66:	2283      	movs	r2, #131	; 0x83
 8016b68:	499b      	ldr	r1, [pc, #620]	; (8016dd8 <tcp_input+0x284>)
 8016b6a:	489c      	ldr	r0, [pc, #624]	; (8016ddc <tcp_input+0x288>)
 8016b6c:	f004 fe8c 	bl	801b888 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	4a9a      	ldr	r2, [pc, #616]	; (8016de0 <tcp_input+0x28c>)
 8016b76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	895b      	ldrh	r3, [r3, #10]
 8016b7c:	2b13      	cmp	r3, #19
 8016b7e:	f240 83d1 	bls.w	8017324 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016b82:	4b98      	ldr	r3, [pc, #608]	; (8016de4 <tcp_input+0x290>)
 8016b84:	695b      	ldr	r3, [r3, #20]
 8016b86:	4a97      	ldr	r2, [pc, #604]	; (8016de4 <tcp_input+0x290>)
 8016b88:	6812      	ldr	r2, [r2, #0]
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fb fe77 	bl	8012880 <ip4_addr_isbroadcast_u32>
 8016b92:	4603      	mov	r3, r0
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	f040 83c7 	bne.w	8017328 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016b9a:	4b92      	ldr	r3, [pc, #584]	; (8016de4 <tcp_input+0x290>)
 8016b9c:	695b      	ldr	r3, [r3, #20]
 8016b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ba2:	2be0      	cmp	r3, #224	; 0xe0
 8016ba4:	f000 83c0 	beq.w	8017328 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016ba8:	4b8d      	ldr	r3, [pc, #564]	; (8016de0 <tcp_input+0x28c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	899b      	ldrh	r3, [r3, #12]
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7f8 fa41 	bl	800f038 <lwip_htons>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	0b1b      	lsrs	r3, r3, #12
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	b2db      	uxtb	r3, r3
 8016bbe:	009b      	lsls	r3, r3, #2
 8016bc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016bc2:	7cbb      	ldrb	r3, [r7, #18]
 8016bc4:	2b13      	cmp	r3, #19
 8016bc6:	f240 83b1 	bls.w	801732c <tcp_input+0x7d8>
 8016bca:	7cbb      	ldrb	r3, [r7, #18]
 8016bcc:	b29a      	uxth	r2, r3
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	891b      	ldrh	r3, [r3, #8]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	f200 83aa 	bhi.w	801732c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016bd8:	7cbb      	ldrb	r3, [r7, #18]
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	3b14      	subs	r3, #20
 8016bde:	b29a      	uxth	r2, r3
 8016be0:	4b81      	ldr	r3, [pc, #516]	; (8016de8 <tcp_input+0x294>)
 8016be2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016be4:	4b81      	ldr	r3, [pc, #516]	; (8016dec <tcp_input+0x298>)
 8016be6:	2200      	movs	r2, #0
 8016be8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	895a      	ldrh	r2, [r3, #10]
 8016bee:	7cbb      	ldrb	r3, [r7, #18]
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d309      	bcc.n	8016c0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016bf6:	4b7c      	ldr	r3, [pc, #496]	; (8016de8 <tcp_input+0x294>)
 8016bf8:	881a      	ldrh	r2, [r3, #0]
 8016bfa:	4b7d      	ldr	r3, [pc, #500]	; (8016df0 <tcp_input+0x29c>)
 8016bfc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016bfe:	7cbb      	ldrb	r3, [r7, #18]
 8016c00:	4619      	mov	r1, r3
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7fd ffea 	bl	8014bdc <pbuf_remove_header>
 8016c08:	e04e      	b.n	8016ca8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d105      	bne.n	8016c1e <tcp_input+0xca>
 8016c12:	4b70      	ldr	r3, [pc, #448]	; (8016dd4 <tcp_input+0x280>)
 8016c14:	22c2      	movs	r2, #194	; 0xc2
 8016c16:	4977      	ldr	r1, [pc, #476]	; (8016df4 <tcp_input+0x2a0>)
 8016c18:	4870      	ldr	r0, [pc, #448]	; (8016ddc <tcp_input+0x288>)
 8016c1a:	f004 fe35 	bl	801b888 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016c1e:	2114      	movs	r1, #20
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f7fd ffdb 	bl	8014bdc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	895a      	ldrh	r2, [r3, #10]
 8016c2a:	4b71      	ldr	r3, [pc, #452]	; (8016df0 <tcp_input+0x29c>)
 8016c2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016c2e:	4b6e      	ldr	r3, [pc, #440]	; (8016de8 <tcp_input+0x294>)
 8016c30:	881a      	ldrh	r2, [r3, #0]
 8016c32:	4b6f      	ldr	r3, [pc, #444]	; (8016df0 <tcp_input+0x29c>)
 8016c34:	881b      	ldrh	r3, [r3, #0]
 8016c36:	1ad3      	subs	r3, r2, r3
 8016c38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016c3a:	4b6d      	ldr	r3, [pc, #436]	; (8016df0 <tcp_input+0x29c>)
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	4619      	mov	r1, r3
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f7fd ffcb 	bl	8014bdc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	895b      	ldrh	r3, [r3, #10]
 8016c4c:	8a3a      	ldrh	r2, [r7, #16]
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	f200 836e 	bhi.w	8017330 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	4a64      	ldr	r2, [pc, #400]	; (8016dec <tcp_input+0x298>)
 8016c5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	8a3a      	ldrh	r2, [r7, #16]
 8016c64:	4611      	mov	r1, r2
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fd ffb8 	bl	8014bdc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	891a      	ldrh	r2, [r3, #8]
 8016c70:	8a3b      	ldrh	r3, [r7, #16]
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	b29a      	uxth	r2, r3
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	895b      	ldrh	r3, [r3, #10]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d005      	beq.n	8016c8e <tcp_input+0x13a>
 8016c82:	4b54      	ldr	r3, [pc, #336]	; (8016dd4 <tcp_input+0x280>)
 8016c84:	22df      	movs	r2, #223	; 0xdf
 8016c86:	495c      	ldr	r1, [pc, #368]	; (8016df8 <tcp_input+0x2a4>)
 8016c88:	4854      	ldr	r0, [pc, #336]	; (8016ddc <tcp_input+0x288>)
 8016c8a:	f004 fdfd 	bl	801b888 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	891a      	ldrh	r2, [r3, #8]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	891b      	ldrh	r3, [r3, #8]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d005      	beq.n	8016ca8 <tcp_input+0x154>
 8016c9c:	4b4d      	ldr	r3, [pc, #308]	; (8016dd4 <tcp_input+0x280>)
 8016c9e:	22e0      	movs	r2, #224	; 0xe0
 8016ca0:	4956      	ldr	r1, [pc, #344]	; (8016dfc <tcp_input+0x2a8>)
 8016ca2:	484e      	ldr	r0, [pc, #312]	; (8016ddc <tcp_input+0x288>)
 8016ca4:	f004 fdf0 	bl	801b888 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016ca8:	4b4d      	ldr	r3, [pc, #308]	; (8016de0 <tcp_input+0x28c>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	881b      	ldrh	r3, [r3, #0]
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	4a4b      	ldr	r2, [pc, #300]	; (8016de0 <tcp_input+0x28c>)
 8016cb2:	6814      	ldr	r4, [r2, #0]
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7f8 f9bf 	bl	800f038 <lwip_htons>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016cbe:	4b48      	ldr	r3, [pc, #288]	; (8016de0 <tcp_input+0x28c>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	885b      	ldrh	r3, [r3, #2]
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	4a46      	ldr	r2, [pc, #280]	; (8016de0 <tcp_input+0x28c>)
 8016cc8:	6814      	ldr	r4, [r2, #0]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7f8 f9b4 	bl	800f038 <lwip_htons>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016cd4:	4b42      	ldr	r3, [pc, #264]	; (8016de0 <tcp_input+0x28c>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	4a41      	ldr	r2, [pc, #260]	; (8016de0 <tcp_input+0x28c>)
 8016cdc:	6814      	ldr	r4, [r2, #0]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7f8 f9bf 	bl	800f062 <lwip_htonl>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	6063      	str	r3, [r4, #4]
 8016ce8:	6863      	ldr	r3, [r4, #4]
 8016cea:	4a45      	ldr	r2, [pc, #276]	; (8016e00 <tcp_input+0x2ac>)
 8016cec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016cee:	4b3c      	ldr	r3, [pc, #240]	; (8016de0 <tcp_input+0x28c>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	689b      	ldr	r3, [r3, #8]
 8016cf4:	4a3a      	ldr	r2, [pc, #232]	; (8016de0 <tcp_input+0x28c>)
 8016cf6:	6814      	ldr	r4, [r2, #0]
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7f8 f9b2 	bl	800f062 <lwip_htonl>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	60a3      	str	r3, [r4, #8]
 8016d02:	68a3      	ldr	r3, [r4, #8]
 8016d04:	4a3f      	ldr	r2, [pc, #252]	; (8016e04 <tcp_input+0x2b0>)
 8016d06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016d08:	4b35      	ldr	r3, [pc, #212]	; (8016de0 <tcp_input+0x28c>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	89db      	ldrh	r3, [r3, #14]
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	4a33      	ldr	r2, [pc, #204]	; (8016de0 <tcp_input+0x28c>)
 8016d12:	6814      	ldr	r4, [r2, #0]
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7f8 f98f 	bl	800f038 <lwip_htons>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016d1e:	4b30      	ldr	r3, [pc, #192]	; (8016de0 <tcp_input+0x28c>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	899b      	ldrh	r3, [r3, #12]
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7f8 f986 	bl	800f038 <lwip_htons>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d34:	b2da      	uxtb	r2, r3
 8016d36:	4b34      	ldr	r3, [pc, #208]	; (8016e08 <tcp_input+0x2b4>)
 8016d38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	891a      	ldrh	r2, [r3, #8]
 8016d3e:	4b33      	ldr	r3, [pc, #204]	; (8016e0c <tcp_input+0x2b8>)
 8016d40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016d42:	4b31      	ldr	r3, [pc, #196]	; (8016e08 <tcp_input+0x2b4>)
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	f003 0303 	and.w	r3, r3, #3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d00c      	beq.n	8016d68 <tcp_input+0x214>
    tcplen++;
 8016d4e:	4b2f      	ldr	r3, [pc, #188]	; (8016e0c <tcp_input+0x2b8>)
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	3301      	adds	r3, #1
 8016d54:	b29a      	uxth	r2, r3
 8016d56:	4b2d      	ldr	r3, [pc, #180]	; (8016e0c <tcp_input+0x2b8>)
 8016d58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	891a      	ldrh	r2, [r3, #8]
 8016d5e:	4b2b      	ldr	r3, [pc, #172]	; (8016e0c <tcp_input+0x2b8>)
 8016d60:	881b      	ldrh	r3, [r3, #0]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	f200 82e6 	bhi.w	8017334 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d6c:	4b28      	ldr	r3, [pc, #160]	; (8016e10 <tcp_input+0x2bc>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	61fb      	str	r3, [r7, #28]
 8016d72:	e09d      	b.n	8016eb0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	7d1b      	ldrb	r3, [r3, #20]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d105      	bne.n	8016d88 <tcp_input+0x234>
 8016d7c:	4b15      	ldr	r3, [pc, #84]	; (8016dd4 <tcp_input+0x280>)
 8016d7e:	22fb      	movs	r2, #251	; 0xfb
 8016d80:	4924      	ldr	r1, [pc, #144]	; (8016e14 <tcp_input+0x2c0>)
 8016d82:	4816      	ldr	r0, [pc, #88]	; (8016ddc <tcp_input+0x288>)
 8016d84:	f004 fd80 	bl	801b888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	7d1b      	ldrb	r3, [r3, #20]
 8016d8c:	2b0a      	cmp	r3, #10
 8016d8e:	d105      	bne.n	8016d9c <tcp_input+0x248>
 8016d90:	4b10      	ldr	r3, [pc, #64]	; (8016dd4 <tcp_input+0x280>)
 8016d92:	22fc      	movs	r2, #252	; 0xfc
 8016d94:	4920      	ldr	r1, [pc, #128]	; (8016e18 <tcp_input+0x2c4>)
 8016d96:	4811      	ldr	r0, [pc, #68]	; (8016ddc <tcp_input+0x288>)
 8016d98:	f004 fd76 	bl	801b888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	7d1b      	ldrb	r3, [r3, #20]
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d105      	bne.n	8016db0 <tcp_input+0x25c>
 8016da4:	4b0b      	ldr	r3, [pc, #44]	; (8016dd4 <tcp_input+0x280>)
 8016da6:	22fd      	movs	r2, #253	; 0xfd
 8016da8:	491c      	ldr	r1, [pc, #112]	; (8016e1c <tcp_input+0x2c8>)
 8016daa:	480c      	ldr	r0, [pc, #48]	; (8016ddc <tcp_input+0x288>)
 8016dac:	f004 fd6c 	bl	801b888 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016db0:	69fb      	ldr	r3, [r7, #28]
 8016db2:	7a1b      	ldrb	r3, [r3, #8]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d033      	beq.n	8016e20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	7a1a      	ldrb	r2, [r3, #8]
 8016dbc:	4b09      	ldr	r3, [pc, #36]	; (8016de4 <tcp_input+0x290>)
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016dc8:	429a      	cmp	r2, r3
 8016dca:	d029      	beq.n	8016e20 <tcp_input+0x2cc>
      prev = pcb;
 8016dcc:	69fb      	ldr	r3, [r7, #28]
 8016dce:	61bb      	str	r3, [r7, #24]
      continue;
 8016dd0:	e06b      	b.n	8016eaa <tcp_input+0x356>
 8016dd2:	bf00      	nop
 8016dd4:	0801e62c 	.word	0x0801e62c
 8016dd8:	0801e698 	.word	0x0801e698
 8016ddc:	0801e6b0 	.word	0x0801e6b0
 8016de0:	2400c9a4 	.word	0x2400c9a4
 8016de4:	24009848 	.word	0x24009848
 8016de8:	2400c9a8 	.word	0x2400c9a8
 8016dec:	2400c9ac 	.word	0x2400c9ac
 8016df0:	2400c9aa 	.word	0x2400c9aa
 8016df4:	0801e6d8 	.word	0x0801e6d8
 8016df8:	0801e6e8 	.word	0x0801e6e8
 8016dfc:	0801e6f4 	.word	0x0801e6f4
 8016e00:	2400c9b4 	.word	0x2400c9b4
 8016e04:	2400c9b8 	.word	0x2400c9b8
 8016e08:	2400c9c0 	.word	0x2400c9c0
 8016e0c:	2400c9be 	.word	0x2400c9be
 8016e10:	2400c988 	.word	0x2400c988
 8016e14:	0801e714 	.word	0x0801e714
 8016e18:	0801e73c 	.word	0x0801e73c
 8016e1c:	0801e768 	.word	0x0801e768
    }

    if (pcb->remote_port == tcphdr->src &&
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	8b1a      	ldrh	r2, [r3, #24]
 8016e24:	4b72      	ldr	r3, [pc, #456]	; (8016ff0 <tcp_input+0x49c>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	881b      	ldrh	r3, [r3, #0]
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d13a      	bne.n	8016ea6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016e30:	69fb      	ldr	r3, [r7, #28]
 8016e32:	8ada      	ldrh	r2, [r3, #22]
 8016e34:	4b6e      	ldr	r3, [pc, #440]	; (8016ff0 <tcp_input+0x49c>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	885b      	ldrh	r3, [r3, #2]
 8016e3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d132      	bne.n	8016ea6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016e40:	69fb      	ldr	r3, [r7, #28]
 8016e42:	685a      	ldr	r2, [r3, #4]
 8016e44:	4b6b      	ldr	r3, [pc, #428]	; (8016ff4 <tcp_input+0x4a0>)
 8016e46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d12c      	bne.n	8016ea6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016e4c:	69fb      	ldr	r3, [r7, #28]
 8016e4e:	681a      	ldr	r2, [r3, #0]
 8016e50:	4b68      	ldr	r3, [pc, #416]	; (8016ff4 <tcp_input+0x4a0>)
 8016e52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d126      	bne.n	8016ea6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016e58:	69fb      	ldr	r3, [r7, #28]
 8016e5a:	68db      	ldr	r3, [r3, #12]
 8016e5c:	69fa      	ldr	r2, [r7, #28]
 8016e5e:	429a      	cmp	r2, r3
 8016e60:	d106      	bne.n	8016e70 <tcp_input+0x31c>
 8016e62:	4b65      	ldr	r3, [pc, #404]	; (8016ff8 <tcp_input+0x4a4>)
 8016e64:	f240 120d 	movw	r2, #269	; 0x10d
 8016e68:	4964      	ldr	r1, [pc, #400]	; (8016ffc <tcp_input+0x4a8>)
 8016e6a:	4865      	ldr	r0, [pc, #404]	; (8017000 <tcp_input+0x4ac>)
 8016e6c:	f004 fd0c 	bl	801b888 <iprintf>
      if (prev != NULL) {
 8016e70:	69bb      	ldr	r3, [r7, #24]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d00a      	beq.n	8016e8c <tcp_input+0x338>
        prev->next = pcb->next;
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	68da      	ldr	r2, [r3, #12]
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016e7e:	4b61      	ldr	r3, [pc, #388]	; (8017004 <tcp_input+0x4b0>)
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016e86:	4a5f      	ldr	r2, [pc, #380]	; (8017004 <tcp_input+0x4b0>)
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	69fa      	ldr	r2, [r7, #28]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d111      	bne.n	8016eba <tcp_input+0x366>
 8016e96:	4b58      	ldr	r3, [pc, #352]	; (8016ff8 <tcp_input+0x4a4>)
 8016e98:	f240 1215 	movw	r2, #277	; 0x115
 8016e9c:	495a      	ldr	r1, [pc, #360]	; (8017008 <tcp_input+0x4b4>)
 8016e9e:	4858      	ldr	r0, [pc, #352]	; (8017000 <tcp_input+0x4ac>)
 8016ea0:	f004 fcf2 	bl	801b888 <iprintf>
      break;
 8016ea4:	e009      	b.n	8016eba <tcp_input+0x366>
    }
    prev = pcb;
 8016ea6:	69fb      	ldr	r3, [r7, #28]
 8016ea8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	68db      	ldr	r3, [r3, #12]
 8016eae:	61fb      	str	r3, [r7, #28]
 8016eb0:	69fb      	ldr	r3, [r7, #28]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	f47f af5e 	bne.w	8016d74 <tcp_input+0x220>
 8016eb8:	e000      	b.n	8016ebc <tcp_input+0x368>
      break;
 8016eba:	bf00      	nop
  }

  if (pcb == NULL) {
 8016ebc:	69fb      	ldr	r3, [r7, #28]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f040 80aa 	bne.w	8017018 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ec4:	4b51      	ldr	r3, [pc, #324]	; (801700c <tcp_input+0x4b8>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	61fb      	str	r3, [r7, #28]
 8016eca:	e03f      	b.n	8016f4c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016ecc:	69fb      	ldr	r3, [r7, #28]
 8016ece:	7d1b      	ldrb	r3, [r3, #20]
 8016ed0:	2b0a      	cmp	r3, #10
 8016ed2:	d006      	beq.n	8016ee2 <tcp_input+0x38e>
 8016ed4:	4b48      	ldr	r3, [pc, #288]	; (8016ff8 <tcp_input+0x4a4>)
 8016ed6:	f240 121f 	movw	r2, #287	; 0x11f
 8016eda:	494d      	ldr	r1, [pc, #308]	; (8017010 <tcp_input+0x4bc>)
 8016edc:	4848      	ldr	r0, [pc, #288]	; (8017000 <tcp_input+0x4ac>)
 8016ede:	f004 fcd3 	bl	801b888 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ee2:	69fb      	ldr	r3, [r7, #28]
 8016ee4:	7a1b      	ldrb	r3, [r3, #8]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d009      	beq.n	8016efe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016eea:	69fb      	ldr	r3, [r7, #28]
 8016eec:	7a1a      	ldrb	r2, [r3, #8]
 8016eee:	4b41      	ldr	r3, [pc, #260]	; (8016ff4 <tcp_input+0x4a0>)
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d122      	bne.n	8016f44 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016efe:	69fb      	ldr	r3, [r7, #28]
 8016f00:	8b1a      	ldrh	r2, [r3, #24]
 8016f02:	4b3b      	ldr	r3, [pc, #236]	; (8016ff0 <tcp_input+0x49c>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	881b      	ldrh	r3, [r3, #0]
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d11b      	bne.n	8016f46 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016f0e:	69fb      	ldr	r3, [r7, #28]
 8016f10:	8ada      	ldrh	r2, [r3, #22]
 8016f12:	4b37      	ldr	r3, [pc, #220]	; (8016ff0 <tcp_input+0x49c>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	885b      	ldrh	r3, [r3, #2]
 8016f18:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d113      	bne.n	8016f46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	685a      	ldr	r2, [r3, #4]
 8016f22:	4b34      	ldr	r3, [pc, #208]	; (8016ff4 <tcp_input+0x4a0>)
 8016f24:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d10d      	bne.n	8016f46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	681a      	ldr	r2, [r3, #0]
 8016f2e:	4b31      	ldr	r3, [pc, #196]	; (8016ff4 <tcp_input+0x4a0>)
 8016f30:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d107      	bne.n	8016f46 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016f36:	69f8      	ldr	r0, [r7, #28]
 8016f38:	f000 fb56 	bl	80175e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7fd fed3 	bl	8014ce8 <pbuf_free>
        return;
 8016f42:	e1fd      	b.n	8017340 <tcp_input+0x7ec>
        continue;
 8016f44:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	61fb      	str	r3, [r7, #28]
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1bc      	bne.n	8016ecc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016f52:	2300      	movs	r3, #0
 8016f54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016f56:	4b2f      	ldr	r3, [pc, #188]	; (8017014 <tcp_input+0x4c0>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	617b      	str	r3, [r7, #20]
 8016f5c:	e02a      	b.n	8016fb4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	7a1b      	ldrb	r3, [r3, #8]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d00c      	beq.n	8016f80 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	7a1a      	ldrb	r2, [r3, #8]
 8016f6a:	4b22      	ldr	r3, [pc, #136]	; (8016ff4 <tcp_input+0x4a0>)
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016f72:	3301      	adds	r3, #1
 8016f74:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d002      	beq.n	8016f80 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	61bb      	str	r3, [r7, #24]
        continue;
 8016f7e:	e016      	b.n	8016fae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	8ada      	ldrh	r2, [r3, #22]
 8016f84:	4b1a      	ldr	r3, [pc, #104]	; (8016ff0 <tcp_input+0x49c>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	885b      	ldrh	r3, [r3, #2]
 8016f8a:	b29b      	uxth	r3, r3
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d10c      	bne.n	8016faa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	4b17      	ldr	r3, [pc, #92]	; (8016ff4 <tcp_input+0x4a0>)
 8016f96:	695b      	ldr	r3, [r3, #20]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d00f      	beq.n	8016fbc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d00d      	beq.n	8016fbe <tcp_input+0x46a>
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d009      	beq.n	8016fbe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	617b      	str	r3, [r7, #20]
 8016fb4:	697b      	ldr	r3, [r7, #20]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1d1      	bne.n	8016f5e <tcp_input+0x40a>
 8016fba:	e000      	b.n	8016fbe <tcp_input+0x46a>
            break;
 8016fbc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d029      	beq.n	8017018 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00a      	beq.n	8016fe0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	68da      	ldr	r2, [r3, #12]
 8016fce:	69bb      	ldr	r3, [r7, #24]
 8016fd0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016fd2:	4b10      	ldr	r3, [pc, #64]	; (8017014 <tcp_input+0x4c0>)
 8016fd4:	681a      	ldr	r2, [r3, #0]
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016fda:	4a0e      	ldr	r2, [pc, #56]	; (8017014 <tcp_input+0x4c0>)
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016fe0:	6978      	ldr	r0, [r7, #20]
 8016fe2:	f000 fa03 	bl	80173ec <tcp_listen_input>
      }
      pbuf_free(p);
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f7fd fe7e 	bl	8014ce8 <pbuf_free>
      return;
 8016fec:	e1a8      	b.n	8017340 <tcp_input+0x7ec>
 8016fee:	bf00      	nop
 8016ff0:	2400c9a4 	.word	0x2400c9a4
 8016ff4:	24009848 	.word	0x24009848
 8016ff8:	0801e62c 	.word	0x0801e62c
 8016ffc:	0801e790 	.word	0x0801e790
 8017000:	0801e6b0 	.word	0x0801e6b0
 8017004:	2400c988 	.word	0x2400c988
 8017008:	0801e7bc 	.word	0x0801e7bc
 801700c:	2400c98c 	.word	0x2400c98c
 8017010:	0801e7e8 	.word	0x0801e7e8
 8017014:	2400c984 	.word	0x2400c984
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	2b00      	cmp	r3, #0
 801701c:	f000 8158 	beq.w	80172d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017020:	4b95      	ldr	r3, [pc, #596]	; (8017278 <tcp_input+0x724>)
 8017022:	2200      	movs	r2, #0
 8017024:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	891a      	ldrh	r2, [r3, #8]
 801702a:	4b93      	ldr	r3, [pc, #588]	; (8017278 <tcp_input+0x724>)
 801702c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801702e:	4a92      	ldr	r2, [pc, #584]	; (8017278 <tcp_input+0x724>)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017034:	4b91      	ldr	r3, [pc, #580]	; (801727c <tcp_input+0x728>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	4a8f      	ldr	r2, [pc, #572]	; (8017278 <tcp_input+0x724>)
 801703a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801703c:	4b90      	ldr	r3, [pc, #576]	; (8017280 <tcp_input+0x72c>)
 801703e:	2200      	movs	r2, #0
 8017040:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017042:	4b90      	ldr	r3, [pc, #576]	; (8017284 <tcp_input+0x730>)
 8017044:	2200      	movs	r2, #0
 8017046:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017048:	4b8f      	ldr	r3, [pc, #572]	; (8017288 <tcp_input+0x734>)
 801704a:	2200      	movs	r2, #0
 801704c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801704e:	4b8f      	ldr	r3, [pc, #572]	; (801728c <tcp_input+0x738>)
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	f003 0308 	and.w	r3, r3, #8
 8017056:	2b00      	cmp	r3, #0
 8017058:	d006      	beq.n	8017068 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	7b5b      	ldrb	r3, [r3, #13]
 801705e:	f043 0301 	orr.w	r3, r3, #1
 8017062:	b2da      	uxtb	r2, r3
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801706c:	2b00      	cmp	r3, #0
 801706e:	d017      	beq.n	80170a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017070:	69f8      	ldr	r0, [r7, #28]
 8017072:	f7ff f929 	bl	80162c8 <tcp_process_refused_data>
 8017076:	4603      	mov	r3, r0
 8017078:	f113 0f0d 	cmn.w	r3, #13
 801707c:	d007      	beq.n	801708e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017082:	2b00      	cmp	r3, #0
 8017084:	d00c      	beq.n	80170a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017086:	4b82      	ldr	r3, [pc, #520]	; (8017290 <tcp_input+0x73c>)
 8017088:	881b      	ldrh	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d008      	beq.n	80170a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801708e:	69fb      	ldr	r3, [r7, #28]
 8017090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017092:	2b00      	cmp	r3, #0
 8017094:	f040 80e3 	bne.w	801725e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017098:	69f8      	ldr	r0, [r7, #28]
 801709a:	f003 f9ad 	bl	801a3f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801709e:	e0de      	b.n	801725e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80170a0:	4a7c      	ldr	r2, [pc, #496]	; (8017294 <tcp_input+0x740>)
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80170a6:	69f8      	ldr	r0, [r7, #28]
 80170a8:	f000 fb18 	bl	80176dc <tcp_process>
 80170ac:	4603      	mov	r3, r0
 80170ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80170b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80170b4:	f113 0f0d 	cmn.w	r3, #13
 80170b8:	f000 80d3 	beq.w	8017262 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80170bc:	4b71      	ldr	r3, [pc, #452]	; (8017284 <tcp_input+0x730>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	f003 0308 	and.w	r3, r3, #8
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d015      	beq.n	80170f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d008      	beq.n	80170e4 <tcp_input+0x590>
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170d8:	69fa      	ldr	r2, [r7, #28]
 80170da:	6912      	ldr	r2, [r2, #16]
 80170dc:	f06f 010d 	mvn.w	r1, #13
 80170e0:	4610      	mov	r0, r2
 80170e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80170e4:	69f9      	ldr	r1, [r7, #28]
 80170e6:	486c      	ldr	r0, [pc, #432]	; (8017298 <tcp_input+0x744>)
 80170e8:	f7ff fbbc 	bl	8016864 <tcp_pcb_remove>
        tcp_free(pcb);
 80170ec:	69f8      	ldr	r0, [r7, #28]
 80170ee:	f7fe f9a9 	bl	8015444 <tcp_free>
 80170f2:	e0da      	b.n	80172aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80170f4:	2300      	movs	r3, #0
 80170f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80170f8:	4b63      	ldr	r3, [pc, #396]	; (8017288 <tcp_input+0x734>)
 80170fa:	881b      	ldrh	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d01d      	beq.n	801713c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017100:	4b61      	ldr	r3, [pc, #388]	; (8017288 <tcp_input+0x734>)
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017106:	69fb      	ldr	r3, [r7, #28]
 8017108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801710c:	2b00      	cmp	r3, #0
 801710e:	d00a      	beq.n	8017126 <tcp_input+0x5d2>
 8017110:	69fb      	ldr	r3, [r7, #28]
 8017112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017116:	69fa      	ldr	r2, [r7, #28]
 8017118:	6910      	ldr	r0, [r2, #16]
 801711a:	89fa      	ldrh	r2, [r7, #14]
 801711c:	69f9      	ldr	r1, [r7, #28]
 801711e:	4798      	blx	r3
 8017120:	4603      	mov	r3, r0
 8017122:	74fb      	strb	r3, [r7, #19]
 8017124:	e001      	b.n	801712a <tcp_input+0x5d6>
 8017126:	2300      	movs	r3, #0
 8017128:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801712a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801712e:	f113 0f0d 	cmn.w	r3, #13
 8017132:	f000 8098 	beq.w	8017266 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017136:	4b54      	ldr	r3, [pc, #336]	; (8017288 <tcp_input+0x734>)
 8017138:	2200      	movs	r2, #0
 801713a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801713c:	69f8      	ldr	r0, [r7, #28]
 801713e:	f000 f915 	bl	801736c <tcp_input_delayed_close>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	f040 8090 	bne.w	801726a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801714a:	4b4d      	ldr	r3, [pc, #308]	; (8017280 <tcp_input+0x72c>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d041      	beq.n	80171d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017152:	69fb      	ldr	r3, [r7, #28]
 8017154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017156:	2b00      	cmp	r3, #0
 8017158:	d006      	beq.n	8017168 <tcp_input+0x614>
 801715a:	4b50      	ldr	r3, [pc, #320]	; (801729c <tcp_input+0x748>)
 801715c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017160:	494f      	ldr	r1, [pc, #316]	; (80172a0 <tcp_input+0x74c>)
 8017162:	4850      	ldr	r0, [pc, #320]	; (80172a4 <tcp_input+0x750>)
 8017164:	f004 fb90 	bl	801b888 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017168:	69fb      	ldr	r3, [r7, #28]
 801716a:	8b5b      	ldrh	r3, [r3, #26]
 801716c:	f003 0310 	and.w	r3, r3, #16
 8017170:	2b00      	cmp	r3, #0
 8017172:	d008      	beq.n	8017186 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017174:	4b42      	ldr	r3, [pc, #264]	; (8017280 <tcp_input+0x72c>)
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4618      	mov	r0, r3
 801717a:	f7fd fdb5 	bl	8014ce8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801717e:	69f8      	ldr	r0, [r7, #28]
 8017180:	f7fe fc48 	bl	8015a14 <tcp_abort>
            goto aborted;
 8017184:	e091      	b.n	80172aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017186:	69fb      	ldr	r3, [r7, #28]
 8017188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801718c:	2b00      	cmp	r3, #0
 801718e:	d00c      	beq.n	80171aa <tcp_input+0x656>
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017196:	69fb      	ldr	r3, [r7, #28]
 8017198:	6918      	ldr	r0, [r3, #16]
 801719a:	4b39      	ldr	r3, [pc, #228]	; (8017280 <tcp_input+0x72c>)
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	2300      	movs	r3, #0
 80171a0:	69f9      	ldr	r1, [r7, #28]
 80171a2:	47a0      	blx	r4
 80171a4:	4603      	mov	r3, r0
 80171a6:	74fb      	strb	r3, [r7, #19]
 80171a8:	e008      	b.n	80171bc <tcp_input+0x668>
 80171aa:	4b35      	ldr	r3, [pc, #212]	; (8017280 <tcp_input+0x72c>)
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	2300      	movs	r3, #0
 80171b0:	69f9      	ldr	r1, [r7, #28]
 80171b2:	2000      	movs	r0, #0
 80171b4:	f7ff f95e 	bl	8016474 <tcp_recv_null>
 80171b8:	4603      	mov	r3, r0
 80171ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80171bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80171c0:	f113 0f0d 	cmn.w	r3, #13
 80171c4:	d053      	beq.n	801726e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80171c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d003      	beq.n	80171d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80171ce:	4b2c      	ldr	r3, [pc, #176]	; (8017280 <tcp_input+0x72c>)
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	69fb      	ldr	r3, [r7, #28]
 80171d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80171d6:	4b2b      	ldr	r3, [pc, #172]	; (8017284 <tcp_input+0x730>)
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	f003 0320 	and.w	r3, r3, #32
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d030      	beq.n	8017244 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d009      	beq.n	80171fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171ee:	7b5a      	ldrb	r2, [r3, #13]
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171f4:	f042 0220 	orr.w	r2, r2, #32
 80171f8:	b2d2      	uxtb	r2, r2
 80171fa:	735a      	strb	r2, [r3, #13]
 80171fc:	e022      	b.n	8017244 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017202:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017206:	d005      	beq.n	8017214 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801720c:	3301      	adds	r3, #1
 801720e:	b29a      	uxth	r2, r3
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801721a:	2b00      	cmp	r3, #0
 801721c:	d00b      	beq.n	8017236 <tcp_input+0x6e2>
 801721e:	69fb      	ldr	r3, [r7, #28]
 8017220:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017224:	69fb      	ldr	r3, [r7, #28]
 8017226:	6918      	ldr	r0, [r3, #16]
 8017228:	2300      	movs	r3, #0
 801722a:	2200      	movs	r2, #0
 801722c:	69f9      	ldr	r1, [r7, #28]
 801722e:	47a0      	blx	r4
 8017230:	4603      	mov	r3, r0
 8017232:	74fb      	strb	r3, [r7, #19]
 8017234:	e001      	b.n	801723a <tcp_input+0x6e6>
 8017236:	2300      	movs	r3, #0
 8017238:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801723a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801723e:	f113 0f0d 	cmn.w	r3, #13
 8017242:	d016      	beq.n	8017272 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017244:	4b13      	ldr	r3, [pc, #76]	; (8017294 <tcp_input+0x740>)
 8017246:	2200      	movs	r2, #0
 8017248:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801724a:	69f8      	ldr	r0, [r7, #28]
 801724c:	f000 f88e 	bl	801736c <tcp_input_delayed_close>
 8017250:	4603      	mov	r3, r0
 8017252:	2b00      	cmp	r3, #0
 8017254:	d128      	bne.n	80172a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017256:	69f8      	ldr	r0, [r7, #28]
 8017258:	f002 fac8 	bl	80197ec <tcp_output>
 801725c:	e025      	b.n	80172aa <tcp_input+0x756>
        goto aborted;
 801725e:	bf00      	nop
 8017260:	e023      	b.n	80172aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017262:	bf00      	nop
 8017264:	e021      	b.n	80172aa <tcp_input+0x756>
              goto aborted;
 8017266:	bf00      	nop
 8017268:	e01f      	b.n	80172aa <tcp_input+0x756>
          goto aborted;
 801726a:	bf00      	nop
 801726c:	e01d      	b.n	80172aa <tcp_input+0x756>
            goto aborted;
 801726e:	bf00      	nop
 8017270:	e01b      	b.n	80172aa <tcp_input+0x756>
              goto aborted;
 8017272:	bf00      	nop
 8017274:	e019      	b.n	80172aa <tcp_input+0x756>
 8017276:	bf00      	nop
 8017278:	2400c994 	.word	0x2400c994
 801727c:	2400c9a4 	.word	0x2400c9a4
 8017280:	2400c9c4 	.word	0x2400c9c4
 8017284:	2400c9c1 	.word	0x2400c9c1
 8017288:	2400c9bc 	.word	0x2400c9bc
 801728c:	2400c9c0 	.word	0x2400c9c0
 8017290:	2400c9be 	.word	0x2400c9be
 8017294:	2400c9c8 	.word	0x2400c9c8
 8017298:	2400c988 	.word	0x2400c988
 801729c:	0801e62c 	.word	0x0801e62c
 80172a0:	0801e818 	.word	0x0801e818
 80172a4:	0801e6b0 	.word	0x0801e6b0
          goto aborted;
 80172a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80172aa:	4b27      	ldr	r3, [pc, #156]	; (8017348 <tcp_input+0x7f4>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80172b0:	4b26      	ldr	r3, [pc, #152]	; (801734c <tcp_input+0x7f8>)
 80172b2:	2200      	movs	r2, #0
 80172b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80172b6:	4b26      	ldr	r3, [pc, #152]	; (8017350 <tcp_input+0x7fc>)
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d03f      	beq.n	801733e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80172be:	4b24      	ldr	r3, [pc, #144]	; (8017350 <tcp_input+0x7fc>)
 80172c0:	685b      	ldr	r3, [r3, #4]
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fd fd10 	bl	8014ce8 <pbuf_free>
      inseg.p = NULL;
 80172c8:	4b21      	ldr	r3, [pc, #132]	; (8017350 <tcp_input+0x7fc>)
 80172ca:	2200      	movs	r2, #0
 80172cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80172ce:	e036      	b.n	801733e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80172d0:	4b20      	ldr	r3, [pc, #128]	; (8017354 <tcp_input+0x800>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	899b      	ldrh	r3, [r3, #12]
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	4618      	mov	r0, r3
 80172da:	f7f7 fead 	bl	800f038 <lwip_htons>
 80172de:	4603      	mov	r3, r0
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	f003 0304 	and.w	r3, r3, #4
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d118      	bne.n	801731c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172ea:	4b1b      	ldr	r3, [pc, #108]	; (8017358 <tcp_input+0x804>)
 80172ec:	6819      	ldr	r1, [r3, #0]
 80172ee:	4b1b      	ldr	r3, [pc, #108]	; (801735c <tcp_input+0x808>)
 80172f0:	881b      	ldrh	r3, [r3, #0]
 80172f2:	461a      	mov	r2, r3
 80172f4:	4b1a      	ldr	r3, [pc, #104]	; (8017360 <tcp_input+0x80c>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172fa:	4b16      	ldr	r3, [pc, #88]	; (8017354 <tcp_input+0x800>)
 80172fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172fe:	885b      	ldrh	r3, [r3, #2]
 8017300:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017302:	4a14      	ldr	r2, [pc, #80]	; (8017354 <tcp_input+0x800>)
 8017304:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017306:	8812      	ldrh	r2, [r2, #0]
 8017308:	b292      	uxth	r2, r2
 801730a:	9202      	str	r2, [sp, #8]
 801730c:	9301      	str	r3, [sp, #4]
 801730e:	4b15      	ldr	r3, [pc, #84]	; (8017364 <tcp_input+0x810>)
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	4b15      	ldr	r3, [pc, #84]	; (8017368 <tcp_input+0x814>)
 8017314:	4602      	mov	r2, r0
 8017316:	2000      	movs	r0, #0
 8017318:	f003 f81c 	bl	801a354 <tcp_rst>
    pbuf_free(p);
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7fd fce3 	bl	8014ce8 <pbuf_free>
  return;
 8017322:	e00c      	b.n	801733e <tcp_input+0x7ea>
    goto dropped;
 8017324:	bf00      	nop
 8017326:	e006      	b.n	8017336 <tcp_input+0x7e2>
    goto dropped;
 8017328:	bf00      	nop
 801732a:	e004      	b.n	8017336 <tcp_input+0x7e2>
    goto dropped;
 801732c:	bf00      	nop
 801732e:	e002      	b.n	8017336 <tcp_input+0x7e2>
      goto dropped;
 8017330:	bf00      	nop
 8017332:	e000      	b.n	8017336 <tcp_input+0x7e2>
      goto dropped;
 8017334:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f7fd fcd6 	bl	8014ce8 <pbuf_free>
 801733c:	e000      	b.n	8017340 <tcp_input+0x7ec>
  return;
 801733e:	bf00      	nop
}
 8017340:	3724      	adds	r7, #36	; 0x24
 8017342:	46bd      	mov	sp, r7
 8017344:	bd90      	pop	{r4, r7, pc}
 8017346:	bf00      	nop
 8017348:	2400c9c8 	.word	0x2400c9c8
 801734c:	2400c9c4 	.word	0x2400c9c4
 8017350:	2400c994 	.word	0x2400c994
 8017354:	2400c9a4 	.word	0x2400c9a4
 8017358:	2400c9b8 	.word	0x2400c9b8
 801735c:	2400c9be 	.word	0x2400c9be
 8017360:	2400c9b4 	.word	0x2400c9b4
 8017364:	24009858 	.word	0x24009858
 8017368:	2400985c 	.word	0x2400985c

0801736c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <tcp_input_delayed_close+0x1c>
 801737a:	4b17      	ldr	r3, [pc, #92]	; (80173d8 <tcp_input_delayed_close+0x6c>)
 801737c:	f240 225a 	movw	r2, #602	; 0x25a
 8017380:	4916      	ldr	r1, [pc, #88]	; (80173dc <tcp_input_delayed_close+0x70>)
 8017382:	4817      	ldr	r0, [pc, #92]	; (80173e0 <tcp_input_delayed_close+0x74>)
 8017384:	f004 fa80 	bl	801b888 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017388:	4b16      	ldr	r3, [pc, #88]	; (80173e4 <tcp_input_delayed_close+0x78>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	f003 0310 	and.w	r3, r3, #16
 8017390:	2b00      	cmp	r3, #0
 8017392:	d01c      	beq.n	80173ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	8b5b      	ldrh	r3, [r3, #26]
 8017398:	f003 0310 	and.w	r3, r3, #16
 801739c:	2b00      	cmp	r3, #0
 801739e:	d10d      	bne.n	80173bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d008      	beq.n	80173bc <tcp_input_delayed_close+0x50>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173b0:	687a      	ldr	r2, [r7, #4]
 80173b2:	6912      	ldr	r2, [r2, #16]
 80173b4:	f06f 010e 	mvn.w	r1, #14
 80173b8:	4610      	mov	r0, r2
 80173ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80173bc:	6879      	ldr	r1, [r7, #4]
 80173be:	480a      	ldr	r0, [pc, #40]	; (80173e8 <tcp_input_delayed_close+0x7c>)
 80173c0:	f7ff fa50 	bl	8016864 <tcp_pcb_remove>
    tcp_free(pcb);
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f7fe f83d 	bl	8015444 <tcp_free>
    return 1;
 80173ca:	2301      	movs	r3, #1
 80173cc:	e000      	b.n	80173d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80173ce:	2300      	movs	r3, #0
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	3708      	adds	r7, #8
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	0801e62c 	.word	0x0801e62c
 80173dc:	0801e834 	.word	0x0801e834
 80173e0:	0801e6b0 	.word	0x0801e6b0
 80173e4:	2400c9c1 	.word	0x2400c9c1
 80173e8:	2400c988 	.word	0x2400c988

080173ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80173ec:	b590      	push	{r4, r7, lr}
 80173ee:	b08b      	sub	sp, #44	; 0x2c
 80173f0:	af04      	add	r7, sp, #16
 80173f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80173f4:	4b6f      	ldr	r3, [pc, #444]	; (80175b4 <tcp_listen_input+0x1c8>)
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	f003 0304 	and.w	r3, r3, #4
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	f040 80d2 	bne.w	80175a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d106      	bne.n	8017416 <tcp_listen_input+0x2a>
 8017408:	4b6b      	ldr	r3, [pc, #428]	; (80175b8 <tcp_listen_input+0x1cc>)
 801740a:	f240 2281 	movw	r2, #641	; 0x281
 801740e:	496b      	ldr	r1, [pc, #428]	; (80175bc <tcp_listen_input+0x1d0>)
 8017410:	486b      	ldr	r0, [pc, #428]	; (80175c0 <tcp_listen_input+0x1d4>)
 8017412:	f004 fa39 	bl	801b888 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017416:	4b67      	ldr	r3, [pc, #412]	; (80175b4 <tcp_listen_input+0x1c8>)
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	f003 0310 	and.w	r3, r3, #16
 801741e:	2b00      	cmp	r3, #0
 8017420:	d019      	beq.n	8017456 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017422:	4b68      	ldr	r3, [pc, #416]	; (80175c4 <tcp_listen_input+0x1d8>)
 8017424:	6819      	ldr	r1, [r3, #0]
 8017426:	4b68      	ldr	r3, [pc, #416]	; (80175c8 <tcp_listen_input+0x1dc>)
 8017428:	881b      	ldrh	r3, [r3, #0]
 801742a:	461a      	mov	r2, r3
 801742c:	4b67      	ldr	r3, [pc, #412]	; (80175cc <tcp_listen_input+0x1e0>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017432:	4b67      	ldr	r3, [pc, #412]	; (80175d0 <tcp_listen_input+0x1e4>)
 8017434:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017436:	885b      	ldrh	r3, [r3, #2]
 8017438:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801743a:	4a65      	ldr	r2, [pc, #404]	; (80175d0 <tcp_listen_input+0x1e4>)
 801743c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801743e:	8812      	ldrh	r2, [r2, #0]
 8017440:	b292      	uxth	r2, r2
 8017442:	9202      	str	r2, [sp, #8]
 8017444:	9301      	str	r3, [sp, #4]
 8017446:	4b63      	ldr	r3, [pc, #396]	; (80175d4 <tcp_listen_input+0x1e8>)
 8017448:	9300      	str	r3, [sp, #0]
 801744a:	4b63      	ldr	r3, [pc, #396]	; (80175d8 <tcp_listen_input+0x1ec>)
 801744c:	4602      	mov	r2, r0
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f002 ff80 	bl	801a354 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017454:	e0a9      	b.n	80175aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017456:	4b57      	ldr	r3, [pc, #348]	; (80175b4 <tcp_listen_input+0x1c8>)
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	f003 0302 	and.w	r3, r3, #2
 801745e:	2b00      	cmp	r3, #0
 8017460:	f000 80a3 	beq.w	80175aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	7d5b      	ldrb	r3, [r3, #21]
 8017468:	4618      	mov	r0, r3
 801746a:	f7ff f927 	bl	80166bc <tcp_alloc>
 801746e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d111      	bne.n	801749a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	699b      	ldr	r3, [r3, #24]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d00a      	beq.n	8017494 <tcp_listen_input+0xa8>
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	699b      	ldr	r3, [r3, #24]
 8017482:	687a      	ldr	r2, [r7, #4]
 8017484:	6910      	ldr	r0, [r2, #16]
 8017486:	f04f 32ff 	mov.w	r2, #4294967295
 801748a:	2100      	movs	r1, #0
 801748c:	4798      	blx	r3
 801748e:	4603      	mov	r3, r0
 8017490:	73bb      	strb	r3, [r7, #14]
      return;
 8017492:	e08b      	b.n	80175ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017494:	23f0      	movs	r3, #240	; 0xf0
 8017496:	73bb      	strb	r3, [r7, #14]
      return;
 8017498:	e088      	b.n	80175ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801749a:	4b50      	ldr	r3, [pc, #320]	; (80175dc <tcp_listen_input+0x1f0>)
 801749c:	695a      	ldr	r2, [r3, #20]
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80174a2:	4b4e      	ldr	r3, [pc, #312]	; (80175dc <tcp_listen_input+0x1f0>)
 80174a4:	691a      	ldr	r2, [r3, #16]
 80174a6:	697b      	ldr	r3, [r7, #20]
 80174a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	8ada      	ldrh	r2, [r3, #22]
 80174ae:	697b      	ldr	r3, [r7, #20]
 80174b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80174b2:	4b47      	ldr	r3, [pc, #284]	; (80175d0 <tcp_listen_input+0x1e4>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	881b      	ldrh	r3, [r3, #0]
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	2203      	movs	r2, #3
 80174c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80174c4:	4b41      	ldr	r3, [pc, #260]	; (80175cc <tcp_listen_input+0x1e0>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	1c5a      	adds	r2, r3, #1
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80174d6:	6978      	ldr	r0, [r7, #20]
 80174d8:	f7ff fa58 	bl	801698c <tcp_next_iss>
 80174dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	693a      	ldr	r2, [r7, #16]
 80174e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	693a      	ldr	r2, [r7, #16]
 80174e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	693a      	ldr	r2, [r7, #16]
 80174ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	693a      	ldr	r2, [r7, #16]
 80174f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80174f6:	4b35      	ldr	r3, [pc, #212]	; (80175cc <tcp_listen_input+0x1e0>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	1e5a      	subs	r2, r3, #1
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	691a      	ldr	r2, [r3, #16]
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	7a5b      	ldrb	r3, [r3, #9]
 8017512:	f003 030c 	and.w	r3, r3, #12
 8017516:	b2da      	uxtb	r2, r3
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	7a1a      	ldrb	r2, [r3, #8]
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017524:	4b2e      	ldr	r3, [pc, #184]	; (80175e0 <tcp_listen_input+0x1f4>)
 8017526:	681a      	ldr	r2, [r3, #0]
 8017528:	697b      	ldr	r3, [r7, #20]
 801752a:	60da      	str	r2, [r3, #12]
 801752c:	4a2c      	ldr	r2, [pc, #176]	; (80175e0 <tcp_listen_input+0x1f4>)
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	6013      	str	r3, [r2, #0]
 8017532:	f003 fa73 	bl	801aa1c <tcp_timer_needed>
 8017536:	4b2b      	ldr	r3, [pc, #172]	; (80175e4 <tcp_listen_input+0x1f8>)
 8017538:	2201      	movs	r2, #1
 801753a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801753c:	6978      	ldr	r0, [r7, #20]
 801753e:	f001 fd8f 	bl	8019060 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017542:	4b23      	ldr	r3, [pc, #140]	; (80175d0 <tcp_listen_input+0x1e4>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	89db      	ldrh	r3, [r3, #14]
 8017548:	b29a      	uxth	r2, r3
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017560:	697b      	ldr	r3, [r7, #20]
 8017562:	3304      	adds	r3, #4
 8017564:	4618      	mov	r0, r3
 8017566:	f7fa fed7 	bl	8012318 <ip4_route>
 801756a:	4601      	mov	r1, r0
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	3304      	adds	r3, #4
 8017570:	461a      	mov	r2, r3
 8017572:	4620      	mov	r0, r4
 8017574:	f7ff fa30 	bl	80169d8 <tcp_eff_send_mss_netif>
 8017578:	4603      	mov	r3, r0
 801757a:	461a      	mov	r2, r3
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017580:	2112      	movs	r1, #18
 8017582:	6978      	ldr	r0, [r7, #20]
 8017584:	f002 f844 	bl	8019610 <tcp_enqueue_flags>
 8017588:	4603      	mov	r3, r0
 801758a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801758c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d004      	beq.n	801759e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017594:	2100      	movs	r1, #0
 8017596:	6978      	ldr	r0, [r7, #20]
 8017598:	f7fe f97e 	bl	8015898 <tcp_abandon>
      return;
 801759c:	e006      	b.n	80175ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801759e:	6978      	ldr	r0, [r7, #20]
 80175a0:	f002 f924 	bl	80197ec <tcp_output>
  return;
 80175a4:	e001      	b.n	80175aa <tcp_listen_input+0x1be>
    return;
 80175a6:	bf00      	nop
 80175a8:	e000      	b.n	80175ac <tcp_listen_input+0x1c0>
  return;
 80175aa:	bf00      	nop
}
 80175ac:	371c      	adds	r7, #28
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd90      	pop	{r4, r7, pc}
 80175b2:	bf00      	nop
 80175b4:	2400c9c0 	.word	0x2400c9c0
 80175b8:	0801e62c 	.word	0x0801e62c
 80175bc:	0801e85c 	.word	0x0801e85c
 80175c0:	0801e6b0 	.word	0x0801e6b0
 80175c4:	2400c9b8 	.word	0x2400c9b8
 80175c8:	2400c9be 	.word	0x2400c9be
 80175cc:	2400c9b4 	.word	0x2400c9b4
 80175d0:	2400c9a4 	.word	0x2400c9a4
 80175d4:	24009858 	.word	0x24009858
 80175d8:	2400985c 	.word	0x2400985c
 80175dc:	24009848 	.word	0x24009848
 80175e0:	2400c988 	.word	0x2400c988
 80175e4:	2400c990 	.word	0x2400c990

080175e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b086      	sub	sp, #24
 80175ec:	af04      	add	r7, sp, #16
 80175ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80175f0:	4b2f      	ldr	r3, [pc, #188]	; (80176b0 <tcp_timewait_input+0xc8>)
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	f003 0304 	and.w	r3, r3, #4
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d153      	bne.n	80176a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d106      	bne.n	8017610 <tcp_timewait_input+0x28>
 8017602:	4b2c      	ldr	r3, [pc, #176]	; (80176b4 <tcp_timewait_input+0xcc>)
 8017604:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017608:	492b      	ldr	r1, [pc, #172]	; (80176b8 <tcp_timewait_input+0xd0>)
 801760a:	482c      	ldr	r0, [pc, #176]	; (80176bc <tcp_timewait_input+0xd4>)
 801760c:	f004 f93c 	bl	801b888 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017610:	4b27      	ldr	r3, [pc, #156]	; (80176b0 <tcp_timewait_input+0xc8>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	f003 0302 	and.w	r3, r3, #2
 8017618:	2b00      	cmp	r3, #0
 801761a:	d02a      	beq.n	8017672 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801761c:	4b28      	ldr	r3, [pc, #160]	; (80176c0 <tcp_timewait_input+0xd8>)
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017624:	1ad3      	subs	r3, r2, r3
 8017626:	2b00      	cmp	r3, #0
 8017628:	db2d      	blt.n	8017686 <tcp_timewait_input+0x9e>
 801762a:	4b25      	ldr	r3, [pc, #148]	; (80176c0 <tcp_timewait_input+0xd8>)
 801762c:	681a      	ldr	r2, [r3, #0]
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017632:	6879      	ldr	r1, [r7, #4]
 8017634:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017636:	440b      	add	r3, r1
 8017638:	1ad3      	subs	r3, r2, r3
 801763a:	2b00      	cmp	r3, #0
 801763c:	dc23      	bgt.n	8017686 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801763e:	4b21      	ldr	r3, [pc, #132]	; (80176c4 <tcp_timewait_input+0xdc>)
 8017640:	6819      	ldr	r1, [r3, #0]
 8017642:	4b21      	ldr	r3, [pc, #132]	; (80176c8 <tcp_timewait_input+0xe0>)
 8017644:	881b      	ldrh	r3, [r3, #0]
 8017646:	461a      	mov	r2, r3
 8017648:	4b1d      	ldr	r3, [pc, #116]	; (80176c0 <tcp_timewait_input+0xd8>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801764e:	4b1f      	ldr	r3, [pc, #124]	; (80176cc <tcp_timewait_input+0xe4>)
 8017650:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017652:	885b      	ldrh	r3, [r3, #2]
 8017654:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017656:	4a1d      	ldr	r2, [pc, #116]	; (80176cc <tcp_timewait_input+0xe4>)
 8017658:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801765a:	8812      	ldrh	r2, [r2, #0]
 801765c:	b292      	uxth	r2, r2
 801765e:	9202      	str	r2, [sp, #8]
 8017660:	9301      	str	r3, [sp, #4]
 8017662:	4b1b      	ldr	r3, [pc, #108]	; (80176d0 <tcp_timewait_input+0xe8>)
 8017664:	9300      	str	r3, [sp, #0]
 8017666:	4b1b      	ldr	r3, [pc, #108]	; (80176d4 <tcp_timewait_input+0xec>)
 8017668:	4602      	mov	r2, r0
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f002 fe72 	bl	801a354 <tcp_rst>
      return;
 8017670:	e01b      	b.n	80176aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017672:	4b0f      	ldr	r3, [pc, #60]	; (80176b0 <tcp_timewait_input+0xc8>)
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	f003 0301 	and.w	r3, r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	d003      	beq.n	8017686 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801767e:	4b16      	ldr	r3, [pc, #88]	; (80176d8 <tcp_timewait_input+0xf0>)
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017686:	4b10      	ldr	r3, [pc, #64]	; (80176c8 <tcp_timewait_input+0xe0>)
 8017688:	881b      	ldrh	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d00c      	beq.n	80176a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	8b5b      	ldrh	r3, [r3, #26]
 8017692:	f043 0302 	orr.w	r3, r3, #2
 8017696:	b29a      	uxth	r2, r3
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f002 f8a5 	bl	80197ec <tcp_output>
  }
  return;
 80176a2:	e001      	b.n	80176a8 <tcp_timewait_input+0xc0>
    return;
 80176a4:	bf00      	nop
 80176a6:	e000      	b.n	80176aa <tcp_timewait_input+0xc2>
  return;
 80176a8:	bf00      	nop
}
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	2400c9c0 	.word	0x2400c9c0
 80176b4:	0801e62c 	.word	0x0801e62c
 80176b8:	0801e87c 	.word	0x0801e87c
 80176bc:	0801e6b0 	.word	0x0801e6b0
 80176c0:	2400c9b4 	.word	0x2400c9b4
 80176c4:	2400c9b8 	.word	0x2400c9b8
 80176c8:	2400c9be 	.word	0x2400c9be
 80176cc:	2400c9a4 	.word	0x2400c9a4
 80176d0:	24009858 	.word	0x24009858
 80176d4:	2400985c 	.word	0x2400985c
 80176d8:	2400c97c 	.word	0x2400c97c

080176dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80176dc:	b590      	push	{r4, r7, lr}
 80176de:	b08d      	sub	sp, #52	; 0x34
 80176e0:	af04      	add	r7, sp, #16
 80176e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80176e4:	2300      	movs	r3, #0
 80176e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80176e8:	2300      	movs	r3, #0
 80176ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d106      	bne.n	8017700 <tcp_process+0x24>
 80176f2:	4b9d      	ldr	r3, [pc, #628]	; (8017968 <tcp_process+0x28c>)
 80176f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80176f8:	499c      	ldr	r1, [pc, #624]	; (801796c <tcp_process+0x290>)
 80176fa:	489d      	ldr	r0, [pc, #628]	; (8017970 <tcp_process+0x294>)
 80176fc:	f004 f8c4 	bl	801b888 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017700:	4b9c      	ldr	r3, [pc, #624]	; (8017974 <tcp_process+0x298>)
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	f003 0304 	and.w	r3, r3, #4
 8017708:	2b00      	cmp	r3, #0
 801770a:	d04e      	beq.n	80177aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	7d1b      	ldrb	r3, [r3, #20]
 8017710:	2b02      	cmp	r3, #2
 8017712:	d108      	bne.n	8017726 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017718:	4b97      	ldr	r3, [pc, #604]	; (8017978 <tcp_process+0x29c>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	429a      	cmp	r2, r3
 801771e:	d123      	bne.n	8017768 <tcp_process+0x8c>
        acceptable = 1;
 8017720:	2301      	movs	r3, #1
 8017722:	76fb      	strb	r3, [r7, #27]
 8017724:	e020      	b.n	8017768 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801772a:	4b94      	ldr	r3, [pc, #592]	; (801797c <tcp_process+0x2a0>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	429a      	cmp	r2, r3
 8017730:	d102      	bne.n	8017738 <tcp_process+0x5c>
        acceptable = 1;
 8017732:	2301      	movs	r3, #1
 8017734:	76fb      	strb	r3, [r7, #27]
 8017736:	e017      	b.n	8017768 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017738:	4b90      	ldr	r3, [pc, #576]	; (801797c <tcp_process+0x2a0>)
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017740:	1ad3      	subs	r3, r2, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	db10      	blt.n	8017768 <tcp_process+0x8c>
 8017746:	4b8d      	ldr	r3, [pc, #564]	; (801797c <tcp_process+0x2a0>)
 8017748:	681a      	ldr	r2, [r3, #0]
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801774e:	6879      	ldr	r1, [r7, #4]
 8017750:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017752:	440b      	add	r3, r1
 8017754:	1ad3      	subs	r3, r2, r3
 8017756:	2b00      	cmp	r3, #0
 8017758:	dc06      	bgt.n	8017768 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	8b5b      	ldrh	r3, [r3, #26]
 801775e:	f043 0302 	orr.w	r3, r3, #2
 8017762:	b29a      	uxth	r2, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017768:	7efb      	ldrb	r3, [r7, #27]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d01b      	beq.n	80177a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	7d1b      	ldrb	r3, [r3, #20]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d106      	bne.n	8017784 <tcp_process+0xa8>
 8017776:	4b7c      	ldr	r3, [pc, #496]	; (8017968 <tcp_process+0x28c>)
 8017778:	f44f 724e 	mov.w	r2, #824	; 0x338
 801777c:	4980      	ldr	r1, [pc, #512]	; (8017980 <tcp_process+0x2a4>)
 801777e:	487c      	ldr	r0, [pc, #496]	; (8017970 <tcp_process+0x294>)
 8017780:	f004 f882 	bl	801b888 <iprintf>
      recv_flags |= TF_RESET;
 8017784:	4b7f      	ldr	r3, [pc, #508]	; (8017984 <tcp_process+0x2a8>)
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	f043 0308 	orr.w	r3, r3, #8
 801778c:	b2da      	uxtb	r2, r3
 801778e:	4b7d      	ldr	r3, [pc, #500]	; (8017984 <tcp_process+0x2a8>)
 8017790:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	8b5b      	ldrh	r3, [r3, #26]
 8017796:	f023 0301 	bic.w	r3, r3, #1
 801779a:	b29a      	uxth	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80177a0:	f06f 030d 	mvn.w	r3, #13
 80177a4:	e37a      	b.n	8017e9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80177a6:	2300      	movs	r3, #0
 80177a8:	e378      	b.n	8017e9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80177aa:	4b72      	ldr	r3, [pc, #456]	; (8017974 <tcp_process+0x298>)
 80177ac:	781b      	ldrb	r3, [r3, #0]
 80177ae:	f003 0302 	and.w	r3, r3, #2
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d010      	beq.n	80177d8 <tcp_process+0xfc>
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	7d1b      	ldrb	r3, [r3, #20]
 80177ba:	2b02      	cmp	r3, #2
 80177bc:	d00c      	beq.n	80177d8 <tcp_process+0xfc>
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	7d1b      	ldrb	r3, [r3, #20]
 80177c2:	2b03      	cmp	r3, #3
 80177c4:	d008      	beq.n	80177d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	8b5b      	ldrh	r3, [r3, #26]
 80177ca:	f043 0302 	orr.w	r3, r3, #2
 80177ce:	b29a      	uxth	r2, r3
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	e361      	b.n	8017e9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	8b5b      	ldrh	r3, [r3, #26]
 80177dc:	f003 0310 	and.w	r3, r3, #16
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d103      	bne.n	80177ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80177e4:	4b68      	ldr	r3, [pc, #416]	; (8017988 <tcp_process+0x2ac>)
 80177e6:	681a      	ldr	r2, [r3, #0]
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2200      	movs	r2, #0
 80177f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2200      	movs	r2, #0
 80177f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f001 fc2f 	bl	8019060 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	7d1b      	ldrb	r3, [r3, #20]
 8017806:	3b02      	subs	r3, #2
 8017808:	2b07      	cmp	r3, #7
 801780a:	f200 8337 	bhi.w	8017e7c <tcp_process+0x7a0>
 801780e:	a201      	add	r2, pc, #4	; (adr r2, 8017814 <tcp_process+0x138>)
 8017810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017814:	08017835 	.word	0x08017835
 8017818:	08017a65 	.word	0x08017a65
 801781c:	08017bdd 	.word	0x08017bdd
 8017820:	08017c07 	.word	0x08017c07
 8017824:	08017d2b 	.word	0x08017d2b
 8017828:	08017bdd 	.word	0x08017bdd
 801782c:	08017db7 	.word	0x08017db7
 8017830:	08017e47 	.word	0x08017e47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017834:	4b4f      	ldr	r3, [pc, #316]	; (8017974 <tcp_process+0x298>)
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	f003 0310 	and.w	r3, r3, #16
 801783c:	2b00      	cmp	r3, #0
 801783e:	f000 80e4 	beq.w	8017a0a <tcp_process+0x32e>
 8017842:	4b4c      	ldr	r3, [pc, #304]	; (8017974 <tcp_process+0x298>)
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	f003 0302 	and.w	r3, r3, #2
 801784a:	2b00      	cmp	r3, #0
 801784c:	f000 80dd 	beq.w	8017a0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017854:	1c5a      	adds	r2, r3, #1
 8017856:	4b48      	ldr	r3, [pc, #288]	; (8017978 <tcp_process+0x29c>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	429a      	cmp	r2, r3
 801785c:	f040 80d5 	bne.w	8017a0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017860:	4b46      	ldr	r3, [pc, #280]	; (801797c <tcp_process+0x2a0>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	1c5a      	adds	r2, r3, #1
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017872:	4b41      	ldr	r3, [pc, #260]	; (8017978 <tcp_process+0x29c>)
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801787a:	4b44      	ldr	r3, [pc, #272]	; (801798c <tcp_process+0x2b0>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	89db      	ldrh	r3, [r3, #14]
 8017880:	b29a      	uxth	r2, r3
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017894:	4b39      	ldr	r3, [pc, #228]	; (801797c <tcp_process+0x2a0>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	1e5a      	subs	r2, r3, #1
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2204      	movs	r2, #4
 80178a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	3304      	adds	r3, #4
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7fa fd33 	bl	8012318 <ip4_route>
 80178b2:	4601      	mov	r1, r0
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	3304      	adds	r3, #4
 80178b8:	461a      	mov	r2, r3
 80178ba:	4620      	mov	r0, r4
 80178bc:	f7ff f88c 	bl	80169d8 <tcp_eff_send_mss_netif>
 80178c0:	4603      	mov	r3, r0
 80178c2:	461a      	mov	r2, r3
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178cc:	009a      	lsls	r2, r3, #2
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178d2:	005b      	lsls	r3, r3, #1
 80178d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80178d8:	428b      	cmp	r3, r1
 80178da:	bf38      	it	cc
 80178dc:	460b      	movcc	r3, r1
 80178de:	429a      	cmp	r2, r3
 80178e0:	d204      	bcs.n	80178ec <tcp_process+0x210>
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178e6:	009b      	lsls	r3, r3, #2
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	e00d      	b.n	8017908 <tcp_process+0x22c>
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d904      	bls.n	8017904 <tcp_process+0x228>
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178fe:	005b      	lsls	r3, r3, #1
 8017900:	b29b      	uxth	r3, r3
 8017902:	e001      	b.n	8017908 <tcp_process+0x22c>
 8017904:	f241 131c 	movw	r3, #4380	; 0x111c
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017914:	2b00      	cmp	r3, #0
 8017916:	d106      	bne.n	8017926 <tcp_process+0x24a>
 8017918:	4b13      	ldr	r3, [pc, #76]	; (8017968 <tcp_process+0x28c>)
 801791a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801791e:	491c      	ldr	r1, [pc, #112]	; (8017990 <tcp_process+0x2b4>)
 8017920:	4813      	ldr	r0, [pc, #76]	; (8017970 <tcp_process+0x294>)
 8017922:	f003 ffb1 	bl	801b888 <iprintf>
        --pcb->snd_queuelen;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801792c:	3b01      	subs	r3, #1
 801792e:	b29a      	uxth	r2, r3
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801793a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801793c:	69fb      	ldr	r3, [r7, #28]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d12a      	bne.n	8017998 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017946:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017948:	69fb      	ldr	r3, [r7, #28]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d106      	bne.n	801795c <tcp_process+0x280>
 801794e:	4b06      	ldr	r3, [pc, #24]	; (8017968 <tcp_process+0x28c>)
 8017950:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017954:	490f      	ldr	r1, [pc, #60]	; (8017994 <tcp_process+0x2b8>)
 8017956:	4806      	ldr	r0, [pc, #24]	; (8017970 <tcp_process+0x294>)
 8017958:	f003 ff96 	bl	801b888 <iprintf>
          pcb->unsent = rseg->next;
 801795c:	69fb      	ldr	r3, [r7, #28]
 801795e:	681a      	ldr	r2, [r3, #0]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	66da      	str	r2, [r3, #108]	; 0x6c
 8017964:	e01c      	b.n	80179a0 <tcp_process+0x2c4>
 8017966:	bf00      	nop
 8017968:	0801e62c 	.word	0x0801e62c
 801796c:	0801e89c 	.word	0x0801e89c
 8017970:	0801e6b0 	.word	0x0801e6b0
 8017974:	2400c9c0 	.word	0x2400c9c0
 8017978:	2400c9b8 	.word	0x2400c9b8
 801797c:	2400c9b4 	.word	0x2400c9b4
 8017980:	0801e8b8 	.word	0x0801e8b8
 8017984:	2400c9c1 	.word	0x2400c9c1
 8017988:	2400c97c 	.word	0x2400c97c
 801798c:	2400c9a4 	.word	0x2400c9a4
 8017990:	0801e8d8 	.word	0x0801e8d8
 8017994:	0801e8f0 	.word	0x0801e8f0
        } else {
          pcb->unacked = rseg->next;
 8017998:	69fb      	ldr	r3, [r7, #28]
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80179a0:	69f8      	ldr	r0, [r7, #28]
 80179a2:	f7fe fd22 	bl	80163ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d104      	bne.n	80179b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80179b6:	e006      	b.n	80179c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2200      	movs	r2, #0
 80179bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2200      	movs	r2, #0
 80179c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d00a      	beq.n	80179e6 <tcp_process+0x30a>
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179d6:	687a      	ldr	r2, [r7, #4]
 80179d8:	6910      	ldr	r0, [r2, #16]
 80179da:	2200      	movs	r2, #0
 80179dc:	6879      	ldr	r1, [r7, #4]
 80179de:	4798      	blx	r3
 80179e0:	4603      	mov	r3, r0
 80179e2:	76bb      	strb	r3, [r7, #26]
 80179e4:	e001      	b.n	80179ea <tcp_process+0x30e>
 80179e6:	2300      	movs	r3, #0
 80179e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80179ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80179ee:	f113 0f0d 	cmn.w	r3, #13
 80179f2:	d102      	bne.n	80179fa <tcp_process+0x31e>
          return ERR_ABRT;
 80179f4:	f06f 030c 	mvn.w	r3, #12
 80179f8:	e250      	b.n	8017e9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	8b5b      	ldrh	r3, [r3, #26]
 80179fe:	f043 0302 	orr.w	r3, r3, #2
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017a08:	e23a      	b.n	8017e80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017a0a:	4b98      	ldr	r3, [pc, #608]	; (8017c6c <tcp_process+0x590>)
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	f003 0310 	and.w	r3, r3, #16
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	f000 8234 	beq.w	8017e80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a18:	4b95      	ldr	r3, [pc, #596]	; (8017c70 <tcp_process+0x594>)
 8017a1a:	6819      	ldr	r1, [r3, #0]
 8017a1c:	4b95      	ldr	r3, [pc, #596]	; (8017c74 <tcp_process+0x598>)
 8017a1e:	881b      	ldrh	r3, [r3, #0]
 8017a20:	461a      	mov	r2, r3
 8017a22:	4b95      	ldr	r3, [pc, #596]	; (8017c78 <tcp_process+0x59c>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a28:	4b94      	ldr	r3, [pc, #592]	; (8017c7c <tcp_process+0x5a0>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a2c:	885b      	ldrh	r3, [r3, #2]
 8017a2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a30:	4a92      	ldr	r2, [pc, #584]	; (8017c7c <tcp_process+0x5a0>)
 8017a32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a34:	8812      	ldrh	r2, [r2, #0]
 8017a36:	b292      	uxth	r2, r2
 8017a38:	9202      	str	r2, [sp, #8]
 8017a3a:	9301      	str	r3, [sp, #4]
 8017a3c:	4b90      	ldr	r3, [pc, #576]	; (8017c80 <tcp_process+0x5a4>)
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	4b90      	ldr	r3, [pc, #576]	; (8017c84 <tcp_process+0x5a8>)
 8017a42:	4602      	mov	r2, r0
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f002 fc85 	bl	801a354 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a50:	2b05      	cmp	r3, #5
 8017a52:	f200 8215 	bhi.w	8017e80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f002 fa51 	bl	8019f04 <tcp_rexmit_rto>
      break;
 8017a62:	e20d      	b.n	8017e80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017a64:	4b81      	ldr	r3, [pc, #516]	; (8017c6c <tcp_process+0x590>)
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	f003 0310 	and.w	r3, r3, #16
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	f000 80a1 	beq.w	8017bb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017a72:	4b7f      	ldr	r3, [pc, #508]	; (8017c70 <tcp_process+0x594>)
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a7a:	1ad3      	subs	r3, r2, r3
 8017a7c:	3b01      	subs	r3, #1
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	db7e      	blt.n	8017b80 <tcp_process+0x4a4>
 8017a82:	4b7b      	ldr	r3, [pc, #492]	; (8017c70 <tcp_process+0x594>)
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	dc77      	bgt.n	8017b80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2204      	movs	r2, #4
 8017a94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d102      	bne.n	8017aa4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017a9e:	23fa      	movs	r3, #250	; 0xfa
 8017aa0:	76bb      	strb	r3, [r7, #26]
 8017aa2:	e01d      	b.n	8017ae0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017aa8:	699b      	ldr	r3, [r3, #24]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d106      	bne.n	8017abc <tcp_process+0x3e0>
 8017aae:	4b76      	ldr	r3, [pc, #472]	; (8017c88 <tcp_process+0x5ac>)
 8017ab0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017ab4:	4975      	ldr	r1, [pc, #468]	; (8017c8c <tcp_process+0x5b0>)
 8017ab6:	4876      	ldr	r0, [pc, #472]	; (8017c90 <tcp_process+0x5b4>)
 8017ab8:	f003 fee6 	bl	801b888 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ac0:	699b      	ldr	r3, [r3, #24]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d00a      	beq.n	8017adc <tcp_process+0x400>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017aca:	699b      	ldr	r3, [r3, #24]
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	6910      	ldr	r0, [r2, #16]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	6879      	ldr	r1, [r7, #4]
 8017ad4:	4798      	blx	r3
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	76bb      	strb	r3, [r7, #26]
 8017ada:	e001      	b.n	8017ae0 <tcp_process+0x404>
 8017adc:	23f0      	movs	r3, #240	; 0xf0
 8017ade:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017ae0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d00a      	beq.n	8017afe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017ae8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017aec:	f113 0f0d 	cmn.w	r3, #13
 8017af0:	d002      	beq.n	8017af8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f7fd ff8e 	bl	8015a14 <tcp_abort>
            }
            return ERR_ABRT;
 8017af8:	f06f 030c 	mvn.w	r3, #12
 8017afc:	e1ce      	b.n	8017e9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f000 fae0 	bl	80180c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017b04:	4b63      	ldr	r3, [pc, #396]	; (8017c94 <tcp_process+0x5b8>)
 8017b06:	881b      	ldrh	r3, [r3, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d005      	beq.n	8017b18 <tcp_process+0x43c>
            recv_acked--;
 8017b0c:	4b61      	ldr	r3, [pc, #388]	; (8017c94 <tcp_process+0x5b8>)
 8017b0e:	881b      	ldrh	r3, [r3, #0]
 8017b10:	3b01      	subs	r3, #1
 8017b12:	b29a      	uxth	r2, r3
 8017b14:	4b5f      	ldr	r3, [pc, #380]	; (8017c94 <tcp_process+0x5b8>)
 8017b16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b1c:	009a      	lsls	r2, r3, #2
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b22:	005b      	lsls	r3, r3, #1
 8017b24:	f241 111c 	movw	r1, #4380	; 0x111c
 8017b28:	428b      	cmp	r3, r1
 8017b2a:	bf38      	it	cc
 8017b2c:	460b      	movcc	r3, r1
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d204      	bcs.n	8017b3c <tcp_process+0x460>
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b36:	009b      	lsls	r3, r3, #2
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	e00d      	b.n	8017b58 <tcp_process+0x47c>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b40:	005b      	lsls	r3, r3, #1
 8017b42:	f241 121c 	movw	r2, #4380	; 0x111c
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d904      	bls.n	8017b54 <tcp_process+0x478>
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b4e:	005b      	lsls	r3, r3, #1
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	e001      	b.n	8017b58 <tcp_process+0x47c>
 8017b54:	f241 131c 	movw	r3, #4380	; 0x111c
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017b5e:	4b4e      	ldr	r3, [pc, #312]	; (8017c98 <tcp_process+0x5bc>)
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	f003 0320 	and.w	r3, r3, #32
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d037      	beq.n	8017bda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8b5b      	ldrh	r3, [r3, #26]
 8017b6e:	f043 0302 	orr.w	r3, r3, #2
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2207      	movs	r2, #7
 8017b7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017b7e:	e02c      	b.n	8017bda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b80:	4b3b      	ldr	r3, [pc, #236]	; (8017c70 <tcp_process+0x594>)
 8017b82:	6819      	ldr	r1, [r3, #0]
 8017b84:	4b3b      	ldr	r3, [pc, #236]	; (8017c74 <tcp_process+0x598>)
 8017b86:	881b      	ldrh	r3, [r3, #0]
 8017b88:	461a      	mov	r2, r3
 8017b8a:	4b3b      	ldr	r3, [pc, #236]	; (8017c78 <tcp_process+0x59c>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b90:	4b3a      	ldr	r3, [pc, #232]	; (8017c7c <tcp_process+0x5a0>)
 8017b92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b94:	885b      	ldrh	r3, [r3, #2]
 8017b96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b98:	4a38      	ldr	r2, [pc, #224]	; (8017c7c <tcp_process+0x5a0>)
 8017b9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b9c:	8812      	ldrh	r2, [r2, #0]
 8017b9e:	b292      	uxth	r2, r2
 8017ba0:	9202      	str	r2, [sp, #8]
 8017ba2:	9301      	str	r3, [sp, #4]
 8017ba4:	4b36      	ldr	r3, [pc, #216]	; (8017c80 <tcp_process+0x5a4>)
 8017ba6:	9300      	str	r3, [sp, #0]
 8017ba8:	4b36      	ldr	r3, [pc, #216]	; (8017c84 <tcp_process+0x5a8>)
 8017baa:	4602      	mov	r2, r0
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f002 fbd1 	bl	801a354 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017bb2:	e167      	b.n	8017e84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017bb4:	4b2d      	ldr	r3, [pc, #180]	; (8017c6c <tcp_process+0x590>)
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	f003 0302 	and.w	r3, r3, #2
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f000 8161 	beq.w	8017e84 <tcp_process+0x7a8>
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bc6:	1e5a      	subs	r2, r3, #1
 8017bc8:	4b2b      	ldr	r3, [pc, #172]	; (8017c78 <tcp_process+0x59c>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	f040 8159 	bne.w	8017e84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f002 f9b8 	bl	8019f48 <tcp_rexmit>
      break;
 8017bd8:	e154      	b.n	8017e84 <tcp_process+0x7a8>
 8017bda:	e153      	b.n	8017e84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f000 fa71 	bl	80180c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017be2:	4b2d      	ldr	r3, [pc, #180]	; (8017c98 <tcp_process+0x5bc>)
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	f003 0320 	and.w	r3, r3, #32
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f000 814c 	beq.w	8017e88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	8b5b      	ldrh	r3, [r3, #26]
 8017bf4:	f043 0302 	orr.w	r3, r3, #2
 8017bf8:	b29a      	uxth	r2, r3
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	2207      	movs	r2, #7
 8017c02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017c04:	e140      	b.n	8017e88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f000 fa5c 	bl	80180c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017c0c:	4b22      	ldr	r3, [pc, #136]	; (8017c98 <tcp_process+0x5bc>)
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	f003 0320 	and.w	r3, r3, #32
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d071      	beq.n	8017cfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017c18:	4b14      	ldr	r3, [pc, #80]	; (8017c6c <tcp_process+0x590>)
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	f003 0310 	and.w	r3, r3, #16
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d060      	beq.n	8017ce6 <tcp_process+0x60a>
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017c28:	4b11      	ldr	r3, [pc, #68]	; (8017c70 <tcp_process+0x594>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d15a      	bne.n	8017ce6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d156      	bne.n	8017ce6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	8b5b      	ldrh	r3, [r3, #26]
 8017c3c:	f043 0302 	orr.w	r3, r3, #2
 8017c40:	b29a      	uxth	r2, r3
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f7fe fdbc 	bl	80167c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017c4c:	4b13      	ldr	r3, [pc, #76]	; (8017c9c <tcp_process+0x5c0>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	687a      	ldr	r2, [r7, #4]
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d105      	bne.n	8017c62 <tcp_process+0x586>
 8017c56:	4b11      	ldr	r3, [pc, #68]	; (8017c9c <tcp_process+0x5c0>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	68db      	ldr	r3, [r3, #12]
 8017c5c:	4a0f      	ldr	r2, [pc, #60]	; (8017c9c <tcp_process+0x5c0>)
 8017c5e:	6013      	str	r3, [r2, #0]
 8017c60:	e02e      	b.n	8017cc0 <tcp_process+0x5e4>
 8017c62:	4b0e      	ldr	r3, [pc, #56]	; (8017c9c <tcp_process+0x5c0>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	617b      	str	r3, [r7, #20]
 8017c68:	e027      	b.n	8017cba <tcp_process+0x5de>
 8017c6a:	bf00      	nop
 8017c6c:	2400c9c0 	.word	0x2400c9c0
 8017c70:	2400c9b8 	.word	0x2400c9b8
 8017c74:	2400c9be 	.word	0x2400c9be
 8017c78:	2400c9b4 	.word	0x2400c9b4
 8017c7c:	2400c9a4 	.word	0x2400c9a4
 8017c80:	24009858 	.word	0x24009858
 8017c84:	2400985c 	.word	0x2400985c
 8017c88:	0801e62c 	.word	0x0801e62c
 8017c8c:	0801e904 	.word	0x0801e904
 8017c90:	0801e6b0 	.word	0x0801e6b0
 8017c94:	2400c9bc 	.word	0x2400c9bc
 8017c98:	2400c9c1 	.word	0x2400c9c1
 8017c9c:	2400c988 	.word	0x2400c988
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	68db      	ldr	r3, [r3, #12]
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d104      	bne.n	8017cb4 <tcp_process+0x5d8>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	68da      	ldr	r2, [r3, #12]
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	60da      	str	r2, [r3, #12]
 8017cb2:	e005      	b.n	8017cc0 <tcp_process+0x5e4>
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	68db      	ldr	r3, [r3, #12]
 8017cb8:	617b      	str	r3, [r7, #20]
 8017cba:	697b      	ldr	r3, [r7, #20]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d1ef      	bne.n	8017ca0 <tcp_process+0x5c4>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	60da      	str	r2, [r3, #12]
 8017cc6:	4b77      	ldr	r3, [pc, #476]	; (8017ea4 <tcp_process+0x7c8>)
 8017cc8:	2201      	movs	r2, #1
 8017cca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	220a      	movs	r2, #10
 8017cd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017cd2:	4b75      	ldr	r3, [pc, #468]	; (8017ea8 <tcp_process+0x7cc>)
 8017cd4:	681a      	ldr	r2, [r3, #0]
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	60da      	str	r2, [r3, #12]
 8017cda:	4a73      	ldr	r2, [pc, #460]	; (8017ea8 <tcp_process+0x7cc>)
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6013      	str	r3, [r2, #0]
 8017ce0:	f002 fe9c 	bl	801aa1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017ce4:	e0d2      	b.n	8017e8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	8b5b      	ldrh	r3, [r3, #26]
 8017cea:	f043 0302 	orr.w	r3, r3, #2
 8017cee:	b29a      	uxth	r2, r3
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2208      	movs	r2, #8
 8017cf8:	751a      	strb	r2, [r3, #20]
      break;
 8017cfa:	e0c7      	b.n	8017e8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017cfc:	4b6b      	ldr	r3, [pc, #428]	; (8017eac <tcp_process+0x7d0>)
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	f003 0310 	and.w	r3, r3, #16
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	f000 80c1 	beq.w	8017e8c <tcp_process+0x7b0>
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017d0e:	4b68      	ldr	r3, [pc, #416]	; (8017eb0 <tcp_process+0x7d4>)
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	f040 80ba 	bne.w	8017e8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	f040 80b5 	bne.w	8017e8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	2206      	movs	r2, #6
 8017d26:	751a      	strb	r2, [r3, #20]
      break;
 8017d28:	e0b0      	b.n	8017e8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f000 f9ca 	bl	80180c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017d30:	4b60      	ldr	r3, [pc, #384]	; (8017eb4 <tcp_process+0x7d8>)
 8017d32:	781b      	ldrb	r3, [r3, #0]
 8017d34:	f003 0320 	and.w	r3, r3, #32
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	f000 80a9 	beq.w	8017e90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	8b5b      	ldrh	r3, [r3, #26]
 8017d42:	f043 0302 	orr.w	r3, r3, #2
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f7fe fd39 	bl	80167c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017d52:	4b59      	ldr	r3, [pc, #356]	; (8017eb8 <tcp_process+0x7dc>)
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d105      	bne.n	8017d68 <tcp_process+0x68c>
 8017d5c:	4b56      	ldr	r3, [pc, #344]	; (8017eb8 <tcp_process+0x7dc>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	68db      	ldr	r3, [r3, #12]
 8017d62:	4a55      	ldr	r2, [pc, #340]	; (8017eb8 <tcp_process+0x7dc>)
 8017d64:	6013      	str	r3, [r2, #0]
 8017d66:	e013      	b.n	8017d90 <tcp_process+0x6b4>
 8017d68:	4b53      	ldr	r3, [pc, #332]	; (8017eb8 <tcp_process+0x7dc>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	613b      	str	r3, [r7, #16]
 8017d6e:	e00c      	b.n	8017d8a <tcp_process+0x6ae>
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	687a      	ldr	r2, [r7, #4]
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d104      	bne.n	8017d84 <tcp_process+0x6a8>
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	68da      	ldr	r2, [r3, #12]
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	60da      	str	r2, [r3, #12]
 8017d82:	e005      	b.n	8017d90 <tcp_process+0x6b4>
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	68db      	ldr	r3, [r3, #12]
 8017d88:	613b      	str	r3, [r7, #16]
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d1ef      	bne.n	8017d70 <tcp_process+0x694>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2200      	movs	r2, #0
 8017d94:	60da      	str	r2, [r3, #12]
 8017d96:	4b43      	ldr	r3, [pc, #268]	; (8017ea4 <tcp_process+0x7c8>)
 8017d98:	2201      	movs	r2, #1
 8017d9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	220a      	movs	r2, #10
 8017da0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017da2:	4b41      	ldr	r3, [pc, #260]	; (8017ea8 <tcp_process+0x7cc>)
 8017da4:	681a      	ldr	r2, [r3, #0]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	60da      	str	r2, [r3, #12]
 8017daa:	4a3f      	ldr	r2, [pc, #252]	; (8017ea8 <tcp_process+0x7cc>)
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	6013      	str	r3, [r2, #0]
 8017db0:	f002 fe34 	bl	801aa1c <tcp_timer_needed>
      }
      break;
 8017db4:	e06c      	b.n	8017e90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f000 f984 	bl	80180c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017dbc:	4b3b      	ldr	r3, [pc, #236]	; (8017eac <tcp_process+0x7d0>)
 8017dbe:	781b      	ldrb	r3, [r3, #0]
 8017dc0:	f003 0310 	and.w	r3, r3, #16
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d065      	beq.n	8017e94 <tcp_process+0x7b8>
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017dcc:	4b38      	ldr	r3, [pc, #224]	; (8017eb0 <tcp_process+0x7d4>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d15f      	bne.n	8017e94 <tcp_process+0x7b8>
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d15b      	bne.n	8017e94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f7fe fcf1 	bl	80167c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017de2:	4b35      	ldr	r3, [pc, #212]	; (8017eb8 <tcp_process+0x7dc>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d105      	bne.n	8017df8 <tcp_process+0x71c>
 8017dec:	4b32      	ldr	r3, [pc, #200]	; (8017eb8 <tcp_process+0x7dc>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	68db      	ldr	r3, [r3, #12]
 8017df2:	4a31      	ldr	r2, [pc, #196]	; (8017eb8 <tcp_process+0x7dc>)
 8017df4:	6013      	str	r3, [r2, #0]
 8017df6:	e013      	b.n	8017e20 <tcp_process+0x744>
 8017df8:	4b2f      	ldr	r3, [pc, #188]	; (8017eb8 <tcp_process+0x7dc>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	60fb      	str	r3, [r7, #12]
 8017dfe:	e00c      	b.n	8017e1a <tcp_process+0x73e>
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	68db      	ldr	r3, [r3, #12]
 8017e04:	687a      	ldr	r2, [r7, #4]
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d104      	bne.n	8017e14 <tcp_process+0x738>
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	68da      	ldr	r2, [r3, #12]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	60da      	str	r2, [r3, #12]
 8017e12:	e005      	b.n	8017e20 <tcp_process+0x744>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	68db      	ldr	r3, [r3, #12]
 8017e18:	60fb      	str	r3, [r7, #12]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d1ef      	bne.n	8017e00 <tcp_process+0x724>
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	2200      	movs	r2, #0
 8017e24:	60da      	str	r2, [r3, #12]
 8017e26:	4b1f      	ldr	r3, [pc, #124]	; (8017ea4 <tcp_process+0x7c8>)
 8017e28:	2201      	movs	r2, #1
 8017e2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	220a      	movs	r2, #10
 8017e30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017e32:	4b1d      	ldr	r3, [pc, #116]	; (8017ea8 <tcp_process+0x7cc>)
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	60da      	str	r2, [r3, #12]
 8017e3a:	4a1b      	ldr	r2, [pc, #108]	; (8017ea8 <tcp_process+0x7cc>)
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	6013      	str	r3, [r2, #0]
 8017e40:	f002 fdec 	bl	801aa1c <tcp_timer_needed>
      }
      break;
 8017e44:	e026      	b.n	8017e94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f000 f93c 	bl	80180c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017e4c:	4b17      	ldr	r3, [pc, #92]	; (8017eac <tcp_process+0x7d0>)
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	f003 0310 	and.w	r3, r3, #16
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d01f      	beq.n	8017e98 <tcp_process+0x7bc>
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017e5c:	4b14      	ldr	r3, [pc, #80]	; (8017eb0 <tcp_process+0x7d4>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d119      	bne.n	8017e98 <tcp_process+0x7bc>
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d115      	bne.n	8017e98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017e6c:	4b11      	ldr	r3, [pc, #68]	; (8017eb4 <tcp_process+0x7d8>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	f043 0310 	orr.w	r3, r3, #16
 8017e74:	b2da      	uxtb	r2, r3
 8017e76:	4b0f      	ldr	r3, [pc, #60]	; (8017eb4 <tcp_process+0x7d8>)
 8017e78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017e7a:	e00d      	b.n	8017e98 <tcp_process+0x7bc>
    default:
      break;
 8017e7c:	bf00      	nop
 8017e7e:	e00c      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e80:	bf00      	nop
 8017e82:	e00a      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e84:	bf00      	nop
 8017e86:	e008      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e88:	bf00      	nop
 8017e8a:	e006      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e8c:	bf00      	nop
 8017e8e:	e004      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e90:	bf00      	nop
 8017e92:	e002      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e94:	bf00      	nop
 8017e96:	e000      	b.n	8017e9a <tcp_process+0x7be>
      break;
 8017e98:	bf00      	nop
  }
  return ERR_OK;
 8017e9a:	2300      	movs	r3, #0
}
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	3724      	adds	r7, #36	; 0x24
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd90      	pop	{r4, r7, pc}
 8017ea4:	2400c990 	.word	0x2400c990
 8017ea8:	2400c98c 	.word	0x2400c98c
 8017eac:	2400c9c0 	.word	0x2400c9c0
 8017eb0:	2400c9b8 	.word	0x2400c9b8
 8017eb4:	2400c9c1 	.word	0x2400c9c1
 8017eb8:	2400c988 	.word	0x2400c988

08017ebc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017ebc:	b590      	push	{r4, r7, lr}
 8017ebe:	b085      	sub	sp, #20
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d106      	bne.n	8017eda <tcp_oos_insert_segment+0x1e>
 8017ecc:	4b3b      	ldr	r3, [pc, #236]	; (8017fbc <tcp_oos_insert_segment+0x100>)
 8017ece:	f240 421f 	movw	r2, #1055	; 0x41f
 8017ed2:	493b      	ldr	r1, [pc, #236]	; (8017fc0 <tcp_oos_insert_segment+0x104>)
 8017ed4:	483b      	ldr	r0, [pc, #236]	; (8017fc4 <tcp_oos_insert_segment+0x108>)
 8017ed6:	f003 fcd7 	bl	801b888 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	68db      	ldr	r3, [r3, #12]
 8017ede:	899b      	ldrh	r3, [r3, #12]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7f7 f8a8 	bl	800f038 <lwip_htons>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	f003 0301 	and.w	r3, r3, #1
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d028      	beq.n	8017f46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017ef4:	6838      	ldr	r0, [r7, #0]
 8017ef6:	f7fe fa63 	bl	80163c0 <tcp_segs_free>
    next = NULL;
 8017efa:	2300      	movs	r3, #0
 8017efc:	603b      	str	r3, [r7, #0]
 8017efe:	e056      	b.n	8017fae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	68db      	ldr	r3, [r3, #12]
 8017f04:	899b      	ldrh	r3, [r3, #12]
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f7 f895 	bl	800f038 <lwip_htons>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	f003 0301 	and.w	r3, r3, #1
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d00d      	beq.n	8017f36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	899b      	ldrh	r3, [r3, #12]
 8017f20:	b29c      	uxth	r4, r3
 8017f22:	2001      	movs	r0, #1
 8017f24:	f7f7 f888 	bl	800f038 <lwip_htons>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	68db      	ldr	r3, [r3, #12]
 8017f30:	4322      	orrs	r2, r4
 8017f32:	b292      	uxth	r2, r2
 8017f34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017f40:	68f8      	ldr	r0, [r7, #12]
 8017f42:	f7fe fa52 	bl	80163ea <tcp_seg_free>
    while (next &&
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d00e      	beq.n	8017f6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	891b      	ldrh	r3, [r3, #8]
 8017f50:	461a      	mov	r2, r3
 8017f52:	4b1d      	ldr	r3, [pc, #116]	; (8017fc8 <tcp_oos_insert_segment+0x10c>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	441a      	add	r2, r3
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	68db      	ldr	r3, [r3, #12]
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	6839      	ldr	r1, [r7, #0]
 8017f60:	8909      	ldrh	r1, [r1, #8]
 8017f62:	440b      	add	r3, r1
 8017f64:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	daca      	bge.n	8017f00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017f6a:	683b      	ldr	r3, [r7, #0]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d01e      	beq.n	8017fae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	891b      	ldrh	r3, [r3, #8]
 8017f74:	461a      	mov	r2, r3
 8017f76:	4b14      	ldr	r3, [pc, #80]	; (8017fc8 <tcp_oos_insert_segment+0x10c>)
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	441a      	add	r2, r3
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	dd12      	ble.n	8017fae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	68db      	ldr	r3, [r3, #12]
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	4b0d      	ldr	r3, [pc, #52]	; (8017fc8 <tcp_oos_insert_segment+0x10c>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	1ad3      	subs	r3, r2, r3
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	685a      	ldr	r2, [r3, #4]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	891b      	ldrh	r3, [r3, #8]
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	4610      	mov	r0, r2
 8017faa:	f7fc fd17 	bl	80149dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	683a      	ldr	r2, [r7, #0]
 8017fb2:	601a      	str	r2, [r3, #0]
}
 8017fb4:	bf00      	nop
 8017fb6:	3714      	adds	r7, #20
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd90      	pop	{r4, r7, pc}
 8017fbc:	0801e62c 	.word	0x0801e62c
 8017fc0:	0801e924 	.word	0x0801e924
 8017fc4:	0801e6b0 	.word	0x0801e6b0
 8017fc8:	2400c9b4 	.word	0x2400c9b4

08017fcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017fcc:	b5b0      	push	{r4, r5, r7, lr}
 8017fce:	b086      	sub	sp, #24
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
 8017fd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017fda:	e03e      	b.n	801805a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7fc ff0a 	bl	8014e04 <pbuf_clen>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ffa:	8a7a      	ldrh	r2, [r7, #18]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d906      	bls.n	801800e <tcp_free_acked_segments+0x42>
 8018000:	4b2a      	ldr	r3, [pc, #168]	; (80180ac <tcp_free_acked_segments+0xe0>)
 8018002:	f240 4257 	movw	r2, #1111	; 0x457
 8018006:	492a      	ldr	r1, [pc, #168]	; (80180b0 <tcp_free_acked_segments+0xe4>)
 8018008:	482a      	ldr	r0, [pc, #168]	; (80180b4 <tcp_free_acked_segments+0xe8>)
 801800a:	f003 fc3d 	bl	801b888 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018014:	8a7b      	ldrh	r3, [r7, #18]
 8018016:	1ad3      	subs	r3, r2, r3
 8018018:	b29a      	uxth	r2, r3
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018020:	697b      	ldr	r3, [r7, #20]
 8018022:	891a      	ldrh	r2, [r3, #8]
 8018024:	4b24      	ldr	r3, [pc, #144]	; (80180b8 <tcp_free_acked_segments+0xec>)
 8018026:	881b      	ldrh	r3, [r3, #0]
 8018028:	4413      	add	r3, r2
 801802a:	b29a      	uxth	r2, r3
 801802c:	4b22      	ldr	r3, [pc, #136]	; (80180b8 <tcp_free_acked_segments+0xec>)
 801802e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018030:	6978      	ldr	r0, [r7, #20]
 8018032:	f7fe f9da 	bl	80163ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801803c:	2b00      	cmp	r3, #0
 801803e:	d00c      	beq.n	801805a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d109      	bne.n	801805a <tcp_free_acked_segments+0x8e>
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d106      	bne.n	801805a <tcp_free_acked_segments+0x8e>
 801804c:	4b17      	ldr	r3, [pc, #92]	; (80180ac <tcp_free_acked_segments+0xe0>)
 801804e:	f240 4261 	movw	r2, #1121	; 0x461
 8018052:	491a      	ldr	r1, [pc, #104]	; (80180bc <tcp_free_acked_segments+0xf0>)
 8018054:	4817      	ldr	r0, [pc, #92]	; (80180b4 <tcp_free_acked_segments+0xe8>)
 8018056:	f003 fc17 	bl	801b888 <iprintf>
  while (seg_list != NULL &&
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d020      	beq.n	80180a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018060:	68bb      	ldr	r3, [r7, #8]
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	685b      	ldr	r3, [r3, #4]
 8018066:	4618      	mov	r0, r3
 8018068:	f7f6 fffb 	bl	800f062 <lwip_htonl>
 801806c:	4604      	mov	r4, r0
 801806e:	68bb      	ldr	r3, [r7, #8]
 8018070:	891b      	ldrh	r3, [r3, #8]
 8018072:	461d      	mov	r5, r3
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	899b      	ldrh	r3, [r3, #12]
 801807a:	b29b      	uxth	r3, r3
 801807c:	4618      	mov	r0, r3
 801807e:	f7f6 ffdb 	bl	800f038 <lwip_htons>
 8018082:	4603      	mov	r3, r0
 8018084:	b2db      	uxtb	r3, r3
 8018086:	f003 0303 	and.w	r3, r3, #3
 801808a:	2b00      	cmp	r3, #0
 801808c:	d001      	beq.n	8018092 <tcp_free_acked_segments+0xc6>
 801808e:	2301      	movs	r3, #1
 8018090:	e000      	b.n	8018094 <tcp_free_acked_segments+0xc8>
 8018092:	2300      	movs	r3, #0
 8018094:	442b      	add	r3, r5
 8018096:	18e2      	adds	r2, r4, r3
 8018098:	4b09      	ldr	r3, [pc, #36]	; (80180c0 <tcp_free_acked_segments+0xf4>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801809e:	2b00      	cmp	r3, #0
 80180a0:	dd9c      	ble.n	8017fdc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80180a2:	68bb      	ldr	r3, [r7, #8]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3718      	adds	r7, #24
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bdb0      	pop	{r4, r5, r7, pc}
 80180ac:	0801e62c 	.word	0x0801e62c
 80180b0:	0801e94c 	.word	0x0801e94c
 80180b4:	0801e6b0 	.word	0x0801e6b0
 80180b8:	2400c9bc 	.word	0x2400c9bc
 80180bc:	0801e974 	.word	0x0801e974
 80180c0:	2400c9b8 	.word	0x2400c9b8

080180c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80180c4:	b5b0      	push	{r4, r5, r7, lr}
 80180c6:	b094      	sub	sp, #80	; 0x50
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80180cc:	2300      	movs	r3, #0
 80180ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d106      	bne.n	80180e4 <tcp_receive+0x20>
 80180d6:	4b91      	ldr	r3, [pc, #580]	; (801831c <tcp_receive+0x258>)
 80180d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80180dc:	4990      	ldr	r1, [pc, #576]	; (8018320 <tcp_receive+0x25c>)
 80180de:	4891      	ldr	r0, [pc, #580]	; (8018324 <tcp_receive+0x260>)
 80180e0:	f003 fbd2 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	7d1b      	ldrb	r3, [r3, #20]
 80180e8:	2b03      	cmp	r3, #3
 80180ea:	d806      	bhi.n	80180fa <tcp_receive+0x36>
 80180ec:	4b8b      	ldr	r3, [pc, #556]	; (801831c <tcp_receive+0x258>)
 80180ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80180f2:	498d      	ldr	r1, [pc, #564]	; (8018328 <tcp_receive+0x264>)
 80180f4:	488b      	ldr	r0, [pc, #556]	; (8018324 <tcp_receive+0x260>)
 80180f6:	f003 fbc7 	bl	801b888 <iprintf>

  if (flags & TCP_ACK) {
 80180fa:	4b8c      	ldr	r3, [pc, #560]	; (801832c <tcp_receive+0x268>)
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	f003 0310 	and.w	r3, r3, #16
 8018102:	2b00      	cmp	r3, #0
 8018104:	f000 8264 	beq.w	80185d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801810e:	461a      	mov	r2, r3
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018114:	4413      	add	r3, r2
 8018116:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801811c:	4b84      	ldr	r3, [pc, #528]	; (8018330 <tcp_receive+0x26c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	1ad3      	subs	r3, r2, r3
 8018122:	2b00      	cmp	r3, #0
 8018124:	db1b      	blt.n	801815e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801812a:	4b81      	ldr	r3, [pc, #516]	; (8018330 <tcp_receive+0x26c>)
 801812c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801812e:	429a      	cmp	r2, r3
 8018130:	d106      	bne.n	8018140 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018136:	4b7f      	ldr	r3, [pc, #508]	; (8018334 <tcp_receive+0x270>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	1ad3      	subs	r3, r2, r3
 801813c:	2b00      	cmp	r3, #0
 801813e:	db0e      	blt.n	801815e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018144:	4b7b      	ldr	r3, [pc, #492]	; (8018334 <tcp_receive+0x270>)
 8018146:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018148:	429a      	cmp	r2, r3
 801814a:	d125      	bne.n	8018198 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801814c:	4b7a      	ldr	r3, [pc, #488]	; (8018338 <tcp_receive+0x274>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	89db      	ldrh	r3, [r3, #14]
 8018152:	b29a      	uxth	r2, r3
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801815a:	429a      	cmp	r2, r3
 801815c:	d91c      	bls.n	8018198 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801815e:	4b76      	ldr	r3, [pc, #472]	; (8018338 <tcp_receive+0x274>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	89db      	ldrh	r3, [r3, #14]
 8018164:	b29a      	uxth	r2, r3
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018178:	429a      	cmp	r2, r3
 801817a:	d205      	bcs.n	8018188 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018188:	4b69      	ldr	r3, [pc, #420]	; (8018330 <tcp_receive+0x26c>)
 801818a:	681a      	ldr	r2, [r3, #0]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018190:	4b68      	ldr	r3, [pc, #416]	; (8018334 <tcp_receive+0x270>)
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018198:	4b66      	ldr	r3, [pc, #408]	; (8018334 <tcp_receive+0x270>)
 801819a:	681a      	ldr	r2, [r3, #0]
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181a0:	1ad3      	subs	r3, r2, r3
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	dc58      	bgt.n	8018258 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80181a6:	4b65      	ldr	r3, [pc, #404]	; (801833c <tcp_receive+0x278>)
 80181a8:	881b      	ldrh	r3, [r3, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d14b      	bne.n	8018246 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80181b8:	4413      	add	r3, r2
 80181ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181bc:	429a      	cmp	r2, r3
 80181be:	d142      	bne.n	8018246 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	db3d      	blt.n	8018246 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80181ce:	4b59      	ldr	r3, [pc, #356]	; (8018334 <tcp_receive+0x270>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	429a      	cmp	r2, r3
 80181d4:	d137      	bne.n	8018246 <tcp_receive+0x182>
              found_dupack = 1;
 80181d6:	2301      	movs	r3, #1
 80181d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80181e0:	2bff      	cmp	r3, #255	; 0xff
 80181e2:	d007      	beq.n	80181f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80181ea:	3301      	adds	r3, #1
 80181ec:	b2da      	uxtb	r2, r3
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80181fa:	2b03      	cmp	r3, #3
 80181fc:	d91b      	bls.n	8018236 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018208:	4413      	add	r3, r2
 801820a:	b29a      	uxth	r2, r3
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018212:	429a      	cmp	r2, r3
 8018214:	d30a      	bcc.n	801822c <tcp_receive+0x168>
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018220:	4413      	add	r3, r2
 8018222:	b29a      	uxth	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801822a:	e004      	b.n	8018236 <tcp_receive+0x172>
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018232:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801823c:	2b02      	cmp	r3, #2
 801823e:	d902      	bls.n	8018246 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f001 feed 	bl	801a020 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018248:	2b00      	cmp	r3, #0
 801824a:	f040 8161 	bne.w	8018510 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2200      	movs	r2, #0
 8018252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018256:	e15b      	b.n	8018510 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018258:	4b36      	ldr	r3, [pc, #216]	; (8018334 <tcp_receive+0x270>)
 801825a:	681a      	ldr	r2, [r3, #0]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018260:	1ad3      	subs	r3, r2, r3
 8018262:	3b01      	subs	r3, #1
 8018264:	2b00      	cmp	r3, #0
 8018266:	f2c0 814e 	blt.w	8018506 <tcp_receive+0x442>
 801826a:	4b32      	ldr	r3, [pc, #200]	; (8018334 <tcp_receive+0x270>)
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	2b00      	cmp	r3, #0
 8018276:	f300 8146 	bgt.w	8018506 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	8b5b      	ldrh	r3, [r3, #26]
 801827e:	f003 0304 	and.w	r3, r3, #4
 8018282:	2b00      	cmp	r3, #0
 8018284:	d010      	beq.n	80182a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	8b5b      	ldrh	r3, [r3, #26]
 801828a:	f023 0304 	bic.w	r3, r3, #4
 801828e:	b29a      	uxth	r2, r3
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2200      	movs	r2, #0
 80182a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2200      	movs	r2, #0
 80182ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80182b6:	10db      	asrs	r3, r3, #3
 80182b8:	b21b      	sxth	r3, r3
 80182ba:	b29a      	uxth	r2, r3
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	4413      	add	r3, r2
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	b21a      	sxth	r2, r3
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80182d0:	4b18      	ldr	r3, [pc, #96]	; (8018334 <tcp_receive+0x270>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	b29a      	uxth	r2, r3
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182da:	b29b      	uxth	r3, r3
 80182dc:	1ad3      	subs	r3, r2, r3
 80182de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2200      	movs	r2, #0
 80182e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80182e8:	4b12      	ldr	r3, [pc, #72]	; (8018334 <tcp_receive+0x270>)
 80182ea:	681a      	ldr	r2, [r3, #0]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	7d1b      	ldrb	r3, [r3, #20]
 80182f4:	2b03      	cmp	r3, #3
 80182f6:	f240 8097 	bls.w	8018428 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018306:	429a      	cmp	r2, r3
 8018308:	d245      	bcs.n	8018396 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	8b5b      	ldrh	r3, [r3, #26]
 801830e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018312:	2b00      	cmp	r3, #0
 8018314:	d014      	beq.n	8018340 <tcp_receive+0x27c>
 8018316:	2301      	movs	r3, #1
 8018318:	e013      	b.n	8018342 <tcp_receive+0x27e>
 801831a:	bf00      	nop
 801831c:	0801e62c 	.word	0x0801e62c
 8018320:	0801e994 	.word	0x0801e994
 8018324:	0801e6b0 	.word	0x0801e6b0
 8018328:	0801e9b0 	.word	0x0801e9b0
 801832c:	2400c9c0 	.word	0x2400c9c0
 8018330:	2400c9b4 	.word	0x2400c9b4
 8018334:	2400c9b8 	.word	0x2400c9b8
 8018338:	2400c9a4 	.word	0x2400c9a4
 801833c:	2400c9be 	.word	0x2400c9be
 8018340:	2302      	movs	r3, #2
 8018342:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018346:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801834a:	b29a      	uxth	r2, r3
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018350:	fb12 f303 	smulbb	r3, r2, r3
 8018354:	b29b      	uxth	r3, r3
 8018356:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018358:	4293      	cmp	r3, r2
 801835a:	bf28      	it	cs
 801835c:	4613      	movcs	r3, r2
 801835e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018368:	4413      	add	r3, r2
 801836a:	b29a      	uxth	r2, r3
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018372:	429a      	cmp	r2, r3
 8018374:	d309      	bcc.n	801838a <tcp_receive+0x2c6>
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801837c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801837e:	4413      	add	r3, r2
 8018380:	b29a      	uxth	r2, r3
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018388:	e04e      	b.n	8018428 <tcp_receive+0x364>
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018394:	e048      	b.n	8018428 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801839c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801839e:	4413      	add	r3, r2
 80183a0:	b29a      	uxth	r2, r3
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d309      	bcc.n	80183c0 <tcp_receive+0x2fc>
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80183b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80183b4:	4413      	add	r3, r2
 80183b6:	b29a      	uxth	r2, r3
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80183be:	e004      	b.n	80183ca <tcp_receive+0x306>
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d326      	bcc.n	8018428 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183fa:	4413      	add	r3, r2
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018404:	429a      	cmp	r2, r3
 8018406:	d30a      	bcc.n	801841e <tcp_receive+0x35a>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018412:	4413      	add	r3, r2
 8018414:	b29a      	uxth	r2, r3
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801841c:	e004      	b.n	8018428 <tcp_receive+0x364>
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018430:	4a98      	ldr	r2, [pc, #608]	; (8018694 <tcp_receive+0x5d0>)
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f7ff fdca 	bl	8017fcc <tcp_free_acked_segments>
 8018438:	4602      	mov	r2, r0
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018446:	4a94      	ldr	r2, [pc, #592]	; (8018698 <tcp_receive+0x5d4>)
 8018448:	6878      	ldr	r0, [r7, #4]
 801844a:	f7ff fdbf 	bl	8017fcc <tcp_free_acked_segments>
 801844e:	4602      	mov	r2, r0
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018458:	2b00      	cmp	r3, #0
 801845a:	d104      	bne.n	8018466 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018462:	861a      	strh	r2, [r3, #48]	; 0x30
 8018464:	e002      	b.n	801846c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	2200      	movs	r2, #0
 801846a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	2200      	movs	r2, #0
 8018470:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018476:	2b00      	cmp	r3, #0
 8018478:	d103      	bne.n	8018482 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2200      	movs	r2, #0
 801847e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018488:	4b84      	ldr	r3, [pc, #528]	; (801869c <tcp_receive+0x5d8>)
 801848a:	881b      	ldrh	r3, [r3, #0]
 801848c:	4413      	add	r3, r2
 801848e:	b29a      	uxth	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	8b5b      	ldrh	r3, [r3, #26]
 801849a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d035      	beq.n	801850e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d118      	bne.n	80184dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d00c      	beq.n	80184cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	4618      	mov	r0, r3
 80184c0:	f7f6 fdcf 	bl	800f062 <lwip_htonl>
 80184c4:	4603      	mov	r3, r0
 80184c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	dc20      	bgt.n	801850e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	8b5b      	ldrh	r3, [r3, #26]
 80184d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80184d4:	b29a      	uxth	r2, r3
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80184da:	e018      	b.n	801850e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184e4:	68db      	ldr	r3, [r3, #12]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f6 fdba 	bl	800f062 <lwip_htonl>
 80184ee:	4603      	mov	r3, r0
 80184f0:	1ae3      	subs	r3, r4, r3
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	dc0b      	bgt.n	801850e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	8b5b      	ldrh	r3, [r3, #26]
 80184fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80184fe:	b29a      	uxth	r2, r3
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018504:	e003      	b.n	801850e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f001 ff76 	bl	801a3f8 <tcp_send_empty_ack>
 801850c:	e000      	b.n	8018510 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801850e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018514:	2b00      	cmp	r3, #0
 8018516:	d05b      	beq.n	80185d0 <tcp_receive+0x50c>
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801851c:	4b60      	ldr	r3, [pc, #384]	; (80186a0 <tcp_receive+0x5dc>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	2b00      	cmp	r3, #0
 8018524:	da54      	bge.n	80185d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018526:	4b5f      	ldr	r3, [pc, #380]	; (80186a4 <tcp_receive+0x5e0>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	b29a      	uxth	r2, r3
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018530:	b29b      	uxth	r3, r3
 8018532:	1ad3      	subs	r3, r2, r3
 8018534:	b29b      	uxth	r3, r3
 8018536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801853a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018544:	10db      	asrs	r3, r3, #3
 8018546:	b21b      	sxth	r3, r3
 8018548:	b29b      	uxth	r3, r3
 801854a:	1ad3      	subs	r3, r2, r3
 801854c:	b29b      	uxth	r3, r3
 801854e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018558:	b29a      	uxth	r2, r3
 801855a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801855e:	4413      	add	r3, r2
 8018560:	b29b      	uxth	r3, r3
 8018562:	b21a      	sxth	r2, r3
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018568:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801856c:	2b00      	cmp	r3, #0
 801856e:	da05      	bge.n	801857c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018570:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018574:	425b      	negs	r3, r3
 8018576:	b29b      	uxth	r3, r3
 8018578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801857c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018586:	109b      	asrs	r3, r3, #2
 8018588:	b21b      	sxth	r3, r3
 801858a:	b29b      	uxth	r3, r3
 801858c:	1ad3      	subs	r3, r2, r3
 801858e:	b29b      	uxth	r3, r3
 8018590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801859a:	b29a      	uxth	r2, r3
 801859c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80185a0:	4413      	add	r3, r2
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	b21a      	sxth	r2, r3
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80185b0:	10db      	asrs	r3, r3, #3
 80185b2:	b21b      	sxth	r3, r3
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80185bc:	b29b      	uxth	r3, r3
 80185be:	4413      	add	r3, r2
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	b21a      	sxth	r2, r3
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2200      	movs	r2, #0
 80185ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80185d0:	4b35      	ldr	r3, [pc, #212]	; (80186a8 <tcp_receive+0x5e4>)
 80185d2:	881b      	ldrh	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f000 84e2 	beq.w	8018f9e <tcp_receive+0xeda>
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	7d1b      	ldrb	r3, [r3, #20]
 80185de:	2b06      	cmp	r3, #6
 80185e0:	f200 84dd 	bhi.w	8018f9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185e8:	4b30      	ldr	r3, [pc, #192]	; (80186ac <tcp_receive+0x5e8>)
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	1ad3      	subs	r3, r2, r3
 80185ee:	3b01      	subs	r3, #1
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f2c0 808f 	blt.w	8018714 <tcp_receive+0x650>
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185fa:	4b2b      	ldr	r3, [pc, #172]	; (80186a8 <tcp_receive+0x5e4>)
 80185fc:	881b      	ldrh	r3, [r3, #0]
 80185fe:	4619      	mov	r1, r3
 8018600:	4b2a      	ldr	r3, [pc, #168]	; (80186ac <tcp_receive+0x5e8>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	440b      	add	r3, r1
 8018606:	1ad3      	subs	r3, r2, r3
 8018608:	3301      	adds	r3, #1
 801860a:	2b00      	cmp	r3, #0
 801860c:	f300 8082 	bgt.w	8018714 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018610:	4b27      	ldr	r3, [pc, #156]	; (80186b0 <tcp_receive+0x5ec>)
 8018612:	685b      	ldr	r3, [r3, #4]
 8018614:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801861a:	4b24      	ldr	r3, [pc, #144]	; (80186ac <tcp_receive+0x5e8>)
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	1ad3      	subs	r3, r2, r3
 8018620:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018622:	4b23      	ldr	r3, [pc, #140]	; (80186b0 <tcp_receive+0x5ec>)
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <tcp_receive+0x574>
 801862a:	4b22      	ldr	r3, [pc, #136]	; (80186b4 <tcp_receive+0x5f0>)
 801862c:	f240 5294 	movw	r2, #1428	; 0x594
 8018630:	4921      	ldr	r1, [pc, #132]	; (80186b8 <tcp_receive+0x5f4>)
 8018632:	4822      	ldr	r0, [pc, #136]	; (80186bc <tcp_receive+0x5f8>)
 8018634:	f003 f928 	bl	801b888 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801863e:	4293      	cmp	r3, r2
 8018640:	d906      	bls.n	8018650 <tcp_receive+0x58c>
 8018642:	4b1c      	ldr	r3, [pc, #112]	; (80186b4 <tcp_receive+0x5f0>)
 8018644:	f240 5295 	movw	r2, #1429	; 0x595
 8018648:	491d      	ldr	r1, [pc, #116]	; (80186c0 <tcp_receive+0x5fc>)
 801864a:	481c      	ldr	r0, [pc, #112]	; (80186bc <tcp_receive+0x5f8>)
 801864c:	f003 f91c 	bl	801b888 <iprintf>
      off = (u16_t)off32;
 8018650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018656:	4b16      	ldr	r3, [pc, #88]	; (80186b0 <tcp_receive+0x5ec>)
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	891b      	ldrh	r3, [r3, #8]
 801865c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018660:	429a      	cmp	r2, r3
 8018662:	d906      	bls.n	8018672 <tcp_receive+0x5ae>
 8018664:	4b13      	ldr	r3, [pc, #76]	; (80186b4 <tcp_receive+0x5f0>)
 8018666:	f240 5297 	movw	r2, #1431	; 0x597
 801866a:	4916      	ldr	r1, [pc, #88]	; (80186c4 <tcp_receive+0x600>)
 801866c:	4813      	ldr	r0, [pc, #76]	; (80186bc <tcp_receive+0x5f8>)
 801866e:	f003 f90b 	bl	801b888 <iprintf>
      inseg.len -= off;
 8018672:	4b0f      	ldr	r3, [pc, #60]	; (80186b0 <tcp_receive+0x5ec>)
 8018674:	891a      	ldrh	r2, [r3, #8]
 8018676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801867a:	1ad3      	subs	r3, r2, r3
 801867c:	b29a      	uxth	r2, r3
 801867e:	4b0c      	ldr	r3, [pc, #48]	; (80186b0 <tcp_receive+0x5ec>)
 8018680:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018682:	4b0b      	ldr	r3, [pc, #44]	; (80186b0 <tcp_receive+0x5ec>)
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	891a      	ldrh	r2, [r3, #8]
 8018688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801868c:	1ad3      	subs	r3, r2, r3
 801868e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018690:	e02a      	b.n	80186e8 <tcp_receive+0x624>
 8018692:	bf00      	nop
 8018694:	0801e9cc 	.word	0x0801e9cc
 8018698:	0801e9d4 	.word	0x0801e9d4
 801869c:	2400c9bc 	.word	0x2400c9bc
 80186a0:	2400c9b8 	.word	0x2400c9b8
 80186a4:	2400c97c 	.word	0x2400c97c
 80186a8:	2400c9be 	.word	0x2400c9be
 80186ac:	2400c9b4 	.word	0x2400c9b4
 80186b0:	2400c994 	.word	0x2400c994
 80186b4:	0801e62c 	.word	0x0801e62c
 80186b8:	0801e9dc 	.word	0x0801e9dc
 80186bc:	0801e6b0 	.word	0x0801e6b0
 80186c0:	0801e9ec 	.word	0x0801e9ec
 80186c4:	0801e9fc 	.word	0x0801e9fc
        off -= p->len;
 80186c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186ca:	895b      	ldrh	r3, [r3, #10]
 80186cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186d0:	1ad3      	subs	r3, r2, r3
 80186d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80186d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80186da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80186dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186de:	2200      	movs	r2, #0
 80186e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80186e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80186e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186ea:	895b      	ldrh	r3, [r3, #10]
 80186ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d8e9      	bhi.n	80186c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80186f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186f8:	4619      	mov	r1, r3
 80186fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80186fc:	f7fc fa6e 	bl	8014bdc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018704:	4a91      	ldr	r2, [pc, #580]	; (801894c <tcp_receive+0x888>)
 8018706:	6013      	str	r3, [r2, #0]
 8018708:	4b91      	ldr	r3, [pc, #580]	; (8018950 <tcp_receive+0x88c>)
 801870a:	68db      	ldr	r3, [r3, #12]
 801870c:	4a8f      	ldr	r2, [pc, #572]	; (801894c <tcp_receive+0x888>)
 801870e:	6812      	ldr	r2, [r2, #0]
 8018710:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018712:	e00d      	b.n	8018730 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018714:	4b8d      	ldr	r3, [pc, #564]	; (801894c <tcp_receive+0x888>)
 8018716:	681a      	ldr	r2, [r3, #0]
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	2b00      	cmp	r3, #0
 8018720:	da06      	bge.n	8018730 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	8b5b      	ldrh	r3, [r3, #26]
 8018726:	f043 0302 	orr.w	r3, r3, #2
 801872a:	b29a      	uxth	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018730:	4b86      	ldr	r3, [pc, #536]	; (801894c <tcp_receive+0x888>)
 8018732:	681a      	ldr	r2, [r3, #0]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018738:	1ad3      	subs	r3, r2, r3
 801873a:	2b00      	cmp	r3, #0
 801873c:	f2c0 842a 	blt.w	8018f94 <tcp_receive+0xed0>
 8018740:	4b82      	ldr	r3, [pc, #520]	; (801894c <tcp_receive+0x888>)
 8018742:	681a      	ldr	r2, [r3, #0]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018748:	6879      	ldr	r1, [r7, #4]
 801874a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801874c:	440b      	add	r3, r1
 801874e:	1ad3      	subs	r3, r2, r3
 8018750:	3301      	adds	r3, #1
 8018752:	2b00      	cmp	r3, #0
 8018754:	f300 841e 	bgt.w	8018f94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801875c:	4b7b      	ldr	r3, [pc, #492]	; (801894c <tcp_receive+0x888>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	429a      	cmp	r2, r3
 8018762:	f040 829a 	bne.w	8018c9a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018766:	4b7a      	ldr	r3, [pc, #488]	; (8018950 <tcp_receive+0x88c>)
 8018768:	891c      	ldrh	r4, [r3, #8]
 801876a:	4b79      	ldr	r3, [pc, #484]	; (8018950 <tcp_receive+0x88c>)
 801876c:	68db      	ldr	r3, [r3, #12]
 801876e:	899b      	ldrh	r3, [r3, #12]
 8018770:	b29b      	uxth	r3, r3
 8018772:	4618      	mov	r0, r3
 8018774:	f7f6 fc60 	bl	800f038 <lwip_htons>
 8018778:	4603      	mov	r3, r0
 801877a:	b2db      	uxtb	r3, r3
 801877c:	f003 0303 	and.w	r3, r3, #3
 8018780:	2b00      	cmp	r3, #0
 8018782:	d001      	beq.n	8018788 <tcp_receive+0x6c4>
 8018784:	2301      	movs	r3, #1
 8018786:	e000      	b.n	801878a <tcp_receive+0x6c6>
 8018788:	2300      	movs	r3, #0
 801878a:	4423      	add	r3, r4
 801878c:	b29a      	uxth	r2, r3
 801878e:	4b71      	ldr	r3, [pc, #452]	; (8018954 <tcp_receive+0x890>)
 8018790:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018796:	4b6f      	ldr	r3, [pc, #444]	; (8018954 <tcp_receive+0x890>)
 8018798:	881b      	ldrh	r3, [r3, #0]
 801879a:	429a      	cmp	r2, r3
 801879c:	d275      	bcs.n	801888a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801879e:	4b6c      	ldr	r3, [pc, #432]	; (8018950 <tcp_receive+0x88c>)
 80187a0:	68db      	ldr	r3, [r3, #12]
 80187a2:	899b      	ldrh	r3, [r3, #12]
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7f6 fc46 	bl	800f038 <lwip_htons>
 80187ac:	4603      	mov	r3, r0
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	f003 0301 	and.w	r3, r3, #1
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d01f      	beq.n	80187f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80187b8:	4b65      	ldr	r3, [pc, #404]	; (8018950 <tcp_receive+0x88c>)
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	899b      	ldrh	r3, [r3, #12]
 80187be:	b29b      	uxth	r3, r3
 80187c0:	b21b      	sxth	r3, r3
 80187c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80187c6:	b21c      	sxth	r4, r3
 80187c8:	4b61      	ldr	r3, [pc, #388]	; (8018950 <tcp_receive+0x88c>)
 80187ca:	68db      	ldr	r3, [r3, #12]
 80187cc:	899b      	ldrh	r3, [r3, #12]
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7f6 fc31 	bl	800f038 <lwip_htons>
 80187d6:	4603      	mov	r3, r0
 80187d8:	b2db      	uxtb	r3, r3
 80187da:	b29b      	uxth	r3, r3
 80187dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80187e0:	b29b      	uxth	r3, r3
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f6 fc28 	bl	800f038 <lwip_htons>
 80187e8:	4603      	mov	r3, r0
 80187ea:	b21b      	sxth	r3, r3
 80187ec:	4323      	orrs	r3, r4
 80187ee:	b21a      	sxth	r2, r3
 80187f0:	4b57      	ldr	r3, [pc, #348]	; (8018950 <tcp_receive+0x88c>)
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	b292      	uxth	r2, r2
 80187f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80187fc:	4b54      	ldr	r3, [pc, #336]	; (8018950 <tcp_receive+0x88c>)
 80187fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018800:	4b53      	ldr	r3, [pc, #332]	; (8018950 <tcp_receive+0x88c>)
 8018802:	68db      	ldr	r3, [r3, #12]
 8018804:	899b      	ldrh	r3, [r3, #12]
 8018806:	b29b      	uxth	r3, r3
 8018808:	4618      	mov	r0, r3
 801880a:	f7f6 fc15 	bl	800f038 <lwip_htons>
 801880e:	4603      	mov	r3, r0
 8018810:	b2db      	uxtb	r3, r3
 8018812:	f003 0302 	and.w	r3, r3, #2
 8018816:	2b00      	cmp	r3, #0
 8018818:	d005      	beq.n	8018826 <tcp_receive+0x762>
            inseg.len -= 1;
 801881a:	4b4d      	ldr	r3, [pc, #308]	; (8018950 <tcp_receive+0x88c>)
 801881c:	891b      	ldrh	r3, [r3, #8]
 801881e:	3b01      	subs	r3, #1
 8018820:	b29a      	uxth	r2, r3
 8018822:	4b4b      	ldr	r3, [pc, #300]	; (8018950 <tcp_receive+0x88c>)
 8018824:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018826:	4b4a      	ldr	r3, [pc, #296]	; (8018950 <tcp_receive+0x88c>)
 8018828:	685b      	ldr	r3, [r3, #4]
 801882a:	4a49      	ldr	r2, [pc, #292]	; (8018950 <tcp_receive+0x88c>)
 801882c:	8912      	ldrh	r2, [r2, #8]
 801882e:	4611      	mov	r1, r2
 8018830:	4618      	mov	r0, r3
 8018832:	f7fc f8d3 	bl	80149dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018836:	4b46      	ldr	r3, [pc, #280]	; (8018950 <tcp_receive+0x88c>)
 8018838:	891c      	ldrh	r4, [r3, #8]
 801883a:	4b45      	ldr	r3, [pc, #276]	; (8018950 <tcp_receive+0x88c>)
 801883c:	68db      	ldr	r3, [r3, #12]
 801883e:	899b      	ldrh	r3, [r3, #12]
 8018840:	b29b      	uxth	r3, r3
 8018842:	4618      	mov	r0, r3
 8018844:	f7f6 fbf8 	bl	800f038 <lwip_htons>
 8018848:	4603      	mov	r3, r0
 801884a:	b2db      	uxtb	r3, r3
 801884c:	f003 0303 	and.w	r3, r3, #3
 8018850:	2b00      	cmp	r3, #0
 8018852:	d001      	beq.n	8018858 <tcp_receive+0x794>
 8018854:	2301      	movs	r3, #1
 8018856:	e000      	b.n	801885a <tcp_receive+0x796>
 8018858:	2300      	movs	r3, #0
 801885a:	4423      	add	r3, r4
 801885c:	b29a      	uxth	r2, r3
 801885e:	4b3d      	ldr	r3, [pc, #244]	; (8018954 <tcp_receive+0x890>)
 8018860:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018862:	4b3c      	ldr	r3, [pc, #240]	; (8018954 <tcp_receive+0x890>)
 8018864:	881b      	ldrh	r3, [r3, #0]
 8018866:	461a      	mov	r2, r3
 8018868:	4b38      	ldr	r3, [pc, #224]	; (801894c <tcp_receive+0x888>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	441a      	add	r2, r3
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018872:	6879      	ldr	r1, [r7, #4]
 8018874:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018876:	440b      	add	r3, r1
 8018878:	429a      	cmp	r2, r3
 801887a:	d006      	beq.n	801888a <tcp_receive+0x7c6>
 801887c:	4b36      	ldr	r3, [pc, #216]	; (8018958 <tcp_receive+0x894>)
 801887e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018882:	4936      	ldr	r1, [pc, #216]	; (801895c <tcp_receive+0x898>)
 8018884:	4836      	ldr	r0, [pc, #216]	; (8018960 <tcp_receive+0x89c>)
 8018886:	f002 ffff 	bl	801b888 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801888e:	2b00      	cmp	r3, #0
 8018890:	f000 80e7 	beq.w	8018a62 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018894:	4b2e      	ldr	r3, [pc, #184]	; (8018950 <tcp_receive+0x88c>)
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	899b      	ldrh	r3, [r3, #12]
 801889a:	b29b      	uxth	r3, r3
 801889c:	4618      	mov	r0, r3
 801889e:	f7f6 fbcb 	bl	800f038 <lwip_htons>
 80188a2:	4603      	mov	r3, r0
 80188a4:	b2db      	uxtb	r3, r3
 80188a6:	f003 0301 	and.w	r3, r3, #1
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d010      	beq.n	80188d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80188ae:	e00a      	b.n	80188c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188ba:	681a      	ldr	r2, [r3, #0]
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80188c0:	68f8      	ldr	r0, [r7, #12]
 80188c2:	f7fd fd92 	bl	80163ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d1f0      	bne.n	80188b0 <tcp_receive+0x7ec>
 80188ce:	e0c8      	b.n	8018a62 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80188d6:	e052      	b.n	801897e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80188d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	899b      	ldrh	r3, [r3, #12]
 80188de:	b29b      	uxth	r3, r3
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f6 fba9 	bl	800f038 <lwip_htons>
 80188e6:	4603      	mov	r3, r0
 80188e8:	b2db      	uxtb	r3, r3
 80188ea:	f003 0301 	and.w	r3, r3, #1
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d03d      	beq.n	801896e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80188f2:	4b17      	ldr	r3, [pc, #92]	; (8018950 <tcp_receive+0x88c>)
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	899b      	ldrh	r3, [r3, #12]
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7f6 fb9c 	bl	800f038 <lwip_htons>
 8018900:	4603      	mov	r3, r0
 8018902:	b2db      	uxtb	r3, r3
 8018904:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018908:	2b00      	cmp	r3, #0
 801890a:	d130      	bne.n	801896e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801890c:	4b10      	ldr	r3, [pc, #64]	; (8018950 <tcp_receive+0x88c>)
 801890e:	68db      	ldr	r3, [r3, #12]
 8018910:	899b      	ldrh	r3, [r3, #12]
 8018912:	b29c      	uxth	r4, r3
 8018914:	2001      	movs	r0, #1
 8018916:	f7f6 fb8f 	bl	800f038 <lwip_htons>
 801891a:	4603      	mov	r3, r0
 801891c:	461a      	mov	r2, r3
 801891e:	4b0c      	ldr	r3, [pc, #48]	; (8018950 <tcp_receive+0x88c>)
 8018920:	68db      	ldr	r3, [r3, #12]
 8018922:	4322      	orrs	r2, r4
 8018924:	b292      	uxth	r2, r2
 8018926:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018928:	4b09      	ldr	r3, [pc, #36]	; (8018950 <tcp_receive+0x88c>)
 801892a:	891c      	ldrh	r4, [r3, #8]
 801892c:	4b08      	ldr	r3, [pc, #32]	; (8018950 <tcp_receive+0x88c>)
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	899b      	ldrh	r3, [r3, #12]
 8018932:	b29b      	uxth	r3, r3
 8018934:	4618      	mov	r0, r3
 8018936:	f7f6 fb7f 	bl	800f038 <lwip_htons>
 801893a:	4603      	mov	r3, r0
 801893c:	b2db      	uxtb	r3, r3
 801893e:	f003 0303 	and.w	r3, r3, #3
 8018942:	2b00      	cmp	r3, #0
 8018944:	d00e      	beq.n	8018964 <tcp_receive+0x8a0>
 8018946:	2301      	movs	r3, #1
 8018948:	e00d      	b.n	8018966 <tcp_receive+0x8a2>
 801894a:	bf00      	nop
 801894c:	2400c9b4 	.word	0x2400c9b4
 8018950:	2400c994 	.word	0x2400c994
 8018954:	2400c9be 	.word	0x2400c9be
 8018958:	0801e62c 	.word	0x0801e62c
 801895c:	0801ea0c 	.word	0x0801ea0c
 8018960:	0801e6b0 	.word	0x0801e6b0
 8018964:	2300      	movs	r3, #0
 8018966:	4423      	add	r3, r4
 8018968:	b29a      	uxth	r2, r3
 801896a:	4b98      	ldr	r3, [pc, #608]	; (8018bcc <tcp_receive+0xb08>)
 801896c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018970:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018978:	6938      	ldr	r0, [r7, #16]
 801897a:	f7fd fd36 	bl	80163ea <tcp_seg_free>
            while (next &&
 801897e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018980:	2b00      	cmp	r3, #0
 8018982:	d00e      	beq.n	80189a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018984:	4b91      	ldr	r3, [pc, #580]	; (8018bcc <tcp_receive+0xb08>)
 8018986:	881b      	ldrh	r3, [r3, #0]
 8018988:	461a      	mov	r2, r3
 801898a:	4b91      	ldr	r3, [pc, #580]	; (8018bd0 <tcp_receive+0xb0c>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	441a      	add	r2, r3
 8018990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018998:	8909      	ldrh	r1, [r1, #8]
 801899a:	440b      	add	r3, r1
 801899c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801899e:	2b00      	cmp	r3, #0
 80189a0:	da9a      	bge.n	80188d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80189a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d059      	beq.n	8018a5c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80189a8:	4b88      	ldr	r3, [pc, #544]	; (8018bcc <tcp_receive+0xb08>)
 80189aa:	881b      	ldrh	r3, [r3, #0]
 80189ac:	461a      	mov	r2, r3
 80189ae:	4b88      	ldr	r3, [pc, #544]	; (8018bd0 <tcp_receive+0xb0c>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	441a      	add	r2, r3
 80189b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189b6:	68db      	ldr	r3, [r3, #12]
 80189b8:	685b      	ldr	r3, [r3, #4]
 80189ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80189bc:	2b00      	cmp	r3, #0
 80189be:	dd4d      	ble.n	8018a5c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80189c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189c2:	68db      	ldr	r3, [r3, #12]
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	b29a      	uxth	r2, r3
 80189c8:	4b81      	ldr	r3, [pc, #516]	; (8018bd0 <tcp_receive+0xb0c>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	1ad3      	subs	r3, r2, r3
 80189d0:	b29a      	uxth	r2, r3
 80189d2:	4b80      	ldr	r3, [pc, #512]	; (8018bd4 <tcp_receive+0xb10>)
 80189d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80189d6:	4b7f      	ldr	r3, [pc, #508]	; (8018bd4 <tcp_receive+0xb10>)
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	899b      	ldrh	r3, [r3, #12]
 80189dc:	b29b      	uxth	r3, r3
 80189de:	4618      	mov	r0, r3
 80189e0:	f7f6 fb2a 	bl	800f038 <lwip_htons>
 80189e4:	4603      	mov	r3, r0
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	f003 0302 	and.w	r3, r3, #2
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d005      	beq.n	80189fc <tcp_receive+0x938>
                inseg.len -= 1;
 80189f0:	4b78      	ldr	r3, [pc, #480]	; (8018bd4 <tcp_receive+0xb10>)
 80189f2:	891b      	ldrh	r3, [r3, #8]
 80189f4:	3b01      	subs	r3, #1
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	4b76      	ldr	r3, [pc, #472]	; (8018bd4 <tcp_receive+0xb10>)
 80189fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80189fc:	4b75      	ldr	r3, [pc, #468]	; (8018bd4 <tcp_receive+0xb10>)
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	4a74      	ldr	r2, [pc, #464]	; (8018bd4 <tcp_receive+0xb10>)
 8018a02:	8912      	ldrh	r2, [r2, #8]
 8018a04:	4611      	mov	r1, r2
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7fb ffe8 	bl	80149dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018a0c:	4b71      	ldr	r3, [pc, #452]	; (8018bd4 <tcp_receive+0xb10>)
 8018a0e:	891c      	ldrh	r4, [r3, #8]
 8018a10:	4b70      	ldr	r3, [pc, #448]	; (8018bd4 <tcp_receive+0xb10>)
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	899b      	ldrh	r3, [r3, #12]
 8018a16:	b29b      	uxth	r3, r3
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7f6 fb0d 	bl	800f038 <lwip_htons>
 8018a1e:	4603      	mov	r3, r0
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	f003 0303 	and.w	r3, r3, #3
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d001      	beq.n	8018a2e <tcp_receive+0x96a>
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	e000      	b.n	8018a30 <tcp_receive+0x96c>
 8018a2e:	2300      	movs	r3, #0
 8018a30:	4423      	add	r3, r4
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	4b65      	ldr	r3, [pc, #404]	; (8018bcc <tcp_receive+0xb08>)
 8018a36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018a38:	4b64      	ldr	r3, [pc, #400]	; (8018bcc <tcp_receive+0xb08>)
 8018a3a:	881b      	ldrh	r3, [r3, #0]
 8018a3c:	461a      	mov	r2, r3
 8018a3e:	4b64      	ldr	r3, [pc, #400]	; (8018bd0 <tcp_receive+0xb0c>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	441a      	add	r2, r3
 8018a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a46:	68db      	ldr	r3, [r3, #12]
 8018a48:	685b      	ldr	r3, [r3, #4]
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d006      	beq.n	8018a5c <tcp_receive+0x998>
 8018a4e:	4b62      	ldr	r3, [pc, #392]	; (8018bd8 <tcp_receive+0xb14>)
 8018a50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018a54:	4961      	ldr	r1, [pc, #388]	; (8018bdc <tcp_receive+0xb18>)
 8018a56:	4862      	ldr	r0, [pc, #392]	; (8018be0 <tcp_receive+0xb1c>)
 8018a58:	f002 ff16 	bl	801b888 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018a60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018a62:	4b5a      	ldr	r3, [pc, #360]	; (8018bcc <tcp_receive+0xb08>)
 8018a64:	881b      	ldrh	r3, [r3, #0]
 8018a66:	461a      	mov	r2, r3
 8018a68:	4b59      	ldr	r3, [pc, #356]	; (8018bd0 <tcp_receive+0xb0c>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	441a      	add	r2, r3
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018a76:	4b55      	ldr	r3, [pc, #340]	; (8018bcc <tcp_receive+0xb08>)
 8018a78:	881b      	ldrh	r3, [r3, #0]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d206      	bcs.n	8018a8c <tcp_receive+0x9c8>
 8018a7e:	4b56      	ldr	r3, [pc, #344]	; (8018bd8 <tcp_receive+0xb14>)
 8018a80:	f240 6207 	movw	r2, #1543	; 0x607
 8018a84:	4957      	ldr	r1, [pc, #348]	; (8018be4 <tcp_receive+0xb20>)
 8018a86:	4856      	ldr	r0, [pc, #344]	; (8018be0 <tcp_receive+0xb1c>)
 8018a88:	f002 fefe 	bl	801b888 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018a90:	4b4e      	ldr	r3, [pc, #312]	; (8018bcc <tcp_receive+0xb08>)
 8018a92:	881b      	ldrh	r3, [r3, #0]
 8018a94:	1ad3      	subs	r3, r2, r3
 8018a96:	b29a      	uxth	r2, r3
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018a9c:	6878      	ldr	r0, [r7, #4]
 8018a9e:	f7fc ffc5 	bl	8015a2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018aa2:	4b4c      	ldr	r3, [pc, #304]	; (8018bd4 <tcp_receive+0xb10>)
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	891b      	ldrh	r3, [r3, #8]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d006      	beq.n	8018aba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8018aac:	4b49      	ldr	r3, [pc, #292]	; (8018bd4 <tcp_receive+0xb10>)
 8018aae:	685b      	ldr	r3, [r3, #4]
 8018ab0:	4a4d      	ldr	r2, [pc, #308]	; (8018be8 <tcp_receive+0xb24>)
 8018ab2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018ab4:	4b47      	ldr	r3, [pc, #284]	; (8018bd4 <tcp_receive+0xb10>)
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018aba:	4b46      	ldr	r3, [pc, #280]	; (8018bd4 <tcp_receive+0xb10>)
 8018abc:	68db      	ldr	r3, [r3, #12]
 8018abe:	899b      	ldrh	r3, [r3, #12]
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7f6 fab8 	bl	800f038 <lwip_htons>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	b2db      	uxtb	r3, r3
 8018acc:	f003 0301 	and.w	r3, r3, #1
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	f000 80b8 	beq.w	8018c46 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018ad6:	4b45      	ldr	r3, [pc, #276]	; (8018bec <tcp_receive+0xb28>)
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	f043 0320 	orr.w	r3, r3, #32
 8018ade:	b2da      	uxtb	r2, r3
 8018ae0:	4b42      	ldr	r3, [pc, #264]	; (8018bec <tcp_receive+0xb28>)
 8018ae2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018ae4:	e0af      	b.n	8018c46 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018aea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018af0:	68db      	ldr	r3, [r3, #12]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	4a36      	ldr	r2, [pc, #216]	; (8018bd0 <tcp_receive+0xb0c>)
 8018af6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	891b      	ldrh	r3, [r3, #8]
 8018afc:	461c      	mov	r4, r3
 8018afe:	68bb      	ldr	r3, [r7, #8]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	899b      	ldrh	r3, [r3, #12]
 8018b04:	b29b      	uxth	r3, r3
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7f6 fa96 	bl	800f038 <lwip_htons>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	f003 0303 	and.w	r3, r3, #3
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d001      	beq.n	8018b1c <tcp_receive+0xa58>
 8018b18:	2301      	movs	r3, #1
 8018b1a:	e000      	b.n	8018b1e <tcp_receive+0xa5a>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	191a      	adds	r2, r3, r4
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b24:	441a      	add	r2, r3
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b2e:	461c      	mov	r4, r3
 8018b30:	68bb      	ldr	r3, [r7, #8]
 8018b32:	891b      	ldrh	r3, [r3, #8]
 8018b34:	461d      	mov	r5, r3
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	68db      	ldr	r3, [r3, #12]
 8018b3a:	899b      	ldrh	r3, [r3, #12]
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7f6 fa7a 	bl	800f038 <lwip_htons>
 8018b44:	4603      	mov	r3, r0
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	f003 0303 	and.w	r3, r3, #3
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d001      	beq.n	8018b54 <tcp_receive+0xa90>
 8018b50:	2301      	movs	r3, #1
 8018b52:	e000      	b.n	8018b56 <tcp_receive+0xa92>
 8018b54:	2300      	movs	r3, #0
 8018b56:	442b      	add	r3, r5
 8018b58:	429c      	cmp	r4, r3
 8018b5a:	d206      	bcs.n	8018b6a <tcp_receive+0xaa6>
 8018b5c:	4b1e      	ldr	r3, [pc, #120]	; (8018bd8 <tcp_receive+0xb14>)
 8018b5e:	f240 622b 	movw	r2, #1579	; 0x62b
 8018b62:	4923      	ldr	r1, [pc, #140]	; (8018bf0 <tcp_receive+0xb2c>)
 8018b64:	481e      	ldr	r0, [pc, #120]	; (8018be0 <tcp_receive+0xb1c>)
 8018b66:	f002 fe8f 	bl	801b888 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	891b      	ldrh	r3, [r3, #8]
 8018b6e:	461c      	mov	r4, r3
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	899b      	ldrh	r3, [r3, #12]
 8018b76:	b29b      	uxth	r3, r3
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7f6 fa5d 	bl	800f038 <lwip_htons>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	f003 0303 	and.w	r3, r3, #3
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d001      	beq.n	8018b8e <tcp_receive+0xaca>
 8018b8a:	2301      	movs	r3, #1
 8018b8c:	e000      	b.n	8018b90 <tcp_receive+0xacc>
 8018b8e:	2300      	movs	r3, #0
 8018b90:	1919      	adds	r1, r3, r4
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018b96:	b28b      	uxth	r3, r1
 8018b98:	1ad3      	subs	r3, r2, r3
 8018b9a:	b29a      	uxth	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f7fc ff43 	bl	8015a2c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	685b      	ldr	r3, [r3, #4]
 8018baa:	891b      	ldrh	r3, [r3, #8]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d028      	beq.n	8018c02 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018bb0:	4b0d      	ldr	r3, [pc, #52]	; (8018be8 <tcp_receive+0xb24>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d01d      	beq.n	8018bf4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8018bb8:	4b0b      	ldr	r3, [pc, #44]	; (8018be8 <tcp_receive+0xb24>)
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	4610      	mov	r0, r2
 8018bc4:	f7fc f95e 	bl	8014e84 <pbuf_cat>
 8018bc8:	e018      	b.n	8018bfc <tcp_receive+0xb38>
 8018bca:	bf00      	nop
 8018bcc:	2400c9be 	.word	0x2400c9be
 8018bd0:	2400c9b4 	.word	0x2400c9b4
 8018bd4:	2400c994 	.word	0x2400c994
 8018bd8:	0801e62c 	.word	0x0801e62c
 8018bdc:	0801ea44 	.word	0x0801ea44
 8018be0:	0801e6b0 	.word	0x0801e6b0
 8018be4:	0801ea80 	.word	0x0801ea80
 8018be8:	2400c9c4 	.word	0x2400c9c4
 8018bec:	2400c9c1 	.word	0x2400c9c1
 8018bf0:	0801eaa0 	.word	0x0801eaa0
            } else {
              recv_data = cseg->p;
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	4a70      	ldr	r2, [pc, #448]	; (8018dbc <tcp_receive+0xcf8>)
 8018bfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018bfc:	68bb      	ldr	r3, [r7, #8]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	68db      	ldr	r3, [r3, #12]
 8018c06:	899b      	ldrh	r3, [r3, #12]
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7f6 fa14 	bl	800f038 <lwip_htons>
 8018c10:	4603      	mov	r3, r0
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	f003 0301 	and.w	r3, r3, #1
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d00d      	beq.n	8018c38 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018c1c:	4b68      	ldr	r3, [pc, #416]	; (8018dc0 <tcp_receive+0xcfc>)
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	f043 0320 	orr.w	r3, r3, #32
 8018c24:	b2da      	uxtb	r2, r3
 8018c26:	4b66      	ldr	r3, [pc, #408]	; (8018dc0 <tcp_receive+0xcfc>)
 8018c28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	7d1b      	ldrb	r3, [r3, #20]
 8018c2e:	2b04      	cmp	r3, #4
 8018c30:	d102      	bne.n	8018c38 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	2207      	movs	r2, #7
 8018c36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018c40:	68b8      	ldr	r0, [r7, #8]
 8018c42:	f7fd fbd2 	bl	80163ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d008      	beq.n	8018c60 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c52:	68db      	ldr	r3, [r3, #12]
 8018c54:	685a      	ldr	r2, [r3, #4]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	f43f af43 	beq.w	8018ae6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	8b5b      	ldrh	r3, [r3, #26]
 8018c64:	f003 0301 	and.w	r3, r3, #1
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d00e      	beq.n	8018c8a <tcp_receive+0xbc6>
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	8b5b      	ldrh	r3, [r3, #26]
 8018c70:	f023 0301 	bic.w	r3, r3, #1
 8018c74:	b29a      	uxth	r2, r3
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	835a      	strh	r2, [r3, #26]
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	8b5b      	ldrh	r3, [r3, #26]
 8018c7e:	f043 0302 	orr.w	r3, r3, #2
 8018c82:	b29a      	uxth	r2, r3
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018c88:	e188      	b.n	8018f9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	8b5b      	ldrh	r3, [r3, #26]
 8018c8e:	f043 0301 	orr.w	r3, r3, #1
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018c98:	e180      	b.n	8018f9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d106      	bne.n	8018cb0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018ca2:	4848      	ldr	r0, [pc, #288]	; (8018dc4 <tcp_receive+0xd00>)
 8018ca4:	f7fd fbba 	bl	801641c <tcp_seg_copy>
 8018ca8:	4602      	mov	r2, r0
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	675a      	str	r2, [r3, #116]	; 0x74
 8018cae:	e16d      	b.n	8018f8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8018cba:	e157      	b.n	8018f6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8018cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	685a      	ldr	r2, [r3, #4]
 8018cc2:	4b41      	ldr	r3, [pc, #260]	; (8018dc8 <tcp_receive+0xd04>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d11d      	bne.n	8018d06 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018cca:	4b3e      	ldr	r3, [pc, #248]	; (8018dc4 <tcp_receive+0xd00>)
 8018ccc:	891a      	ldrh	r2, [r3, #8]
 8018cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd0:	891b      	ldrh	r3, [r3, #8]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	f240 814f 	bls.w	8018f76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018cd8:	483a      	ldr	r0, [pc, #232]	; (8018dc4 <tcp_receive+0xd00>)
 8018cda:	f7fd fb9f 	bl	801641c <tcp_seg_copy>
 8018cde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	f000 8149 	beq.w	8018f7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8018ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d003      	beq.n	8018cf6 <tcp_receive+0xc32>
                    prev->next = cseg;
 8018cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cf0:	697a      	ldr	r2, [r7, #20]
 8018cf2:	601a      	str	r2, [r3, #0]
 8018cf4:	e002      	b.n	8018cfc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	697a      	ldr	r2, [r7, #20]
 8018cfa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018cfe:	6978      	ldr	r0, [r7, #20]
 8018d00:	f7ff f8dc 	bl	8017ebc <tcp_oos_insert_segment>
                }
                break;
 8018d04:	e139      	b.n	8018f7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d117      	bne.n	8018d3c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018d0c:	4b2e      	ldr	r3, [pc, #184]	; (8018dc8 <tcp_receive+0xd04>)
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d12:	68db      	ldr	r3, [r3, #12]
 8018d14:	685b      	ldr	r3, [r3, #4]
 8018d16:	1ad3      	subs	r3, r2, r3
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	da57      	bge.n	8018dcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018d1c:	4829      	ldr	r0, [pc, #164]	; (8018dc4 <tcp_receive+0xd00>)
 8018d1e:	f7fd fb7d 	bl	801641c <tcp_seg_copy>
 8018d22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	f000 8129 	beq.w	8018f7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	69ba      	ldr	r2, [r7, #24]
 8018d30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018d34:	69b8      	ldr	r0, [r7, #24]
 8018d36:	f7ff f8c1 	bl	8017ebc <tcp_oos_insert_segment>
                  }
                  break;
 8018d3a:	e120      	b.n	8018f7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018d3c:	4b22      	ldr	r3, [pc, #136]	; (8018dc8 <tcp_receive+0xd04>)
 8018d3e:	681a      	ldr	r2, [r3, #0]
 8018d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d42:	68db      	ldr	r3, [r3, #12]
 8018d44:	685b      	ldr	r3, [r3, #4]
 8018d46:	1ad3      	subs	r3, r2, r3
 8018d48:	3b01      	subs	r3, #1
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	db3e      	blt.n	8018dcc <tcp_receive+0xd08>
 8018d4e:	4b1e      	ldr	r3, [pc, #120]	; (8018dc8 <tcp_receive+0xd04>)
 8018d50:	681a      	ldr	r2, [r3, #0]
 8018d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	685b      	ldr	r3, [r3, #4]
 8018d58:	1ad3      	subs	r3, r2, r3
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	dc35      	bgt.n	8018dcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018d60:	4818      	ldr	r0, [pc, #96]	; (8018dc4 <tcp_receive+0xd00>)
 8018d62:	f7fd fb5b 	bl	801641c <tcp_seg_copy>
 8018d66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	f000 8109 	beq.w	8018f82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018d78:	8912      	ldrh	r2, [r2, #8]
 8018d7a:	441a      	add	r2, r3
 8018d7c:	4b12      	ldr	r3, [pc, #72]	; (8018dc8 <tcp_receive+0xd04>)
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	1ad3      	subs	r3, r2, r3
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	dd12      	ble.n	8018dac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018d86:	4b10      	ldr	r3, [pc, #64]	; (8018dc8 <tcp_receive+0xd04>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	685b      	ldr	r3, [r3, #4]
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	1ad3      	subs	r3, r2, r3
 8018d96:	b29a      	uxth	r2, r3
 8018d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d9e:	685a      	ldr	r2, [r3, #4]
 8018da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018da2:	891b      	ldrh	r3, [r3, #8]
 8018da4:	4619      	mov	r1, r3
 8018da6:	4610      	mov	r0, r2
 8018da8:	f7fb fe18 	bl	80149dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dae:	69fa      	ldr	r2, [r7, #28]
 8018db0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018db4:	69f8      	ldr	r0, [r7, #28]
 8018db6:	f7ff f881 	bl	8017ebc <tcp_oos_insert_segment>
                  }
                  break;
 8018dba:	e0e2      	b.n	8018f82 <tcp_receive+0xebe>
 8018dbc:	2400c9c4 	.word	0x2400c9c4
 8018dc0:	2400c9c1 	.word	0x2400c9c1
 8018dc4:	2400c994 	.word	0x2400c994
 8018dc8:	2400c9b4 	.word	0x2400c9b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	f040 80c6 	bne.w	8018f66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018dda:	4b80      	ldr	r3, [pc, #512]	; (8018fdc <tcp_receive+0xf18>)
 8018ddc:	681a      	ldr	r2, [r3, #0]
 8018dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de0:	68db      	ldr	r3, [r3, #12]
 8018de2:	685b      	ldr	r3, [r3, #4]
 8018de4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	f340 80bd 	ble.w	8018f66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dee:	68db      	ldr	r3, [r3, #12]
 8018df0:	899b      	ldrh	r3, [r3, #12]
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7f6 f91f 	bl	800f038 <lwip_htons>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	f003 0301 	and.w	r3, r3, #1
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	f040 80bf 	bne.w	8018f86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018e08:	4875      	ldr	r0, [pc, #468]	; (8018fe0 <tcp_receive+0xf1c>)
 8018e0a:	f7fd fb07 	bl	801641c <tcp_seg_copy>
 8018e0e:	4602      	mov	r2, r0
 8018e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	f000 80b6 	beq.w	8018f8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e20:	68db      	ldr	r3, [r3, #12]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e26:	8912      	ldrh	r2, [r2, #8]
 8018e28:	441a      	add	r2, r3
 8018e2a:	4b6c      	ldr	r3, [pc, #432]	; (8018fdc <tcp_receive+0xf18>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	dd12      	ble.n	8018e5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018e34:	4b69      	ldr	r3, [pc, #420]	; (8018fdc <tcp_receive+0xf18>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e3c:	68db      	ldr	r3, [r3, #12]
 8018e3e:	685b      	ldr	r3, [r3, #4]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	1ad3      	subs	r3, r2, r3
 8018e44:	b29a      	uxth	r2, r3
 8018e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e4c:	685a      	ldr	r2, [r3, #4]
 8018e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e50:	891b      	ldrh	r3, [r3, #8]
 8018e52:	4619      	mov	r1, r3
 8018e54:	4610      	mov	r0, r2
 8018e56:	f7fb fdc1 	bl	80149dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018e5a:	4b62      	ldr	r3, [pc, #392]	; (8018fe4 <tcp_receive+0xf20>)
 8018e5c:	881b      	ldrh	r3, [r3, #0]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	4b5e      	ldr	r3, [pc, #376]	; (8018fdc <tcp_receive+0xf18>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	441a      	add	r2, r3
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018e6e:	440b      	add	r3, r1
 8018e70:	1ad3      	subs	r3, r2, r3
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f340 8089 	ble.w	8018f8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	68db      	ldr	r3, [r3, #12]
 8018e7e:	899b      	ldrh	r3, [r3, #12]
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7f6 f8d8 	bl	800f038 <lwip_htons>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	b2db      	uxtb	r3, r3
 8018e8c:	f003 0301 	and.w	r3, r3, #1
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d022      	beq.n	8018eda <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	68db      	ldr	r3, [r3, #12]
 8018e9a:	899b      	ldrh	r3, [r3, #12]
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	b21b      	sxth	r3, r3
 8018ea0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018ea4:	b21c      	sxth	r4, r3
 8018ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	68db      	ldr	r3, [r3, #12]
 8018eac:	899b      	ldrh	r3, [r3, #12]
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7f6 f8c1 	bl	800f038 <lwip_htons>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	b2db      	uxtb	r3, r3
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7f6 f8b8 	bl	800f038 <lwip_htons>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	b21b      	sxth	r3, r3
 8018ecc:	4323      	orrs	r3, r4
 8018ece:	b21a      	sxth	r2, r3
 8018ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	68db      	ldr	r3, [r3, #12]
 8018ed6:	b292      	uxth	r2, r2
 8018ed8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ede:	b29a      	uxth	r2, r3
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ee4:	4413      	add	r3, r2
 8018ee6:	b299      	uxth	r1, r3
 8018ee8:	4b3c      	ldr	r3, [pc, #240]	; (8018fdc <tcp_receive+0xf18>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	b29a      	uxth	r2, r3
 8018eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	1a8a      	subs	r2, r1, r2
 8018ef4:	b292      	uxth	r2, r2
 8018ef6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	685a      	ldr	r2, [r3, #4]
 8018efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	891b      	ldrh	r3, [r3, #8]
 8018f04:	4619      	mov	r1, r3
 8018f06:	4610      	mov	r0, r2
 8018f08:	f7fb fd68 	bl	80149dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	891c      	ldrh	r4, [r3, #8]
 8018f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	68db      	ldr	r3, [r3, #12]
 8018f18:	899b      	ldrh	r3, [r3, #12]
 8018f1a:	b29b      	uxth	r3, r3
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7f6 f88b 	bl	800f038 <lwip_htons>
 8018f22:	4603      	mov	r3, r0
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	f003 0303 	and.w	r3, r3, #3
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d001      	beq.n	8018f32 <tcp_receive+0xe6e>
 8018f2e:	2301      	movs	r3, #1
 8018f30:	e000      	b.n	8018f34 <tcp_receive+0xe70>
 8018f32:	2300      	movs	r3, #0
 8018f34:	4423      	add	r3, r4
 8018f36:	b29a      	uxth	r2, r3
 8018f38:	4b2a      	ldr	r3, [pc, #168]	; (8018fe4 <tcp_receive+0xf20>)
 8018f3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018f3c:	4b29      	ldr	r3, [pc, #164]	; (8018fe4 <tcp_receive+0xf20>)
 8018f3e:	881b      	ldrh	r3, [r3, #0]
 8018f40:	461a      	mov	r2, r3
 8018f42:	4b26      	ldr	r3, [pc, #152]	; (8018fdc <tcp_receive+0xf18>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	441a      	add	r2, r3
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f4c:	6879      	ldr	r1, [r7, #4]
 8018f4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018f50:	440b      	add	r3, r1
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d019      	beq.n	8018f8a <tcp_receive+0xec6>
 8018f56:	4b24      	ldr	r3, [pc, #144]	; (8018fe8 <tcp_receive+0xf24>)
 8018f58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018f5c:	4923      	ldr	r1, [pc, #140]	; (8018fec <tcp_receive+0xf28>)
 8018f5e:	4824      	ldr	r0, [pc, #144]	; (8018ff0 <tcp_receive+0xf2c>)
 8018f60:	f002 fc92 	bl	801b888 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018f64:	e011      	b.n	8018f8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	f47f aea4 	bne.w	8018cbc <tcp_receive+0xbf8>
 8018f74:	e00a      	b.n	8018f8c <tcp_receive+0xec8>
                break;
 8018f76:	bf00      	nop
 8018f78:	e008      	b.n	8018f8c <tcp_receive+0xec8>
                break;
 8018f7a:	bf00      	nop
 8018f7c:	e006      	b.n	8018f8c <tcp_receive+0xec8>
                  break;
 8018f7e:	bf00      	nop
 8018f80:	e004      	b.n	8018f8c <tcp_receive+0xec8>
                  break;
 8018f82:	bf00      	nop
 8018f84:	e002      	b.n	8018f8c <tcp_receive+0xec8>
                  break;
 8018f86:	bf00      	nop
 8018f88:	e000      	b.n	8018f8c <tcp_receive+0xec8>
                break;
 8018f8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f001 fa33 	bl	801a3f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018f92:	e003      	b.n	8018f9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018f94:	6878      	ldr	r0, [r7, #4]
 8018f96:	f001 fa2f 	bl	801a3f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018f9a:	e01a      	b.n	8018fd2 <tcp_receive+0xf0e>
 8018f9c:	e019      	b.n	8018fd2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018f9e:	4b0f      	ldr	r3, [pc, #60]	; (8018fdc <tcp_receive+0xf18>)
 8018fa0:	681a      	ldr	r2, [r3, #0]
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa6:	1ad3      	subs	r3, r2, r3
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	db0a      	blt.n	8018fc2 <tcp_receive+0xefe>
 8018fac:	4b0b      	ldr	r3, [pc, #44]	; (8018fdc <tcp_receive+0xf18>)
 8018fae:	681a      	ldr	r2, [r3, #0]
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb4:	6879      	ldr	r1, [r7, #4]
 8018fb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018fb8:	440b      	add	r3, r1
 8018fba:	1ad3      	subs	r3, r2, r3
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	dd07      	ble.n	8018fd2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	8b5b      	ldrh	r3, [r3, #26]
 8018fc6:	f043 0302 	orr.w	r3, r3, #2
 8018fca:	b29a      	uxth	r2, r3
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018fd0:	e7ff      	b.n	8018fd2 <tcp_receive+0xf0e>
 8018fd2:	bf00      	nop
 8018fd4:	3750      	adds	r7, #80	; 0x50
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8018fda:	bf00      	nop
 8018fdc:	2400c9b4 	.word	0x2400c9b4
 8018fe0:	2400c994 	.word	0x2400c994
 8018fe4:	2400c9be 	.word	0x2400c9be
 8018fe8:	0801e62c 	.word	0x0801e62c
 8018fec:	0801ea0c 	.word	0x0801ea0c
 8018ff0:	0801e6b0 	.word	0x0801e6b0

08018ff4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018ff4:	b480      	push	{r7}
 8018ff6:	b083      	sub	sp, #12
 8018ff8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018ffa:	4b15      	ldr	r3, [pc, #84]	; (8019050 <tcp_get_next_optbyte+0x5c>)
 8018ffc:	881b      	ldrh	r3, [r3, #0]
 8018ffe:	1c5a      	adds	r2, r3, #1
 8019000:	b291      	uxth	r1, r2
 8019002:	4a13      	ldr	r2, [pc, #76]	; (8019050 <tcp_get_next_optbyte+0x5c>)
 8019004:	8011      	strh	r1, [r2, #0]
 8019006:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019008:	4b12      	ldr	r3, [pc, #72]	; (8019054 <tcp_get_next_optbyte+0x60>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d004      	beq.n	801901a <tcp_get_next_optbyte+0x26>
 8019010:	4b11      	ldr	r3, [pc, #68]	; (8019058 <tcp_get_next_optbyte+0x64>)
 8019012:	881b      	ldrh	r3, [r3, #0]
 8019014:	88fa      	ldrh	r2, [r7, #6]
 8019016:	429a      	cmp	r2, r3
 8019018:	d208      	bcs.n	801902c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801901a:	4b10      	ldr	r3, [pc, #64]	; (801905c <tcp_get_next_optbyte+0x68>)
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	3314      	adds	r3, #20
 8019020:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019022:	88fb      	ldrh	r3, [r7, #6]
 8019024:	683a      	ldr	r2, [r7, #0]
 8019026:	4413      	add	r3, r2
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	e00b      	b.n	8019044 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801902c:	88fb      	ldrh	r3, [r7, #6]
 801902e:	b2da      	uxtb	r2, r3
 8019030:	4b09      	ldr	r3, [pc, #36]	; (8019058 <tcp_get_next_optbyte+0x64>)
 8019032:	881b      	ldrh	r3, [r3, #0]
 8019034:	b2db      	uxtb	r3, r3
 8019036:	1ad3      	subs	r3, r2, r3
 8019038:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801903a:	4b06      	ldr	r3, [pc, #24]	; (8019054 <tcp_get_next_optbyte+0x60>)
 801903c:	681a      	ldr	r2, [r3, #0]
 801903e:	797b      	ldrb	r3, [r7, #5]
 8019040:	4413      	add	r3, r2
 8019042:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019044:	4618      	mov	r0, r3
 8019046:	370c      	adds	r7, #12
 8019048:	46bd      	mov	sp, r7
 801904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904e:	4770      	bx	lr
 8019050:	2400c9b0 	.word	0x2400c9b0
 8019054:	2400c9ac 	.word	0x2400c9ac
 8019058:	2400c9aa 	.word	0x2400c9aa
 801905c:	2400c9a4 	.word	0x2400c9a4

08019060 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b084      	sub	sp, #16
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d106      	bne.n	801907c <tcp_parseopt+0x1c>
 801906e:	4b32      	ldr	r3, [pc, #200]	; (8019138 <tcp_parseopt+0xd8>)
 8019070:	f240 727d 	movw	r2, #1917	; 0x77d
 8019074:	4931      	ldr	r1, [pc, #196]	; (801913c <tcp_parseopt+0xdc>)
 8019076:	4832      	ldr	r0, [pc, #200]	; (8019140 <tcp_parseopt+0xe0>)
 8019078:	f002 fc06 	bl	801b888 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801907c:	4b31      	ldr	r3, [pc, #196]	; (8019144 <tcp_parseopt+0xe4>)
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d055      	beq.n	8019130 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019084:	4b30      	ldr	r3, [pc, #192]	; (8019148 <tcp_parseopt+0xe8>)
 8019086:	2200      	movs	r2, #0
 8019088:	801a      	strh	r2, [r3, #0]
 801908a:	e045      	b.n	8019118 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801908c:	f7ff ffb2 	bl	8018ff4 <tcp_get_next_optbyte>
 8019090:	4603      	mov	r3, r0
 8019092:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019094:	7bfb      	ldrb	r3, [r7, #15]
 8019096:	2b02      	cmp	r3, #2
 8019098:	d006      	beq.n	80190a8 <tcp_parseopt+0x48>
 801909a:	2b02      	cmp	r3, #2
 801909c:	dc2b      	bgt.n	80190f6 <tcp_parseopt+0x96>
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d041      	beq.n	8019126 <tcp_parseopt+0xc6>
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d127      	bne.n	80190f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80190a6:	e037      	b.n	8019118 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80190a8:	f7ff ffa4 	bl	8018ff4 <tcp_get_next_optbyte>
 80190ac:	4603      	mov	r3, r0
 80190ae:	2b04      	cmp	r3, #4
 80190b0:	d13b      	bne.n	801912a <tcp_parseopt+0xca>
 80190b2:	4b25      	ldr	r3, [pc, #148]	; (8019148 <tcp_parseopt+0xe8>)
 80190b4:	881b      	ldrh	r3, [r3, #0]
 80190b6:	3301      	adds	r3, #1
 80190b8:	4a22      	ldr	r2, [pc, #136]	; (8019144 <tcp_parseopt+0xe4>)
 80190ba:	8812      	ldrh	r2, [r2, #0]
 80190bc:	4293      	cmp	r3, r2
 80190be:	da34      	bge.n	801912a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80190c0:	f7ff ff98 	bl	8018ff4 <tcp_get_next_optbyte>
 80190c4:	4603      	mov	r3, r0
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	021b      	lsls	r3, r3, #8
 80190ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80190cc:	f7ff ff92 	bl	8018ff4 <tcp_get_next_optbyte>
 80190d0:	4603      	mov	r3, r0
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	89bb      	ldrh	r3, [r7, #12]
 80190d6:	4313      	orrs	r3, r2
 80190d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80190da:	89bb      	ldrh	r3, [r7, #12]
 80190dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80190e0:	d804      	bhi.n	80190ec <tcp_parseopt+0x8c>
 80190e2:	89bb      	ldrh	r3, [r7, #12]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d001      	beq.n	80190ec <tcp_parseopt+0x8c>
 80190e8:	89ba      	ldrh	r2, [r7, #12]
 80190ea:	e001      	b.n	80190f0 <tcp_parseopt+0x90>
 80190ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80190f4:	e010      	b.n	8019118 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80190f6:	f7ff ff7d 	bl	8018ff4 <tcp_get_next_optbyte>
 80190fa:	4603      	mov	r3, r0
 80190fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80190fe:	7afb      	ldrb	r3, [r7, #11]
 8019100:	2b01      	cmp	r3, #1
 8019102:	d914      	bls.n	801912e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019104:	7afb      	ldrb	r3, [r7, #11]
 8019106:	b29a      	uxth	r2, r3
 8019108:	4b0f      	ldr	r3, [pc, #60]	; (8019148 <tcp_parseopt+0xe8>)
 801910a:	881b      	ldrh	r3, [r3, #0]
 801910c:	4413      	add	r3, r2
 801910e:	b29b      	uxth	r3, r3
 8019110:	3b02      	subs	r3, #2
 8019112:	b29a      	uxth	r2, r3
 8019114:	4b0c      	ldr	r3, [pc, #48]	; (8019148 <tcp_parseopt+0xe8>)
 8019116:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019118:	4b0b      	ldr	r3, [pc, #44]	; (8019148 <tcp_parseopt+0xe8>)
 801911a:	881a      	ldrh	r2, [r3, #0]
 801911c:	4b09      	ldr	r3, [pc, #36]	; (8019144 <tcp_parseopt+0xe4>)
 801911e:	881b      	ldrh	r3, [r3, #0]
 8019120:	429a      	cmp	r2, r3
 8019122:	d3b3      	bcc.n	801908c <tcp_parseopt+0x2c>
 8019124:	e004      	b.n	8019130 <tcp_parseopt+0xd0>
          return;
 8019126:	bf00      	nop
 8019128:	e002      	b.n	8019130 <tcp_parseopt+0xd0>
            return;
 801912a:	bf00      	nop
 801912c:	e000      	b.n	8019130 <tcp_parseopt+0xd0>
            return;
 801912e:	bf00      	nop
      }
    }
  }
}
 8019130:	3710      	adds	r7, #16
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
 8019136:	bf00      	nop
 8019138:	0801e62c 	.word	0x0801e62c
 801913c:	0801eac8 	.word	0x0801eac8
 8019140:	0801e6b0 	.word	0x0801e6b0
 8019144:	2400c9a8 	.word	0x2400c9a8
 8019148:	2400c9b0 	.word	0x2400c9b0

0801914c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801914c:	b480      	push	{r7}
 801914e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019150:	4b05      	ldr	r3, [pc, #20]	; (8019168 <tcp_trigger_input_pcb_close+0x1c>)
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	f043 0310 	orr.w	r3, r3, #16
 8019158:	b2da      	uxtb	r2, r3
 801915a:	4b03      	ldr	r3, [pc, #12]	; (8019168 <tcp_trigger_input_pcb_close+0x1c>)
 801915c:	701a      	strb	r2, [r3, #0]
}
 801915e:	bf00      	nop
 8019160:	46bd      	mov	sp, r7
 8019162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019166:	4770      	bx	lr
 8019168:	2400c9c1 	.word	0x2400c9c1

0801916c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b084      	sub	sp, #16
 8019170:	af00      	add	r7, sp, #0
 8019172:	60f8      	str	r0, [r7, #12]
 8019174:	60b9      	str	r1, [r7, #8]
 8019176:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d00a      	beq.n	8019194 <tcp_route+0x28>
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	7a1b      	ldrb	r3, [r3, #8]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d006      	beq.n	8019194 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	7a1b      	ldrb	r3, [r3, #8]
 801918a:	4618      	mov	r0, r3
 801918c:	f7fb fa1e 	bl	80145cc <netif_get_by_index>
 8019190:	4603      	mov	r3, r0
 8019192:	e003      	b.n	801919c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019194:	6878      	ldr	r0, [r7, #4]
 8019196:	f7f9 f8bf 	bl	8012318 <ip4_route>
 801919a:	4603      	mov	r3, r0
  }
}
 801919c:	4618      	mov	r0, r3
 801919e:	3710      	adds	r7, #16
 80191a0:	46bd      	mov	sp, r7
 80191a2:	bd80      	pop	{r7, pc}

080191a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80191a4:	b590      	push	{r4, r7, lr}
 80191a6:	b087      	sub	sp, #28
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	60f8      	str	r0, [r7, #12]
 80191ac:	60b9      	str	r1, [r7, #8]
 80191ae:	603b      	str	r3, [r7, #0]
 80191b0:	4613      	mov	r3, r2
 80191b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d105      	bne.n	80191c6 <tcp_create_segment+0x22>
 80191ba:	4b44      	ldr	r3, [pc, #272]	; (80192cc <tcp_create_segment+0x128>)
 80191bc:	22a3      	movs	r2, #163	; 0xa3
 80191be:	4944      	ldr	r1, [pc, #272]	; (80192d0 <tcp_create_segment+0x12c>)
 80191c0:	4844      	ldr	r0, [pc, #272]	; (80192d4 <tcp_create_segment+0x130>)
 80191c2:	f002 fb61 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d105      	bne.n	80191d8 <tcp_create_segment+0x34>
 80191cc:	4b3f      	ldr	r3, [pc, #252]	; (80192cc <tcp_create_segment+0x128>)
 80191ce:	22a4      	movs	r2, #164	; 0xa4
 80191d0:	4941      	ldr	r1, [pc, #260]	; (80192d8 <tcp_create_segment+0x134>)
 80191d2:	4840      	ldr	r0, [pc, #256]	; (80192d4 <tcp_create_segment+0x130>)
 80191d4:	f002 fb58 	bl	801b888 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80191d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	f003 0304 	and.w	r3, r3, #4
 80191e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80191e6:	2003      	movs	r0, #3
 80191e8:	f7fa fe58 	bl	8013e9c <memp_malloc>
 80191ec:	6138      	str	r0, [r7, #16]
 80191ee:	693b      	ldr	r3, [r7, #16]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d104      	bne.n	80191fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80191f4:	68b8      	ldr	r0, [r7, #8]
 80191f6:	f7fb fd77 	bl	8014ce8 <pbuf_free>
    return NULL;
 80191fa:	2300      	movs	r3, #0
 80191fc:	e061      	b.n	80192c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019204:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019206:	693b      	ldr	r3, [r7, #16]
 8019208:	2200      	movs	r2, #0
 801920a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801920c:	693b      	ldr	r3, [r7, #16]
 801920e:	68ba      	ldr	r2, [r7, #8]
 8019210:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	891a      	ldrh	r2, [r3, #8]
 8019216:	7dfb      	ldrb	r3, [r7, #23]
 8019218:	b29b      	uxth	r3, r3
 801921a:	429a      	cmp	r2, r3
 801921c:	d205      	bcs.n	801922a <tcp_create_segment+0x86>
 801921e:	4b2b      	ldr	r3, [pc, #172]	; (80192cc <tcp_create_segment+0x128>)
 8019220:	22b0      	movs	r2, #176	; 0xb0
 8019222:	492e      	ldr	r1, [pc, #184]	; (80192dc <tcp_create_segment+0x138>)
 8019224:	482b      	ldr	r0, [pc, #172]	; (80192d4 <tcp_create_segment+0x130>)
 8019226:	f002 fb2f 	bl	801b888 <iprintf>
  seg->len = p->tot_len - optlen;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	891a      	ldrh	r2, [r3, #8]
 801922e:	7dfb      	ldrb	r3, [r7, #23]
 8019230:	b29b      	uxth	r3, r3
 8019232:	1ad3      	subs	r3, r2, r3
 8019234:	b29a      	uxth	r2, r3
 8019236:	693b      	ldr	r3, [r7, #16]
 8019238:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801923a:	2114      	movs	r1, #20
 801923c:	68b8      	ldr	r0, [r7, #8]
 801923e:	f7fb fcbd 	bl	8014bbc <pbuf_add_header>
 8019242:	4603      	mov	r3, r0
 8019244:	2b00      	cmp	r3, #0
 8019246:	d004      	beq.n	8019252 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019248:	6938      	ldr	r0, [r7, #16]
 801924a:	f7fd f8ce 	bl	80163ea <tcp_seg_free>
    return NULL;
 801924e:	2300      	movs	r3, #0
 8019250:	e037      	b.n	80192c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019252:	693b      	ldr	r3, [r7, #16]
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	685a      	ldr	r2, [r3, #4]
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	8ada      	ldrh	r2, [r3, #22]
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	68dc      	ldr	r4, [r3, #12]
 8019264:	4610      	mov	r0, r2
 8019266:	f7f5 fee7 	bl	800f038 <lwip_htons>
 801926a:	4603      	mov	r3, r0
 801926c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	8b1a      	ldrh	r2, [r3, #24]
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	68dc      	ldr	r4, [r3, #12]
 8019276:	4610      	mov	r0, r2
 8019278:	f7f5 fede 	bl	800f038 <lwip_htons>
 801927c:	4603      	mov	r3, r0
 801927e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019280:	693b      	ldr	r3, [r7, #16]
 8019282:	68dc      	ldr	r4, [r3, #12]
 8019284:	6838      	ldr	r0, [r7, #0]
 8019286:	f7f5 feec 	bl	800f062 <lwip_htonl>
 801928a:	4603      	mov	r3, r0
 801928c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801928e:	7dfb      	ldrb	r3, [r7, #23]
 8019290:	089b      	lsrs	r3, r3, #2
 8019292:	b2db      	uxtb	r3, r3
 8019294:	b29b      	uxth	r3, r3
 8019296:	3305      	adds	r3, #5
 8019298:	b29b      	uxth	r3, r3
 801929a:	031b      	lsls	r3, r3, #12
 801929c:	b29a      	uxth	r2, r3
 801929e:	79fb      	ldrb	r3, [r7, #7]
 80192a0:	b29b      	uxth	r3, r3
 80192a2:	4313      	orrs	r3, r2
 80192a4:	b29a      	uxth	r2, r3
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	68dc      	ldr	r4, [r3, #12]
 80192aa:	4610      	mov	r0, r2
 80192ac:	f7f5 fec4 	bl	800f038 <lwip_htons>
 80192b0:	4603      	mov	r3, r0
 80192b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80192b4:	693b      	ldr	r3, [r7, #16]
 80192b6:	68db      	ldr	r3, [r3, #12]
 80192b8:	2200      	movs	r2, #0
 80192ba:	749a      	strb	r2, [r3, #18]
 80192bc:	2200      	movs	r2, #0
 80192be:	74da      	strb	r2, [r3, #19]
  return seg;
 80192c0:	693b      	ldr	r3, [r7, #16]
}
 80192c2:	4618      	mov	r0, r3
 80192c4:	371c      	adds	r7, #28
 80192c6:	46bd      	mov	sp, r7
 80192c8:	bd90      	pop	{r4, r7, pc}
 80192ca:	bf00      	nop
 80192cc:	0801eae4 	.word	0x0801eae4
 80192d0:	0801eb54 	.word	0x0801eb54
 80192d4:	0801eb74 	.word	0x0801eb74
 80192d8:	0801eb9c 	.word	0x0801eb9c
 80192dc:	0801ebc0 	.word	0x0801ebc0

080192e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80192e0:	b590      	push	{r4, r7, lr}
 80192e2:	b08b      	sub	sp, #44	; 0x2c
 80192e4:	af02      	add	r7, sp, #8
 80192e6:	6078      	str	r0, [r7, #4]
 80192e8:	460b      	mov	r3, r1
 80192ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80192ec:	2300      	movs	r3, #0
 80192ee:	61fb      	str	r3, [r7, #28]
 80192f0:	2300      	movs	r3, #0
 80192f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80192f4:	2300      	movs	r3, #0
 80192f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d106      	bne.n	801930c <tcp_split_unsent_seg+0x2c>
 80192fe:	4b95      	ldr	r3, [pc, #596]	; (8019554 <tcp_split_unsent_seg+0x274>)
 8019300:	f240 324b 	movw	r2, #843	; 0x34b
 8019304:	4994      	ldr	r1, [pc, #592]	; (8019558 <tcp_split_unsent_seg+0x278>)
 8019306:	4895      	ldr	r0, [pc, #596]	; (801955c <tcp_split_unsent_seg+0x27c>)
 8019308:	f002 fabe 	bl	801b888 <iprintf>

  useg = pcb->unsent;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019310:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d102      	bne.n	801931e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019318:	f04f 33ff 	mov.w	r3, #4294967295
 801931c:	e116      	b.n	801954c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801931e:	887b      	ldrh	r3, [r7, #2]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d109      	bne.n	8019338 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019324:	4b8b      	ldr	r3, [pc, #556]	; (8019554 <tcp_split_unsent_seg+0x274>)
 8019326:	f240 3253 	movw	r2, #851	; 0x353
 801932a:	498d      	ldr	r1, [pc, #564]	; (8019560 <tcp_split_unsent_seg+0x280>)
 801932c:	488b      	ldr	r0, [pc, #556]	; (801955c <tcp_split_unsent_seg+0x27c>)
 801932e:	f002 faab 	bl	801b888 <iprintf>
    return ERR_VAL;
 8019332:	f06f 0305 	mvn.w	r3, #5
 8019336:	e109      	b.n	801954c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	891b      	ldrh	r3, [r3, #8]
 801933c:	887a      	ldrh	r2, [r7, #2]
 801933e:	429a      	cmp	r2, r3
 8019340:	d301      	bcc.n	8019346 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019342:	2300      	movs	r3, #0
 8019344:	e102      	b.n	801954c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801934a:	887a      	ldrh	r2, [r7, #2]
 801934c:	429a      	cmp	r2, r3
 801934e:	d906      	bls.n	801935e <tcp_split_unsent_seg+0x7e>
 8019350:	4b80      	ldr	r3, [pc, #512]	; (8019554 <tcp_split_unsent_seg+0x274>)
 8019352:	f240 325b 	movw	r2, #859	; 0x35b
 8019356:	4983      	ldr	r1, [pc, #524]	; (8019564 <tcp_split_unsent_seg+0x284>)
 8019358:	4880      	ldr	r0, [pc, #512]	; (801955c <tcp_split_unsent_seg+0x27c>)
 801935a:	f002 fa95 	bl	801b888 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	891b      	ldrh	r3, [r3, #8]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d106      	bne.n	8019374 <tcp_split_unsent_seg+0x94>
 8019366:	4b7b      	ldr	r3, [pc, #492]	; (8019554 <tcp_split_unsent_seg+0x274>)
 8019368:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801936c:	497e      	ldr	r1, [pc, #504]	; (8019568 <tcp_split_unsent_seg+0x288>)
 801936e:	487b      	ldr	r0, [pc, #492]	; (801955c <tcp_split_unsent_seg+0x27c>)
 8019370:	f002 fa8a 	bl	801b888 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	7a9b      	ldrb	r3, [r3, #10]
 8019378:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801937a:	7bfb      	ldrb	r3, [r7, #15]
 801937c:	009b      	lsls	r3, r3, #2
 801937e:	b2db      	uxtb	r3, r3
 8019380:	f003 0304 	and.w	r3, r3, #4
 8019384:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	891a      	ldrh	r2, [r3, #8]
 801938a:	887b      	ldrh	r3, [r7, #2]
 801938c:	1ad3      	subs	r3, r2, r3
 801938e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019390:	7bbb      	ldrb	r3, [r7, #14]
 8019392:	b29a      	uxth	r2, r3
 8019394:	89bb      	ldrh	r3, [r7, #12]
 8019396:	4413      	add	r3, r2
 8019398:	b29b      	uxth	r3, r3
 801939a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801939e:	4619      	mov	r1, r3
 80193a0:	2036      	movs	r0, #54	; 0x36
 80193a2:	f7fb f9bd 	bl	8014720 <pbuf_alloc>
 80193a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80193a8:	693b      	ldr	r3, [r7, #16]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	f000 80b7 	beq.w	801951e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	891a      	ldrh	r2, [r3, #8]
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	891b      	ldrh	r3, [r3, #8]
 80193ba:	1ad3      	subs	r3, r2, r3
 80193bc:	b29a      	uxth	r2, r3
 80193be:	887b      	ldrh	r3, [r7, #2]
 80193c0:	4413      	add	r3, r2
 80193c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	6858      	ldr	r0, [r3, #4]
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	685a      	ldr	r2, [r3, #4]
 80193cc:	7bbb      	ldrb	r3, [r7, #14]
 80193ce:	18d1      	adds	r1, r2, r3
 80193d0:	897b      	ldrh	r3, [r7, #10]
 80193d2:	89ba      	ldrh	r2, [r7, #12]
 80193d4:	f7fb fe8e 	bl	80150f4 <pbuf_copy_partial>
 80193d8:	4603      	mov	r3, r0
 80193da:	461a      	mov	r2, r3
 80193dc:	89bb      	ldrh	r3, [r7, #12]
 80193de:	4293      	cmp	r3, r2
 80193e0:	f040 809f 	bne.w	8019522 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	899b      	ldrh	r3, [r3, #12]
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7f5 fe23 	bl	800f038 <lwip_htons>
 80193f2:	4603      	mov	r3, r0
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80193fc:	2300      	movs	r3, #0
 80193fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019400:	7efb      	ldrb	r3, [r7, #27]
 8019402:	f003 0308 	and.w	r3, r3, #8
 8019406:	2b00      	cmp	r3, #0
 8019408:	d007      	beq.n	801941a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801940a:	7efb      	ldrb	r3, [r7, #27]
 801940c:	f023 0308 	bic.w	r3, r3, #8
 8019410:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019412:	7ebb      	ldrb	r3, [r7, #26]
 8019414:	f043 0308 	orr.w	r3, r3, #8
 8019418:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801941a:	7efb      	ldrb	r3, [r7, #27]
 801941c:	f003 0301 	and.w	r3, r3, #1
 8019420:	2b00      	cmp	r3, #0
 8019422:	d007      	beq.n	8019434 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019424:	7efb      	ldrb	r3, [r7, #27]
 8019426:	f023 0301 	bic.w	r3, r3, #1
 801942a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801942c:	7ebb      	ldrb	r3, [r7, #26]
 801942e:	f043 0301 	orr.w	r3, r3, #1
 8019432:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	4618      	mov	r0, r3
 801943c:	f7f5 fe11 	bl	800f062 <lwip_htonl>
 8019440:	4602      	mov	r2, r0
 8019442:	887b      	ldrh	r3, [r7, #2]
 8019444:	18d1      	adds	r1, r2, r3
 8019446:	7eba      	ldrb	r2, [r7, #26]
 8019448:	7bfb      	ldrb	r3, [r7, #15]
 801944a:	9300      	str	r3, [sp, #0]
 801944c:	460b      	mov	r3, r1
 801944e:	6939      	ldr	r1, [r7, #16]
 8019450:	6878      	ldr	r0, [r7, #4]
 8019452:	f7ff fea7 	bl	80191a4 <tcp_create_segment>
 8019456:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019458:	69fb      	ldr	r3, [r7, #28]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d063      	beq.n	8019526 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	685b      	ldr	r3, [r3, #4]
 8019462:	4618      	mov	r0, r3
 8019464:	f7fb fcce 	bl	8014e04 <pbuf_clen>
 8019468:	4603      	mov	r3, r0
 801946a:	461a      	mov	r2, r3
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019472:	1a9b      	subs	r3, r3, r2
 8019474:	b29a      	uxth	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	6858      	ldr	r0, [r3, #4]
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	685b      	ldr	r3, [r3, #4]
 8019484:	891a      	ldrh	r2, [r3, #8]
 8019486:	89bb      	ldrh	r3, [r7, #12]
 8019488:	1ad3      	subs	r3, r2, r3
 801948a:	b29b      	uxth	r3, r3
 801948c:	4619      	mov	r1, r3
 801948e:	f7fb faa5 	bl	80149dc <pbuf_realloc>
  useg->len -= remainder;
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	891a      	ldrh	r2, [r3, #8]
 8019496:	89bb      	ldrh	r3, [r7, #12]
 8019498:	1ad3      	subs	r3, r2, r3
 801949a:	b29a      	uxth	r2, r3
 801949c:	697b      	ldr	r3, [r7, #20]
 801949e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80194a0:	697b      	ldr	r3, [r7, #20]
 80194a2:	68db      	ldr	r3, [r3, #12]
 80194a4:	899b      	ldrh	r3, [r3, #12]
 80194a6:	b29c      	uxth	r4, r3
 80194a8:	7efb      	ldrb	r3, [r7, #27]
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7f5 fdc3 	bl	800f038 <lwip_htons>
 80194b2:	4603      	mov	r3, r0
 80194b4:	461a      	mov	r2, r3
 80194b6:	697b      	ldr	r3, [r7, #20]
 80194b8:	68db      	ldr	r3, [r3, #12]
 80194ba:	4322      	orrs	r2, r4
 80194bc:	b292      	uxth	r2, r2
 80194be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	685b      	ldr	r3, [r3, #4]
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7fb fc9d 	bl	8014e04 <pbuf_clen>
 80194ca:	4603      	mov	r3, r0
 80194cc:	461a      	mov	r2, r3
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80194d4:	4413      	add	r3, r2
 80194d6:	b29a      	uxth	r2, r3
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80194de:	69fb      	ldr	r3, [r7, #28]
 80194e0:	685b      	ldr	r3, [r3, #4]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7fb fc8e 	bl	8014e04 <pbuf_clen>
 80194e8:	4603      	mov	r3, r0
 80194ea:	461a      	mov	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80194f2:	4413      	add	r3, r2
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80194fc:	697b      	ldr	r3, [r7, #20]
 80194fe:	681a      	ldr	r2, [r3, #0]
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	69fa      	ldr	r2, [r7, #28]
 8019508:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801950a:	69fb      	ldr	r3, [r7, #28]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d103      	bne.n	801951a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2200      	movs	r2, #0
 8019516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801951a:	2300      	movs	r3, #0
 801951c:	e016      	b.n	801954c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801951e:	bf00      	nop
 8019520:	e002      	b.n	8019528 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019522:	bf00      	nop
 8019524:	e000      	b.n	8019528 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019526:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d006      	beq.n	801953c <tcp_split_unsent_seg+0x25c>
 801952e:	4b09      	ldr	r3, [pc, #36]	; (8019554 <tcp_split_unsent_seg+0x274>)
 8019530:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019534:	490d      	ldr	r1, [pc, #52]	; (801956c <tcp_split_unsent_seg+0x28c>)
 8019536:	4809      	ldr	r0, [pc, #36]	; (801955c <tcp_split_unsent_seg+0x27c>)
 8019538:	f002 f9a6 	bl	801b888 <iprintf>
  if (p != NULL) {
 801953c:	693b      	ldr	r3, [r7, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d002      	beq.n	8019548 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019542:	6938      	ldr	r0, [r7, #16]
 8019544:	f7fb fbd0 	bl	8014ce8 <pbuf_free>
  }

  return ERR_MEM;
 8019548:	f04f 33ff 	mov.w	r3, #4294967295
}
 801954c:	4618      	mov	r0, r3
 801954e:	3724      	adds	r7, #36	; 0x24
 8019550:	46bd      	mov	sp, r7
 8019552:	bd90      	pop	{r4, r7, pc}
 8019554:	0801eae4 	.word	0x0801eae4
 8019558:	0801eeb4 	.word	0x0801eeb4
 801955c:	0801eb74 	.word	0x0801eb74
 8019560:	0801eed8 	.word	0x0801eed8
 8019564:	0801eefc 	.word	0x0801eefc
 8019568:	0801ef0c 	.word	0x0801ef0c
 801956c:	0801ef1c 	.word	0x0801ef1c

08019570 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019570:	b590      	push	{r4, r7, lr}
 8019572:	b085      	sub	sp, #20
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d106      	bne.n	801958c <tcp_send_fin+0x1c>
 801957e:	4b21      	ldr	r3, [pc, #132]	; (8019604 <tcp_send_fin+0x94>)
 8019580:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019584:	4920      	ldr	r1, [pc, #128]	; (8019608 <tcp_send_fin+0x98>)
 8019586:	4821      	ldr	r0, [pc, #132]	; (801960c <tcp_send_fin+0x9c>)
 8019588:	f002 f97e 	bl	801b888 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019590:	2b00      	cmp	r3, #0
 8019592:	d02e      	beq.n	80195f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019598:	60fb      	str	r3, [r7, #12]
 801959a:	e002      	b.n	80195a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d1f8      	bne.n	801959c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	68db      	ldr	r3, [r3, #12]
 80195ae:	899b      	ldrh	r3, [r3, #12]
 80195b0:	b29b      	uxth	r3, r3
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7f5 fd40 	bl	800f038 <lwip_htons>
 80195b8:	4603      	mov	r3, r0
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	f003 0307 	and.w	r3, r3, #7
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d116      	bne.n	80195f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	68db      	ldr	r3, [r3, #12]
 80195c8:	899b      	ldrh	r3, [r3, #12]
 80195ca:	b29c      	uxth	r4, r3
 80195cc:	2001      	movs	r0, #1
 80195ce:	f7f5 fd33 	bl	800f038 <lwip_htons>
 80195d2:	4603      	mov	r3, r0
 80195d4:	461a      	mov	r2, r3
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	68db      	ldr	r3, [r3, #12]
 80195da:	4322      	orrs	r2, r4
 80195dc:	b292      	uxth	r2, r2
 80195de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	8b5b      	ldrh	r3, [r3, #26]
 80195e4:	f043 0320 	orr.w	r3, r3, #32
 80195e8:	b29a      	uxth	r2, r3
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80195ee:	2300      	movs	r3, #0
 80195f0:	e004      	b.n	80195fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80195f2:	2101      	movs	r1, #1
 80195f4:	6878      	ldr	r0, [r7, #4]
 80195f6:	f000 f80b 	bl	8019610 <tcp_enqueue_flags>
 80195fa:	4603      	mov	r3, r0
}
 80195fc:	4618      	mov	r0, r3
 80195fe:	3714      	adds	r7, #20
 8019600:	46bd      	mov	sp, r7
 8019602:	bd90      	pop	{r4, r7, pc}
 8019604:	0801eae4 	.word	0x0801eae4
 8019608:	0801ef28 	.word	0x0801ef28
 801960c:	0801eb74 	.word	0x0801eb74

08019610 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b08a      	sub	sp, #40	; 0x28
 8019614:	af02      	add	r7, sp, #8
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	460b      	mov	r3, r1
 801961a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801961c:	2300      	movs	r3, #0
 801961e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019620:	2300      	movs	r3, #0
 8019622:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019624:	78fb      	ldrb	r3, [r7, #3]
 8019626:	f003 0303 	and.w	r3, r3, #3
 801962a:	2b00      	cmp	r3, #0
 801962c:	d106      	bne.n	801963c <tcp_enqueue_flags+0x2c>
 801962e:	4b67      	ldr	r3, [pc, #412]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 8019630:	f240 4211 	movw	r2, #1041	; 0x411
 8019634:	4966      	ldr	r1, [pc, #408]	; (80197d0 <tcp_enqueue_flags+0x1c0>)
 8019636:	4867      	ldr	r0, [pc, #412]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 8019638:	f002 f926 	bl	801b888 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d106      	bne.n	8019650 <tcp_enqueue_flags+0x40>
 8019642:	4b62      	ldr	r3, [pc, #392]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 8019644:	f240 4213 	movw	r2, #1043	; 0x413
 8019648:	4963      	ldr	r1, [pc, #396]	; (80197d8 <tcp_enqueue_flags+0x1c8>)
 801964a:	4862      	ldr	r0, [pc, #392]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 801964c:	f002 f91c 	bl	801b888 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019650:	78fb      	ldrb	r3, [r7, #3]
 8019652:	f003 0302 	and.w	r3, r3, #2
 8019656:	2b00      	cmp	r3, #0
 8019658:	d001      	beq.n	801965e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801965a:	2301      	movs	r3, #1
 801965c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801965e:	7ffb      	ldrb	r3, [r7, #31]
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	b2db      	uxtb	r3, r3
 8019664:	f003 0304 	and.w	r3, r3, #4
 8019668:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801966a:	7dfb      	ldrb	r3, [r7, #23]
 801966c:	b29b      	uxth	r3, r3
 801966e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019672:	4619      	mov	r1, r3
 8019674:	2036      	movs	r0, #54	; 0x36
 8019676:	f7fb f853 	bl	8014720 <pbuf_alloc>
 801967a:	6138      	str	r0, [r7, #16]
 801967c:	693b      	ldr	r3, [r7, #16]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d109      	bne.n	8019696 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	8b5b      	ldrh	r3, [r3, #26]
 8019686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801968a:	b29a      	uxth	r2, r3
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019690:	f04f 33ff 	mov.w	r3, #4294967295
 8019694:	e095      	b.n	80197c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019696:	693b      	ldr	r3, [r7, #16]
 8019698:	895a      	ldrh	r2, [r3, #10]
 801969a:	7dfb      	ldrb	r3, [r7, #23]
 801969c:	b29b      	uxth	r3, r3
 801969e:	429a      	cmp	r2, r3
 80196a0:	d206      	bcs.n	80196b0 <tcp_enqueue_flags+0xa0>
 80196a2:	4b4a      	ldr	r3, [pc, #296]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 80196a4:	f240 4239 	movw	r2, #1081	; 0x439
 80196a8:	494c      	ldr	r1, [pc, #304]	; (80197dc <tcp_enqueue_flags+0x1cc>)
 80196aa:	484a      	ldr	r0, [pc, #296]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 80196ac:	f002 f8ec 	bl	801b888 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80196b4:	78fa      	ldrb	r2, [r7, #3]
 80196b6:	7ffb      	ldrb	r3, [r7, #31]
 80196b8:	9300      	str	r3, [sp, #0]
 80196ba:	460b      	mov	r3, r1
 80196bc:	6939      	ldr	r1, [r7, #16]
 80196be:	6878      	ldr	r0, [r7, #4]
 80196c0:	f7ff fd70 	bl	80191a4 <tcp_create_segment>
 80196c4:	60f8      	str	r0, [r7, #12]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d109      	bne.n	80196e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	8b5b      	ldrh	r3, [r3, #26]
 80196d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196d4:	b29a      	uxth	r2, r3
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80196da:	f04f 33ff 	mov.w	r3, #4294967295
 80196de:	e070      	b.n	80197c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	68db      	ldr	r3, [r3, #12]
 80196e4:	f003 0303 	and.w	r3, r3, #3
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d006      	beq.n	80196fa <tcp_enqueue_flags+0xea>
 80196ec:	4b37      	ldr	r3, [pc, #220]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 80196ee:	f240 4242 	movw	r2, #1090	; 0x442
 80196f2:	493b      	ldr	r1, [pc, #236]	; (80197e0 <tcp_enqueue_flags+0x1d0>)
 80196f4:	4837      	ldr	r0, [pc, #220]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 80196f6:	f002 f8c7 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	891b      	ldrh	r3, [r3, #8]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d006      	beq.n	8019710 <tcp_enqueue_flags+0x100>
 8019702:	4b32      	ldr	r3, [pc, #200]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 8019704:	f240 4243 	movw	r2, #1091	; 0x443
 8019708:	4936      	ldr	r1, [pc, #216]	; (80197e4 <tcp_enqueue_flags+0x1d4>)
 801970a:	4832      	ldr	r0, [pc, #200]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 801970c:	f002 f8bc 	bl	801b888 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019714:	2b00      	cmp	r3, #0
 8019716:	d103      	bne.n	8019720 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	68fa      	ldr	r2, [r7, #12]
 801971c:	66da      	str	r2, [r3, #108]	; 0x6c
 801971e:	e00d      	b.n	801973c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019724:	61bb      	str	r3, [r7, #24]
 8019726:	e002      	b.n	801972e <tcp_enqueue_flags+0x11e>
 8019728:	69bb      	ldr	r3, [r7, #24]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	61bb      	str	r3, [r7, #24]
 801972e:	69bb      	ldr	r3, [r7, #24]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d1f8      	bne.n	8019728 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019736:	69bb      	ldr	r3, [r7, #24]
 8019738:	68fa      	ldr	r2, [r7, #12]
 801973a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2200      	movs	r2, #0
 8019740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019744:	78fb      	ldrb	r3, [r7, #3]
 8019746:	f003 0302 	and.w	r3, r3, #2
 801974a:	2b00      	cmp	r3, #0
 801974c:	d104      	bne.n	8019758 <tcp_enqueue_flags+0x148>
 801974e:	78fb      	ldrb	r3, [r7, #3]
 8019750:	f003 0301 	and.w	r3, r3, #1
 8019754:	2b00      	cmp	r3, #0
 8019756:	d004      	beq.n	8019762 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801975c:	1c5a      	adds	r2, r3, #1
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019762:	78fb      	ldrb	r3, [r7, #3]
 8019764:	f003 0301 	and.w	r3, r3, #1
 8019768:	2b00      	cmp	r3, #0
 801976a:	d006      	beq.n	801977a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	8b5b      	ldrh	r3, [r3, #26]
 8019770:	f043 0320 	orr.w	r3, r3, #32
 8019774:	b29a      	uxth	r2, r3
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	685b      	ldr	r3, [r3, #4]
 801977e:	4618      	mov	r0, r3
 8019780:	f7fb fb40 	bl	8014e04 <pbuf_clen>
 8019784:	4603      	mov	r3, r0
 8019786:	461a      	mov	r2, r3
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801978e:	4413      	add	r3, r2
 8019790:	b29a      	uxth	r2, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d00e      	beq.n	80197c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d10a      	bne.n	80197c0 <tcp_enqueue_flags+0x1b0>
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d106      	bne.n	80197c0 <tcp_enqueue_flags+0x1b0>
 80197b2:	4b06      	ldr	r3, [pc, #24]	; (80197cc <tcp_enqueue_flags+0x1bc>)
 80197b4:	f240 4265 	movw	r2, #1125	; 0x465
 80197b8:	490b      	ldr	r1, [pc, #44]	; (80197e8 <tcp_enqueue_flags+0x1d8>)
 80197ba:	4806      	ldr	r0, [pc, #24]	; (80197d4 <tcp_enqueue_flags+0x1c4>)
 80197bc:	f002 f864 	bl	801b888 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80197c0:	2300      	movs	r3, #0
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	3720      	adds	r7, #32
 80197c6:	46bd      	mov	sp, r7
 80197c8:	bd80      	pop	{r7, pc}
 80197ca:	bf00      	nop
 80197cc:	0801eae4 	.word	0x0801eae4
 80197d0:	0801ef44 	.word	0x0801ef44
 80197d4:	0801eb74 	.word	0x0801eb74
 80197d8:	0801ef9c 	.word	0x0801ef9c
 80197dc:	0801efbc 	.word	0x0801efbc
 80197e0:	0801eff8 	.word	0x0801eff8
 80197e4:	0801f010 	.word	0x0801f010
 80197e8:	0801f03c 	.word	0x0801f03c

080197ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80197ec:	b5b0      	push	{r4, r5, r7, lr}
 80197ee:	b08a      	sub	sp, #40	; 0x28
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d106      	bne.n	8019808 <tcp_output+0x1c>
 80197fa:	4b8a      	ldr	r3, [pc, #552]	; (8019a24 <tcp_output+0x238>)
 80197fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019800:	4989      	ldr	r1, [pc, #548]	; (8019a28 <tcp_output+0x23c>)
 8019802:	488a      	ldr	r0, [pc, #552]	; (8019a2c <tcp_output+0x240>)
 8019804:	f002 f840 	bl	801b888 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	7d1b      	ldrb	r3, [r3, #20]
 801980c:	2b01      	cmp	r3, #1
 801980e:	d106      	bne.n	801981e <tcp_output+0x32>
 8019810:	4b84      	ldr	r3, [pc, #528]	; (8019a24 <tcp_output+0x238>)
 8019812:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019816:	4986      	ldr	r1, [pc, #536]	; (8019a30 <tcp_output+0x244>)
 8019818:	4884      	ldr	r0, [pc, #528]	; (8019a2c <tcp_output+0x240>)
 801981a:	f002 f835 	bl	801b888 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801981e:	4b85      	ldr	r3, [pc, #532]	; (8019a34 <tcp_output+0x248>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	687a      	ldr	r2, [r7, #4]
 8019824:	429a      	cmp	r2, r3
 8019826:	d101      	bne.n	801982c <tcp_output+0x40>
    return ERR_OK;
 8019828:	2300      	movs	r3, #0
 801982a:	e1ce      	b.n	8019bca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019838:	4293      	cmp	r3, r2
 801983a:	bf28      	it	cs
 801983c:	4613      	movcs	r3, r2
 801983e:	b29b      	uxth	r3, r3
 8019840:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019846:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984a:	2b00      	cmp	r3, #0
 801984c:	d10b      	bne.n	8019866 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	8b5b      	ldrh	r3, [r3, #26]
 8019852:	f003 0302 	and.w	r3, r3, #2
 8019856:	2b00      	cmp	r3, #0
 8019858:	f000 81aa 	beq.w	8019bb0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801985c:	6878      	ldr	r0, [r7, #4]
 801985e:	f000 fdcb 	bl	801a3f8 <tcp_send_empty_ack>
 8019862:	4603      	mov	r3, r0
 8019864:	e1b1      	b.n	8019bca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019866:	6879      	ldr	r1, [r7, #4]
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	3304      	adds	r3, #4
 801986c:	461a      	mov	r2, r3
 801986e:	6878      	ldr	r0, [r7, #4]
 8019870:	f7ff fc7c 	bl	801916c <tcp_route>
 8019874:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d102      	bne.n	8019882 <tcp_output+0x96>
    return ERR_RTE;
 801987c:	f06f 0303 	mvn.w	r3, #3
 8019880:	e1a3      	b.n	8019bca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d003      	beq.n	8019890 <tcp_output+0xa4>
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d111      	bne.n	80198b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d002      	beq.n	801989c <tcp_output+0xb0>
 8019896:	697b      	ldr	r3, [r7, #20]
 8019898:	3304      	adds	r3, #4
 801989a:	e000      	b.n	801989e <tcp_output+0xb2>
 801989c:	2300      	movs	r3, #0
 801989e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80198a0:	693b      	ldr	r3, [r7, #16]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d102      	bne.n	80198ac <tcp_output+0xc0>
      return ERR_RTE;
 80198a6:	f06f 0303 	mvn.w	r3, #3
 80198aa:	e18e      	b.n	8019bca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80198ac:	693b      	ldr	r3, [r7, #16]
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80198b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b6:	68db      	ldr	r3, [r3, #12]
 80198b8:	685b      	ldr	r3, [r3, #4]
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7f5 fbd1 	bl	800f062 <lwip_htonl>
 80198c0:	4602      	mov	r2, r0
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198c6:	1ad3      	subs	r3, r2, r3
 80198c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ca:	8912      	ldrh	r2, [r2, #8]
 80198cc:	4413      	add	r3, r2
 80198ce:	69ba      	ldr	r2, [r7, #24]
 80198d0:	429a      	cmp	r2, r3
 80198d2:	d227      	bcs.n	8019924 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80198da:	461a      	mov	r2, r3
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	4293      	cmp	r3, r2
 80198e0:	d114      	bne.n	801990c <tcp_output+0x120>
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d110      	bne.n	801990c <tcp_output+0x120>
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10b      	bne.n	801990c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2200      	movs	r2, #0
 80198f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2201      	movs	r2, #1
 8019900:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2200      	movs	r2, #0
 8019908:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	8b5b      	ldrh	r3, [r3, #26]
 8019910:	f003 0302 	and.w	r3, r3, #2
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 814d 	beq.w	8019bb4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801991a:	6878      	ldr	r0, [r7, #4]
 801991c:	f000 fd6c 	bl	801a3f8 <tcp_send_empty_ack>
 8019920:	4603      	mov	r3, r0
 8019922:	e152      	b.n	8019bca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	2200      	movs	r2, #0
 8019928:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019930:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019932:	6a3b      	ldr	r3, [r7, #32]
 8019934:	2b00      	cmp	r3, #0
 8019936:	f000 811c 	beq.w	8019b72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801993a:	e002      	b.n	8019942 <tcp_output+0x156>
 801993c:	6a3b      	ldr	r3, [r7, #32]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	623b      	str	r3, [r7, #32]
 8019942:	6a3b      	ldr	r3, [r7, #32]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d1f8      	bne.n	801993c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801994a:	e112      	b.n	8019b72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801994e:	68db      	ldr	r3, [r3, #12]
 8019950:	899b      	ldrh	r3, [r3, #12]
 8019952:	b29b      	uxth	r3, r3
 8019954:	4618      	mov	r0, r3
 8019956:	f7f5 fb6f 	bl	800f038 <lwip_htons>
 801995a:	4603      	mov	r3, r0
 801995c:	b2db      	uxtb	r3, r3
 801995e:	f003 0304 	and.w	r3, r3, #4
 8019962:	2b00      	cmp	r3, #0
 8019964:	d006      	beq.n	8019974 <tcp_output+0x188>
 8019966:	4b2f      	ldr	r3, [pc, #188]	; (8019a24 <tcp_output+0x238>)
 8019968:	f240 5236 	movw	r2, #1334	; 0x536
 801996c:	4932      	ldr	r1, [pc, #200]	; (8019a38 <tcp_output+0x24c>)
 801996e:	482f      	ldr	r0, [pc, #188]	; (8019a2c <tcp_output+0x240>)
 8019970:	f001 ff8a 	bl	801b888 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019978:	2b00      	cmp	r3, #0
 801997a:	d01f      	beq.n	80199bc <tcp_output+0x1d0>
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	8b5b      	ldrh	r3, [r3, #26]
 8019980:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019984:	2b00      	cmp	r3, #0
 8019986:	d119      	bne.n	80199bc <tcp_output+0x1d0>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801998c:	2b00      	cmp	r3, #0
 801998e:	d00b      	beq.n	80199a8 <tcp_output+0x1bc>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d110      	bne.n	80199bc <tcp_output+0x1d0>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801999e:	891a      	ldrh	r2, [r3, #8]
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d209      	bcs.n	80199bc <tcp_output+0x1d0>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d004      	beq.n	80199bc <tcp_output+0x1d0>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199b8:	2b08      	cmp	r3, #8
 80199ba:	d901      	bls.n	80199c0 <tcp_output+0x1d4>
 80199bc:	2301      	movs	r3, #1
 80199be:	e000      	b.n	80199c2 <tcp_output+0x1d6>
 80199c0:	2300      	movs	r3, #0
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d106      	bne.n	80199d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	8b5b      	ldrh	r3, [r3, #26]
 80199ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	f000 80e4 	beq.w	8019b9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	7d1b      	ldrb	r3, [r3, #20]
 80199d8:	2b02      	cmp	r3, #2
 80199da:	d00d      	beq.n	80199f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80199dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199de:	68db      	ldr	r3, [r3, #12]
 80199e0:	899b      	ldrh	r3, [r3, #12]
 80199e2:	b29c      	uxth	r4, r3
 80199e4:	2010      	movs	r0, #16
 80199e6:	f7f5 fb27 	bl	800f038 <lwip_htons>
 80199ea:	4603      	mov	r3, r0
 80199ec:	461a      	mov	r2, r3
 80199ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	4322      	orrs	r2, r4
 80199f4:	b292      	uxth	r2, r2
 80199f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80199f8:	697a      	ldr	r2, [r7, #20]
 80199fa:	6879      	ldr	r1, [r7, #4]
 80199fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80199fe:	f000 f909 	bl	8019c14 <tcp_output_segment>
 8019a02:	4603      	mov	r3, r0
 8019a04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d016      	beq.n	8019a3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	8b5b      	ldrh	r3, [r3, #26]
 8019a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a16:	b29a      	uxth	r2, r3
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	835a      	strh	r2, [r3, #26]
      return err;
 8019a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a20:	e0d3      	b.n	8019bca <tcp_output+0x3de>
 8019a22:	bf00      	nop
 8019a24:	0801eae4 	.word	0x0801eae4
 8019a28:	0801f064 	.word	0x0801f064
 8019a2c:	0801eb74 	.word	0x0801eb74
 8019a30:	0801f07c 	.word	0x0801f07c
 8019a34:	2400c9c8 	.word	0x2400c9c8
 8019a38:	0801f0a4 	.word	0x0801f0a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a3e:	681a      	ldr	r2, [r3, #0]
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	7d1b      	ldrb	r3, [r3, #20]
 8019a48:	2b02      	cmp	r3, #2
 8019a4a:	d006      	beq.n	8019a5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	8b5b      	ldrh	r3, [r3, #26]
 8019a50:	f023 0303 	bic.w	r3, r3, #3
 8019a54:	b29a      	uxth	r2, r3
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5c:	68db      	ldr	r3, [r3, #12]
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7f5 fafe 	bl	800f062 <lwip_htonl>
 8019a66:	4604      	mov	r4, r0
 8019a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6a:	891b      	ldrh	r3, [r3, #8]
 8019a6c:	461d      	mov	r5, r3
 8019a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a70:	68db      	ldr	r3, [r3, #12]
 8019a72:	899b      	ldrh	r3, [r3, #12]
 8019a74:	b29b      	uxth	r3, r3
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7f5 fade 	bl	800f038 <lwip_htons>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	f003 0303 	and.w	r3, r3, #3
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d001      	beq.n	8019a8c <tcp_output+0x2a0>
 8019a88:	2301      	movs	r3, #1
 8019a8a:	e000      	b.n	8019a8e <tcp_output+0x2a2>
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	442b      	add	r3, r5
 8019a90:	4423      	add	r3, r4
 8019a92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	1ad3      	subs	r3, r2, r3
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	da02      	bge.n	8019aa6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	68ba      	ldr	r2, [r7, #8]
 8019aa4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa8:	891b      	ldrh	r3, [r3, #8]
 8019aaa:	461c      	mov	r4, r3
 8019aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aae:	68db      	ldr	r3, [r3, #12]
 8019ab0:	899b      	ldrh	r3, [r3, #12]
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7f5 fabf 	bl	800f038 <lwip_htons>
 8019aba:	4603      	mov	r3, r0
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	f003 0303 	and.w	r3, r3, #3
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d001      	beq.n	8019aca <tcp_output+0x2de>
 8019ac6:	2301      	movs	r3, #1
 8019ac8:	e000      	b.n	8019acc <tcp_output+0x2e0>
 8019aca:	2300      	movs	r3, #0
 8019acc:	4423      	add	r3, r4
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d049      	beq.n	8019b66 <tcp_output+0x37a>
      seg->next = NULL;
 8019ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d105      	bne.n	8019aec <tcp_output+0x300>
        pcb->unacked = seg;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ae4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae8:	623b      	str	r3, [r7, #32]
 8019aea:	e03f      	b.n	8019b6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	685b      	ldr	r3, [r3, #4]
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7f5 fab5 	bl	800f062 <lwip_htonl>
 8019af8:	4604      	mov	r4, r0
 8019afa:	6a3b      	ldr	r3, [r7, #32]
 8019afc:	68db      	ldr	r3, [r3, #12]
 8019afe:	685b      	ldr	r3, [r3, #4]
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7f5 faae 	bl	800f062 <lwip_htonl>
 8019b06:	4603      	mov	r3, r0
 8019b08:	1ae3      	subs	r3, r4, r3
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	da24      	bge.n	8019b58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	3370      	adds	r3, #112	; 0x70
 8019b12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019b14:	e002      	b.n	8019b1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019b16:	69fb      	ldr	r3, [r7, #28]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019b1c:	69fb      	ldr	r3, [r7, #28]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d011      	beq.n	8019b48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019b24:	69fb      	ldr	r3, [r7, #28]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	68db      	ldr	r3, [r3, #12]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f7f5 fa98 	bl	800f062 <lwip_htonl>
 8019b32:	4604      	mov	r4, r0
 8019b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b36:	68db      	ldr	r3, [r3, #12]
 8019b38:	685b      	ldr	r3, [r3, #4]
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7f5 fa91 	bl	800f062 <lwip_htonl>
 8019b40:	4603      	mov	r3, r0
 8019b42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	dbe6      	blt.n	8019b16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	681a      	ldr	r2, [r3, #0]
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019b50:	69fb      	ldr	r3, [r7, #28]
 8019b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b54:	601a      	str	r2, [r3, #0]
 8019b56:	e009      	b.n	8019b6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019b58:	6a3b      	ldr	r3, [r7, #32]
 8019b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019b5e:	6a3b      	ldr	r3, [r7, #32]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	623b      	str	r3, [r7, #32]
 8019b64:	e002      	b.n	8019b6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b68:	f7fc fc3f 	bl	80163ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d012      	beq.n	8019b9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b7a:	68db      	ldr	r3, [r3, #12]
 8019b7c:	685b      	ldr	r3, [r3, #4]
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7f5 fa6f 	bl	800f062 <lwip_htonl>
 8019b84:	4602      	mov	r2, r0
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b8a:	1ad3      	subs	r3, r2, r3
 8019b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b8e:	8912      	ldrh	r2, [r2, #8]
 8019b90:	4413      	add	r3, r2
  while (seg != NULL &&
 8019b92:	69ba      	ldr	r2, [r7, #24]
 8019b94:	429a      	cmp	r2, r3
 8019b96:	f4bf aed9 	bcs.w	801994c <tcp_output+0x160>
 8019b9a:	e000      	b.n	8019b9e <tcp_output+0x3b2>
      break;
 8019b9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d108      	bne.n	8019bb8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	2200      	movs	r2, #0
 8019baa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019bae:	e004      	b.n	8019bba <tcp_output+0x3ce>
    goto output_done;
 8019bb0:	bf00      	nop
 8019bb2:	e002      	b.n	8019bba <tcp_output+0x3ce>
    goto output_done;
 8019bb4:	bf00      	nop
 8019bb6:	e000      	b.n	8019bba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019bb8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	8b5b      	ldrh	r3, [r3, #26]
 8019bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019bc2:	b29a      	uxth	r2, r3
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019bc8:	2300      	movs	r3, #0
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	3728      	adds	r7, #40	; 0x28
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8019bd2:	bf00      	nop

08019bd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b082      	sub	sp, #8
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d106      	bne.n	8019bf0 <tcp_output_segment_busy+0x1c>
 8019be2:	4b09      	ldr	r3, [pc, #36]	; (8019c08 <tcp_output_segment_busy+0x34>)
 8019be4:	f240 529a 	movw	r2, #1434	; 0x59a
 8019be8:	4908      	ldr	r1, [pc, #32]	; (8019c0c <tcp_output_segment_busy+0x38>)
 8019bea:	4809      	ldr	r0, [pc, #36]	; (8019c10 <tcp_output_segment_busy+0x3c>)
 8019bec:	f001 fe4c 	bl	801b888 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	7b9b      	ldrb	r3, [r3, #14]
 8019bf6:	2b01      	cmp	r3, #1
 8019bf8:	d001      	beq.n	8019bfe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e000      	b.n	8019c00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019bfe:	2300      	movs	r3, #0
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	3708      	adds	r7, #8
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	0801eae4 	.word	0x0801eae4
 8019c0c:	0801f0bc 	.word	0x0801f0bc
 8019c10:	0801eb74 	.word	0x0801eb74

08019c14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019c14:	b5b0      	push	{r4, r5, r7, lr}
 8019c16:	b08c      	sub	sp, #48	; 0x30
 8019c18:	af04      	add	r7, sp, #16
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <tcp_output_segment+0x20>
 8019c26:	4b64      	ldr	r3, [pc, #400]	; (8019db8 <tcp_output_segment+0x1a4>)
 8019c28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019c2c:	4963      	ldr	r1, [pc, #396]	; (8019dbc <tcp_output_segment+0x1a8>)
 8019c2e:	4864      	ldr	r0, [pc, #400]	; (8019dc0 <tcp_output_segment+0x1ac>)
 8019c30:	f001 fe2a 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d106      	bne.n	8019c48 <tcp_output_segment+0x34>
 8019c3a:	4b5f      	ldr	r3, [pc, #380]	; (8019db8 <tcp_output_segment+0x1a4>)
 8019c3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019c40:	4960      	ldr	r1, [pc, #384]	; (8019dc4 <tcp_output_segment+0x1b0>)
 8019c42:	485f      	ldr	r0, [pc, #380]	; (8019dc0 <tcp_output_segment+0x1ac>)
 8019c44:	f001 fe20 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d106      	bne.n	8019c5c <tcp_output_segment+0x48>
 8019c4e:	4b5a      	ldr	r3, [pc, #360]	; (8019db8 <tcp_output_segment+0x1a4>)
 8019c50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8019c54:	495c      	ldr	r1, [pc, #368]	; (8019dc8 <tcp_output_segment+0x1b4>)
 8019c56:	485a      	ldr	r0, [pc, #360]	; (8019dc0 <tcp_output_segment+0x1ac>)
 8019c58:	f001 fe16 	bl	801b888 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019c5c:	68f8      	ldr	r0, [r7, #12]
 8019c5e:	f7ff ffb9 	bl	8019bd4 <tcp_output_segment_busy>
 8019c62:	4603      	mov	r3, r0
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d001      	beq.n	8019c6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	e0a1      	b.n	8019db0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	68dc      	ldr	r4, [r3, #12]
 8019c74:	4610      	mov	r0, r2
 8019c76:	f7f5 f9f4 	bl	800f062 <lwip_htonl>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	68dc      	ldr	r4, [r3, #12]
 8019c86:	4610      	mov	r0, r2
 8019c88:	f7f5 f9d6 	bl	800f038 <lwip_htons>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c94:	68ba      	ldr	r2, [r7, #8]
 8019c96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019c98:	441a      	add	r2, r3
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	68db      	ldr	r3, [r3, #12]
 8019ca2:	3314      	adds	r3, #20
 8019ca4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	7a9b      	ldrb	r3, [r3, #10]
 8019caa:	f003 0301 	and.w	r3, r3, #1
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d015      	beq.n	8019cde <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019cb2:	68bb      	ldr	r3, [r7, #8]
 8019cb4:	3304      	adds	r3, #4
 8019cb6:	461a      	mov	r2, r3
 8019cb8:	6879      	ldr	r1, [r7, #4]
 8019cba:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019cbe:	f7fc fe8b 	bl	80169d8 <tcp_eff_send_mss_netif>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019cc6:	8b7b      	ldrh	r3, [r7, #26]
 8019cc8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7f5 f9c8 	bl	800f062 <lwip_htonl>
 8019cd2:	4602      	mov	r2, r0
 8019cd4:	69fb      	ldr	r3, [r7, #28]
 8019cd6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019cd8:	69fb      	ldr	r3, [r7, #28]
 8019cda:	3304      	adds	r3, #4
 8019cdc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019cde:	68bb      	ldr	r3, [r7, #8]
 8019ce0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	da02      	bge.n	8019cee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	2200      	movs	r2, #0
 8019cec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8019cee:	68bb      	ldr	r3, [r7, #8]
 8019cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d10c      	bne.n	8019d10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019cf6:	4b35      	ldr	r3, [pc, #212]	; (8019dcc <tcp_output_segment+0x1b8>)
 8019cf8:	681a      	ldr	r2, [r3, #0]
 8019cfa:	68bb      	ldr	r3, [r7, #8]
 8019cfc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	68db      	ldr	r3, [r3, #12]
 8019d02:	685b      	ldr	r3, [r3, #4]
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7f5 f9ac 	bl	800f062 <lwip_htonl>
 8019d0a:	4602      	mov	r2, r0
 8019d0c:	68bb      	ldr	r3, [r7, #8]
 8019d0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	68da      	ldr	r2, [r3, #12]
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	685b      	ldr	r3, [r3, #4]
 8019d18:	685b      	ldr	r3, [r3, #4]
 8019d1a:	1ad3      	subs	r3, r2, r3
 8019d1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	685b      	ldr	r3, [r3, #4]
 8019d22:	8959      	ldrh	r1, [r3, #10]
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	685b      	ldr	r3, [r3, #4]
 8019d28:	8b3a      	ldrh	r2, [r7, #24]
 8019d2a:	1a8a      	subs	r2, r1, r2
 8019d2c:	b292      	uxth	r2, r2
 8019d2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	685b      	ldr	r3, [r3, #4]
 8019d34:	8919      	ldrh	r1, [r3, #8]
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	8b3a      	ldrh	r2, [r7, #24]
 8019d3c:	1a8a      	subs	r2, r1, r2
 8019d3e:	b292      	uxth	r2, r2
 8019d40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	685b      	ldr	r3, [r3, #4]
 8019d46:	68fa      	ldr	r2, [r7, #12]
 8019d48:	68d2      	ldr	r2, [r2, #12]
 8019d4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	68db      	ldr	r3, [r3, #12]
 8019d50:	2200      	movs	r2, #0
 8019d52:	741a      	strb	r2, [r3, #16]
 8019d54:	2200      	movs	r2, #0
 8019d56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	68da      	ldr	r2, [r3, #12]
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	7a9b      	ldrb	r3, [r3, #10]
 8019d60:	f003 0301 	and.w	r3, r3, #1
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d001      	beq.n	8019d6c <tcp_output_segment+0x158>
 8019d68:	2318      	movs	r3, #24
 8019d6a:	e000      	b.n	8019d6e <tcp_output_segment+0x15a>
 8019d6c:	2314      	movs	r3, #20
 8019d6e:	4413      	add	r3, r2
 8019d70:	69fa      	ldr	r2, [r7, #28]
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d006      	beq.n	8019d84 <tcp_output_segment+0x170>
 8019d76:	4b10      	ldr	r3, [pc, #64]	; (8019db8 <tcp_output_segment+0x1a4>)
 8019d78:	f240 621c 	movw	r2, #1564	; 0x61c
 8019d7c:	4914      	ldr	r1, [pc, #80]	; (8019dd0 <tcp_output_segment+0x1bc>)
 8019d7e:	4810      	ldr	r0, [pc, #64]	; (8019dc0 <tcp_output_segment+0x1ac>)
 8019d80:	f001 fd82 	bl	801b888 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6858      	ldr	r0, [r3, #4]
 8019d88:	68b9      	ldr	r1, [r7, #8]
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	1d1c      	adds	r4, r3, #4
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	7add      	ldrb	r5, [r3, #11]
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	7a9b      	ldrb	r3, [r3, #10]
 8019d96:	687a      	ldr	r2, [r7, #4]
 8019d98:	9202      	str	r2, [sp, #8]
 8019d9a:	2206      	movs	r2, #6
 8019d9c:	9201      	str	r2, [sp, #4]
 8019d9e:	9300      	str	r3, [sp, #0]
 8019da0:	462b      	mov	r3, r5
 8019da2:	4622      	mov	r2, r4
 8019da4:	f7f8 fc94 	bl	80126d0 <ip4_output_if>
 8019da8:	4603      	mov	r3, r0
 8019daa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019db0:	4618      	mov	r0, r3
 8019db2:	3720      	adds	r7, #32
 8019db4:	46bd      	mov	sp, r7
 8019db6:	bdb0      	pop	{r4, r5, r7, pc}
 8019db8:	0801eae4 	.word	0x0801eae4
 8019dbc:	0801f0e4 	.word	0x0801f0e4
 8019dc0:	0801eb74 	.word	0x0801eb74
 8019dc4:	0801f104 	.word	0x0801f104
 8019dc8:	0801f124 	.word	0x0801f124
 8019dcc:	2400c97c 	.word	0x2400c97c
 8019dd0:	0801f148 	.word	0x0801f148

08019dd4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019dd4:	b5b0      	push	{r4, r5, r7, lr}
 8019dd6:	b084      	sub	sp, #16
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d106      	bne.n	8019df0 <tcp_rexmit_rto_prepare+0x1c>
 8019de2:	4b31      	ldr	r3, [pc, #196]	; (8019ea8 <tcp_rexmit_rto_prepare+0xd4>)
 8019de4:	f240 6263 	movw	r2, #1635	; 0x663
 8019de8:	4930      	ldr	r1, [pc, #192]	; (8019eac <tcp_rexmit_rto_prepare+0xd8>)
 8019dea:	4831      	ldr	r0, [pc, #196]	; (8019eb0 <tcp_rexmit_rto_prepare+0xdc>)
 8019dec:	f001 fd4c 	bl	801b888 <iprintf>

  if (pcb->unacked == NULL) {
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d102      	bne.n	8019dfe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019df8:	f06f 0305 	mvn.w	r3, #5
 8019dfc:	e050      	b.n	8019ea0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e02:	60fb      	str	r3, [r7, #12]
 8019e04:	e00b      	b.n	8019e1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019e06:	68f8      	ldr	r0, [r7, #12]
 8019e08:	f7ff fee4 	bl	8019bd4 <tcp_output_segment_busy>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d002      	beq.n	8019e18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019e12:	f06f 0305 	mvn.w	r3, #5
 8019e16:	e043      	b.n	8019ea0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	60fb      	str	r3, [r7, #12]
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d1ef      	bne.n	8019e06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019e26:	68f8      	ldr	r0, [r7, #12]
 8019e28:	f7ff fed4 	bl	8019bd4 <tcp_output_segment_busy>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d002      	beq.n	8019e38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019e32:	f06f 0305 	mvn.w	r3, #5
 8019e36:	e033      	b.n	8019ea0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	8b5b      	ldrh	r3, [r3, #26]
 8019e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019e56:	b29a      	uxth	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	68db      	ldr	r3, [r3, #12]
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7f5 f8fd 	bl	800f062 <lwip_htonl>
 8019e68:	4604      	mov	r4, r0
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	891b      	ldrh	r3, [r3, #8]
 8019e6e:	461d      	mov	r5, r3
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	68db      	ldr	r3, [r3, #12]
 8019e74:	899b      	ldrh	r3, [r3, #12]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7f5 f8dd 	bl	800f038 <lwip_htons>
 8019e7e:	4603      	mov	r3, r0
 8019e80:	b2db      	uxtb	r3, r3
 8019e82:	f003 0303 	and.w	r3, r3, #3
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d001      	beq.n	8019e8e <tcp_rexmit_rto_prepare+0xba>
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	e000      	b.n	8019e90 <tcp_rexmit_rto_prepare+0xbc>
 8019e8e:	2300      	movs	r3, #0
 8019e90:	442b      	add	r3, r5
 8019e92:	18e2      	adds	r2, r4, r3
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019e9e:	2300      	movs	r3, #0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3710      	adds	r7, #16
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8019ea8:	0801eae4 	.word	0x0801eae4
 8019eac:	0801f15c 	.word	0x0801f15c
 8019eb0:	0801eb74 	.word	0x0801eb74

08019eb4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d106      	bne.n	8019ed0 <tcp_rexmit_rto_commit+0x1c>
 8019ec2:	4b0d      	ldr	r3, [pc, #52]	; (8019ef8 <tcp_rexmit_rto_commit+0x44>)
 8019ec4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019ec8:	490c      	ldr	r1, [pc, #48]	; (8019efc <tcp_rexmit_rto_commit+0x48>)
 8019eca:	480d      	ldr	r0, [pc, #52]	; (8019f00 <tcp_rexmit_rto_commit+0x4c>)
 8019ecc:	f001 fcdc 	bl	801b888 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ed6:	2bff      	cmp	r3, #255	; 0xff
 8019ed8:	d007      	beq.n	8019eea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	b2da      	uxtb	r2, r3
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019eea:	6878      	ldr	r0, [r7, #4]
 8019eec:	f7ff fc7e 	bl	80197ec <tcp_output>
}
 8019ef0:	bf00      	nop
 8019ef2:	3708      	adds	r7, #8
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}
 8019ef8:	0801eae4 	.word	0x0801eae4
 8019efc:	0801f180 	.word	0x0801f180
 8019f00:	0801eb74 	.word	0x0801eb74

08019f04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b082      	sub	sp, #8
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d106      	bne.n	8019f20 <tcp_rexmit_rto+0x1c>
 8019f12:	4b0a      	ldr	r3, [pc, #40]	; (8019f3c <tcp_rexmit_rto+0x38>)
 8019f14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8019f18:	4909      	ldr	r1, [pc, #36]	; (8019f40 <tcp_rexmit_rto+0x3c>)
 8019f1a:	480a      	ldr	r0, [pc, #40]	; (8019f44 <tcp_rexmit_rto+0x40>)
 8019f1c:	f001 fcb4 	bl	801b888 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	f7ff ff57 	bl	8019dd4 <tcp_rexmit_rto_prepare>
 8019f26:	4603      	mov	r3, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d102      	bne.n	8019f32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f7ff ffc1 	bl	8019eb4 <tcp_rexmit_rto_commit>
  }
}
 8019f32:	bf00      	nop
 8019f34:	3708      	adds	r7, #8
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	0801eae4 	.word	0x0801eae4
 8019f40:	0801f1a4 	.word	0x0801f1a4
 8019f44:	0801eb74 	.word	0x0801eb74

08019f48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019f48:	b590      	push	{r4, r7, lr}
 8019f4a:	b085      	sub	sp, #20
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d106      	bne.n	8019f64 <tcp_rexmit+0x1c>
 8019f56:	4b2f      	ldr	r3, [pc, #188]	; (801a014 <tcp_rexmit+0xcc>)
 8019f58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8019f5c:	492e      	ldr	r1, [pc, #184]	; (801a018 <tcp_rexmit+0xd0>)
 8019f5e:	482f      	ldr	r0, [pc, #188]	; (801a01c <tcp_rexmit+0xd4>)
 8019f60:	f001 fc92 	bl	801b888 <iprintf>

  if (pcb->unacked == NULL) {
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d102      	bne.n	8019f72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019f6c:	f06f 0305 	mvn.w	r3, #5
 8019f70:	e04c      	b.n	801a00c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019f78:	68b8      	ldr	r0, [r7, #8]
 8019f7a:	f7ff fe2b 	bl	8019bd4 <tcp_output_segment_busy>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d002      	beq.n	8019f8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019f84:	f06f 0305 	mvn.w	r3, #5
 8019f88:	e040      	b.n	801a00c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	681a      	ldr	r2, [r3, #0]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	336c      	adds	r3, #108	; 0x6c
 8019f96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019f98:	e002      	b.n	8019fa0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d011      	beq.n	8019fcc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	68db      	ldr	r3, [r3, #12]
 8019fae:	685b      	ldr	r3, [r3, #4]
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f5 f856 	bl	800f062 <lwip_htonl>
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7f5 f84f 	bl	800f062 <lwip_htonl>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	dbe6      	blt.n	8019f9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	681a      	ldr	r2, [r3, #0]
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	68ba      	ldr	r2, [r7, #8]
 8019fd8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d103      	bne.n	8019fea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ff0:	2bff      	cmp	r3, #255	; 0xff
 8019ff2:	d007      	beq.n	801a004 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	b2da      	uxtb	r2, r3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2200      	movs	r2, #0
 801a008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a00a:	2300      	movs	r3, #0
}
 801a00c:	4618      	mov	r0, r3
 801a00e:	3714      	adds	r7, #20
 801a010:	46bd      	mov	sp, r7
 801a012:	bd90      	pop	{r4, r7, pc}
 801a014:	0801eae4 	.word	0x0801eae4
 801a018:	0801f1c0 	.word	0x0801f1c0
 801a01c:	0801eb74 	.word	0x0801eb74

0801a020 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d106      	bne.n	801a03c <tcp_rexmit_fast+0x1c>
 801a02e:	4b2a      	ldr	r3, [pc, #168]	; (801a0d8 <tcp_rexmit_fast+0xb8>)
 801a030:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a034:	4929      	ldr	r1, [pc, #164]	; (801a0dc <tcp_rexmit_fast+0xbc>)
 801a036:	482a      	ldr	r0, [pc, #168]	; (801a0e0 <tcp_rexmit_fast+0xc0>)
 801a038:	f001 fc26 	bl	801b888 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a040:	2b00      	cmp	r3, #0
 801a042:	d045      	beq.n	801a0d0 <tcp_rexmit_fast+0xb0>
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	8b5b      	ldrh	r3, [r3, #26]
 801a048:	f003 0304 	and.w	r3, r3, #4
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d13f      	bne.n	801a0d0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	f7ff ff79 	bl	8019f48 <tcp_rexmit>
 801a056:	4603      	mov	r3, r0
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d139      	bne.n	801a0d0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a068:	4293      	cmp	r3, r2
 801a06a:	bf28      	it	cs
 801a06c:	4613      	movcs	r3, r2
 801a06e:	b29b      	uxth	r3, r3
 801a070:	2b00      	cmp	r3, #0
 801a072:	da00      	bge.n	801a076 <tcp_rexmit_fast+0x56>
 801a074:	3301      	adds	r3, #1
 801a076:	105b      	asrs	r3, r3, #1
 801a078:	b29a      	uxth	r2, r3
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a086:	461a      	mov	r2, r3
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a08c:	005b      	lsls	r3, r3, #1
 801a08e:	429a      	cmp	r2, r3
 801a090:	d206      	bcs.n	801a0a0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a096:	005b      	lsls	r3, r3, #1
 801a098:	b29a      	uxth	r2, r3
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0aa:	4619      	mov	r1, r3
 801a0ac:	0049      	lsls	r1, r1, #1
 801a0ae:	440b      	add	r3, r1
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	4413      	add	r3, r2
 801a0b4:	b29a      	uxth	r2, r3
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	8b5b      	ldrh	r3, [r3, #26]
 801a0c0:	f043 0304 	orr.w	r3, r3, #4
 801a0c4:	b29a      	uxth	r2, r3
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a0d0:	bf00      	nop
 801a0d2:	3708      	adds	r7, #8
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	bd80      	pop	{r7, pc}
 801a0d8:	0801eae4 	.word	0x0801eae4
 801a0dc:	0801f1d8 	.word	0x0801f1d8
 801a0e0:	0801eb74 	.word	0x0801eb74

0801a0e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b086      	sub	sp, #24
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	60f8      	str	r0, [r7, #12]
 801a0ec:	607b      	str	r3, [r7, #4]
 801a0ee:	460b      	mov	r3, r1
 801a0f0:	817b      	strh	r3, [r7, #10]
 801a0f2:	4613      	mov	r3, r2
 801a0f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a0f6:	897a      	ldrh	r2, [r7, #10]
 801a0f8:	893b      	ldrh	r3, [r7, #8]
 801a0fa:	4413      	add	r3, r2
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	3314      	adds	r3, #20
 801a100:	b29b      	uxth	r3, r3
 801a102:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a106:	4619      	mov	r1, r3
 801a108:	2022      	movs	r0, #34	; 0x22
 801a10a:	f7fa fb09 	bl	8014720 <pbuf_alloc>
 801a10e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a110:	697b      	ldr	r3, [r7, #20]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d04d      	beq.n	801a1b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a116:	897b      	ldrh	r3, [r7, #10]
 801a118:	3313      	adds	r3, #19
 801a11a:	697a      	ldr	r2, [r7, #20]
 801a11c:	8952      	ldrh	r2, [r2, #10]
 801a11e:	4293      	cmp	r3, r2
 801a120:	db06      	blt.n	801a130 <tcp_output_alloc_header_common+0x4c>
 801a122:	4b26      	ldr	r3, [pc, #152]	; (801a1bc <tcp_output_alloc_header_common+0xd8>)
 801a124:	f240 7223 	movw	r2, #1827	; 0x723
 801a128:	4925      	ldr	r1, [pc, #148]	; (801a1c0 <tcp_output_alloc_header_common+0xdc>)
 801a12a:	4826      	ldr	r0, [pc, #152]	; (801a1c4 <tcp_output_alloc_header_common+0xe0>)
 801a12c:	f001 fbac 	bl	801b888 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a136:	8c3b      	ldrh	r3, [r7, #32]
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f4 ff7d 	bl	800f038 <lwip_htons>
 801a13e:	4603      	mov	r3, r0
 801a140:	461a      	mov	r2, r3
 801a142:	693b      	ldr	r3, [r7, #16]
 801a144:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a148:	4618      	mov	r0, r3
 801a14a:	f7f4 ff75 	bl	800f038 <lwip_htons>
 801a14e:	4603      	mov	r3, r0
 801a150:	461a      	mov	r2, r3
 801a152:	693b      	ldr	r3, [r7, #16]
 801a154:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a156:	693b      	ldr	r3, [r7, #16]
 801a158:	687a      	ldr	r2, [r7, #4]
 801a15a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a15c:	68f8      	ldr	r0, [r7, #12]
 801a15e:	f7f4 ff80 	bl	800f062 <lwip_htonl>
 801a162:	4602      	mov	r2, r0
 801a164:	693b      	ldr	r3, [r7, #16]
 801a166:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a168:	897b      	ldrh	r3, [r7, #10]
 801a16a:	089b      	lsrs	r3, r3, #2
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	3305      	adds	r3, #5
 801a170:	b29b      	uxth	r3, r3
 801a172:	031b      	lsls	r3, r3, #12
 801a174:	b29a      	uxth	r2, r3
 801a176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	4313      	orrs	r3, r2
 801a17e:	b29b      	uxth	r3, r3
 801a180:	4618      	mov	r0, r3
 801a182:	f7f4 ff59 	bl	800f038 <lwip_htons>
 801a186:	4603      	mov	r3, r0
 801a188:	461a      	mov	r2, r3
 801a18a:	693b      	ldr	r3, [r7, #16]
 801a18c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a18e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a190:	4618      	mov	r0, r3
 801a192:	f7f4 ff51 	bl	800f038 <lwip_htons>
 801a196:	4603      	mov	r3, r0
 801a198:	461a      	mov	r2, r3
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a19e:	693b      	ldr	r3, [r7, #16]
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	741a      	strb	r2, [r3, #16]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a1a8:	693b      	ldr	r3, [r7, #16]
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	749a      	strb	r2, [r3, #18]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a1b2:	697b      	ldr	r3, [r7, #20]
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3718      	adds	r7, #24
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}
 801a1bc:	0801eae4 	.word	0x0801eae4
 801a1c0:	0801f1f8 	.word	0x0801f1f8
 801a1c4:	0801eb74 	.word	0x0801eb74

0801a1c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a1c8:	b5b0      	push	{r4, r5, r7, lr}
 801a1ca:	b08a      	sub	sp, #40	; 0x28
 801a1cc:	af04      	add	r7, sp, #16
 801a1ce:	60f8      	str	r0, [r7, #12]
 801a1d0:	607b      	str	r3, [r7, #4]
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	817b      	strh	r3, [r7, #10]
 801a1d6:	4613      	mov	r3, r2
 801a1d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d106      	bne.n	801a1ee <tcp_output_alloc_header+0x26>
 801a1e0:	4b15      	ldr	r3, [pc, #84]	; (801a238 <tcp_output_alloc_header+0x70>)
 801a1e2:	f240 7242 	movw	r2, #1858	; 0x742
 801a1e6:	4915      	ldr	r1, [pc, #84]	; (801a23c <tcp_output_alloc_header+0x74>)
 801a1e8:	4815      	ldr	r0, [pc, #84]	; (801a240 <tcp_output_alloc_header+0x78>)
 801a1ea:	f001 fb4d 	bl	801b888 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	8adb      	ldrh	r3, [r3, #22]
 801a1f6:	68fa      	ldr	r2, [r7, #12]
 801a1f8:	8b12      	ldrh	r2, [r2, #24]
 801a1fa:	68f9      	ldr	r1, [r7, #12]
 801a1fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a1fe:	893d      	ldrh	r5, [r7, #8]
 801a200:	897c      	ldrh	r4, [r7, #10]
 801a202:	9103      	str	r1, [sp, #12]
 801a204:	2110      	movs	r1, #16
 801a206:	9102      	str	r1, [sp, #8]
 801a208:	9201      	str	r2, [sp, #4]
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	462a      	mov	r2, r5
 801a210:	4621      	mov	r1, r4
 801a212:	f7ff ff67 	bl	801a0e4 <tcp_output_alloc_header_common>
 801a216:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d006      	beq.n	801a22c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a222:	68fa      	ldr	r2, [r7, #12]
 801a224:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a226:	441a      	add	r2, r3
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a22c:	697b      	ldr	r3, [r7, #20]
}
 801a22e:	4618      	mov	r0, r3
 801a230:	3718      	adds	r7, #24
 801a232:	46bd      	mov	sp, r7
 801a234:	bdb0      	pop	{r4, r5, r7, pc}
 801a236:	bf00      	nop
 801a238:	0801eae4 	.word	0x0801eae4
 801a23c:	0801f228 	.word	0x0801f228
 801a240:	0801eb74 	.word	0x0801eb74

0801a244 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b088      	sub	sp, #32
 801a248:	af00      	add	r7, sp, #0
 801a24a:	60f8      	str	r0, [r7, #12]
 801a24c:	60b9      	str	r1, [r7, #8]
 801a24e:	4611      	mov	r1, r2
 801a250:	461a      	mov	r2, r3
 801a252:	460b      	mov	r3, r1
 801a254:	71fb      	strb	r3, [r7, #7]
 801a256:	4613      	mov	r3, r2
 801a258:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a25a:	2300      	movs	r3, #0
 801a25c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d106      	bne.n	801a272 <tcp_output_fill_options+0x2e>
 801a264:	4b12      	ldr	r3, [pc, #72]	; (801a2b0 <tcp_output_fill_options+0x6c>)
 801a266:	f240 7256 	movw	r2, #1878	; 0x756
 801a26a:	4912      	ldr	r1, [pc, #72]	; (801a2b4 <tcp_output_fill_options+0x70>)
 801a26c:	4812      	ldr	r0, [pc, #72]	; (801a2b8 <tcp_output_fill_options+0x74>)
 801a26e:	f001 fb0b 	bl	801b888 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	685b      	ldr	r3, [r3, #4]
 801a276:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a278:	69bb      	ldr	r3, [r7, #24]
 801a27a:	3314      	adds	r3, #20
 801a27c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a27e:	8bfb      	ldrh	r3, [r7, #30]
 801a280:	009b      	lsls	r3, r3, #2
 801a282:	461a      	mov	r2, r3
 801a284:	79fb      	ldrb	r3, [r7, #7]
 801a286:	009b      	lsls	r3, r3, #2
 801a288:	f003 0304 	and.w	r3, r3, #4
 801a28c:	4413      	add	r3, r2
 801a28e:	3314      	adds	r3, #20
 801a290:	69ba      	ldr	r2, [r7, #24]
 801a292:	4413      	add	r3, r2
 801a294:	697a      	ldr	r2, [r7, #20]
 801a296:	429a      	cmp	r2, r3
 801a298:	d006      	beq.n	801a2a8 <tcp_output_fill_options+0x64>
 801a29a:	4b05      	ldr	r3, [pc, #20]	; (801a2b0 <tcp_output_fill_options+0x6c>)
 801a29c:	f240 7275 	movw	r2, #1909	; 0x775
 801a2a0:	4906      	ldr	r1, [pc, #24]	; (801a2bc <tcp_output_fill_options+0x78>)
 801a2a2:	4805      	ldr	r0, [pc, #20]	; (801a2b8 <tcp_output_fill_options+0x74>)
 801a2a4:	f001 faf0 	bl	801b888 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a2a8:	bf00      	nop
 801a2aa:	3720      	adds	r7, #32
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	0801eae4 	.word	0x0801eae4
 801a2b4:	0801f250 	.word	0x0801f250
 801a2b8:	0801eb74 	.word	0x0801eb74
 801a2bc:	0801f148 	.word	0x0801f148

0801a2c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b08a      	sub	sp, #40	; 0x28
 801a2c4:	af04      	add	r7, sp, #16
 801a2c6:	60f8      	str	r0, [r7, #12]
 801a2c8:	60b9      	str	r1, [r7, #8]
 801a2ca:	607a      	str	r2, [r7, #4]
 801a2cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a2ce:	68bb      	ldr	r3, [r7, #8]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d106      	bne.n	801a2e2 <tcp_output_control_segment+0x22>
 801a2d4:	4b1c      	ldr	r3, [pc, #112]	; (801a348 <tcp_output_control_segment+0x88>)
 801a2d6:	f240 7287 	movw	r2, #1927	; 0x787
 801a2da:	491c      	ldr	r1, [pc, #112]	; (801a34c <tcp_output_control_segment+0x8c>)
 801a2dc:	481c      	ldr	r0, [pc, #112]	; (801a350 <tcp_output_control_segment+0x90>)
 801a2de:	f001 fad3 	bl	801b888 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a2e2:	683a      	ldr	r2, [r7, #0]
 801a2e4:	6879      	ldr	r1, [r7, #4]
 801a2e6:	68f8      	ldr	r0, [r7, #12]
 801a2e8:	f7fe ff40 	bl	801916c <tcp_route>
 801a2ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d102      	bne.n	801a2fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a2f4:	23fc      	movs	r3, #252	; 0xfc
 801a2f6:	75fb      	strb	r3, [r7, #23]
 801a2f8:	e01c      	b.n	801a334 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d006      	beq.n	801a30e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	7adb      	ldrb	r3, [r3, #11]
 801a304:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	7a9b      	ldrb	r3, [r3, #10]
 801a30a:	757b      	strb	r3, [r7, #21]
 801a30c:	e003      	b.n	801a316 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a30e:	23ff      	movs	r3, #255	; 0xff
 801a310:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a312:	2300      	movs	r3, #0
 801a314:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a316:	7dba      	ldrb	r2, [r7, #22]
 801a318:	693b      	ldr	r3, [r7, #16]
 801a31a:	9302      	str	r3, [sp, #8]
 801a31c:	2306      	movs	r3, #6
 801a31e:	9301      	str	r3, [sp, #4]
 801a320:	7d7b      	ldrb	r3, [r7, #21]
 801a322:	9300      	str	r3, [sp, #0]
 801a324:	4613      	mov	r3, r2
 801a326:	683a      	ldr	r2, [r7, #0]
 801a328:	6879      	ldr	r1, [r7, #4]
 801a32a:	68b8      	ldr	r0, [r7, #8]
 801a32c:	f7f8 f9d0 	bl	80126d0 <ip4_output_if>
 801a330:	4603      	mov	r3, r0
 801a332:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a334:	68b8      	ldr	r0, [r7, #8]
 801a336:	f7fa fcd7 	bl	8014ce8 <pbuf_free>
  return err;
 801a33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a33e:	4618      	mov	r0, r3
 801a340:	3718      	adds	r7, #24
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}
 801a346:	bf00      	nop
 801a348:	0801eae4 	.word	0x0801eae4
 801a34c:	0801f278 	.word	0x0801f278
 801a350:	0801eb74 	.word	0x0801eb74

0801a354 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a354:	b590      	push	{r4, r7, lr}
 801a356:	b08b      	sub	sp, #44	; 0x2c
 801a358:	af04      	add	r7, sp, #16
 801a35a:	60f8      	str	r0, [r7, #12]
 801a35c:	60b9      	str	r1, [r7, #8]
 801a35e:	607a      	str	r2, [r7, #4]
 801a360:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d106      	bne.n	801a376 <tcp_rst+0x22>
 801a368:	4b1f      	ldr	r3, [pc, #124]	; (801a3e8 <tcp_rst+0x94>)
 801a36a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a36e:	491f      	ldr	r1, [pc, #124]	; (801a3ec <tcp_rst+0x98>)
 801a370:	481f      	ldr	r0, [pc, #124]	; (801a3f0 <tcp_rst+0x9c>)
 801a372:	f001 fa89 	bl	801b888 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d106      	bne.n	801a38a <tcp_rst+0x36>
 801a37c:	4b1a      	ldr	r3, [pc, #104]	; (801a3e8 <tcp_rst+0x94>)
 801a37e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a382:	491c      	ldr	r1, [pc, #112]	; (801a3f4 <tcp_rst+0xa0>)
 801a384:	481a      	ldr	r0, [pc, #104]	; (801a3f0 <tcp_rst+0x9c>)
 801a386:	f001 fa7f 	bl	801b888 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a38a:	2300      	movs	r3, #0
 801a38c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a38e:	f246 0308 	movw	r3, #24584	; 0x6008
 801a392:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a394:	7dfb      	ldrb	r3, [r7, #23]
 801a396:	b29c      	uxth	r4, r3
 801a398:	68b8      	ldr	r0, [r7, #8]
 801a39a:	f7f4 fe62 	bl	800f062 <lwip_htonl>
 801a39e:	4602      	mov	r2, r0
 801a3a0:	8abb      	ldrh	r3, [r7, #20]
 801a3a2:	9303      	str	r3, [sp, #12]
 801a3a4:	2314      	movs	r3, #20
 801a3a6:	9302      	str	r3, [sp, #8]
 801a3a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a3aa:	9301      	str	r3, [sp, #4]
 801a3ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a3ae:	9300      	str	r3, [sp, #0]
 801a3b0:	4613      	mov	r3, r2
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	4621      	mov	r1, r4
 801a3b6:	6878      	ldr	r0, [r7, #4]
 801a3b8:	f7ff fe94 	bl	801a0e4 <tcp_output_alloc_header_common>
 801a3bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a3be:	693b      	ldr	r3, [r7, #16]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d00c      	beq.n	801a3de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a3c4:	7dfb      	ldrb	r3, [r7, #23]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	6939      	ldr	r1, [r7, #16]
 801a3ca:	68f8      	ldr	r0, [r7, #12]
 801a3cc:	f7ff ff3a 	bl	801a244 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d2:	683a      	ldr	r2, [r7, #0]
 801a3d4:	6939      	ldr	r1, [r7, #16]
 801a3d6:	68f8      	ldr	r0, [r7, #12]
 801a3d8:	f7ff ff72 	bl	801a2c0 <tcp_output_control_segment>
 801a3dc:	e000      	b.n	801a3e0 <tcp_rst+0x8c>
    return;
 801a3de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a3e0:	371c      	adds	r7, #28
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd90      	pop	{r4, r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	0801eae4 	.word	0x0801eae4
 801a3ec:	0801f2a4 	.word	0x0801f2a4
 801a3f0:	0801eb74 	.word	0x0801eb74
 801a3f4:	0801f2c0 	.word	0x0801f2c0

0801a3f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a3f8:	b590      	push	{r4, r7, lr}
 801a3fa:	b087      	sub	sp, #28
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a400:	2300      	movs	r3, #0
 801a402:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a404:	2300      	movs	r3, #0
 801a406:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d106      	bne.n	801a41c <tcp_send_empty_ack+0x24>
 801a40e:	4b28      	ldr	r3, [pc, #160]	; (801a4b0 <tcp_send_empty_ack+0xb8>)
 801a410:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a414:	4927      	ldr	r1, [pc, #156]	; (801a4b4 <tcp_send_empty_ack+0xbc>)
 801a416:	4828      	ldr	r0, [pc, #160]	; (801a4b8 <tcp_send_empty_ack+0xc0>)
 801a418:	f001 fa36 	bl	801b888 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a41c:	7dfb      	ldrb	r3, [r7, #23]
 801a41e:	009b      	lsls	r3, r3, #2
 801a420:	b2db      	uxtb	r3, r3
 801a422:	f003 0304 	and.w	r3, r3, #4
 801a426:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a428:	7d7b      	ldrb	r3, [r7, #21]
 801a42a:	b29c      	uxth	r4, r3
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a430:	4618      	mov	r0, r3
 801a432:	f7f4 fe16 	bl	800f062 <lwip_htonl>
 801a436:	4603      	mov	r3, r0
 801a438:	2200      	movs	r2, #0
 801a43a:	4621      	mov	r1, r4
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	f7ff fec3 	bl	801a1c8 <tcp_output_alloc_header>
 801a442:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a444:	693b      	ldr	r3, [r7, #16]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d109      	bne.n	801a45e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	8b5b      	ldrh	r3, [r3, #26]
 801a44e:	f043 0303 	orr.w	r3, r3, #3
 801a452:	b29a      	uxth	r2, r3
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a458:	f06f 0301 	mvn.w	r3, #1
 801a45c:	e023      	b.n	801a4a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a45e:	7dbb      	ldrb	r3, [r7, #22]
 801a460:	7dfa      	ldrb	r2, [r7, #23]
 801a462:	6939      	ldr	r1, [r7, #16]
 801a464:	6878      	ldr	r0, [r7, #4]
 801a466:	f7ff feed 	bl	801a244 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	3304      	adds	r3, #4
 801a470:	6939      	ldr	r1, [r7, #16]
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7ff ff24 	bl	801a2c0 <tcp_output_control_segment>
 801a478:	4603      	mov	r3, r0
 801a47a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d007      	beq.n	801a494 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	8b5b      	ldrh	r3, [r3, #26]
 801a488:	f043 0303 	orr.w	r3, r3, #3
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	835a      	strh	r2, [r3, #26]
 801a492:	e006      	b.n	801a4a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	8b5b      	ldrh	r3, [r3, #26]
 801a498:	f023 0303 	bic.w	r3, r3, #3
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	371c      	adds	r7, #28
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd90      	pop	{r4, r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	0801eae4 	.word	0x0801eae4
 801a4b4:	0801f2dc 	.word	0x0801f2dc
 801a4b8:	0801eb74 	.word	0x0801eb74

0801a4bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a4bc:	b590      	push	{r4, r7, lr}
 801a4be:	b087      	sub	sp, #28
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d106      	bne.n	801a4dc <tcp_keepalive+0x20>
 801a4ce:	4b18      	ldr	r3, [pc, #96]	; (801a530 <tcp_keepalive+0x74>)
 801a4d0:	f640 0224 	movw	r2, #2084	; 0x824
 801a4d4:	4917      	ldr	r1, [pc, #92]	; (801a534 <tcp_keepalive+0x78>)
 801a4d6:	4818      	ldr	r0, [pc, #96]	; (801a538 <tcp_keepalive+0x7c>)
 801a4d8:	f001 f9d6 	bl	801b888 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a4dc:	7dfb      	ldrb	r3, [r7, #23]
 801a4de:	b29c      	uxth	r4, r3
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a4e4:	3b01      	subs	r3, #1
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	f7f4 fdbb 	bl	800f062 <lwip_htonl>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	4621      	mov	r1, r4
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f7ff fe68 	bl	801a1c8 <tcp_output_alloc_header>
 801a4f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a4fa:	693b      	ldr	r3, [r7, #16]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d102      	bne.n	801a506 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a500:	f04f 33ff 	mov.w	r3, #4294967295
 801a504:	e010      	b.n	801a528 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a506:	7dfb      	ldrb	r3, [r7, #23]
 801a508:	2200      	movs	r2, #0
 801a50a:	6939      	ldr	r1, [r7, #16]
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	f7ff fe99 	bl	801a244 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a512:	687a      	ldr	r2, [r7, #4]
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	3304      	adds	r3, #4
 801a518:	6939      	ldr	r1, [r7, #16]
 801a51a:	6878      	ldr	r0, [r7, #4]
 801a51c:	f7ff fed0 	bl	801a2c0 <tcp_output_control_segment>
 801a520:	4603      	mov	r3, r0
 801a522:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a528:	4618      	mov	r0, r3
 801a52a:	371c      	adds	r7, #28
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd90      	pop	{r4, r7, pc}
 801a530:	0801eae4 	.word	0x0801eae4
 801a534:	0801f2fc 	.word	0x0801f2fc
 801a538:	0801eb74 	.word	0x0801eb74

0801a53c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a53c:	b590      	push	{r4, r7, lr}
 801a53e:	b08b      	sub	sp, #44	; 0x2c
 801a540:	af00      	add	r7, sp, #0
 801a542:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a544:	2300      	movs	r3, #0
 801a546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d106      	bne.n	801a55e <tcp_zero_window_probe+0x22>
 801a550:	4b4c      	ldr	r3, [pc, #304]	; (801a684 <tcp_zero_window_probe+0x148>)
 801a552:	f640 024f 	movw	r2, #2127	; 0x84f
 801a556:	494c      	ldr	r1, [pc, #304]	; (801a688 <tcp_zero_window_probe+0x14c>)
 801a558:	484c      	ldr	r0, [pc, #304]	; (801a68c <tcp_zero_window_probe+0x150>)
 801a55a:	f001 f995 	bl	801b888 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a562:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a564:	6a3b      	ldr	r3, [r7, #32]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d101      	bne.n	801a56e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a56a:	2300      	movs	r3, #0
 801a56c:	e086      	b.n	801a67c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a574:	2bff      	cmp	r3, #255	; 0xff
 801a576:	d007      	beq.n	801a588 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a57e:	3301      	adds	r3, #1
 801a580:	b2da      	uxtb	r2, r3
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a588:	6a3b      	ldr	r3, [r7, #32]
 801a58a:	68db      	ldr	r3, [r3, #12]
 801a58c:	899b      	ldrh	r3, [r3, #12]
 801a58e:	b29b      	uxth	r3, r3
 801a590:	4618      	mov	r0, r3
 801a592:	f7f4 fd51 	bl	800f038 <lwip_htons>
 801a596:	4603      	mov	r3, r0
 801a598:	b2db      	uxtb	r3, r3
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d005      	beq.n	801a5ae <tcp_zero_window_probe+0x72>
 801a5a2:	6a3b      	ldr	r3, [r7, #32]
 801a5a4:	891b      	ldrh	r3, [r3, #8]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d101      	bne.n	801a5ae <tcp_zero_window_probe+0x72>
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	e000      	b.n	801a5b0 <tcp_zero_window_probe+0x74>
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a5b2:	7ffb      	ldrb	r3, [r7, #31]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	bf0c      	ite	eq
 801a5b8:	2301      	moveq	r3, #1
 801a5ba:	2300      	movne	r3, #0
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5c4:	b299      	uxth	r1, r3
 801a5c6:	6a3b      	ldr	r3, [r7, #32]
 801a5c8:	68db      	ldr	r3, [r3, #12]
 801a5ca:	685b      	ldr	r3, [r3, #4]
 801a5cc:	8bba      	ldrh	r2, [r7, #28]
 801a5ce:	6878      	ldr	r0, [r7, #4]
 801a5d0:	f7ff fdfa 	bl	801a1c8 <tcp_output_alloc_header>
 801a5d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a5d6:	69bb      	ldr	r3, [r7, #24]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d102      	bne.n	801a5e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a5dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e0:	e04c      	b.n	801a67c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a5e2:	69bb      	ldr	r3, [r7, #24]
 801a5e4:	685b      	ldr	r3, [r3, #4]
 801a5e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a5e8:	7ffb      	ldrb	r3, [r7, #31]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d011      	beq.n	801a612 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a5ee:	697b      	ldr	r3, [r7, #20]
 801a5f0:	899b      	ldrh	r3, [r3, #12]
 801a5f2:	b29b      	uxth	r3, r3
 801a5f4:	b21b      	sxth	r3, r3
 801a5f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a5fa:	b21c      	sxth	r4, r3
 801a5fc:	2011      	movs	r0, #17
 801a5fe:	f7f4 fd1b 	bl	800f038 <lwip_htons>
 801a602:	4603      	mov	r3, r0
 801a604:	b21b      	sxth	r3, r3
 801a606:	4323      	orrs	r3, r4
 801a608:	b21b      	sxth	r3, r3
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	697b      	ldr	r3, [r7, #20]
 801a60e:	819a      	strh	r2, [r3, #12]
 801a610:	e010      	b.n	801a634 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a612:	69bb      	ldr	r3, [r7, #24]
 801a614:	685b      	ldr	r3, [r3, #4]
 801a616:	3314      	adds	r3, #20
 801a618:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a61a:	6a3b      	ldr	r3, [r7, #32]
 801a61c:	6858      	ldr	r0, [r3, #4]
 801a61e:	6a3b      	ldr	r3, [r7, #32]
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	891a      	ldrh	r2, [r3, #8]
 801a624:	6a3b      	ldr	r3, [r7, #32]
 801a626:	891b      	ldrh	r3, [r3, #8]
 801a628:	1ad3      	subs	r3, r2, r3
 801a62a:	b29b      	uxth	r3, r3
 801a62c:	2201      	movs	r2, #1
 801a62e:	6939      	ldr	r1, [r7, #16]
 801a630:	f7fa fd60 	bl	80150f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a634:	6a3b      	ldr	r3, [r7, #32]
 801a636:	68db      	ldr	r3, [r3, #12]
 801a638:	685b      	ldr	r3, [r3, #4]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f4 fd11 	bl	800f062 <lwip_htonl>
 801a640:	4603      	mov	r3, r0
 801a642:	3301      	adds	r3, #1
 801a644:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	1ad3      	subs	r3, r2, r3
 801a64e:	2b00      	cmp	r3, #0
 801a650:	da02      	bge.n	801a658 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	68fa      	ldr	r2, [r7, #12]
 801a656:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a65c:	2200      	movs	r2, #0
 801a65e:	69b9      	ldr	r1, [r7, #24]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff fdef 	bl	801a244 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	3304      	adds	r3, #4
 801a66c:	69b9      	ldr	r1, [r7, #24]
 801a66e:	6878      	ldr	r0, [r7, #4]
 801a670:	f7ff fe26 	bl	801a2c0 <tcp_output_control_segment>
 801a674:	4603      	mov	r3, r0
 801a676:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a678:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	372c      	adds	r7, #44	; 0x2c
 801a680:	46bd      	mov	sp, r7
 801a682:	bd90      	pop	{r4, r7, pc}
 801a684:	0801eae4 	.word	0x0801eae4
 801a688:	0801f318 	.word	0x0801f318
 801a68c:	0801eb74 	.word	0x0801eb74

0801a690 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
 801a698:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801a69a:	f000 fb01 	bl	801aca0 <sys_timeouts_sleeptime>
 801a69e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6a6:	d10b      	bne.n	801a6c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801a6a8:	4813      	ldr	r0, [pc, #76]	; (801a6f8 <tcpip_timeouts_mbox_fetch+0x68>)
 801a6aa:	f7fa fe6e 	bl	801538a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	6839      	ldr	r1, [r7, #0]
 801a6b2:	6878      	ldr	r0, [r7, #4]
 801a6b4:	f7fa fdf6 	bl	80152a4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801a6b8:	480f      	ldr	r0, [pc, #60]	; (801a6f8 <tcpip_timeouts_mbox_fetch+0x68>)
 801a6ba:	f7fa fe57 	bl	801536c <sys_mutex_lock>
    return;
 801a6be:	e018      	b.n	801a6f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d102      	bne.n	801a6cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801a6c6:	f000 fab1 	bl	801ac2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801a6ca:	e7e6      	b.n	801a69a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801a6cc:	480a      	ldr	r0, [pc, #40]	; (801a6f8 <tcpip_timeouts_mbox_fetch+0x68>)
 801a6ce:	f7fa fe5c 	bl	801538a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801a6d2:	68fa      	ldr	r2, [r7, #12]
 801a6d4:	6839      	ldr	r1, [r7, #0]
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	f7fa fde4 	bl	80152a4 <sys_arch_mbox_fetch>
 801a6dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801a6de:	4806      	ldr	r0, [pc, #24]	; (801a6f8 <tcpip_timeouts_mbox_fetch+0x68>)
 801a6e0:	f7fa fe44 	bl	801536c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6ea:	d102      	bne.n	801a6f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801a6ec:	f000 fa9e 	bl	801ac2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801a6f0:	e7d3      	b.n	801a69a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801a6f2:	3710      	adds	r7, #16
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}
 801a6f8:	2400c9d8 	.word	0x2400c9d8

0801a6fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801a704:	4810      	ldr	r0, [pc, #64]	; (801a748 <tcpip_thread+0x4c>)
 801a706:	f7fa fe31 	bl	801536c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801a70a:	4b10      	ldr	r3, [pc, #64]	; (801a74c <tcpip_thread+0x50>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d005      	beq.n	801a71e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801a712:	4b0e      	ldr	r3, [pc, #56]	; (801a74c <tcpip_thread+0x50>)
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	4a0e      	ldr	r2, [pc, #56]	; (801a750 <tcpip_thread+0x54>)
 801a718:	6812      	ldr	r2, [r2, #0]
 801a71a:	4610      	mov	r0, r2
 801a71c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801a71e:	f107 030c 	add.w	r3, r7, #12
 801a722:	4619      	mov	r1, r3
 801a724:	480b      	ldr	r0, [pc, #44]	; (801a754 <tcpip_thread+0x58>)
 801a726:	f7ff ffb3 	bl	801a690 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d106      	bne.n	801a73e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801a730:	4b09      	ldr	r3, [pc, #36]	; (801a758 <tcpip_thread+0x5c>)
 801a732:	2291      	movs	r2, #145	; 0x91
 801a734:	4909      	ldr	r1, [pc, #36]	; (801a75c <tcpip_thread+0x60>)
 801a736:	480a      	ldr	r0, [pc, #40]	; (801a760 <tcpip_thread+0x64>)
 801a738:	f001 f8a6 	bl	801b888 <iprintf>
      continue;
 801a73c:	e003      	b.n	801a746 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	4618      	mov	r0, r3
 801a742:	f000 f80f 	bl	801a764 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801a746:	e7ea      	b.n	801a71e <tcpip_thread+0x22>
 801a748:	2400c9d8 	.word	0x2400c9d8
 801a74c:	2400c9cc 	.word	0x2400c9cc
 801a750:	2400c9d0 	.word	0x2400c9d0
 801a754:	2400c9d4 	.word	0x2400c9d4
 801a758:	0801f33c 	.word	0x0801f33c
 801a75c:	0801f3a8 	.word	0x0801f3a8
 801a760:	0801f3c8 	.word	0x0801f3c8

0801a764 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b082      	sub	sp, #8
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	781b      	ldrb	r3, [r3, #0]
 801a770:	2b02      	cmp	r3, #2
 801a772:	d026      	beq.n	801a7c2 <tcpip_thread_handle_msg+0x5e>
 801a774:	2b02      	cmp	r3, #2
 801a776:	dc2b      	bgt.n	801a7d0 <tcpip_thread_handle_msg+0x6c>
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d002      	beq.n	801a782 <tcpip_thread_handle_msg+0x1e>
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d015      	beq.n	801a7ac <tcpip_thread_handle_msg+0x48>
 801a780:	e026      	b.n	801a7d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	68db      	ldr	r3, [r3, #12]
 801a786:	687a      	ldr	r2, [r7, #4]
 801a788:	6850      	ldr	r0, [r2, #4]
 801a78a:	687a      	ldr	r2, [r7, #4]
 801a78c:	6892      	ldr	r2, [r2, #8]
 801a78e:	4611      	mov	r1, r2
 801a790:	4798      	blx	r3
 801a792:	4603      	mov	r3, r0
 801a794:	2b00      	cmp	r3, #0
 801a796:	d004      	beq.n	801a7a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7fa faa3 	bl	8014ce8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801a7a2:	6879      	ldr	r1, [r7, #4]
 801a7a4:	2009      	movs	r0, #9
 801a7a6:	f7f9 fbef 	bl	8013f88 <memp_free>
      break;
 801a7aa:	e018      	b.n	801a7de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	685b      	ldr	r3, [r3, #4]
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	6892      	ldr	r2, [r2, #8]
 801a7b4:	4610      	mov	r0, r2
 801a7b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801a7b8:	6879      	ldr	r1, [r7, #4]
 801a7ba:	2008      	movs	r0, #8
 801a7bc:	f7f9 fbe4 	bl	8013f88 <memp_free>
      break;
 801a7c0:	e00d      	b.n	801a7de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	685b      	ldr	r3, [r3, #4]
 801a7c6:	687a      	ldr	r2, [r7, #4]
 801a7c8:	6892      	ldr	r2, [r2, #8]
 801a7ca:	4610      	mov	r0, r2
 801a7cc:	4798      	blx	r3
      break;
 801a7ce:	e006      	b.n	801a7de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801a7d0:	4b05      	ldr	r3, [pc, #20]	; (801a7e8 <tcpip_thread_handle_msg+0x84>)
 801a7d2:	22cf      	movs	r2, #207	; 0xcf
 801a7d4:	4905      	ldr	r1, [pc, #20]	; (801a7ec <tcpip_thread_handle_msg+0x88>)
 801a7d6:	4806      	ldr	r0, [pc, #24]	; (801a7f0 <tcpip_thread_handle_msg+0x8c>)
 801a7d8:	f001 f856 	bl	801b888 <iprintf>
      break;
 801a7dc:	bf00      	nop
  }
}
 801a7de:	bf00      	nop
 801a7e0:	3708      	adds	r7, #8
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	0801f33c 	.word	0x0801f33c
 801a7ec:	0801f3a8 	.word	0x0801f3a8
 801a7f0:	0801f3c8 	.word	0x0801f3c8

0801a7f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b086      	sub	sp, #24
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	60f8      	str	r0, [r7, #12]
 801a7fc:	60b9      	str	r1, [r7, #8]
 801a7fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801a800:	481a      	ldr	r0, [pc, #104]	; (801a86c <tcpip_inpkt+0x78>)
 801a802:	f7fa fd80 	bl	8015306 <sys_mbox_valid>
 801a806:	4603      	mov	r3, r0
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d105      	bne.n	801a818 <tcpip_inpkt+0x24>
 801a80c:	4b18      	ldr	r3, [pc, #96]	; (801a870 <tcpip_inpkt+0x7c>)
 801a80e:	22fc      	movs	r2, #252	; 0xfc
 801a810:	4918      	ldr	r1, [pc, #96]	; (801a874 <tcpip_inpkt+0x80>)
 801a812:	4819      	ldr	r0, [pc, #100]	; (801a878 <tcpip_inpkt+0x84>)
 801a814:	f001 f838 	bl	801b888 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801a818:	2009      	movs	r0, #9
 801a81a:	f7f9 fb3f 	bl	8013e9c <memp_malloc>
 801a81e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801a820:	697b      	ldr	r3, [r7, #20]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d102      	bne.n	801a82c <tcpip_inpkt+0x38>
    return ERR_MEM;
 801a826:	f04f 33ff 	mov.w	r3, #4294967295
 801a82a:	e01a      	b.n	801a862 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	2200      	movs	r2, #0
 801a830:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	68fa      	ldr	r2, [r7, #12]
 801a836:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801a838:	697b      	ldr	r3, [r7, #20]
 801a83a:	68ba      	ldr	r2, [r7, #8]
 801a83c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801a83e:	697b      	ldr	r3, [r7, #20]
 801a840:	687a      	ldr	r2, [r7, #4]
 801a842:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801a844:	6979      	ldr	r1, [r7, #20]
 801a846:	4809      	ldr	r0, [pc, #36]	; (801a86c <tcpip_inpkt+0x78>)
 801a848:	f7fa fd12 	bl	8015270 <sys_mbox_trypost>
 801a84c:	4603      	mov	r3, r0
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d006      	beq.n	801a860 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801a852:	6979      	ldr	r1, [r7, #20]
 801a854:	2009      	movs	r0, #9
 801a856:	f7f9 fb97 	bl	8013f88 <memp_free>
    return ERR_MEM;
 801a85a:	f04f 33ff 	mov.w	r3, #4294967295
 801a85e:	e000      	b.n	801a862 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801a860:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801a862:	4618      	mov	r0, r3
 801a864:	3718      	adds	r7, #24
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	2400c9d4 	.word	0x2400c9d4
 801a870:	0801f33c 	.word	0x0801f33c
 801a874:	0801f3f0 	.word	0x0801f3f0
 801a878:	0801f3c8 	.word	0x0801f3c8

0801a87c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b082      	sub	sp, #8
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
 801a884:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801a886:	683b      	ldr	r3, [r7, #0]
 801a888:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a88c:	f003 0318 	and.w	r3, r3, #24
 801a890:	2b00      	cmp	r3, #0
 801a892:	d006      	beq.n	801a8a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801a894:	4a08      	ldr	r2, [pc, #32]	; (801a8b8 <tcpip_input+0x3c>)
 801a896:	6839      	ldr	r1, [r7, #0]
 801a898:	6878      	ldr	r0, [r7, #4]
 801a89a:	f7ff ffab 	bl	801a7f4 <tcpip_inpkt>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	e005      	b.n	801a8ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801a8a2:	4a06      	ldr	r2, [pc, #24]	; (801a8bc <tcpip_input+0x40>)
 801a8a4:	6839      	ldr	r1, [r7, #0]
 801a8a6:	6878      	ldr	r0, [r7, #4]
 801a8a8:	f7ff ffa4 	bl	801a7f4 <tcpip_inpkt>
 801a8ac:	4603      	mov	r3, r0
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	08011c5d 	.word	0x08011c5d
 801a8bc:	0801244d 	.word	0x0801244d

0801a8c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b084      	sub	sp, #16
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
 801a8c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801a8ca:	4819      	ldr	r0, [pc, #100]	; (801a930 <tcpip_try_callback+0x70>)
 801a8cc:	f7fa fd1b 	bl	8015306 <sys_mbox_valid>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d106      	bne.n	801a8e4 <tcpip_try_callback+0x24>
 801a8d6:	4b17      	ldr	r3, [pc, #92]	; (801a934 <tcpip_try_callback+0x74>)
 801a8d8:	f240 125d 	movw	r2, #349	; 0x15d
 801a8dc:	4916      	ldr	r1, [pc, #88]	; (801a938 <tcpip_try_callback+0x78>)
 801a8de:	4817      	ldr	r0, [pc, #92]	; (801a93c <tcpip_try_callback+0x7c>)
 801a8e0:	f000 ffd2 	bl	801b888 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801a8e4:	2008      	movs	r0, #8
 801a8e6:	f7f9 fad9 	bl	8013e9c <memp_malloc>
 801a8ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d102      	bne.n	801a8f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801a8f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f6:	e017      	b.n	801a928 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	687a      	ldr	r2, [r7, #4]
 801a902:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	683a      	ldr	r2, [r7, #0]
 801a908:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801a90a:	68f9      	ldr	r1, [r7, #12]
 801a90c:	4808      	ldr	r0, [pc, #32]	; (801a930 <tcpip_try_callback+0x70>)
 801a90e:	f7fa fcaf 	bl	8015270 <sys_mbox_trypost>
 801a912:	4603      	mov	r3, r0
 801a914:	2b00      	cmp	r3, #0
 801a916:	d006      	beq.n	801a926 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801a918:	68f9      	ldr	r1, [r7, #12]
 801a91a:	2008      	movs	r0, #8
 801a91c:	f7f9 fb34 	bl	8013f88 <memp_free>
    return ERR_MEM;
 801a920:	f04f 33ff 	mov.w	r3, #4294967295
 801a924:	e000      	b.n	801a928 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801a926:	2300      	movs	r3, #0
}
 801a928:	4618      	mov	r0, r3
 801a92a:	3710      	adds	r7, #16
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bd80      	pop	{r7, pc}
 801a930:	2400c9d4 	.word	0x2400c9d4
 801a934:	0801f33c 	.word	0x0801f33c
 801a938:	0801f3f0 	.word	0x0801f3f0
 801a93c:	0801f3c8 	.word	0x0801f3c8

0801a940 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b084      	sub	sp, #16
 801a944:	af02      	add	r7, sp, #8
 801a946:	6078      	str	r0, [r7, #4]
 801a948:	6039      	str	r1, [r7, #0]
  lwip_init();
 801a94a:	f7f7 fccd 	bl	80122e8 <lwip_init>

  tcpip_init_done = initfunc;
 801a94e:	4a17      	ldr	r2, [pc, #92]	; (801a9ac <tcpip_init+0x6c>)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801a954:	4a16      	ldr	r2, [pc, #88]	; (801a9b0 <tcpip_init+0x70>)
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801a95a:	2106      	movs	r1, #6
 801a95c:	4815      	ldr	r0, [pc, #84]	; (801a9b4 <tcpip_init+0x74>)
 801a95e:	f7fa fc6d 	bl	801523c <sys_mbox_new>
 801a962:	4603      	mov	r3, r0
 801a964:	2b00      	cmp	r3, #0
 801a966:	d006      	beq.n	801a976 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801a968:	4b13      	ldr	r3, [pc, #76]	; (801a9b8 <tcpip_init+0x78>)
 801a96a:	f240 2261 	movw	r2, #609	; 0x261
 801a96e:	4913      	ldr	r1, [pc, #76]	; (801a9bc <tcpip_init+0x7c>)
 801a970:	4813      	ldr	r0, [pc, #76]	; (801a9c0 <tcpip_init+0x80>)
 801a972:	f000 ff89 	bl	801b888 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801a976:	4813      	ldr	r0, [pc, #76]	; (801a9c4 <tcpip_init+0x84>)
 801a978:	f7fa fce2 	bl	8015340 <sys_mutex_new>
 801a97c:	4603      	mov	r3, r0
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d006      	beq.n	801a990 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801a982:	4b0d      	ldr	r3, [pc, #52]	; (801a9b8 <tcpip_init+0x78>)
 801a984:	f240 2265 	movw	r2, #613	; 0x265
 801a988:	490f      	ldr	r1, [pc, #60]	; (801a9c8 <tcpip_init+0x88>)
 801a98a:	480d      	ldr	r0, [pc, #52]	; (801a9c0 <tcpip_init+0x80>)
 801a98c:	f000 ff7c 	bl	801b888 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801a990:	2318      	movs	r3, #24
 801a992:	9300      	str	r3, [sp, #0]
 801a994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a998:	2200      	movs	r2, #0
 801a99a:	490c      	ldr	r1, [pc, #48]	; (801a9cc <tcpip_init+0x8c>)
 801a99c:	480c      	ldr	r0, [pc, #48]	; (801a9d0 <tcpip_init+0x90>)
 801a99e:	f7fa fd01 	bl	80153a4 <sys_thread_new>
}
 801a9a2:	bf00      	nop
 801a9a4:	3708      	adds	r7, #8
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	2400c9cc 	.word	0x2400c9cc
 801a9b0:	2400c9d0 	.word	0x2400c9d0
 801a9b4:	2400c9d4 	.word	0x2400c9d4
 801a9b8:	0801f33c 	.word	0x0801f33c
 801a9bc:	0801f400 	.word	0x0801f400
 801a9c0:	0801f3c8 	.word	0x0801f3c8
 801a9c4:	2400c9d8 	.word	0x2400c9d8
 801a9c8:	0801f424 	.word	0x0801f424
 801a9cc:	0801a6fd 	.word	0x0801a6fd
 801a9d0:	0801f448 	.word	0x0801f448

0801a9d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a9dc:	f7fa fd6a 	bl	80154b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a9e0:	4b0a      	ldr	r3, [pc, #40]	; (801aa0c <tcpip_tcp_timer+0x38>)
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d103      	bne.n	801a9f0 <tcpip_tcp_timer+0x1c>
 801a9e8:	4b09      	ldr	r3, [pc, #36]	; (801aa10 <tcpip_tcp_timer+0x3c>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d005      	beq.n	801a9fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	4908      	ldr	r1, [pc, #32]	; (801aa14 <tcpip_tcp_timer+0x40>)
 801a9f4:	20fa      	movs	r0, #250	; 0xfa
 801a9f6:	f000 f8f3 	bl	801abe0 <sys_timeout>
 801a9fa:	e003      	b.n	801aa04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a9fc:	4b06      	ldr	r3, [pc, #24]	; (801aa18 <tcpip_tcp_timer+0x44>)
 801a9fe:	2200      	movs	r2, #0
 801aa00:	601a      	str	r2, [r3, #0]
  }
}
 801aa02:	bf00      	nop
 801aa04:	bf00      	nop
 801aa06:	3708      	adds	r7, #8
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd80      	pop	{r7, pc}
 801aa0c:	2400c988 	.word	0x2400c988
 801aa10:	2400c98c 	.word	0x2400c98c
 801aa14:	0801a9d5 	.word	0x0801a9d5
 801aa18:	2400c9e4 	.word	0x2400c9e4

0801aa1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801aa20:	4b0a      	ldr	r3, [pc, #40]	; (801aa4c <tcp_timer_needed+0x30>)
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d10f      	bne.n	801aa48 <tcp_timer_needed+0x2c>
 801aa28:	4b09      	ldr	r3, [pc, #36]	; (801aa50 <tcp_timer_needed+0x34>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d103      	bne.n	801aa38 <tcp_timer_needed+0x1c>
 801aa30:	4b08      	ldr	r3, [pc, #32]	; (801aa54 <tcp_timer_needed+0x38>)
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d007      	beq.n	801aa48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801aa38:	4b04      	ldr	r3, [pc, #16]	; (801aa4c <tcp_timer_needed+0x30>)
 801aa3a:	2201      	movs	r2, #1
 801aa3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aa3e:	2200      	movs	r2, #0
 801aa40:	4905      	ldr	r1, [pc, #20]	; (801aa58 <tcp_timer_needed+0x3c>)
 801aa42:	20fa      	movs	r0, #250	; 0xfa
 801aa44:	f000 f8cc 	bl	801abe0 <sys_timeout>
  }
}
 801aa48:	bf00      	nop
 801aa4a:	bd80      	pop	{r7, pc}
 801aa4c:	2400c9e4 	.word	0x2400c9e4
 801aa50:	2400c988 	.word	0x2400c988
 801aa54:	2400c98c 	.word	0x2400c98c
 801aa58:	0801a9d5 	.word	0x0801a9d5

0801aa5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b086      	sub	sp, #24
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	60f8      	str	r0, [r7, #12]
 801aa64:	60b9      	str	r1, [r7, #8]
 801aa66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801aa68:	200a      	movs	r0, #10
 801aa6a:	f7f9 fa17 	bl	8013e9c <memp_malloc>
 801aa6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801aa70:	693b      	ldr	r3, [r7, #16]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d109      	bne.n	801aa8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801aa76:	693b      	ldr	r3, [r7, #16]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d151      	bne.n	801ab20 <sys_timeout_abs+0xc4>
 801aa7c:	4b2a      	ldr	r3, [pc, #168]	; (801ab28 <sys_timeout_abs+0xcc>)
 801aa7e:	22be      	movs	r2, #190	; 0xbe
 801aa80:	492a      	ldr	r1, [pc, #168]	; (801ab2c <sys_timeout_abs+0xd0>)
 801aa82:	482b      	ldr	r0, [pc, #172]	; (801ab30 <sys_timeout_abs+0xd4>)
 801aa84:	f000 ff00 	bl	801b888 <iprintf>
    return;
 801aa88:	e04a      	b.n	801ab20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801aa8a:	693b      	ldr	r3, [r7, #16]
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801aa90:	693b      	ldr	r3, [r7, #16]
 801aa92:	68ba      	ldr	r2, [r7, #8]
 801aa94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801aa96:	693b      	ldr	r3, [r7, #16]
 801aa98:	687a      	ldr	r2, [r7, #4]
 801aa9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	68fa      	ldr	r2, [r7, #12]
 801aaa0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801aaa2:	4b24      	ldr	r3, [pc, #144]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d103      	bne.n	801aab2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801aaaa:	4a22      	ldr	r2, [pc, #136]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aaac:	693b      	ldr	r3, [r7, #16]
 801aaae:	6013      	str	r3, [r2, #0]
    return;
 801aab0:	e037      	b.n	801ab22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801aab2:	693b      	ldr	r3, [r7, #16]
 801aab4:	685a      	ldr	r2, [r3, #4]
 801aab6:	4b1f      	ldr	r3, [pc, #124]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	685b      	ldr	r3, [r3, #4]
 801aabc:	1ad3      	subs	r3, r2, r3
 801aabe:	0fdb      	lsrs	r3, r3, #31
 801aac0:	f003 0301 	and.w	r3, r3, #1
 801aac4:	b2db      	uxtb	r3, r3
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d007      	beq.n	801aada <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801aaca:	4b1a      	ldr	r3, [pc, #104]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801aad2:	4a18      	ldr	r2, [pc, #96]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	6013      	str	r3, [r2, #0]
 801aad8:	e023      	b.n	801ab22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801aada:	4b16      	ldr	r3, [pc, #88]	; (801ab34 <sys_timeout_abs+0xd8>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	617b      	str	r3, [r7, #20]
 801aae0:	e01a      	b.n	801ab18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801aae2:	697b      	ldr	r3, [r7, #20]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d00b      	beq.n	801ab02 <sys_timeout_abs+0xa6>
 801aaea:	693b      	ldr	r3, [r7, #16]
 801aaec:	685a      	ldr	r2, [r3, #4]
 801aaee:	697b      	ldr	r3, [r7, #20]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	685b      	ldr	r3, [r3, #4]
 801aaf4:	1ad3      	subs	r3, r2, r3
 801aaf6:	0fdb      	lsrs	r3, r3, #31
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d007      	beq.n	801ab12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	681a      	ldr	r2, [r3, #0]
 801ab06:	693b      	ldr	r3, [r7, #16]
 801ab08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	693a      	ldr	r2, [r7, #16]
 801ab0e:	601a      	str	r2, [r3, #0]
        break;
 801ab10:	e007      	b.n	801ab22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ab12:	697b      	ldr	r3, [r7, #20]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	617b      	str	r3, [r7, #20]
 801ab18:	697b      	ldr	r3, [r7, #20]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d1e1      	bne.n	801aae2 <sys_timeout_abs+0x86>
 801ab1e:	e000      	b.n	801ab22 <sys_timeout_abs+0xc6>
    return;
 801ab20:	bf00      	nop
      }
    }
  }
}
 801ab22:	3718      	adds	r7, #24
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd80      	pop	{r7, pc}
 801ab28:	0801f458 	.word	0x0801f458
 801ab2c:	0801f4c8 	.word	0x0801f4c8
 801ab30:	0801f508 	.word	0x0801f508
 801ab34:	2400c9dc 	.word	0x2400c9dc

0801ab38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b086      	sub	sp, #24
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	4798      	blx	r3

  now = sys_now();
 801ab4a:	f7f0 fa2b 	bl	800afa4 <sys_now>
 801ab4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	681a      	ldr	r2, [r3, #0]
 801ab54:	4b0f      	ldr	r3, [pc, #60]	; (801ab94 <lwip_cyclic_timer+0x5c>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	4413      	add	r3, r2
 801ab5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ab5c:	68fa      	ldr	r2, [r7, #12]
 801ab5e:	693b      	ldr	r3, [r7, #16]
 801ab60:	1ad3      	subs	r3, r2, r3
 801ab62:	0fdb      	lsrs	r3, r3, #31
 801ab64:	f003 0301 	and.w	r3, r3, #1
 801ab68:	b2db      	uxtb	r3, r3
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d009      	beq.n	801ab82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	681a      	ldr	r2, [r3, #0]
 801ab72:	693b      	ldr	r3, [r7, #16]
 801ab74:	4413      	add	r3, r2
 801ab76:	687a      	ldr	r2, [r7, #4]
 801ab78:	4907      	ldr	r1, [pc, #28]	; (801ab98 <lwip_cyclic_timer+0x60>)
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f7ff ff6e 	bl	801aa5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ab80:	e004      	b.n	801ab8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	4904      	ldr	r1, [pc, #16]	; (801ab98 <lwip_cyclic_timer+0x60>)
 801ab86:	68f8      	ldr	r0, [r7, #12]
 801ab88:	f7ff ff68 	bl	801aa5c <sys_timeout_abs>
}
 801ab8c:	bf00      	nop
 801ab8e:	3718      	adds	r7, #24
 801ab90:	46bd      	mov	sp, r7
 801ab92:	bd80      	pop	{r7, pc}
 801ab94:	2400c9e0 	.word	0x2400c9e0
 801ab98:	0801ab39 	.word	0x0801ab39

0801ab9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b082      	sub	sp, #8
 801aba0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801aba2:	2301      	movs	r3, #1
 801aba4:	607b      	str	r3, [r7, #4]
 801aba6:	e00e      	b.n	801abc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801aba8:	4a0b      	ldr	r2, [pc, #44]	; (801abd8 <sys_timeouts_init+0x3c>)
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	00db      	lsls	r3, r3, #3
 801abb4:	4a08      	ldr	r2, [pc, #32]	; (801abd8 <sys_timeouts_init+0x3c>)
 801abb6:	4413      	add	r3, r2
 801abb8:	461a      	mov	r2, r3
 801abba:	4908      	ldr	r1, [pc, #32]	; (801abdc <sys_timeouts_init+0x40>)
 801abbc:	f000 f810 	bl	801abe0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	3301      	adds	r3, #1
 801abc4:	607b      	str	r3, [r7, #4]
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	2b04      	cmp	r3, #4
 801abca:	d9ed      	bls.n	801aba8 <sys_timeouts_init+0xc>
  }
}
 801abcc:	bf00      	nop
 801abce:	bf00      	nop
 801abd0:	3708      	adds	r7, #8
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	0801fa84 	.word	0x0801fa84
 801abdc:	0801ab39 	.word	0x0801ab39

0801abe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b086      	sub	sp, #24
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801abf2:	d306      	bcc.n	801ac02 <sys_timeout+0x22>
 801abf4:	4b0a      	ldr	r3, [pc, #40]	; (801ac20 <sys_timeout+0x40>)
 801abf6:	f240 1229 	movw	r2, #297	; 0x129
 801abfa:	490a      	ldr	r1, [pc, #40]	; (801ac24 <sys_timeout+0x44>)
 801abfc:	480a      	ldr	r0, [pc, #40]	; (801ac28 <sys_timeout+0x48>)
 801abfe:	f000 fe43 	bl	801b888 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ac02:	f7f0 f9cf 	bl	800afa4 <sys_now>
 801ac06:	4602      	mov	r2, r0
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	4413      	add	r3, r2
 801ac0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ac0e:	687a      	ldr	r2, [r7, #4]
 801ac10:	68b9      	ldr	r1, [r7, #8]
 801ac12:	6978      	ldr	r0, [r7, #20]
 801ac14:	f7ff ff22 	bl	801aa5c <sys_timeout_abs>
#endif
}
 801ac18:	bf00      	nop
 801ac1a:	3718      	adds	r7, #24
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	0801f458 	.word	0x0801f458
 801ac24:	0801f530 	.word	0x0801f530
 801ac28:	0801f508 	.word	0x0801f508

0801ac2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ac32:	f7f0 f9b7 	bl	800afa4 <sys_now>
 801ac36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ac38:	4b17      	ldr	r3, [pc, #92]	; (801ac98 <sys_check_timeouts+0x6c>)
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ac3e:	68bb      	ldr	r3, [r7, #8]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d022      	beq.n	801ac8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	68fa      	ldr	r2, [r7, #12]
 801ac4a:	1ad3      	subs	r3, r2, r3
 801ac4c:	0fdb      	lsrs	r3, r3, #31
 801ac4e:	f003 0301 	and.w	r3, r3, #1
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d11a      	bne.n	801ac8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	4a0e      	ldr	r2, [pc, #56]	; (801ac98 <sys_check_timeouts+0x6c>)
 801ac5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	689b      	ldr	r3, [r3, #8]
 801ac64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	68db      	ldr	r3, [r3, #12]
 801ac6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	685b      	ldr	r3, [r3, #4]
 801ac70:	4a0a      	ldr	r2, [pc, #40]	; (801ac9c <sys_check_timeouts+0x70>)
 801ac72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ac74:	68b9      	ldr	r1, [r7, #8]
 801ac76:	200a      	movs	r0, #10
 801ac78:	f7f9 f986 	bl	8013f88 <memp_free>
    if (handler != NULL) {
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d0da      	beq.n	801ac38 <sys_check_timeouts+0xc>
      handler(arg);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	6838      	ldr	r0, [r7, #0]
 801ac86:	4798      	blx	r3
  do {
 801ac88:	e7d6      	b.n	801ac38 <sys_check_timeouts+0xc>
      return;
 801ac8a:	bf00      	nop
 801ac8c:	e000      	b.n	801ac90 <sys_check_timeouts+0x64>
      return;
 801ac8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ac90:	3710      	adds	r7, #16
 801ac92:	46bd      	mov	sp, r7
 801ac94:	bd80      	pop	{r7, pc}
 801ac96:	bf00      	nop
 801ac98:	2400c9dc 	.word	0x2400c9dc
 801ac9c:	2400c9e0 	.word	0x2400c9e0

0801aca0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b082      	sub	sp, #8
 801aca4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aca6:	4b16      	ldr	r3, [pc, #88]	; (801ad00 <sys_timeouts_sleeptime+0x60>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d102      	bne.n	801acb4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801acae:	f04f 33ff 	mov.w	r3, #4294967295
 801acb2:	e020      	b.n	801acf6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801acb4:	f7f0 f976 	bl	800afa4 <sys_now>
 801acb8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801acba:	4b11      	ldr	r3, [pc, #68]	; (801ad00 <sys_timeouts_sleeptime+0x60>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	685a      	ldr	r2, [r3, #4]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	1ad3      	subs	r3, r2, r3
 801acc4:	0fdb      	lsrs	r3, r3, #31
 801acc6:	f003 0301 	and.w	r3, r3, #1
 801acca:	b2db      	uxtb	r3, r3
 801accc:	2b00      	cmp	r3, #0
 801acce:	d001      	beq.n	801acd4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801acd0:	2300      	movs	r3, #0
 801acd2:	e010      	b.n	801acf6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801acd4:	4b0a      	ldr	r3, [pc, #40]	; (801ad00 <sys_timeouts_sleeptime+0x60>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	685a      	ldr	r2, [r3, #4]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	1ad3      	subs	r3, r2, r3
 801acde:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	da06      	bge.n	801acf4 <sys_timeouts_sleeptime+0x54>
 801ace6:	4b07      	ldr	r3, [pc, #28]	; (801ad04 <sys_timeouts_sleeptime+0x64>)
 801ace8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801acec:	4906      	ldr	r1, [pc, #24]	; (801ad08 <sys_timeouts_sleeptime+0x68>)
 801acee:	4807      	ldr	r0, [pc, #28]	; (801ad0c <sys_timeouts_sleeptime+0x6c>)
 801acf0:	f000 fdca 	bl	801b888 <iprintf>
    return ret;
 801acf4:	683b      	ldr	r3, [r7, #0]
  }
}
 801acf6:	4618      	mov	r0, r3
 801acf8:	3708      	adds	r7, #8
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	bf00      	nop
 801ad00:	2400c9dc 	.word	0x2400c9dc
 801ad04:	0801f458 	.word	0x0801f458
 801ad08:	0801f568 	.word	0x0801f568
 801ad0c:	0801f508 	.word	0x0801f508

0801ad10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ad14:	f000 fcb8 	bl	801b688 <rand>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	b29b      	uxth	r3, r3
 801ad1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ad26:	b29a      	uxth	r2, r3
 801ad28:	4b01      	ldr	r3, [pc, #4]	; (801ad30 <udp_init+0x20>)
 801ad2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ad2c:	bf00      	nop
 801ad2e:	bd80      	pop	{r7, pc}
 801ad30:	24000034 	.word	0x24000034

0801ad34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ad34:	b480      	push	{r7}
 801ad36:	b083      	sub	sp, #12
 801ad38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ad3e:	4b17      	ldr	r3, [pc, #92]	; (801ad9c <udp_new_port+0x68>)
 801ad40:	881b      	ldrh	r3, [r3, #0]
 801ad42:	1c5a      	adds	r2, r3, #1
 801ad44:	b291      	uxth	r1, r2
 801ad46:	4a15      	ldr	r2, [pc, #84]	; (801ad9c <udp_new_port+0x68>)
 801ad48:	8011      	strh	r1, [r2, #0]
 801ad4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d103      	bne.n	801ad5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ad52:	4b12      	ldr	r3, [pc, #72]	; (801ad9c <udp_new_port+0x68>)
 801ad54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ad58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad5a:	4b11      	ldr	r3, [pc, #68]	; (801ada0 <udp_new_port+0x6c>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	603b      	str	r3, [r7, #0]
 801ad60:	e011      	b.n	801ad86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	8a5a      	ldrh	r2, [r3, #18]
 801ad66:	4b0d      	ldr	r3, [pc, #52]	; (801ad9c <udp_new_port+0x68>)
 801ad68:	881b      	ldrh	r3, [r3, #0]
 801ad6a:	429a      	cmp	r2, r3
 801ad6c:	d108      	bne.n	801ad80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ad6e:	88fb      	ldrh	r3, [r7, #6]
 801ad70:	3301      	adds	r3, #1
 801ad72:	80fb      	strh	r3, [r7, #6]
 801ad74:	88fb      	ldrh	r3, [r7, #6]
 801ad76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ad7a:	d3e0      	bcc.n	801ad3e <udp_new_port+0xa>
        return 0;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	e007      	b.n	801ad90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	68db      	ldr	r3, [r3, #12]
 801ad84:	603b      	str	r3, [r7, #0]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d1ea      	bne.n	801ad62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ad8c:	4b03      	ldr	r3, [pc, #12]	; (801ad9c <udp_new_port+0x68>)
 801ad8e:	881b      	ldrh	r3, [r3, #0]
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	370c      	adds	r7, #12
 801ad94:	46bd      	mov	sp, r7
 801ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9a:	4770      	bx	lr
 801ad9c:	24000034 	.word	0x24000034
 801ada0:	2400c9e8 	.word	0x2400c9e8

0801ada4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b084      	sub	sp, #16
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	60f8      	str	r0, [r7, #12]
 801adac:	60b9      	str	r1, [r7, #8]
 801adae:	4613      	mov	r3, r2
 801adb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d105      	bne.n	801adc4 <udp_input_local_match+0x20>
 801adb8:	4b27      	ldr	r3, [pc, #156]	; (801ae58 <udp_input_local_match+0xb4>)
 801adba:	2287      	movs	r2, #135	; 0x87
 801adbc:	4927      	ldr	r1, [pc, #156]	; (801ae5c <udp_input_local_match+0xb8>)
 801adbe:	4828      	ldr	r0, [pc, #160]	; (801ae60 <udp_input_local_match+0xbc>)
 801adc0:	f000 fd62 	bl	801b888 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801adc4:	68bb      	ldr	r3, [r7, #8]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d105      	bne.n	801add6 <udp_input_local_match+0x32>
 801adca:	4b23      	ldr	r3, [pc, #140]	; (801ae58 <udp_input_local_match+0xb4>)
 801adcc:	2288      	movs	r2, #136	; 0x88
 801adce:	4925      	ldr	r1, [pc, #148]	; (801ae64 <udp_input_local_match+0xc0>)
 801add0:	4823      	ldr	r0, [pc, #140]	; (801ae60 <udp_input_local_match+0xbc>)
 801add2:	f000 fd59 	bl	801b888 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	7a1b      	ldrb	r3, [r3, #8]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d00b      	beq.n	801adf6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	7a1a      	ldrb	r2, [r3, #8]
 801ade2:	4b21      	ldr	r3, [pc, #132]	; (801ae68 <udp_input_local_match+0xc4>)
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801adea:	3301      	adds	r3, #1
 801adec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801adee:	429a      	cmp	r2, r3
 801adf0:	d001      	beq.n	801adf6 <udp_input_local_match+0x52>
    return 0;
 801adf2:	2300      	movs	r3, #0
 801adf4:	e02b      	b.n	801ae4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801adf6:	79fb      	ldrb	r3, [r7, #7]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d018      	beq.n	801ae2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d013      	beq.n	801ae2a <udp_input_local_match+0x86>
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d00f      	beq.n	801ae2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ae0a:	4b17      	ldr	r3, [pc, #92]	; (801ae68 <udp_input_local_match+0xc4>)
 801ae0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ae0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae12:	d00a      	beq.n	801ae2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	681a      	ldr	r2, [r3, #0]
 801ae18:	4b13      	ldr	r3, [pc, #76]	; (801ae68 <udp_input_local_match+0xc4>)
 801ae1a:	695b      	ldr	r3, [r3, #20]
 801ae1c:	405a      	eors	r2, r3
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	3308      	adds	r3, #8
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d110      	bne.n	801ae4c <udp_input_local_match+0xa8>
          return 1;
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e00f      	b.n	801ae4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d009      	beq.n	801ae48 <udp_input_local_match+0xa4>
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d005      	beq.n	801ae48 <udp_input_local_match+0xa4>
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	681a      	ldr	r2, [r3, #0]
 801ae40:	4b09      	ldr	r3, [pc, #36]	; (801ae68 <udp_input_local_match+0xc4>)
 801ae42:	695b      	ldr	r3, [r3, #20]
 801ae44:	429a      	cmp	r2, r3
 801ae46:	d101      	bne.n	801ae4c <udp_input_local_match+0xa8>
        return 1;
 801ae48:	2301      	movs	r3, #1
 801ae4a:	e000      	b.n	801ae4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ae4c:	2300      	movs	r3, #0
}
 801ae4e:	4618      	mov	r0, r3
 801ae50:	3710      	adds	r7, #16
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	0801f57c 	.word	0x0801f57c
 801ae5c:	0801f5e8 	.word	0x0801f5e8
 801ae60:	0801f60c 	.word	0x0801f60c
 801ae64:	0801f634 	.word	0x0801f634
 801ae68:	24009848 	.word	0x24009848

0801ae6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ae6c:	b590      	push	{r4, r7, lr}
 801ae6e:	b08d      	sub	sp, #52	; 0x34
 801ae70:	af02      	add	r7, sp, #8
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ae76:	2300      	movs	r3, #0
 801ae78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d105      	bne.n	801ae8c <udp_input+0x20>
 801ae80:	4b7c      	ldr	r3, [pc, #496]	; (801b074 <udp_input+0x208>)
 801ae82:	22cf      	movs	r2, #207	; 0xcf
 801ae84:	497c      	ldr	r1, [pc, #496]	; (801b078 <udp_input+0x20c>)
 801ae86:	487d      	ldr	r0, [pc, #500]	; (801b07c <udp_input+0x210>)
 801ae88:	f000 fcfe 	bl	801b888 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ae8c:	683b      	ldr	r3, [r7, #0]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d105      	bne.n	801ae9e <udp_input+0x32>
 801ae92:	4b78      	ldr	r3, [pc, #480]	; (801b074 <udp_input+0x208>)
 801ae94:	22d0      	movs	r2, #208	; 0xd0
 801ae96:	497a      	ldr	r1, [pc, #488]	; (801b080 <udp_input+0x214>)
 801ae98:	4878      	ldr	r0, [pc, #480]	; (801b07c <udp_input+0x210>)
 801ae9a:	f000 fcf5 	bl	801b888 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	895b      	ldrh	r3, [r3, #10]
 801aea2:	2b07      	cmp	r3, #7
 801aea4:	d803      	bhi.n	801aeae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	f7f9 ff1e 	bl	8014ce8 <pbuf_free>
    goto end;
 801aeac:	e0de      	b.n	801b06c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801aeb4:	4b73      	ldr	r3, [pc, #460]	; (801b084 <udp_input+0x218>)
 801aeb6:	695b      	ldr	r3, [r3, #20]
 801aeb8:	4a72      	ldr	r2, [pc, #456]	; (801b084 <udp_input+0x218>)
 801aeba:	6812      	ldr	r2, [r2, #0]
 801aebc:	4611      	mov	r1, r2
 801aebe:	4618      	mov	r0, r3
 801aec0:	f7f7 fcde 	bl	8012880 <ip4_addr_isbroadcast_u32>
 801aec4:	4603      	mov	r3, r0
 801aec6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801aec8:	697b      	ldr	r3, [r7, #20]
 801aeca:	881b      	ldrh	r3, [r3, #0]
 801aecc:	b29b      	uxth	r3, r3
 801aece:	4618      	mov	r0, r3
 801aed0:	f7f4 f8b2 	bl	800f038 <lwip_htons>
 801aed4:	4603      	mov	r3, r0
 801aed6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801aed8:	697b      	ldr	r3, [r7, #20]
 801aeda:	885b      	ldrh	r3, [r3, #2]
 801aedc:	b29b      	uxth	r3, r3
 801aede:	4618      	mov	r0, r3
 801aee0:	f7f4 f8aa 	bl	800f038 <lwip_htons>
 801aee4:	4603      	mov	r3, r0
 801aee6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801aee8:	2300      	movs	r3, #0
 801aeea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801aeec:	2300      	movs	r3, #0
 801aeee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801aef0:	2300      	movs	r3, #0
 801aef2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aef4:	4b64      	ldr	r3, [pc, #400]	; (801b088 <udp_input+0x21c>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	627b      	str	r3, [r7, #36]	; 0x24
 801aefa:	e054      	b.n	801afa6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aefe:	8a5b      	ldrh	r3, [r3, #18]
 801af00:	89fa      	ldrh	r2, [r7, #14]
 801af02:	429a      	cmp	r2, r3
 801af04:	d14a      	bne.n	801af9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801af06:	7cfb      	ldrb	r3, [r7, #19]
 801af08:	461a      	mov	r2, r3
 801af0a:	6839      	ldr	r1, [r7, #0]
 801af0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af0e:	f7ff ff49 	bl	801ada4 <udp_input_local_match>
 801af12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801af14:	2b00      	cmp	r3, #0
 801af16:	d041      	beq.n	801af9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af1a:	7c1b      	ldrb	r3, [r3, #16]
 801af1c:	f003 0304 	and.w	r3, r3, #4
 801af20:	2b00      	cmp	r3, #0
 801af22:	d11d      	bne.n	801af60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d102      	bne.n	801af30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af2c:	61fb      	str	r3, [r7, #28]
 801af2e:	e017      	b.n	801af60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801af30:	7cfb      	ldrb	r3, [r7, #19]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d014      	beq.n	801af60 <udp_input+0xf4>
 801af36:	4b53      	ldr	r3, [pc, #332]	; (801b084 <udp_input+0x218>)
 801af38:	695b      	ldr	r3, [r3, #20]
 801af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af3e:	d10f      	bne.n	801af60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801af40:	69fb      	ldr	r3, [r7, #28]
 801af42:	681a      	ldr	r2, [r3, #0]
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	3304      	adds	r3, #4
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	429a      	cmp	r2, r3
 801af4c:	d008      	beq.n	801af60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af50:	681a      	ldr	r2, [r3, #0]
 801af52:	683b      	ldr	r3, [r7, #0]
 801af54:	3304      	adds	r3, #4
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	429a      	cmp	r2, r3
 801af5a:	d101      	bne.n	801af60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af62:	8a9b      	ldrh	r3, [r3, #20]
 801af64:	8a3a      	ldrh	r2, [r7, #16]
 801af66:	429a      	cmp	r2, r3
 801af68:	d118      	bne.n	801af9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d005      	beq.n	801af7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af74:	685a      	ldr	r2, [r3, #4]
 801af76:	4b43      	ldr	r3, [pc, #268]	; (801b084 <udp_input+0x218>)
 801af78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d10e      	bne.n	801af9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801af7e:	6a3b      	ldr	r3, [r7, #32]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d014      	beq.n	801afae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af86:	68da      	ldr	r2, [r3, #12]
 801af88:	6a3b      	ldr	r3, [r7, #32]
 801af8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801af8c:	4b3e      	ldr	r3, [pc, #248]	; (801b088 <udp_input+0x21c>)
 801af8e:	681a      	ldr	r2, [r3, #0]
 801af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801af94:	4a3c      	ldr	r2, [pc, #240]	; (801b088 <udp_input+0x21c>)
 801af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801af9a:	e008      	b.n	801afae <udp_input+0x142>
      }
    }

    prev = pcb;
 801af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa2:	68db      	ldr	r3, [r3, #12]
 801afa4:	627b      	str	r3, [r7, #36]	; 0x24
 801afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d1a7      	bne.n	801aefc <udp_input+0x90>
 801afac:	e000      	b.n	801afb0 <udp_input+0x144>
        break;
 801afae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d101      	bne.n	801afba <udp_input+0x14e>
    pcb = uncon_pcb;
 801afb6:	69fb      	ldr	r3, [r7, #28]
 801afb8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d002      	beq.n	801afc6 <udp_input+0x15a>
    for_us = 1;
 801afc0:	2301      	movs	r3, #1
 801afc2:	76fb      	strb	r3, [r7, #27]
 801afc4:	e00a      	b.n	801afdc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	3304      	adds	r3, #4
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	4b2d      	ldr	r3, [pc, #180]	; (801b084 <udp_input+0x218>)
 801afce:	695b      	ldr	r3, [r3, #20]
 801afd0:	429a      	cmp	r2, r3
 801afd2:	bf0c      	ite	eq
 801afd4:	2301      	moveq	r3, #1
 801afd6:	2300      	movne	r3, #0
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801afdc:	7efb      	ldrb	r3, [r7, #27]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d041      	beq.n	801b066 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801afe2:	2108      	movs	r1, #8
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	f7f9 fdf9 	bl	8014bdc <pbuf_remove_header>
 801afea:	4603      	mov	r3, r0
 801afec:	2b00      	cmp	r3, #0
 801afee:	d00a      	beq.n	801b006 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801aff0:	4b20      	ldr	r3, [pc, #128]	; (801b074 <udp_input+0x208>)
 801aff2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801aff6:	4925      	ldr	r1, [pc, #148]	; (801b08c <udp_input+0x220>)
 801aff8:	4820      	ldr	r0, [pc, #128]	; (801b07c <udp_input+0x210>)
 801affa:	f000 fc45 	bl	801b888 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801affe:	6878      	ldr	r0, [r7, #4]
 801b000:	f7f9 fe72 	bl	8014ce8 <pbuf_free>
      goto end;
 801b004:	e032      	b.n	801b06c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d012      	beq.n	801b032 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b00e:	699b      	ldr	r3, [r3, #24]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d00a      	beq.n	801b02a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b016:	699c      	ldr	r4, [r3, #24]
 801b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b01a:	69d8      	ldr	r0, [r3, #28]
 801b01c:	8a3b      	ldrh	r3, [r7, #16]
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	4b1b      	ldr	r3, [pc, #108]	; (801b090 <udp_input+0x224>)
 801b022:	687a      	ldr	r2, [r7, #4]
 801b024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b026:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b028:	e021      	b.n	801b06e <udp_input+0x202>
        pbuf_free(p);
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f7f9 fe5c 	bl	8014ce8 <pbuf_free>
        goto end;
 801b030:	e01c      	b.n	801b06c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b032:	7cfb      	ldrb	r3, [r7, #19]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d112      	bne.n	801b05e <udp_input+0x1f2>
 801b038:	4b12      	ldr	r3, [pc, #72]	; (801b084 <udp_input+0x218>)
 801b03a:	695b      	ldr	r3, [r3, #20]
 801b03c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b040:	2be0      	cmp	r3, #224	; 0xe0
 801b042:	d00c      	beq.n	801b05e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b044:	4b0f      	ldr	r3, [pc, #60]	; (801b084 <udp_input+0x218>)
 801b046:	899b      	ldrh	r3, [r3, #12]
 801b048:	3308      	adds	r3, #8
 801b04a:	b29b      	uxth	r3, r3
 801b04c:	b21b      	sxth	r3, r3
 801b04e:	4619      	mov	r1, r3
 801b050:	6878      	ldr	r0, [r7, #4]
 801b052:	f7f9 fe36 	bl	8014cc2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b056:	2103      	movs	r1, #3
 801b058:	6878      	ldr	r0, [r7, #4]
 801b05a:	f7f6 fff5 	bl	8012048 <icmp_dest_unreach>
      pbuf_free(p);
 801b05e:	6878      	ldr	r0, [r7, #4]
 801b060:	f7f9 fe42 	bl	8014ce8 <pbuf_free>
  return;
 801b064:	e003      	b.n	801b06e <udp_input+0x202>
    pbuf_free(p);
 801b066:	6878      	ldr	r0, [r7, #4]
 801b068:	f7f9 fe3e 	bl	8014ce8 <pbuf_free>
  return;
 801b06c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b06e:	372c      	adds	r7, #44	; 0x2c
 801b070:	46bd      	mov	sp, r7
 801b072:	bd90      	pop	{r4, r7, pc}
 801b074:	0801f57c 	.word	0x0801f57c
 801b078:	0801f65c 	.word	0x0801f65c
 801b07c:	0801f60c 	.word	0x0801f60c
 801b080:	0801f674 	.word	0x0801f674
 801b084:	24009848 	.word	0x24009848
 801b088:	2400c9e8 	.word	0x2400c9e8
 801b08c:	0801f690 	.word	0x0801f690
 801b090:	24009858 	.word	0x24009858

0801b094 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b088      	sub	sp, #32
 801b098:	af02      	add	r7, sp, #8
 801b09a:	60f8      	str	r0, [r7, #12]
 801b09c:	60b9      	str	r1, [r7, #8]
 801b09e:	607a      	str	r2, [r7, #4]
 801b0a0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d109      	bne.n	801b0bc <udp_sendto_if+0x28>
 801b0a8:	4b2e      	ldr	r3, [pc, #184]	; (801b164 <udp_sendto_if+0xd0>)
 801b0aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b0ae:	492e      	ldr	r1, [pc, #184]	; (801b168 <udp_sendto_if+0xd4>)
 801b0b0:	482e      	ldr	r0, [pc, #184]	; (801b16c <udp_sendto_if+0xd8>)
 801b0b2:	f000 fbe9 	bl	801b888 <iprintf>
 801b0b6:	f06f 030f 	mvn.w	r3, #15
 801b0ba:	e04f      	b.n	801b15c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b0bc:	68bb      	ldr	r3, [r7, #8]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d109      	bne.n	801b0d6 <udp_sendto_if+0x42>
 801b0c2:	4b28      	ldr	r3, [pc, #160]	; (801b164 <udp_sendto_if+0xd0>)
 801b0c4:	f240 2281 	movw	r2, #641	; 0x281
 801b0c8:	4929      	ldr	r1, [pc, #164]	; (801b170 <udp_sendto_if+0xdc>)
 801b0ca:	4828      	ldr	r0, [pc, #160]	; (801b16c <udp_sendto_if+0xd8>)
 801b0cc:	f000 fbdc 	bl	801b888 <iprintf>
 801b0d0:	f06f 030f 	mvn.w	r3, #15
 801b0d4:	e042      	b.n	801b15c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d109      	bne.n	801b0f0 <udp_sendto_if+0x5c>
 801b0dc:	4b21      	ldr	r3, [pc, #132]	; (801b164 <udp_sendto_if+0xd0>)
 801b0de:	f240 2282 	movw	r2, #642	; 0x282
 801b0e2:	4924      	ldr	r1, [pc, #144]	; (801b174 <udp_sendto_if+0xe0>)
 801b0e4:	4821      	ldr	r0, [pc, #132]	; (801b16c <udp_sendto_if+0xd8>)
 801b0e6:	f000 fbcf 	bl	801b888 <iprintf>
 801b0ea:	f06f 030f 	mvn.w	r3, #15
 801b0ee:	e035      	b.n	801b15c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b0f0:	6a3b      	ldr	r3, [r7, #32]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d109      	bne.n	801b10a <udp_sendto_if+0x76>
 801b0f6:	4b1b      	ldr	r3, [pc, #108]	; (801b164 <udp_sendto_if+0xd0>)
 801b0f8:	f240 2283 	movw	r2, #643	; 0x283
 801b0fc:	491e      	ldr	r1, [pc, #120]	; (801b178 <udp_sendto_if+0xe4>)
 801b0fe:	481b      	ldr	r0, [pc, #108]	; (801b16c <udp_sendto_if+0xd8>)
 801b100:	f000 fbc2 	bl	801b888 <iprintf>
 801b104:	f06f 030f 	mvn.w	r3, #15
 801b108:	e028      	b.n	801b15c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d009      	beq.n	801b124 <udp_sendto_if+0x90>
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d005      	beq.n	801b124 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b120:	2be0      	cmp	r3, #224	; 0xe0
 801b122:	d103      	bne.n	801b12c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b124:	6a3b      	ldr	r3, [r7, #32]
 801b126:	3304      	adds	r3, #4
 801b128:	617b      	str	r3, [r7, #20]
 801b12a:	e00b      	b.n	801b144 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	6a3b      	ldr	r3, [r7, #32]
 801b132:	3304      	adds	r3, #4
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	429a      	cmp	r2, r3
 801b138:	d002      	beq.n	801b140 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b13a:	f06f 0303 	mvn.w	r3, #3
 801b13e:	e00d      	b.n	801b15c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b144:	887a      	ldrh	r2, [r7, #2]
 801b146:	697b      	ldr	r3, [r7, #20]
 801b148:	9301      	str	r3, [sp, #4]
 801b14a:	6a3b      	ldr	r3, [r7, #32]
 801b14c:	9300      	str	r3, [sp, #0]
 801b14e:	4613      	mov	r3, r2
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	68b9      	ldr	r1, [r7, #8]
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	f000 f811 	bl	801b17c <udp_sendto_if_src>
 801b15a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3718      	adds	r7, #24
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	0801f57c 	.word	0x0801f57c
 801b168:	0801f72c 	.word	0x0801f72c
 801b16c:	0801f60c 	.word	0x0801f60c
 801b170:	0801f748 	.word	0x0801f748
 801b174:	0801f764 	.word	0x0801f764
 801b178:	0801f784 	.word	0x0801f784

0801b17c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b08c      	sub	sp, #48	; 0x30
 801b180:	af04      	add	r7, sp, #16
 801b182:	60f8      	str	r0, [r7, #12]
 801b184:	60b9      	str	r1, [r7, #8]
 801b186:	607a      	str	r2, [r7, #4]
 801b188:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d109      	bne.n	801b1a4 <udp_sendto_if_src+0x28>
 801b190:	4b65      	ldr	r3, [pc, #404]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b192:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b196:	4965      	ldr	r1, [pc, #404]	; (801b32c <udp_sendto_if_src+0x1b0>)
 801b198:	4865      	ldr	r0, [pc, #404]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b19a:	f000 fb75 	bl	801b888 <iprintf>
 801b19e:	f06f 030f 	mvn.w	r3, #15
 801b1a2:	e0bc      	b.n	801b31e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d109      	bne.n	801b1be <udp_sendto_if_src+0x42>
 801b1aa:	4b5f      	ldr	r3, [pc, #380]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b1ac:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b1b0:	4960      	ldr	r1, [pc, #384]	; (801b334 <udp_sendto_if_src+0x1b8>)
 801b1b2:	485f      	ldr	r0, [pc, #380]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b1b4:	f000 fb68 	bl	801b888 <iprintf>
 801b1b8:	f06f 030f 	mvn.w	r3, #15
 801b1bc:	e0af      	b.n	801b31e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d109      	bne.n	801b1d8 <udp_sendto_if_src+0x5c>
 801b1c4:	4b58      	ldr	r3, [pc, #352]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b1c6:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b1ca:	495b      	ldr	r1, [pc, #364]	; (801b338 <udp_sendto_if_src+0x1bc>)
 801b1cc:	4858      	ldr	r0, [pc, #352]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b1ce:	f000 fb5b 	bl	801b888 <iprintf>
 801b1d2:	f06f 030f 	mvn.w	r3, #15
 801b1d6:	e0a2      	b.n	801b31e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d109      	bne.n	801b1f2 <udp_sendto_if_src+0x76>
 801b1de:	4b52      	ldr	r3, [pc, #328]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b1e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b1e4:	4955      	ldr	r1, [pc, #340]	; (801b33c <udp_sendto_if_src+0x1c0>)
 801b1e6:	4852      	ldr	r0, [pc, #328]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b1e8:	f000 fb4e 	bl	801b888 <iprintf>
 801b1ec:	f06f 030f 	mvn.w	r3, #15
 801b1f0:	e095      	b.n	801b31e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d109      	bne.n	801b20c <udp_sendto_if_src+0x90>
 801b1f8:	4b4b      	ldr	r3, [pc, #300]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b1fa:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b1fe:	4950      	ldr	r1, [pc, #320]	; (801b340 <udp_sendto_if_src+0x1c4>)
 801b200:	484b      	ldr	r0, [pc, #300]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b202:	f000 fb41 	bl	801b888 <iprintf>
 801b206:	f06f 030f 	mvn.w	r3, #15
 801b20a:	e088      	b.n	801b31e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	8a5b      	ldrh	r3, [r3, #18]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d10f      	bne.n	801b234 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b214:	68f9      	ldr	r1, [r7, #12]
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	8a5b      	ldrh	r3, [r3, #18]
 801b21a:	461a      	mov	r2, r3
 801b21c:	68f8      	ldr	r0, [r7, #12]
 801b21e:	f000 f893 	bl	801b348 <udp_bind>
 801b222:	4603      	mov	r3, r0
 801b224:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b226:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d002      	beq.n	801b234 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b22e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b232:	e074      	b.n	801b31e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b234:	68bb      	ldr	r3, [r7, #8]
 801b236:	891b      	ldrh	r3, [r3, #8]
 801b238:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b23c:	4293      	cmp	r3, r2
 801b23e:	d902      	bls.n	801b246 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b240:	f04f 33ff 	mov.w	r3, #4294967295
 801b244:	e06b      	b.n	801b31e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b246:	2108      	movs	r1, #8
 801b248:	68b8      	ldr	r0, [r7, #8]
 801b24a:	f7f9 fcb7 	bl	8014bbc <pbuf_add_header>
 801b24e:	4603      	mov	r3, r0
 801b250:	2b00      	cmp	r3, #0
 801b252:	d015      	beq.n	801b280 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b254:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b258:	2108      	movs	r1, #8
 801b25a:	2022      	movs	r0, #34	; 0x22
 801b25c:	f7f9 fa60 	bl	8014720 <pbuf_alloc>
 801b260:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d102      	bne.n	801b26e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b268:	f04f 33ff 	mov.w	r3, #4294967295
 801b26c:	e057      	b.n	801b31e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	891b      	ldrh	r3, [r3, #8]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d006      	beq.n	801b284 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b276:	68b9      	ldr	r1, [r7, #8]
 801b278:	69f8      	ldr	r0, [r7, #28]
 801b27a:	f7f9 fe59 	bl	8014f30 <pbuf_chain>
 801b27e:	e001      	b.n	801b284 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b284:	69fb      	ldr	r3, [r7, #28]
 801b286:	895b      	ldrh	r3, [r3, #10]
 801b288:	2b07      	cmp	r3, #7
 801b28a:	d806      	bhi.n	801b29a <udp_sendto_if_src+0x11e>
 801b28c:	4b26      	ldr	r3, [pc, #152]	; (801b328 <udp_sendto_if_src+0x1ac>)
 801b28e:	f240 320d 	movw	r2, #781	; 0x30d
 801b292:	492c      	ldr	r1, [pc, #176]	; (801b344 <udp_sendto_if_src+0x1c8>)
 801b294:	4826      	ldr	r0, [pc, #152]	; (801b330 <udp_sendto_if_src+0x1b4>)
 801b296:	f000 faf7 	bl	801b888 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b29a:	69fb      	ldr	r3, [r7, #28]
 801b29c:	685b      	ldr	r3, [r3, #4]
 801b29e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	8a5b      	ldrh	r3, [r3, #18]
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f7f3 fec7 	bl	800f038 <lwip_htons>
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	461a      	mov	r2, r3
 801b2ae:	697b      	ldr	r3, [r7, #20]
 801b2b0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b2b2:	887b      	ldrh	r3, [r7, #2]
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	f7f3 febf 	bl	800f038 <lwip_htons>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	461a      	mov	r2, r3
 801b2be:	697b      	ldr	r3, [r7, #20]
 801b2c0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b2c2:	697b      	ldr	r3, [r7, #20]
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	719a      	strb	r2, [r3, #6]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b2cc:	69fb      	ldr	r3, [r7, #28]
 801b2ce:	891b      	ldrh	r3, [r3, #8]
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f7f3 feb1 	bl	800f038 <lwip_htons>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	461a      	mov	r2, r3
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b2de:	2311      	movs	r3, #17
 801b2e0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	7adb      	ldrb	r3, [r3, #11]
 801b2e6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	7a9b      	ldrb	r3, [r3, #10]
 801b2ec:	7cb9      	ldrb	r1, [r7, #18]
 801b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b2f0:	9202      	str	r2, [sp, #8]
 801b2f2:	7cfa      	ldrb	r2, [r7, #19]
 801b2f4:	9201      	str	r2, [sp, #4]
 801b2f6:	9300      	str	r3, [sp, #0]
 801b2f8:	460b      	mov	r3, r1
 801b2fa:	687a      	ldr	r2, [r7, #4]
 801b2fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b2fe:	69f8      	ldr	r0, [r7, #28]
 801b300:	f7f7 fa10 	bl	8012724 <ip4_output_if_src>
 801b304:	4603      	mov	r3, r0
 801b306:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b308:	69fa      	ldr	r2, [r7, #28]
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d004      	beq.n	801b31a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b310:	69f8      	ldr	r0, [r7, #28]
 801b312:	f7f9 fce9 	bl	8014ce8 <pbuf_free>
    q = NULL;
 801b316:	2300      	movs	r3, #0
 801b318:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b31a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3720      	adds	r7, #32
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
 801b326:	bf00      	nop
 801b328:	0801f57c 	.word	0x0801f57c
 801b32c:	0801f7a4 	.word	0x0801f7a4
 801b330:	0801f60c 	.word	0x0801f60c
 801b334:	0801f7c4 	.word	0x0801f7c4
 801b338:	0801f7e4 	.word	0x0801f7e4
 801b33c:	0801f808 	.word	0x0801f808
 801b340:	0801f82c 	.word	0x0801f82c
 801b344:	0801f850 	.word	0x0801f850

0801b348 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b086      	sub	sp, #24
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	60f8      	str	r0, [r7, #12]
 801b350:	60b9      	str	r1, [r7, #8]
 801b352:	4613      	mov	r3, r2
 801b354:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b356:	68bb      	ldr	r3, [r7, #8]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d101      	bne.n	801b360 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b35c:	4b39      	ldr	r3, [pc, #228]	; (801b444 <udp_bind+0xfc>)
 801b35e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d109      	bne.n	801b37a <udp_bind+0x32>
 801b366:	4b38      	ldr	r3, [pc, #224]	; (801b448 <udp_bind+0x100>)
 801b368:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b36c:	4937      	ldr	r1, [pc, #220]	; (801b44c <udp_bind+0x104>)
 801b36e:	4838      	ldr	r0, [pc, #224]	; (801b450 <udp_bind+0x108>)
 801b370:	f000 fa8a 	bl	801b888 <iprintf>
 801b374:	f06f 030f 	mvn.w	r3, #15
 801b378:	e060      	b.n	801b43c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b37a:	2300      	movs	r3, #0
 801b37c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b37e:	4b35      	ldr	r3, [pc, #212]	; (801b454 <udp_bind+0x10c>)
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	617b      	str	r3, [r7, #20]
 801b384:	e009      	b.n	801b39a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b386:	68fa      	ldr	r2, [r7, #12]
 801b388:	697b      	ldr	r3, [r7, #20]
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d102      	bne.n	801b394 <udp_bind+0x4c>
      rebind = 1;
 801b38e:	2301      	movs	r3, #1
 801b390:	74fb      	strb	r3, [r7, #19]
      break;
 801b392:	e005      	b.n	801b3a0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	68db      	ldr	r3, [r3, #12]
 801b398:	617b      	str	r3, [r7, #20]
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d1f2      	bne.n	801b386 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b3a0:	88fb      	ldrh	r3, [r7, #6]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d109      	bne.n	801b3ba <udp_bind+0x72>
    port = udp_new_port();
 801b3a6:	f7ff fcc5 	bl	801ad34 <udp_new_port>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b3ae:	88fb      	ldrh	r3, [r7, #6]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d12c      	bne.n	801b40e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b3b4:	f06f 0307 	mvn.w	r3, #7
 801b3b8:	e040      	b.n	801b43c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b3ba:	4b26      	ldr	r3, [pc, #152]	; (801b454 <udp_bind+0x10c>)
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	617b      	str	r3, [r7, #20]
 801b3c0:	e022      	b.n	801b408 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b3c2:	68fa      	ldr	r2, [r7, #12]
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	d01b      	beq.n	801b402 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b3ca:	697b      	ldr	r3, [r7, #20]
 801b3cc:	8a5b      	ldrh	r3, [r3, #18]
 801b3ce:	88fa      	ldrh	r2, [r7, #6]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d116      	bne.n	801b402 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b3d4:	697b      	ldr	r3, [r7, #20]
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	68bb      	ldr	r3, [r7, #8]
 801b3da:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b3dc:	429a      	cmp	r2, r3
 801b3de:	d00d      	beq.n	801b3fc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d00a      	beq.n	801b3fc <udp_bind+0xb4>
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d006      	beq.n	801b3fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b3ee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d003      	beq.n	801b3fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b3f4:	697b      	ldr	r3, [r7, #20]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d102      	bne.n	801b402 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b3fc:	f06f 0307 	mvn.w	r3, #7
 801b400:	e01c      	b.n	801b43c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	617b      	str	r3, [r7, #20]
 801b408:	697b      	ldr	r3, [r7, #20]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d1d9      	bne.n	801b3c2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b40e:	68bb      	ldr	r3, [r7, #8]
 801b410:	2b00      	cmp	r3, #0
 801b412:	d002      	beq.n	801b41a <udp_bind+0xd2>
 801b414:	68bb      	ldr	r3, [r7, #8]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	e000      	b.n	801b41c <udp_bind+0xd4>
 801b41a:	2300      	movs	r3, #0
 801b41c:	68fa      	ldr	r2, [r7, #12]
 801b41e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	88fa      	ldrh	r2, [r7, #6]
 801b424:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b426:	7cfb      	ldrb	r3, [r7, #19]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d106      	bne.n	801b43a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b42c:	4b09      	ldr	r3, [pc, #36]	; (801b454 <udp_bind+0x10c>)
 801b42e:	681a      	ldr	r2, [r3, #0]
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b434:	4a07      	ldr	r2, [pc, #28]	; (801b454 <udp_bind+0x10c>)
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b43a:	2300      	movs	r3, #0
}
 801b43c:	4618      	mov	r0, r3
 801b43e:	3718      	adds	r7, #24
 801b440:	46bd      	mov	sp, r7
 801b442:	bd80      	pop	{r7, pc}
 801b444:	0801f984 	.word	0x0801f984
 801b448:	0801f57c 	.word	0x0801f57c
 801b44c:	0801f880 	.word	0x0801f880
 801b450:	0801f60c 	.word	0x0801f60c
 801b454:	2400c9e8 	.word	0x2400c9e8

0801b458 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b086      	sub	sp, #24
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	60f8      	str	r0, [r7, #12]
 801b460:	60b9      	str	r1, [r7, #8]
 801b462:	4613      	mov	r3, r2
 801b464:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d109      	bne.n	801b480 <udp_connect+0x28>
 801b46c:	4b2c      	ldr	r3, [pc, #176]	; (801b520 <udp_connect+0xc8>)
 801b46e:	f240 4235 	movw	r2, #1077	; 0x435
 801b472:	492c      	ldr	r1, [pc, #176]	; (801b524 <udp_connect+0xcc>)
 801b474:	482c      	ldr	r0, [pc, #176]	; (801b528 <udp_connect+0xd0>)
 801b476:	f000 fa07 	bl	801b888 <iprintf>
 801b47a:	f06f 030f 	mvn.w	r3, #15
 801b47e:	e04b      	b.n	801b518 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b480:	68bb      	ldr	r3, [r7, #8]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d109      	bne.n	801b49a <udp_connect+0x42>
 801b486:	4b26      	ldr	r3, [pc, #152]	; (801b520 <udp_connect+0xc8>)
 801b488:	f240 4236 	movw	r2, #1078	; 0x436
 801b48c:	4927      	ldr	r1, [pc, #156]	; (801b52c <udp_connect+0xd4>)
 801b48e:	4826      	ldr	r0, [pc, #152]	; (801b528 <udp_connect+0xd0>)
 801b490:	f000 f9fa 	bl	801b888 <iprintf>
 801b494:	f06f 030f 	mvn.w	r3, #15
 801b498:	e03e      	b.n	801b518 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	8a5b      	ldrh	r3, [r3, #18]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d10f      	bne.n	801b4c2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b4a2:	68f9      	ldr	r1, [r7, #12]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	8a5b      	ldrh	r3, [r3, #18]
 801b4a8:	461a      	mov	r2, r3
 801b4aa:	68f8      	ldr	r0, [r7, #12]
 801b4ac:	f7ff ff4c 	bl	801b348 <udp_bind>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b4b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d002      	beq.n	801b4c2 <udp_connect+0x6a>
      return err;
 801b4bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b4c0:	e02a      	b.n	801b518 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b4c2:	68bb      	ldr	r3, [r7, #8]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d002      	beq.n	801b4ce <udp_connect+0x76>
 801b4c8:	68bb      	ldr	r3, [r7, #8]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	e000      	b.n	801b4d0 <udp_connect+0x78>
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	68fa      	ldr	r2, [r7, #12]
 801b4d2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	88fa      	ldrh	r2, [r7, #6]
 801b4d8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	7c1b      	ldrb	r3, [r3, #16]
 801b4de:	f043 0304 	orr.w	r3, r3, #4
 801b4e2:	b2da      	uxtb	r2, r3
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4e8:	4b11      	ldr	r3, [pc, #68]	; (801b530 <udp_connect+0xd8>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	617b      	str	r3, [r7, #20]
 801b4ee:	e008      	b.n	801b502 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b4f0:	68fa      	ldr	r2, [r7, #12]
 801b4f2:	697b      	ldr	r3, [r7, #20]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d101      	bne.n	801b4fc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	e00d      	b.n	801b518 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	68db      	ldr	r3, [r3, #12]
 801b500:	617b      	str	r3, [r7, #20]
 801b502:	697b      	ldr	r3, [r7, #20]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d1f3      	bne.n	801b4f0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b508:	4b09      	ldr	r3, [pc, #36]	; (801b530 <udp_connect+0xd8>)
 801b50a:	681a      	ldr	r2, [r3, #0]
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b510:	4a07      	ldr	r2, [pc, #28]	; (801b530 <udp_connect+0xd8>)
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b516:	2300      	movs	r3, #0
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3718      	adds	r7, #24
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	0801f57c 	.word	0x0801f57c
 801b524:	0801f898 	.word	0x0801f898
 801b528:	0801f60c 	.word	0x0801f60c
 801b52c:	0801f8b4 	.word	0x0801f8b4
 801b530:	2400c9e8 	.word	0x2400c9e8

0801b534 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b084      	sub	sp, #16
 801b538:	af00      	add	r7, sp, #0
 801b53a:	60f8      	str	r0, [r7, #12]
 801b53c:	60b9      	str	r1, [r7, #8]
 801b53e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d107      	bne.n	801b556 <udp_recv+0x22>
 801b546:	4b08      	ldr	r3, [pc, #32]	; (801b568 <udp_recv+0x34>)
 801b548:	f240 428a 	movw	r2, #1162	; 0x48a
 801b54c:	4907      	ldr	r1, [pc, #28]	; (801b56c <udp_recv+0x38>)
 801b54e:	4808      	ldr	r0, [pc, #32]	; (801b570 <udp_recv+0x3c>)
 801b550:	f000 f99a 	bl	801b888 <iprintf>
 801b554:	e005      	b.n	801b562 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	68ba      	ldr	r2, [r7, #8]
 801b55a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	687a      	ldr	r2, [r7, #4]
 801b560:	61da      	str	r2, [r3, #28]
}
 801b562:	3710      	adds	r7, #16
 801b564:	46bd      	mov	sp, r7
 801b566:	bd80      	pop	{r7, pc}
 801b568:	0801f57c 	.word	0x0801f57c
 801b56c:	0801f8ec 	.word	0x0801f8ec
 801b570:	0801f60c 	.word	0x0801f60c

0801b574 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b084      	sub	sp, #16
 801b578:	af00      	add	r7, sp, #0
 801b57a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d107      	bne.n	801b592 <udp_remove+0x1e>
 801b582:	4b19      	ldr	r3, [pc, #100]	; (801b5e8 <udp_remove+0x74>)
 801b584:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b588:	4918      	ldr	r1, [pc, #96]	; (801b5ec <udp_remove+0x78>)
 801b58a:	4819      	ldr	r0, [pc, #100]	; (801b5f0 <udp_remove+0x7c>)
 801b58c:	f000 f97c 	bl	801b888 <iprintf>
 801b590:	e026      	b.n	801b5e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b592:	4b18      	ldr	r3, [pc, #96]	; (801b5f4 <udp_remove+0x80>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	687a      	ldr	r2, [r7, #4]
 801b598:	429a      	cmp	r2, r3
 801b59a:	d105      	bne.n	801b5a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b59c:	4b15      	ldr	r3, [pc, #84]	; (801b5f4 <udp_remove+0x80>)
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	4a14      	ldr	r2, [pc, #80]	; (801b5f4 <udp_remove+0x80>)
 801b5a4:	6013      	str	r3, [r2, #0]
 801b5a6:	e017      	b.n	801b5d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b5a8:	4b12      	ldr	r3, [pc, #72]	; (801b5f4 <udp_remove+0x80>)
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	60fb      	str	r3, [r7, #12]
 801b5ae:	e010      	b.n	801b5d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	68db      	ldr	r3, [r3, #12]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d009      	beq.n	801b5cc <udp_remove+0x58>
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	68db      	ldr	r3, [r3, #12]
 801b5bc:	687a      	ldr	r2, [r7, #4]
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d104      	bne.n	801b5cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	68da      	ldr	r2, [r3, #12]
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	60da      	str	r2, [r3, #12]
        break;
 801b5ca:	e005      	b.n	801b5d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	68db      	ldr	r3, [r3, #12]
 801b5d0:	60fb      	str	r3, [r7, #12]
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d1eb      	bne.n	801b5b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b5d8:	6879      	ldr	r1, [r7, #4]
 801b5da:	2000      	movs	r0, #0
 801b5dc:	f7f8 fcd4 	bl	8013f88 <memp_free>
}
 801b5e0:	3710      	adds	r7, #16
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	bd80      	pop	{r7, pc}
 801b5e6:	bf00      	nop
 801b5e8:	0801f57c 	.word	0x0801f57c
 801b5ec:	0801f904 	.word	0x0801f904
 801b5f0:	0801f60c 	.word	0x0801f60c
 801b5f4:	2400c9e8 	.word	0x2400c9e8

0801b5f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b082      	sub	sp, #8
 801b5fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b5fe:	2000      	movs	r0, #0
 801b600:	f7f8 fc4c 	bl	8013e9c <memp_malloc>
 801b604:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d007      	beq.n	801b61c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b60c:	2220      	movs	r2, #32
 801b60e:	2100      	movs	r1, #0
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f000 f99e 	bl	801b952 <memset>
    pcb->ttl = UDP_TTL;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	22ff      	movs	r2, #255	; 0xff
 801b61a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b61c:	687b      	ldr	r3, [r7, #4]
}
 801b61e:	4618      	mov	r0, r3
 801b620:	3708      	adds	r7, #8
 801b622:	46bd      	mov	sp, r7
 801b624:	bd80      	pop	{r7, pc}
	...

0801b628 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b628:	b480      	push	{r7}
 801b62a:	b085      	sub	sp, #20
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
 801b630:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d01e      	beq.n	801b676 <udp_netif_ip_addr_changed+0x4e>
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d01a      	beq.n	801b676 <udp_netif_ip_addr_changed+0x4e>
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d017      	beq.n	801b676 <udp_netif_ip_addr_changed+0x4e>
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d013      	beq.n	801b676 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b64e:	4b0d      	ldr	r3, [pc, #52]	; (801b684 <udp_netif_ip_addr_changed+0x5c>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	60fb      	str	r3, [r7, #12]
 801b654:	e00c      	b.n	801b670 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	681a      	ldr	r2, [r3, #0]
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	429a      	cmp	r2, r3
 801b660:	d103      	bne.n	801b66a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	60fb      	str	r3, [r7, #12]
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d1ef      	bne.n	801b656 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b676:	bf00      	nop
 801b678:	3714      	adds	r7, #20
 801b67a:	46bd      	mov	sp, r7
 801b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b680:	4770      	bx	lr
 801b682:	bf00      	nop
 801b684:	2400c9e8 	.word	0x2400c9e8

0801b688 <rand>:
 801b688:	4b16      	ldr	r3, [pc, #88]	; (801b6e4 <rand+0x5c>)
 801b68a:	b510      	push	{r4, lr}
 801b68c:	681c      	ldr	r4, [r3, #0]
 801b68e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b690:	b9b3      	cbnz	r3, 801b6c0 <rand+0x38>
 801b692:	2018      	movs	r0, #24
 801b694:	f000 fa00 	bl	801ba98 <malloc>
 801b698:	4602      	mov	r2, r0
 801b69a:	6320      	str	r0, [r4, #48]	; 0x30
 801b69c:	b920      	cbnz	r0, 801b6a8 <rand+0x20>
 801b69e:	4b12      	ldr	r3, [pc, #72]	; (801b6e8 <rand+0x60>)
 801b6a0:	4812      	ldr	r0, [pc, #72]	; (801b6ec <rand+0x64>)
 801b6a2:	2152      	movs	r1, #82	; 0x52
 801b6a4:	f000 f9da 	bl	801ba5c <__assert_func>
 801b6a8:	4911      	ldr	r1, [pc, #68]	; (801b6f0 <rand+0x68>)
 801b6aa:	4b12      	ldr	r3, [pc, #72]	; (801b6f4 <rand+0x6c>)
 801b6ac:	e9c0 1300 	strd	r1, r3, [r0]
 801b6b0:	4b11      	ldr	r3, [pc, #68]	; (801b6f8 <rand+0x70>)
 801b6b2:	6083      	str	r3, [r0, #8]
 801b6b4:	230b      	movs	r3, #11
 801b6b6:	8183      	strh	r3, [r0, #12]
 801b6b8:	2100      	movs	r1, #0
 801b6ba:	2001      	movs	r0, #1
 801b6bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b6c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b6c2:	480e      	ldr	r0, [pc, #56]	; (801b6fc <rand+0x74>)
 801b6c4:	690b      	ldr	r3, [r1, #16]
 801b6c6:	694c      	ldr	r4, [r1, #20]
 801b6c8:	4a0d      	ldr	r2, [pc, #52]	; (801b700 <rand+0x78>)
 801b6ca:	4358      	muls	r0, r3
 801b6cc:	fb02 0004 	mla	r0, r2, r4, r0
 801b6d0:	fba3 3202 	umull	r3, r2, r3, r2
 801b6d4:	3301      	adds	r3, #1
 801b6d6:	eb40 0002 	adc.w	r0, r0, r2
 801b6da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b6de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b6e2:	bd10      	pop	{r4, pc}
 801b6e4:	24000090 	.word	0x24000090
 801b6e8:	0801faac 	.word	0x0801faac
 801b6ec:	0801fac3 	.word	0x0801fac3
 801b6f0:	abcd330e 	.word	0xabcd330e
 801b6f4:	e66d1234 	.word	0xe66d1234
 801b6f8:	0005deec 	.word	0x0005deec
 801b6fc:	5851f42d 	.word	0x5851f42d
 801b700:	4c957f2d 	.word	0x4c957f2d

0801b704 <std>:
 801b704:	2300      	movs	r3, #0
 801b706:	b510      	push	{r4, lr}
 801b708:	4604      	mov	r4, r0
 801b70a:	e9c0 3300 	strd	r3, r3, [r0]
 801b70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b712:	6083      	str	r3, [r0, #8]
 801b714:	8181      	strh	r1, [r0, #12]
 801b716:	6643      	str	r3, [r0, #100]	; 0x64
 801b718:	81c2      	strh	r2, [r0, #14]
 801b71a:	6183      	str	r3, [r0, #24]
 801b71c:	4619      	mov	r1, r3
 801b71e:	2208      	movs	r2, #8
 801b720:	305c      	adds	r0, #92	; 0x5c
 801b722:	f000 f916 	bl	801b952 <memset>
 801b726:	4b0d      	ldr	r3, [pc, #52]	; (801b75c <std+0x58>)
 801b728:	6263      	str	r3, [r4, #36]	; 0x24
 801b72a:	4b0d      	ldr	r3, [pc, #52]	; (801b760 <std+0x5c>)
 801b72c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b72e:	4b0d      	ldr	r3, [pc, #52]	; (801b764 <std+0x60>)
 801b730:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b732:	4b0d      	ldr	r3, [pc, #52]	; (801b768 <std+0x64>)
 801b734:	6323      	str	r3, [r4, #48]	; 0x30
 801b736:	4b0d      	ldr	r3, [pc, #52]	; (801b76c <std+0x68>)
 801b738:	6224      	str	r4, [r4, #32]
 801b73a:	429c      	cmp	r4, r3
 801b73c:	d006      	beq.n	801b74c <std+0x48>
 801b73e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b742:	4294      	cmp	r4, r2
 801b744:	d002      	beq.n	801b74c <std+0x48>
 801b746:	33d0      	adds	r3, #208	; 0xd0
 801b748:	429c      	cmp	r4, r3
 801b74a:	d105      	bne.n	801b758 <std+0x54>
 801b74c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b754:	f000 b970 	b.w	801ba38 <__retarget_lock_init_recursive>
 801b758:	bd10      	pop	{r4, pc}
 801b75a:	bf00      	nop
 801b75c:	0801b8ad 	.word	0x0801b8ad
 801b760:	0801b8cf 	.word	0x0801b8cf
 801b764:	0801b907 	.word	0x0801b907
 801b768:	0801b92b 	.word	0x0801b92b
 801b76c:	2400c9ec 	.word	0x2400c9ec

0801b770 <stdio_exit_handler>:
 801b770:	4a02      	ldr	r2, [pc, #8]	; (801b77c <stdio_exit_handler+0xc>)
 801b772:	4903      	ldr	r1, [pc, #12]	; (801b780 <stdio_exit_handler+0x10>)
 801b774:	4803      	ldr	r0, [pc, #12]	; (801b784 <stdio_exit_handler+0x14>)
 801b776:	f000 b869 	b.w	801b84c <_fwalk_sglue>
 801b77a:	bf00      	nop
 801b77c:	24000038 	.word	0x24000038
 801b780:	0801c2b5 	.word	0x0801c2b5
 801b784:	24000044 	.word	0x24000044

0801b788 <cleanup_stdio>:
 801b788:	6841      	ldr	r1, [r0, #4]
 801b78a:	4b0c      	ldr	r3, [pc, #48]	; (801b7bc <cleanup_stdio+0x34>)
 801b78c:	4299      	cmp	r1, r3
 801b78e:	b510      	push	{r4, lr}
 801b790:	4604      	mov	r4, r0
 801b792:	d001      	beq.n	801b798 <cleanup_stdio+0x10>
 801b794:	f000 fd8e 	bl	801c2b4 <_fflush_r>
 801b798:	68a1      	ldr	r1, [r4, #8]
 801b79a:	4b09      	ldr	r3, [pc, #36]	; (801b7c0 <cleanup_stdio+0x38>)
 801b79c:	4299      	cmp	r1, r3
 801b79e:	d002      	beq.n	801b7a6 <cleanup_stdio+0x1e>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	f000 fd87 	bl	801c2b4 <_fflush_r>
 801b7a6:	68e1      	ldr	r1, [r4, #12]
 801b7a8:	4b06      	ldr	r3, [pc, #24]	; (801b7c4 <cleanup_stdio+0x3c>)
 801b7aa:	4299      	cmp	r1, r3
 801b7ac:	d004      	beq.n	801b7b8 <cleanup_stdio+0x30>
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7b4:	f000 bd7e 	b.w	801c2b4 <_fflush_r>
 801b7b8:	bd10      	pop	{r4, pc}
 801b7ba:	bf00      	nop
 801b7bc:	2400c9ec 	.word	0x2400c9ec
 801b7c0:	2400ca54 	.word	0x2400ca54
 801b7c4:	2400cabc 	.word	0x2400cabc

0801b7c8 <global_stdio_init.part.0>:
 801b7c8:	b510      	push	{r4, lr}
 801b7ca:	4b0b      	ldr	r3, [pc, #44]	; (801b7f8 <global_stdio_init.part.0+0x30>)
 801b7cc:	4c0b      	ldr	r4, [pc, #44]	; (801b7fc <global_stdio_init.part.0+0x34>)
 801b7ce:	4a0c      	ldr	r2, [pc, #48]	; (801b800 <global_stdio_init.part.0+0x38>)
 801b7d0:	601a      	str	r2, [r3, #0]
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	2104      	movs	r1, #4
 801b7d8:	f7ff ff94 	bl	801b704 <std>
 801b7dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b7e0:	2201      	movs	r2, #1
 801b7e2:	2109      	movs	r1, #9
 801b7e4:	f7ff ff8e 	bl	801b704 <std>
 801b7e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b7ec:	2202      	movs	r2, #2
 801b7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7f2:	2112      	movs	r1, #18
 801b7f4:	f7ff bf86 	b.w	801b704 <std>
 801b7f8:	2400cb24 	.word	0x2400cb24
 801b7fc:	2400c9ec 	.word	0x2400c9ec
 801b800:	0801b771 	.word	0x0801b771

0801b804 <__sfp_lock_acquire>:
 801b804:	4801      	ldr	r0, [pc, #4]	; (801b80c <__sfp_lock_acquire+0x8>)
 801b806:	f000 b918 	b.w	801ba3a <__retarget_lock_acquire_recursive>
 801b80a:	bf00      	nop
 801b80c:	2400cb29 	.word	0x2400cb29

0801b810 <__sfp_lock_release>:
 801b810:	4801      	ldr	r0, [pc, #4]	; (801b818 <__sfp_lock_release+0x8>)
 801b812:	f000 b913 	b.w	801ba3c <__retarget_lock_release_recursive>
 801b816:	bf00      	nop
 801b818:	2400cb29 	.word	0x2400cb29

0801b81c <__sinit>:
 801b81c:	b510      	push	{r4, lr}
 801b81e:	4604      	mov	r4, r0
 801b820:	f7ff fff0 	bl	801b804 <__sfp_lock_acquire>
 801b824:	6a23      	ldr	r3, [r4, #32]
 801b826:	b11b      	cbz	r3, 801b830 <__sinit+0x14>
 801b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b82c:	f7ff bff0 	b.w	801b810 <__sfp_lock_release>
 801b830:	4b04      	ldr	r3, [pc, #16]	; (801b844 <__sinit+0x28>)
 801b832:	6223      	str	r3, [r4, #32]
 801b834:	4b04      	ldr	r3, [pc, #16]	; (801b848 <__sinit+0x2c>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d1f5      	bne.n	801b828 <__sinit+0xc>
 801b83c:	f7ff ffc4 	bl	801b7c8 <global_stdio_init.part.0>
 801b840:	e7f2      	b.n	801b828 <__sinit+0xc>
 801b842:	bf00      	nop
 801b844:	0801b789 	.word	0x0801b789
 801b848:	2400cb24 	.word	0x2400cb24

0801b84c <_fwalk_sglue>:
 801b84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b850:	4607      	mov	r7, r0
 801b852:	4688      	mov	r8, r1
 801b854:	4614      	mov	r4, r2
 801b856:	2600      	movs	r6, #0
 801b858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b85c:	f1b9 0901 	subs.w	r9, r9, #1
 801b860:	d505      	bpl.n	801b86e <_fwalk_sglue+0x22>
 801b862:	6824      	ldr	r4, [r4, #0]
 801b864:	2c00      	cmp	r4, #0
 801b866:	d1f7      	bne.n	801b858 <_fwalk_sglue+0xc>
 801b868:	4630      	mov	r0, r6
 801b86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b86e:	89ab      	ldrh	r3, [r5, #12]
 801b870:	2b01      	cmp	r3, #1
 801b872:	d907      	bls.n	801b884 <_fwalk_sglue+0x38>
 801b874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b878:	3301      	adds	r3, #1
 801b87a:	d003      	beq.n	801b884 <_fwalk_sglue+0x38>
 801b87c:	4629      	mov	r1, r5
 801b87e:	4638      	mov	r0, r7
 801b880:	47c0      	blx	r8
 801b882:	4306      	orrs	r6, r0
 801b884:	3568      	adds	r5, #104	; 0x68
 801b886:	e7e9      	b.n	801b85c <_fwalk_sglue+0x10>

0801b888 <iprintf>:
 801b888:	b40f      	push	{r0, r1, r2, r3}
 801b88a:	b507      	push	{r0, r1, r2, lr}
 801b88c:	4906      	ldr	r1, [pc, #24]	; (801b8a8 <iprintf+0x20>)
 801b88e:	ab04      	add	r3, sp, #16
 801b890:	6808      	ldr	r0, [r1, #0]
 801b892:	f853 2b04 	ldr.w	r2, [r3], #4
 801b896:	6881      	ldr	r1, [r0, #8]
 801b898:	9301      	str	r3, [sp, #4]
 801b89a:	f000 f9db 	bl	801bc54 <_vfiprintf_r>
 801b89e:	b003      	add	sp, #12
 801b8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8a4:	b004      	add	sp, #16
 801b8a6:	4770      	bx	lr
 801b8a8:	24000090 	.word	0x24000090

0801b8ac <__sread>:
 801b8ac:	b510      	push	{r4, lr}
 801b8ae:	460c      	mov	r4, r1
 801b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8b4:	f000 f878 	bl	801b9a8 <_read_r>
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	bfab      	itete	ge
 801b8bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b8be:	89a3      	ldrhlt	r3, [r4, #12]
 801b8c0:	181b      	addge	r3, r3, r0
 801b8c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b8c6:	bfac      	ite	ge
 801b8c8:	6563      	strge	r3, [r4, #84]	; 0x54
 801b8ca:	81a3      	strhlt	r3, [r4, #12]
 801b8cc:	bd10      	pop	{r4, pc}

0801b8ce <__swrite>:
 801b8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8d2:	461f      	mov	r7, r3
 801b8d4:	898b      	ldrh	r3, [r1, #12]
 801b8d6:	05db      	lsls	r3, r3, #23
 801b8d8:	4605      	mov	r5, r0
 801b8da:	460c      	mov	r4, r1
 801b8dc:	4616      	mov	r6, r2
 801b8de:	d505      	bpl.n	801b8ec <__swrite+0x1e>
 801b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8e4:	2302      	movs	r3, #2
 801b8e6:	2200      	movs	r2, #0
 801b8e8:	f000 f84c 	bl	801b984 <_lseek_r>
 801b8ec:	89a3      	ldrh	r3, [r4, #12]
 801b8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8f6:	81a3      	strh	r3, [r4, #12]
 801b8f8:	4632      	mov	r2, r6
 801b8fa:	463b      	mov	r3, r7
 801b8fc:	4628      	mov	r0, r5
 801b8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b902:	f000 b863 	b.w	801b9cc <_write_r>

0801b906 <__sseek>:
 801b906:	b510      	push	{r4, lr}
 801b908:	460c      	mov	r4, r1
 801b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b90e:	f000 f839 	bl	801b984 <_lseek_r>
 801b912:	1c43      	adds	r3, r0, #1
 801b914:	89a3      	ldrh	r3, [r4, #12]
 801b916:	bf15      	itete	ne
 801b918:	6560      	strne	r0, [r4, #84]	; 0x54
 801b91a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b91e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b922:	81a3      	strheq	r3, [r4, #12]
 801b924:	bf18      	it	ne
 801b926:	81a3      	strhne	r3, [r4, #12]
 801b928:	bd10      	pop	{r4, pc}

0801b92a <__sclose>:
 801b92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b92e:	f000 b819 	b.w	801b964 <_close_r>

0801b932 <memcmp>:
 801b932:	b510      	push	{r4, lr}
 801b934:	3901      	subs	r1, #1
 801b936:	4402      	add	r2, r0
 801b938:	4290      	cmp	r0, r2
 801b93a:	d101      	bne.n	801b940 <memcmp+0xe>
 801b93c:	2000      	movs	r0, #0
 801b93e:	e005      	b.n	801b94c <memcmp+0x1a>
 801b940:	7803      	ldrb	r3, [r0, #0]
 801b942:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b946:	42a3      	cmp	r3, r4
 801b948:	d001      	beq.n	801b94e <memcmp+0x1c>
 801b94a:	1b18      	subs	r0, r3, r4
 801b94c:	bd10      	pop	{r4, pc}
 801b94e:	3001      	adds	r0, #1
 801b950:	e7f2      	b.n	801b938 <memcmp+0x6>

0801b952 <memset>:
 801b952:	4402      	add	r2, r0
 801b954:	4603      	mov	r3, r0
 801b956:	4293      	cmp	r3, r2
 801b958:	d100      	bne.n	801b95c <memset+0xa>
 801b95a:	4770      	bx	lr
 801b95c:	f803 1b01 	strb.w	r1, [r3], #1
 801b960:	e7f9      	b.n	801b956 <memset+0x4>
	...

0801b964 <_close_r>:
 801b964:	b538      	push	{r3, r4, r5, lr}
 801b966:	4d06      	ldr	r5, [pc, #24]	; (801b980 <_close_r+0x1c>)
 801b968:	2300      	movs	r3, #0
 801b96a:	4604      	mov	r4, r0
 801b96c:	4608      	mov	r0, r1
 801b96e:	602b      	str	r3, [r5, #0]
 801b970:	f7e5 fb21 	bl	8000fb6 <_close>
 801b974:	1c43      	adds	r3, r0, #1
 801b976:	d102      	bne.n	801b97e <_close_r+0x1a>
 801b978:	682b      	ldr	r3, [r5, #0]
 801b97a:	b103      	cbz	r3, 801b97e <_close_r+0x1a>
 801b97c:	6023      	str	r3, [r4, #0]
 801b97e:	bd38      	pop	{r3, r4, r5, pc}
 801b980:	2400c974 	.word	0x2400c974

0801b984 <_lseek_r>:
 801b984:	b538      	push	{r3, r4, r5, lr}
 801b986:	4d07      	ldr	r5, [pc, #28]	; (801b9a4 <_lseek_r+0x20>)
 801b988:	4604      	mov	r4, r0
 801b98a:	4608      	mov	r0, r1
 801b98c:	4611      	mov	r1, r2
 801b98e:	2200      	movs	r2, #0
 801b990:	602a      	str	r2, [r5, #0]
 801b992:	461a      	mov	r2, r3
 801b994:	f7e5 fb36 	bl	8001004 <_lseek>
 801b998:	1c43      	adds	r3, r0, #1
 801b99a:	d102      	bne.n	801b9a2 <_lseek_r+0x1e>
 801b99c:	682b      	ldr	r3, [r5, #0]
 801b99e:	b103      	cbz	r3, 801b9a2 <_lseek_r+0x1e>
 801b9a0:	6023      	str	r3, [r4, #0]
 801b9a2:	bd38      	pop	{r3, r4, r5, pc}
 801b9a4:	2400c974 	.word	0x2400c974

0801b9a8 <_read_r>:
 801b9a8:	b538      	push	{r3, r4, r5, lr}
 801b9aa:	4d07      	ldr	r5, [pc, #28]	; (801b9c8 <_read_r+0x20>)
 801b9ac:	4604      	mov	r4, r0
 801b9ae:	4608      	mov	r0, r1
 801b9b0:	4611      	mov	r1, r2
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	602a      	str	r2, [r5, #0]
 801b9b6:	461a      	mov	r2, r3
 801b9b8:	f7e5 fac4 	bl	8000f44 <_read>
 801b9bc:	1c43      	adds	r3, r0, #1
 801b9be:	d102      	bne.n	801b9c6 <_read_r+0x1e>
 801b9c0:	682b      	ldr	r3, [r5, #0]
 801b9c2:	b103      	cbz	r3, 801b9c6 <_read_r+0x1e>
 801b9c4:	6023      	str	r3, [r4, #0]
 801b9c6:	bd38      	pop	{r3, r4, r5, pc}
 801b9c8:	2400c974 	.word	0x2400c974

0801b9cc <_write_r>:
 801b9cc:	b538      	push	{r3, r4, r5, lr}
 801b9ce:	4d07      	ldr	r5, [pc, #28]	; (801b9ec <_write_r+0x20>)
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	4608      	mov	r0, r1
 801b9d4:	4611      	mov	r1, r2
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	602a      	str	r2, [r5, #0]
 801b9da:	461a      	mov	r2, r3
 801b9dc:	f7e5 facf 	bl	8000f7e <_write>
 801b9e0:	1c43      	adds	r3, r0, #1
 801b9e2:	d102      	bne.n	801b9ea <_write_r+0x1e>
 801b9e4:	682b      	ldr	r3, [r5, #0]
 801b9e6:	b103      	cbz	r3, 801b9ea <_write_r+0x1e>
 801b9e8:	6023      	str	r3, [r4, #0]
 801b9ea:	bd38      	pop	{r3, r4, r5, pc}
 801b9ec:	2400c974 	.word	0x2400c974

0801b9f0 <__libc_init_array>:
 801b9f0:	b570      	push	{r4, r5, r6, lr}
 801b9f2:	4d0d      	ldr	r5, [pc, #52]	; (801ba28 <__libc_init_array+0x38>)
 801b9f4:	4c0d      	ldr	r4, [pc, #52]	; (801ba2c <__libc_init_array+0x3c>)
 801b9f6:	1b64      	subs	r4, r4, r5
 801b9f8:	10a4      	asrs	r4, r4, #2
 801b9fa:	2600      	movs	r6, #0
 801b9fc:	42a6      	cmp	r6, r4
 801b9fe:	d109      	bne.n	801ba14 <__libc_init_array+0x24>
 801ba00:	4d0b      	ldr	r5, [pc, #44]	; (801ba30 <__libc_init_array+0x40>)
 801ba02:	4c0c      	ldr	r4, [pc, #48]	; (801ba34 <__libc_init_array+0x44>)
 801ba04:	f000 fe52 	bl	801c6ac <_init>
 801ba08:	1b64      	subs	r4, r4, r5
 801ba0a:	10a4      	asrs	r4, r4, #2
 801ba0c:	2600      	movs	r6, #0
 801ba0e:	42a6      	cmp	r6, r4
 801ba10:	d105      	bne.n	801ba1e <__libc_init_array+0x2e>
 801ba12:	bd70      	pop	{r4, r5, r6, pc}
 801ba14:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba18:	4798      	blx	r3
 801ba1a:	3601      	adds	r6, #1
 801ba1c:	e7ee      	b.n	801b9fc <__libc_init_array+0xc>
 801ba1e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba22:	4798      	blx	r3
 801ba24:	3601      	adds	r6, #1
 801ba26:	e7f2      	b.n	801ba0e <__libc_init_array+0x1e>
 801ba28:	0801fb8c 	.word	0x0801fb8c
 801ba2c:	0801fb8c 	.word	0x0801fb8c
 801ba30:	0801fb8c 	.word	0x0801fb8c
 801ba34:	0801fb90 	.word	0x0801fb90

0801ba38 <__retarget_lock_init_recursive>:
 801ba38:	4770      	bx	lr

0801ba3a <__retarget_lock_acquire_recursive>:
 801ba3a:	4770      	bx	lr

0801ba3c <__retarget_lock_release_recursive>:
 801ba3c:	4770      	bx	lr

0801ba3e <memcpy>:
 801ba3e:	440a      	add	r2, r1
 801ba40:	4291      	cmp	r1, r2
 801ba42:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba46:	d100      	bne.n	801ba4a <memcpy+0xc>
 801ba48:	4770      	bx	lr
 801ba4a:	b510      	push	{r4, lr}
 801ba4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba54:	4291      	cmp	r1, r2
 801ba56:	d1f9      	bne.n	801ba4c <memcpy+0xe>
 801ba58:	bd10      	pop	{r4, pc}
	...

0801ba5c <__assert_func>:
 801ba5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba5e:	4614      	mov	r4, r2
 801ba60:	461a      	mov	r2, r3
 801ba62:	4b09      	ldr	r3, [pc, #36]	; (801ba88 <__assert_func+0x2c>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	4605      	mov	r5, r0
 801ba68:	68d8      	ldr	r0, [r3, #12]
 801ba6a:	b14c      	cbz	r4, 801ba80 <__assert_func+0x24>
 801ba6c:	4b07      	ldr	r3, [pc, #28]	; (801ba8c <__assert_func+0x30>)
 801ba6e:	9100      	str	r1, [sp, #0]
 801ba70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba74:	4906      	ldr	r1, [pc, #24]	; (801ba90 <__assert_func+0x34>)
 801ba76:	462b      	mov	r3, r5
 801ba78:	f000 fc44 	bl	801c304 <fiprintf>
 801ba7c:	f000 fcfa 	bl	801c474 <abort>
 801ba80:	4b04      	ldr	r3, [pc, #16]	; (801ba94 <__assert_func+0x38>)
 801ba82:	461c      	mov	r4, r3
 801ba84:	e7f3      	b.n	801ba6e <__assert_func+0x12>
 801ba86:	bf00      	nop
 801ba88:	24000090 	.word	0x24000090
 801ba8c:	0801fb1b 	.word	0x0801fb1b
 801ba90:	0801fb28 	.word	0x0801fb28
 801ba94:	0801fb56 	.word	0x0801fb56

0801ba98 <malloc>:
 801ba98:	4b02      	ldr	r3, [pc, #8]	; (801baa4 <malloc+0xc>)
 801ba9a:	4601      	mov	r1, r0
 801ba9c:	6818      	ldr	r0, [r3, #0]
 801ba9e:	f000 b823 	b.w	801bae8 <_malloc_r>
 801baa2:	bf00      	nop
 801baa4:	24000090 	.word	0x24000090

0801baa8 <sbrk_aligned>:
 801baa8:	b570      	push	{r4, r5, r6, lr}
 801baaa:	4e0e      	ldr	r6, [pc, #56]	; (801bae4 <sbrk_aligned+0x3c>)
 801baac:	460c      	mov	r4, r1
 801baae:	6831      	ldr	r1, [r6, #0]
 801bab0:	4605      	mov	r5, r0
 801bab2:	b911      	cbnz	r1, 801baba <sbrk_aligned+0x12>
 801bab4:	f000 fcce 	bl	801c454 <_sbrk_r>
 801bab8:	6030      	str	r0, [r6, #0]
 801baba:	4621      	mov	r1, r4
 801babc:	4628      	mov	r0, r5
 801babe:	f000 fcc9 	bl	801c454 <_sbrk_r>
 801bac2:	1c43      	adds	r3, r0, #1
 801bac4:	d00a      	beq.n	801badc <sbrk_aligned+0x34>
 801bac6:	1cc4      	adds	r4, r0, #3
 801bac8:	f024 0403 	bic.w	r4, r4, #3
 801bacc:	42a0      	cmp	r0, r4
 801bace:	d007      	beq.n	801bae0 <sbrk_aligned+0x38>
 801bad0:	1a21      	subs	r1, r4, r0
 801bad2:	4628      	mov	r0, r5
 801bad4:	f000 fcbe 	bl	801c454 <_sbrk_r>
 801bad8:	3001      	adds	r0, #1
 801bada:	d101      	bne.n	801bae0 <sbrk_aligned+0x38>
 801badc:	f04f 34ff 	mov.w	r4, #4294967295
 801bae0:	4620      	mov	r0, r4
 801bae2:	bd70      	pop	{r4, r5, r6, pc}
 801bae4:	2400cb30 	.word	0x2400cb30

0801bae8 <_malloc_r>:
 801bae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801baec:	1ccd      	adds	r5, r1, #3
 801baee:	f025 0503 	bic.w	r5, r5, #3
 801baf2:	3508      	adds	r5, #8
 801baf4:	2d0c      	cmp	r5, #12
 801baf6:	bf38      	it	cc
 801baf8:	250c      	movcc	r5, #12
 801bafa:	2d00      	cmp	r5, #0
 801bafc:	4607      	mov	r7, r0
 801bafe:	db01      	blt.n	801bb04 <_malloc_r+0x1c>
 801bb00:	42a9      	cmp	r1, r5
 801bb02:	d905      	bls.n	801bb10 <_malloc_r+0x28>
 801bb04:	230c      	movs	r3, #12
 801bb06:	603b      	str	r3, [r7, #0]
 801bb08:	2600      	movs	r6, #0
 801bb0a:	4630      	mov	r0, r6
 801bb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bbe4 <_malloc_r+0xfc>
 801bb14:	f000 f868 	bl	801bbe8 <__malloc_lock>
 801bb18:	f8d8 3000 	ldr.w	r3, [r8]
 801bb1c:	461c      	mov	r4, r3
 801bb1e:	bb5c      	cbnz	r4, 801bb78 <_malloc_r+0x90>
 801bb20:	4629      	mov	r1, r5
 801bb22:	4638      	mov	r0, r7
 801bb24:	f7ff ffc0 	bl	801baa8 <sbrk_aligned>
 801bb28:	1c43      	adds	r3, r0, #1
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	d155      	bne.n	801bbda <_malloc_r+0xf2>
 801bb2e:	f8d8 4000 	ldr.w	r4, [r8]
 801bb32:	4626      	mov	r6, r4
 801bb34:	2e00      	cmp	r6, #0
 801bb36:	d145      	bne.n	801bbc4 <_malloc_r+0xdc>
 801bb38:	2c00      	cmp	r4, #0
 801bb3a:	d048      	beq.n	801bbce <_malloc_r+0xe6>
 801bb3c:	6823      	ldr	r3, [r4, #0]
 801bb3e:	4631      	mov	r1, r6
 801bb40:	4638      	mov	r0, r7
 801bb42:	eb04 0903 	add.w	r9, r4, r3
 801bb46:	f000 fc85 	bl	801c454 <_sbrk_r>
 801bb4a:	4581      	cmp	r9, r0
 801bb4c:	d13f      	bne.n	801bbce <_malloc_r+0xe6>
 801bb4e:	6821      	ldr	r1, [r4, #0]
 801bb50:	1a6d      	subs	r5, r5, r1
 801bb52:	4629      	mov	r1, r5
 801bb54:	4638      	mov	r0, r7
 801bb56:	f7ff ffa7 	bl	801baa8 <sbrk_aligned>
 801bb5a:	3001      	adds	r0, #1
 801bb5c:	d037      	beq.n	801bbce <_malloc_r+0xe6>
 801bb5e:	6823      	ldr	r3, [r4, #0]
 801bb60:	442b      	add	r3, r5
 801bb62:	6023      	str	r3, [r4, #0]
 801bb64:	f8d8 3000 	ldr.w	r3, [r8]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d038      	beq.n	801bbde <_malloc_r+0xf6>
 801bb6c:	685a      	ldr	r2, [r3, #4]
 801bb6e:	42a2      	cmp	r2, r4
 801bb70:	d12b      	bne.n	801bbca <_malloc_r+0xe2>
 801bb72:	2200      	movs	r2, #0
 801bb74:	605a      	str	r2, [r3, #4]
 801bb76:	e00f      	b.n	801bb98 <_malloc_r+0xb0>
 801bb78:	6822      	ldr	r2, [r4, #0]
 801bb7a:	1b52      	subs	r2, r2, r5
 801bb7c:	d41f      	bmi.n	801bbbe <_malloc_r+0xd6>
 801bb7e:	2a0b      	cmp	r2, #11
 801bb80:	d917      	bls.n	801bbb2 <_malloc_r+0xca>
 801bb82:	1961      	adds	r1, r4, r5
 801bb84:	42a3      	cmp	r3, r4
 801bb86:	6025      	str	r5, [r4, #0]
 801bb88:	bf18      	it	ne
 801bb8a:	6059      	strne	r1, [r3, #4]
 801bb8c:	6863      	ldr	r3, [r4, #4]
 801bb8e:	bf08      	it	eq
 801bb90:	f8c8 1000 	streq.w	r1, [r8]
 801bb94:	5162      	str	r2, [r4, r5]
 801bb96:	604b      	str	r3, [r1, #4]
 801bb98:	4638      	mov	r0, r7
 801bb9a:	f104 060b 	add.w	r6, r4, #11
 801bb9e:	f000 f829 	bl	801bbf4 <__malloc_unlock>
 801bba2:	f026 0607 	bic.w	r6, r6, #7
 801bba6:	1d23      	adds	r3, r4, #4
 801bba8:	1af2      	subs	r2, r6, r3
 801bbaa:	d0ae      	beq.n	801bb0a <_malloc_r+0x22>
 801bbac:	1b9b      	subs	r3, r3, r6
 801bbae:	50a3      	str	r3, [r4, r2]
 801bbb0:	e7ab      	b.n	801bb0a <_malloc_r+0x22>
 801bbb2:	42a3      	cmp	r3, r4
 801bbb4:	6862      	ldr	r2, [r4, #4]
 801bbb6:	d1dd      	bne.n	801bb74 <_malloc_r+0x8c>
 801bbb8:	f8c8 2000 	str.w	r2, [r8]
 801bbbc:	e7ec      	b.n	801bb98 <_malloc_r+0xb0>
 801bbbe:	4623      	mov	r3, r4
 801bbc0:	6864      	ldr	r4, [r4, #4]
 801bbc2:	e7ac      	b.n	801bb1e <_malloc_r+0x36>
 801bbc4:	4634      	mov	r4, r6
 801bbc6:	6876      	ldr	r6, [r6, #4]
 801bbc8:	e7b4      	b.n	801bb34 <_malloc_r+0x4c>
 801bbca:	4613      	mov	r3, r2
 801bbcc:	e7cc      	b.n	801bb68 <_malloc_r+0x80>
 801bbce:	230c      	movs	r3, #12
 801bbd0:	603b      	str	r3, [r7, #0]
 801bbd2:	4638      	mov	r0, r7
 801bbd4:	f000 f80e 	bl	801bbf4 <__malloc_unlock>
 801bbd8:	e797      	b.n	801bb0a <_malloc_r+0x22>
 801bbda:	6025      	str	r5, [r4, #0]
 801bbdc:	e7dc      	b.n	801bb98 <_malloc_r+0xb0>
 801bbde:	605b      	str	r3, [r3, #4]
 801bbe0:	deff      	udf	#255	; 0xff
 801bbe2:	bf00      	nop
 801bbe4:	2400cb2c 	.word	0x2400cb2c

0801bbe8 <__malloc_lock>:
 801bbe8:	4801      	ldr	r0, [pc, #4]	; (801bbf0 <__malloc_lock+0x8>)
 801bbea:	f7ff bf26 	b.w	801ba3a <__retarget_lock_acquire_recursive>
 801bbee:	bf00      	nop
 801bbf0:	2400cb28 	.word	0x2400cb28

0801bbf4 <__malloc_unlock>:
 801bbf4:	4801      	ldr	r0, [pc, #4]	; (801bbfc <__malloc_unlock+0x8>)
 801bbf6:	f7ff bf21 	b.w	801ba3c <__retarget_lock_release_recursive>
 801bbfa:	bf00      	nop
 801bbfc:	2400cb28 	.word	0x2400cb28

0801bc00 <__sfputc_r>:
 801bc00:	6893      	ldr	r3, [r2, #8]
 801bc02:	3b01      	subs	r3, #1
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	b410      	push	{r4}
 801bc08:	6093      	str	r3, [r2, #8]
 801bc0a:	da08      	bge.n	801bc1e <__sfputc_r+0x1e>
 801bc0c:	6994      	ldr	r4, [r2, #24]
 801bc0e:	42a3      	cmp	r3, r4
 801bc10:	db01      	blt.n	801bc16 <__sfputc_r+0x16>
 801bc12:	290a      	cmp	r1, #10
 801bc14:	d103      	bne.n	801bc1e <__sfputc_r+0x1e>
 801bc16:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc1a:	f000 bb85 	b.w	801c328 <__swbuf_r>
 801bc1e:	6813      	ldr	r3, [r2, #0]
 801bc20:	1c58      	adds	r0, r3, #1
 801bc22:	6010      	str	r0, [r2, #0]
 801bc24:	7019      	strb	r1, [r3, #0]
 801bc26:	4608      	mov	r0, r1
 801bc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc2c:	4770      	bx	lr

0801bc2e <__sfputs_r>:
 801bc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc30:	4606      	mov	r6, r0
 801bc32:	460f      	mov	r7, r1
 801bc34:	4614      	mov	r4, r2
 801bc36:	18d5      	adds	r5, r2, r3
 801bc38:	42ac      	cmp	r4, r5
 801bc3a:	d101      	bne.n	801bc40 <__sfputs_r+0x12>
 801bc3c:	2000      	movs	r0, #0
 801bc3e:	e007      	b.n	801bc50 <__sfputs_r+0x22>
 801bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc44:	463a      	mov	r2, r7
 801bc46:	4630      	mov	r0, r6
 801bc48:	f7ff ffda 	bl	801bc00 <__sfputc_r>
 801bc4c:	1c43      	adds	r3, r0, #1
 801bc4e:	d1f3      	bne.n	801bc38 <__sfputs_r+0xa>
 801bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc54 <_vfiprintf_r>:
 801bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc58:	460d      	mov	r5, r1
 801bc5a:	b09d      	sub	sp, #116	; 0x74
 801bc5c:	4614      	mov	r4, r2
 801bc5e:	4698      	mov	r8, r3
 801bc60:	4606      	mov	r6, r0
 801bc62:	b118      	cbz	r0, 801bc6c <_vfiprintf_r+0x18>
 801bc64:	6a03      	ldr	r3, [r0, #32]
 801bc66:	b90b      	cbnz	r3, 801bc6c <_vfiprintf_r+0x18>
 801bc68:	f7ff fdd8 	bl	801b81c <__sinit>
 801bc6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc6e:	07d9      	lsls	r1, r3, #31
 801bc70:	d405      	bmi.n	801bc7e <_vfiprintf_r+0x2a>
 801bc72:	89ab      	ldrh	r3, [r5, #12]
 801bc74:	059a      	lsls	r2, r3, #22
 801bc76:	d402      	bmi.n	801bc7e <_vfiprintf_r+0x2a>
 801bc78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc7a:	f7ff fede 	bl	801ba3a <__retarget_lock_acquire_recursive>
 801bc7e:	89ab      	ldrh	r3, [r5, #12]
 801bc80:	071b      	lsls	r3, r3, #28
 801bc82:	d501      	bpl.n	801bc88 <_vfiprintf_r+0x34>
 801bc84:	692b      	ldr	r3, [r5, #16]
 801bc86:	b99b      	cbnz	r3, 801bcb0 <_vfiprintf_r+0x5c>
 801bc88:	4629      	mov	r1, r5
 801bc8a:	4630      	mov	r0, r6
 801bc8c:	f000 fb8a 	bl	801c3a4 <__swsetup_r>
 801bc90:	b170      	cbz	r0, 801bcb0 <_vfiprintf_r+0x5c>
 801bc92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc94:	07dc      	lsls	r4, r3, #31
 801bc96:	d504      	bpl.n	801bca2 <_vfiprintf_r+0x4e>
 801bc98:	f04f 30ff 	mov.w	r0, #4294967295
 801bc9c:	b01d      	add	sp, #116	; 0x74
 801bc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bca2:	89ab      	ldrh	r3, [r5, #12]
 801bca4:	0598      	lsls	r0, r3, #22
 801bca6:	d4f7      	bmi.n	801bc98 <_vfiprintf_r+0x44>
 801bca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcaa:	f7ff fec7 	bl	801ba3c <__retarget_lock_release_recursive>
 801bcae:	e7f3      	b.n	801bc98 <_vfiprintf_r+0x44>
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	9309      	str	r3, [sp, #36]	; 0x24
 801bcb4:	2320      	movs	r3, #32
 801bcb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bcba:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcbe:	2330      	movs	r3, #48	; 0x30
 801bcc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801be74 <_vfiprintf_r+0x220>
 801bcc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bcc8:	f04f 0901 	mov.w	r9, #1
 801bccc:	4623      	mov	r3, r4
 801bcce:	469a      	mov	sl, r3
 801bcd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcd4:	b10a      	cbz	r2, 801bcda <_vfiprintf_r+0x86>
 801bcd6:	2a25      	cmp	r2, #37	; 0x25
 801bcd8:	d1f9      	bne.n	801bcce <_vfiprintf_r+0x7a>
 801bcda:	ebba 0b04 	subs.w	fp, sl, r4
 801bcde:	d00b      	beq.n	801bcf8 <_vfiprintf_r+0xa4>
 801bce0:	465b      	mov	r3, fp
 801bce2:	4622      	mov	r2, r4
 801bce4:	4629      	mov	r1, r5
 801bce6:	4630      	mov	r0, r6
 801bce8:	f7ff ffa1 	bl	801bc2e <__sfputs_r>
 801bcec:	3001      	adds	r0, #1
 801bcee:	f000 80a9 	beq.w	801be44 <_vfiprintf_r+0x1f0>
 801bcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bcf4:	445a      	add	r2, fp
 801bcf6:	9209      	str	r2, [sp, #36]	; 0x24
 801bcf8:	f89a 3000 	ldrb.w	r3, [sl]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	f000 80a1 	beq.w	801be44 <_vfiprintf_r+0x1f0>
 801bd02:	2300      	movs	r3, #0
 801bd04:	f04f 32ff 	mov.w	r2, #4294967295
 801bd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd0c:	f10a 0a01 	add.w	sl, sl, #1
 801bd10:	9304      	str	r3, [sp, #16]
 801bd12:	9307      	str	r3, [sp, #28]
 801bd14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd18:	931a      	str	r3, [sp, #104]	; 0x68
 801bd1a:	4654      	mov	r4, sl
 801bd1c:	2205      	movs	r2, #5
 801bd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd22:	4854      	ldr	r0, [pc, #336]	; (801be74 <_vfiprintf_r+0x220>)
 801bd24:	f7e4 fadc 	bl	80002e0 <memchr>
 801bd28:	9a04      	ldr	r2, [sp, #16]
 801bd2a:	b9d8      	cbnz	r0, 801bd64 <_vfiprintf_r+0x110>
 801bd2c:	06d1      	lsls	r1, r2, #27
 801bd2e:	bf44      	itt	mi
 801bd30:	2320      	movmi	r3, #32
 801bd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd36:	0713      	lsls	r3, r2, #28
 801bd38:	bf44      	itt	mi
 801bd3a:	232b      	movmi	r3, #43	; 0x2b
 801bd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd40:	f89a 3000 	ldrb.w	r3, [sl]
 801bd44:	2b2a      	cmp	r3, #42	; 0x2a
 801bd46:	d015      	beq.n	801bd74 <_vfiprintf_r+0x120>
 801bd48:	9a07      	ldr	r2, [sp, #28]
 801bd4a:	4654      	mov	r4, sl
 801bd4c:	2000      	movs	r0, #0
 801bd4e:	f04f 0c0a 	mov.w	ip, #10
 801bd52:	4621      	mov	r1, r4
 801bd54:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd58:	3b30      	subs	r3, #48	; 0x30
 801bd5a:	2b09      	cmp	r3, #9
 801bd5c:	d94d      	bls.n	801bdfa <_vfiprintf_r+0x1a6>
 801bd5e:	b1b0      	cbz	r0, 801bd8e <_vfiprintf_r+0x13a>
 801bd60:	9207      	str	r2, [sp, #28]
 801bd62:	e014      	b.n	801bd8e <_vfiprintf_r+0x13a>
 801bd64:	eba0 0308 	sub.w	r3, r0, r8
 801bd68:	fa09 f303 	lsl.w	r3, r9, r3
 801bd6c:	4313      	orrs	r3, r2
 801bd6e:	9304      	str	r3, [sp, #16]
 801bd70:	46a2      	mov	sl, r4
 801bd72:	e7d2      	b.n	801bd1a <_vfiprintf_r+0xc6>
 801bd74:	9b03      	ldr	r3, [sp, #12]
 801bd76:	1d19      	adds	r1, r3, #4
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	9103      	str	r1, [sp, #12]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	bfbb      	ittet	lt
 801bd80:	425b      	neglt	r3, r3
 801bd82:	f042 0202 	orrlt.w	r2, r2, #2
 801bd86:	9307      	strge	r3, [sp, #28]
 801bd88:	9307      	strlt	r3, [sp, #28]
 801bd8a:	bfb8      	it	lt
 801bd8c:	9204      	strlt	r2, [sp, #16]
 801bd8e:	7823      	ldrb	r3, [r4, #0]
 801bd90:	2b2e      	cmp	r3, #46	; 0x2e
 801bd92:	d10c      	bne.n	801bdae <_vfiprintf_r+0x15a>
 801bd94:	7863      	ldrb	r3, [r4, #1]
 801bd96:	2b2a      	cmp	r3, #42	; 0x2a
 801bd98:	d134      	bne.n	801be04 <_vfiprintf_r+0x1b0>
 801bd9a:	9b03      	ldr	r3, [sp, #12]
 801bd9c:	1d1a      	adds	r2, r3, #4
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	9203      	str	r2, [sp, #12]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	bfb8      	it	lt
 801bda6:	f04f 33ff 	movlt.w	r3, #4294967295
 801bdaa:	3402      	adds	r4, #2
 801bdac:	9305      	str	r3, [sp, #20]
 801bdae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801be84 <_vfiprintf_r+0x230>
 801bdb2:	7821      	ldrb	r1, [r4, #0]
 801bdb4:	2203      	movs	r2, #3
 801bdb6:	4650      	mov	r0, sl
 801bdb8:	f7e4 fa92 	bl	80002e0 <memchr>
 801bdbc:	b138      	cbz	r0, 801bdce <_vfiprintf_r+0x17a>
 801bdbe:	9b04      	ldr	r3, [sp, #16]
 801bdc0:	eba0 000a 	sub.w	r0, r0, sl
 801bdc4:	2240      	movs	r2, #64	; 0x40
 801bdc6:	4082      	lsls	r2, r0
 801bdc8:	4313      	orrs	r3, r2
 801bdca:	3401      	adds	r4, #1
 801bdcc:	9304      	str	r3, [sp, #16]
 801bdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdd2:	4829      	ldr	r0, [pc, #164]	; (801be78 <_vfiprintf_r+0x224>)
 801bdd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdd8:	2206      	movs	r2, #6
 801bdda:	f7e4 fa81 	bl	80002e0 <memchr>
 801bdde:	2800      	cmp	r0, #0
 801bde0:	d03f      	beq.n	801be62 <_vfiprintf_r+0x20e>
 801bde2:	4b26      	ldr	r3, [pc, #152]	; (801be7c <_vfiprintf_r+0x228>)
 801bde4:	bb1b      	cbnz	r3, 801be2e <_vfiprintf_r+0x1da>
 801bde6:	9b03      	ldr	r3, [sp, #12]
 801bde8:	3307      	adds	r3, #7
 801bdea:	f023 0307 	bic.w	r3, r3, #7
 801bdee:	3308      	adds	r3, #8
 801bdf0:	9303      	str	r3, [sp, #12]
 801bdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf4:	443b      	add	r3, r7
 801bdf6:	9309      	str	r3, [sp, #36]	; 0x24
 801bdf8:	e768      	b.n	801bccc <_vfiprintf_r+0x78>
 801bdfa:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdfe:	460c      	mov	r4, r1
 801be00:	2001      	movs	r0, #1
 801be02:	e7a6      	b.n	801bd52 <_vfiprintf_r+0xfe>
 801be04:	2300      	movs	r3, #0
 801be06:	3401      	adds	r4, #1
 801be08:	9305      	str	r3, [sp, #20]
 801be0a:	4619      	mov	r1, r3
 801be0c:	f04f 0c0a 	mov.w	ip, #10
 801be10:	4620      	mov	r0, r4
 801be12:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be16:	3a30      	subs	r2, #48	; 0x30
 801be18:	2a09      	cmp	r2, #9
 801be1a:	d903      	bls.n	801be24 <_vfiprintf_r+0x1d0>
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d0c6      	beq.n	801bdae <_vfiprintf_r+0x15a>
 801be20:	9105      	str	r1, [sp, #20]
 801be22:	e7c4      	b.n	801bdae <_vfiprintf_r+0x15a>
 801be24:	fb0c 2101 	mla	r1, ip, r1, r2
 801be28:	4604      	mov	r4, r0
 801be2a:	2301      	movs	r3, #1
 801be2c:	e7f0      	b.n	801be10 <_vfiprintf_r+0x1bc>
 801be2e:	ab03      	add	r3, sp, #12
 801be30:	9300      	str	r3, [sp, #0]
 801be32:	462a      	mov	r2, r5
 801be34:	4b12      	ldr	r3, [pc, #72]	; (801be80 <_vfiprintf_r+0x22c>)
 801be36:	a904      	add	r1, sp, #16
 801be38:	4630      	mov	r0, r6
 801be3a:	f3af 8000 	nop.w
 801be3e:	4607      	mov	r7, r0
 801be40:	1c78      	adds	r0, r7, #1
 801be42:	d1d6      	bne.n	801bdf2 <_vfiprintf_r+0x19e>
 801be44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be46:	07d9      	lsls	r1, r3, #31
 801be48:	d405      	bmi.n	801be56 <_vfiprintf_r+0x202>
 801be4a:	89ab      	ldrh	r3, [r5, #12]
 801be4c:	059a      	lsls	r2, r3, #22
 801be4e:	d402      	bmi.n	801be56 <_vfiprintf_r+0x202>
 801be50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be52:	f7ff fdf3 	bl	801ba3c <__retarget_lock_release_recursive>
 801be56:	89ab      	ldrh	r3, [r5, #12]
 801be58:	065b      	lsls	r3, r3, #25
 801be5a:	f53f af1d 	bmi.w	801bc98 <_vfiprintf_r+0x44>
 801be5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be60:	e71c      	b.n	801bc9c <_vfiprintf_r+0x48>
 801be62:	ab03      	add	r3, sp, #12
 801be64:	9300      	str	r3, [sp, #0]
 801be66:	462a      	mov	r2, r5
 801be68:	4b05      	ldr	r3, [pc, #20]	; (801be80 <_vfiprintf_r+0x22c>)
 801be6a:	a904      	add	r1, sp, #16
 801be6c:	4630      	mov	r0, r6
 801be6e:	f000 f879 	bl	801bf64 <_printf_i>
 801be72:	e7e4      	b.n	801be3e <_vfiprintf_r+0x1ea>
 801be74:	0801fb57 	.word	0x0801fb57
 801be78:	0801fb61 	.word	0x0801fb61
 801be7c:	00000000 	.word	0x00000000
 801be80:	0801bc2f 	.word	0x0801bc2f
 801be84:	0801fb5d 	.word	0x0801fb5d

0801be88 <_printf_common>:
 801be88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be8c:	4616      	mov	r6, r2
 801be8e:	4699      	mov	r9, r3
 801be90:	688a      	ldr	r2, [r1, #8]
 801be92:	690b      	ldr	r3, [r1, #16]
 801be94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801be98:	4293      	cmp	r3, r2
 801be9a:	bfb8      	it	lt
 801be9c:	4613      	movlt	r3, r2
 801be9e:	6033      	str	r3, [r6, #0]
 801bea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bea4:	4607      	mov	r7, r0
 801bea6:	460c      	mov	r4, r1
 801bea8:	b10a      	cbz	r2, 801beae <_printf_common+0x26>
 801beaa:	3301      	adds	r3, #1
 801beac:	6033      	str	r3, [r6, #0]
 801beae:	6823      	ldr	r3, [r4, #0]
 801beb0:	0699      	lsls	r1, r3, #26
 801beb2:	bf42      	ittt	mi
 801beb4:	6833      	ldrmi	r3, [r6, #0]
 801beb6:	3302      	addmi	r3, #2
 801beb8:	6033      	strmi	r3, [r6, #0]
 801beba:	6825      	ldr	r5, [r4, #0]
 801bebc:	f015 0506 	ands.w	r5, r5, #6
 801bec0:	d106      	bne.n	801bed0 <_printf_common+0x48>
 801bec2:	f104 0a19 	add.w	sl, r4, #25
 801bec6:	68e3      	ldr	r3, [r4, #12]
 801bec8:	6832      	ldr	r2, [r6, #0]
 801beca:	1a9b      	subs	r3, r3, r2
 801becc:	42ab      	cmp	r3, r5
 801bece:	dc26      	bgt.n	801bf1e <_printf_common+0x96>
 801bed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bed4:	1e13      	subs	r3, r2, #0
 801bed6:	6822      	ldr	r2, [r4, #0]
 801bed8:	bf18      	it	ne
 801beda:	2301      	movne	r3, #1
 801bedc:	0692      	lsls	r2, r2, #26
 801bede:	d42b      	bmi.n	801bf38 <_printf_common+0xb0>
 801bee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bee4:	4649      	mov	r1, r9
 801bee6:	4638      	mov	r0, r7
 801bee8:	47c0      	blx	r8
 801beea:	3001      	adds	r0, #1
 801beec:	d01e      	beq.n	801bf2c <_printf_common+0xa4>
 801beee:	6823      	ldr	r3, [r4, #0]
 801bef0:	6922      	ldr	r2, [r4, #16]
 801bef2:	f003 0306 	and.w	r3, r3, #6
 801bef6:	2b04      	cmp	r3, #4
 801bef8:	bf02      	ittt	eq
 801befa:	68e5      	ldreq	r5, [r4, #12]
 801befc:	6833      	ldreq	r3, [r6, #0]
 801befe:	1aed      	subeq	r5, r5, r3
 801bf00:	68a3      	ldr	r3, [r4, #8]
 801bf02:	bf0c      	ite	eq
 801bf04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf08:	2500      	movne	r5, #0
 801bf0a:	4293      	cmp	r3, r2
 801bf0c:	bfc4      	itt	gt
 801bf0e:	1a9b      	subgt	r3, r3, r2
 801bf10:	18ed      	addgt	r5, r5, r3
 801bf12:	2600      	movs	r6, #0
 801bf14:	341a      	adds	r4, #26
 801bf16:	42b5      	cmp	r5, r6
 801bf18:	d11a      	bne.n	801bf50 <_printf_common+0xc8>
 801bf1a:	2000      	movs	r0, #0
 801bf1c:	e008      	b.n	801bf30 <_printf_common+0xa8>
 801bf1e:	2301      	movs	r3, #1
 801bf20:	4652      	mov	r2, sl
 801bf22:	4649      	mov	r1, r9
 801bf24:	4638      	mov	r0, r7
 801bf26:	47c0      	blx	r8
 801bf28:	3001      	adds	r0, #1
 801bf2a:	d103      	bne.n	801bf34 <_printf_common+0xac>
 801bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf34:	3501      	adds	r5, #1
 801bf36:	e7c6      	b.n	801bec6 <_printf_common+0x3e>
 801bf38:	18e1      	adds	r1, r4, r3
 801bf3a:	1c5a      	adds	r2, r3, #1
 801bf3c:	2030      	movs	r0, #48	; 0x30
 801bf3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bf42:	4422      	add	r2, r4
 801bf44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bf48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bf4c:	3302      	adds	r3, #2
 801bf4e:	e7c7      	b.n	801bee0 <_printf_common+0x58>
 801bf50:	2301      	movs	r3, #1
 801bf52:	4622      	mov	r2, r4
 801bf54:	4649      	mov	r1, r9
 801bf56:	4638      	mov	r0, r7
 801bf58:	47c0      	blx	r8
 801bf5a:	3001      	adds	r0, #1
 801bf5c:	d0e6      	beq.n	801bf2c <_printf_common+0xa4>
 801bf5e:	3601      	adds	r6, #1
 801bf60:	e7d9      	b.n	801bf16 <_printf_common+0x8e>
	...

0801bf64 <_printf_i>:
 801bf64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf68:	7e0f      	ldrb	r7, [r1, #24]
 801bf6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bf6c:	2f78      	cmp	r7, #120	; 0x78
 801bf6e:	4691      	mov	r9, r2
 801bf70:	4680      	mov	r8, r0
 801bf72:	460c      	mov	r4, r1
 801bf74:	469a      	mov	sl, r3
 801bf76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bf7a:	d807      	bhi.n	801bf8c <_printf_i+0x28>
 801bf7c:	2f62      	cmp	r7, #98	; 0x62
 801bf7e:	d80a      	bhi.n	801bf96 <_printf_i+0x32>
 801bf80:	2f00      	cmp	r7, #0
 801bf82:	f000 80d4 	beq.w	801c12e <_printf_i+0x1ca>
 801bf86:	2f58      	cmp	r7, #88	; 0x58
 801bf88:	f000 80c0 	beq.w	801c10c <_printf_i+0x1a8>
 801bf8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bf90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bf94:	e03a      	b.n	801c00c <_printf_i+0xa8>
 801bf96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bf9a:	2b15      	cmp	r3, #21
 801bf9c:	d8f6      	bhi.n	801bf8c <_printf_i+0x28>
 801bf9e:	a101      	add	r1, pc, #4	; (adr r1, 801bfa4 <_printf_i+0x40>)
 801bfa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bfa4:	0801bffd 	.word	0x0801bffd
 801bfa8:	0801c011 	.word	0x0801c011
 801bfac:	0801bf8d 	.word	0x0801bf8d
 801bfb0:	0801bf8d 	.word	0x0801bf8d
 801bfb4:	0801bf8d 	.word	0x0801bf8d
 801bfb8:	0801bf8d 	.word	0x0801bf8d
 801bfbc:	0801c011 	.word	0x0801c011
 801bfc0:	0801bf8d 	.word	0x0801bf8d
 801bfc4:	0801bf8d 	.word	0x0801bf8d
 801bfc8:	0801bf8d 	.word	0x0801bf8d
 801bfcc:	0801bf8d 	.word	0x0801bf8d
 801bfd0:	0801c115 	.word	0x0801c115
 801bfd4:	0801c03d 	.word	0x0801c03d
 801bfd8:	0801c0cf 	.word	0x0801c0cf
 801bfdc:	0801bf8d 	.word	0x0801bf8d
 801bfe0:	0801bf8d 	.word	0x0801bf8d
 801bfe4:	0801c137 	.word	0x0801c137
 801bfe8:	0801bf8d 	.word	0x0801bf8d
 801bfec:	0801c03d 	.word	0x0801c03d
 801bff0:	0801bf8d 	.word	0x0801bf8d
 801bff4:	0801bf8d 	.word	0x0801bf8d
 801bff8:	0801c0d7 	.word	0x0801c0d7
 801bffc:	682b      	ldr	r3, [r5, #0]
 801bffe:	1d1a      	adds	r2, r3, #4
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	602a      	str	r2, [r5, #0]
 801c004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c00c:	2301      	movs	r3, #1
 801c00e:	e09f      	b.n	801c150 <_printf_i+0x1ec>
 801c010:	6820      	ldr	r0, [r4, #0]
 801c012:	682b      	ldr	r3, [r5, #0]
 801c014:	0607      	lsls	r7, r0, #24
 801c016:	f103 0104 	add.w	r1, r3, #4
 801c01a:	6029      	str	r1, [r5, #0]
 801c01c:	d501      	bpl.n	801c022 <_printf_i+0xbe>
 801c01e:	681e      	ldr	r6, [r3, #0]
 801c020:	e003      	b.n	801c02a <_printf_i+0xc6>
 801c022:	0646      	lsls	r6, r0, #25
 801c024:	d5fb      	bpl.n	801c01e <_printf_i+0xba>
 801c026:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c02a:	2e00      	cmp	r6, #0
 801c02c:	da03      	bge.n	801c036 <_printf_i+0xd2>
 801c02e:	232d      	movs	r3, #45	; 0x2d
 801c030:	4276      	negs	r6, r6
 801c032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c036:	485a      	ldr	r0, [pc, #360]	; (801c1a0 <_printf_i+0x23c>)
 801c038:	230a      	movs	r3, #10
 801c03a:	e012      	b.n	801c062 <_printf_i+0xfe>
 801c03c:	682b      	ldr	r3, [r5, #0]
 801c03e:	6820      	ldr	r0, [r4, #0]
 801c040:	1d19      	adds	r1, r3, #4
 801c042:	6029      	str	r1, [r5, #0]
 801c044:	0605      	lsls	r5, r0, #24
 801c046:	d501      	bpl.n	801c04c <_printf_i+0xe8>
 801c048:	681e      	ldr	r6, [r3, #0]
 801c04a:	e002      	b.n	801c052 <_printf_i+0xee>
 801c04c:	0641      	lsls	r1, r0, #25
 801c04e:	d5fb      	bpl.n	801c048 <_printf_i+0xe4>
 801c050:	881e      	ldrh	r6, [r3, #0]
 801c052:	4853      	ldr	r0, [pc, #332]	; (801c1a0 <_printf_i+0x23c>)
 801c054:	2f6f      	cmp	r7, #111	; 0x6f
 801c056:	bf0c      	ite	eq
 801c058:	2308      	moveq	r3, #8
 801c05a:	230a      	movne	r3, #10
 801c05c:	2100      	movs	r1, #0
 801c05e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c062:	6865      	ldr	r5, [r4, #4]
 801c064:	60a5      	str	r5, [r4, #8]
 801c066:	2d00      	cmp	r5, #0
 801c068:	bfa2      	ittt	ge
 801c06a:	6821      	ldrge	r1, [r4, #0]
 801c06c:	f021 0104 	bicge.w	r1, r1, #4
 801c070:	6021      	strge	r1, [r4, #0]
 801c072:	b90e      	cbnz	r6, 801c078 <_printf_i+0x114>
 801c074:	2d00      	cmp	r5, #0
 801c076:	d04b      	beq.n	801c110 <_printf_i+0x1ac>
 801c078:	4615      	mov	r5, r2
 801c07a:	fbb6 f1f3 	udiv	r1, r6, r3
 801c07e:	fb03 6711 	mls	r7, r3, r1, r6
 801c082:	5dc7      	ldrb	r7, [r0, r7]
 801c084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c088:	4637      	mov	r7, r6
 801c08a:	42bb      	cmp	r3, r7
 801c08c:	460e      	mov	r6, r1
 801c08e:	d9f4      	bls.n	801c07a <_printf_i+0x116>
 801c090:	2b08      	cmp	r3, #8
 801c092:	d10b      	bne.n	801c0ac <_printf_i+0x148>
 801c094:	6823      	ldr	r3, [r4, #0]
 801c096:	07de      	lsls	r6, r3, #31
 801c098:	d508      	bpl.n	801c0ac <_printf_i+0x148>
 801c09a:	6923      	ldr	r3, [r4, #16]
 801c09c:	6861      	ldr	r1, [r4, #4]
 801c09e:	4299      	cmp	r1, r3
 801c0a0:	bfde      	ittt	le
 801c0a2:	2330      	movle	r3, #48	; 0x30
 801c0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c0ac:	1b52      	subs	r2, r2, r5
 801c0ae:	6122      	str	r2, [r4, #16]
 801c0b0:	f8cd a000 	str.w	sl, [sp]
 801c0b4:	464b      	mov	r3, r9
 801c0b6:	aa03      	add	r2, sp, #12
 801c0b8:	4621      	mov	r1, r4
 801c0ba:	4640      	mov	r0, r8
 801c0bc:	f7ff fee4 	bl	801be88 <_printf_common>
 801c0c0:	3001      	adds	r0, #1
 801c0c2:	d14a      	bne.n	801c15a <_printf_i+0x1f6>
 801c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0c8:	b004      	add	sp, #16
 801c0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0ce:	6823      	ldr	r3, [r4, #0]
 801c0d0:	f043 0320 	orr.w	r3, r3, #32
 801c0d4:	6023      	str	r3, [r4, #0]
 801c0d6:	4833      	ldr	r0, [pc, #204]	; (801c1a4 <_printf_i+0x240>)
 801c0d8:	2778      	movs	r7, #120	; 0x78
 801c0da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c0de:	6823      	ldr	r3, [r4, #0]
 801c0e0:	6829      	ldr	r1, [r5, #0]
 801c0e2:	061f      	lsls	r7, r3, #24
 801c0e4:	f851 6b04 	ldr.w	r6, [r1], #4
 801c0e8:	d402      	bmi.n	801c0f0 <_printf_i+0x18c>
 801c0ea:	065f      	lsls	r7, r3, #25
 801c0ec:	bf48      	it	mi
 801c0ee:	b2b6      	uxthmi	r6, r6
 801c0f0:	07df      	lsls	r7, r3, #31
 801c0f2:	bf48      	it	mi
 801c0f4:	f043 0320 	orrmi.w	r3, r3, #32
 801c0f8:	6029      	str	r1, [r5, #0]
 801c0fa:	bf48      	it	mi
 801c0fc:	6023      	strmi	r3, [r4, #0]
 801c0fe:	b91e      	cbnz	r6, 801c108 <_printf_i+0x1a4>
 801c100:	6823      	ldr	r3, [r4, #0]
 801c102:	f023 0320 	bic.w	r3, r3, #32
 801c106:	6023      	str	r3, [r4, #0]
 801c108:	2310      	movs	r3, #16
 801c10a:	e7a7      	b.n	801c05c <_printf_i+0xf8>
 801c10c:	4824      	ldr	r0, [pc, #144]	; (801c1a0 <_printf_i+0x23c>)
 801c10e:	e7e4      	b.n	801c0da <_printf_i+0x176>
 801c110:	4615      	mov	r5, r2
 801c112:	e7bd      	b.n	801c090 <_printf_i+0x12c>
 801c114:	682b      	ldr	r3, [r5, #0]
 801c116:	6826      	ldr	r6, [r4, #0]
 801c118:	6961      	ldr	r1, [r4, #20]
 801c11a:	1d18      	adds	r0, r3, #4
 801c11c:	6028      	str	r0, [r5, #0]
 801c11e:	0635      	lsls	r5, r6, #24
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	d501      	bpl.n	801c128 <_printf_i+0x1c4>
 801c124:	6019      	str	r1, [r3, #0]
 801c126:	e002      	b.n	801c12e <_printf_i+0x1ca>
 801c128:	0670      	lsls	r0, r6, #25
 801c12a:	d5fb      	bpl.n	801c124 <_printf_i+0x1c0>
 801c12c:	8019      	strh	r1, [r3, #0]
 801c12e:	2300      	movs	r3, #0
 801c130:	6123      	str	r3, [r4, #16]
 801c132:	4615      	mov	r5, r2
 801c134:	e7bc      	b.n	801c0b0 <_printf_i+0x14c>
 801c136:	682b      	ldr	r3, [r5, #0]
 801c138:	1d1a      	adds	r2, r3, #4
 801c13a:	602a      	str	r2, [r5, #0]
 801c13c:	681d      	ldr	r5, [r3, #0]
 801c13e:	6862      	ldr	r2, [r4, #4]
 801c140:	2100      	movs	r1, #0
 801c142:	4628      	mov	r0, r5
 801c144:	f7e4 f8cc 	bl	80002e0 <memchr>
 801c148:	b108      	cbz	r0, 801c14e <_printf_i+0x1ea>
 801c14a:	1b40      	subs	r0, r0, r5
 801c14c:	6060      	str	r0, [r4, #4]
 801c14e:	6863      	ldr	r3, [r4, #4]
 801c150:	6123      	str	r3, [r4, #16]
 801c152:	2300      	movs	r3, #0
 801c154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c158:	e7aa      	b.n	801c0b0 <_printf_i+0x14c>
 801c15a:	6923      	ldr	r3, [r4, #16]
 801c15c:	462a      	mov	r2, r5
 801c15e:	4649      	mov	r1, r9
 801c160:	4640      	mov	r0, r8
 801c162:	47d0      	blx	sl
 801c164:	3001      	adds	r0, #1
 801c166:	d0ad      	beq.n	801c0c4 <_printf_i+0x160>
 801c168:	6823      	ldr	r3, [r4, #0]
 801c16a:	079b      	lsls	r3, r3, #30
 801c16c:	d413      	bmi.n	801c196 <_printf_i+0x232>
 801c16e:	68e0      	ldr	r0, [r4, #12]
 801c170:	9b03      	ldr	r3, [sp, #12]
 801c172:	4298      	cmp	r0, r3
 801c174:	bfb8      	it	lt
 801c176:	4618      	movlt	r0, r3
 801c178:	e7a6      	b.n	801c0c8 <_printf_i+0x164>
 801c17a:	2301      	movs	r3, #1
 801c17c:	4632      	mov	r2, r6
 801c17e:	4649      	mov	r1, r9
 801c180:	4640      	mov	r0, r8
 801c182:	47d0      	blx	sl
 801c184:	3001      	adds	r0, #1
 801c186:	d09d      	beq.n	801c0c4 <_printf_i+0x160>
 801c188:	3501      	adds	r5, #1
 801c18a:	68e3      	ldr	r3, [r4, #12]
 801c18c:	9903      	ldr	r1, [sp, #12]
 801c18e:	1a5b      	subs	r3, r3, r1
 801c190:	42ab      	cmp	r3, r5
 801c192:	dcf2      	bgt.n	801c17a <_printf_i+0x216>
 801c194:	e7eb      	b.n	801c16e <_printf_i+0x20a>
 801c196:	2500      	movs	r5, #0
 801c198:	f104 0619 	add.w	r6, r4, #25
 801c19c:	e7f5      	b.n	801c18a <_printf_i+0x226>
 801c19e:	bf00      	nop
 801c1a0:	0801fb68 	.word	0x0801fb68
 801c1a4:	0801fb79 	.word	0x0801fb79

0801c1a8 <__sflush_r>:
 801c1a8:	898a      	ldrh	r2, [r1, #12]
 801c1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1ae:	4605      	mov	r5, r0
 801c1b0:	0710      	lsls	r0, r2, #28
 801c1b2:	460c      	mov	r4, r1
 801c1b4:	d458      	bmi.n	801c268 <__sflush_r+0xc0>
 801c1b6:	684b      	ldr	r3, [r1, #4]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	dc05      	bgt.n	801c1c8 <__sflush_r+0x20>
 801c1bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	dc02      	bgt.n	801c1c8 <__sflush_r+0x20>
 801c1c2:	2000      	movs	r0, #0
 801c1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1ca:	2e00      	cmp	r6, #0
 801c1cc:	d0f9      	beq.n	801c1c2 <__sflush_r+0x1a>
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c1d4:	682f      	ldr	r7, [r5, #0]
 801c1d6:	6a21      	ldr	r1, [r4, #32]
 801c1d8:	602b      	str	r3, [r5, #0]
 801c1da:	d032      	beq.n	801c242 <__sflush_r+0x9a>
 801c1dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c1de:	89a3      	ldrh	r3, [r4, #12]
 801c1e0:	075a      	lsls	r2, r3, #29
 801c1e2:	d505      	bpl.n	801c1f0 <__sflush_r+0x48>
 801c1e4:	6863      	ldr	r3, [r4, #4]
 801c1e6:	1ac0      	subs	r0, r0, r3
 801c1e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c1ea:	b10b      	cbz	r3, 801c1f0 <__sflush_r+0x48>
 801c1ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1ee:	1ac0      	subs	r0, r0, r3
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1f6:	6a21      	ldr	r1, [r4, #32]
 801c1f8:	4628      	mov	r0, r5
 801c1fa:	47b0      	blx	r6
 801c1fc:	1c43      	adds	r3, r0, #1
 801c1fe:	89a3      	ldrh	r3, [r4, #12]
 801c200:	d106      	bne.n	801c210 <__sflush_r+0x68>
 801c202:	6829      	ldr	r1, [r5, #0]
 801c204:	291d      	cmp	r1, #29
 801c206:	d82b      	bhi.n	801c260 <__sflush_r+0xb8>
 801c208:	4a29      	ldr	r2, [pc, #164]	; (801c2b0 <__sflush_r+0x108>)
 801c20a:	410a      	asrs	r2, r1
 801c20c:	07d6      	lsls	r6, r2, #31
 801c20e:	d427      	bmi.n	801c260 <__sflush_r+0xb8>
 801c210:	2200      	movs	r2, #0
 801c212:	6062      	str	r2, [r4, #4]
 801c214:	04d9      	lsls	r1, r3, #19
 801c216:	6922      	ldr	r2, [r4, #16]
 801c218:	6022      	str	r2, [r4, #0]
 801c21a:	d504      	bpl.n	801c226 <__sflush_r+0x7e>
 801c21c:	1c42      	adds	r2, r0, #1
 801c21e:	d101      	bne.n	801c224 <__sflush_r+0x7c>
 801c220:	682b      	ldr	r3, [r5, #0]
 801c222:	b903      	cbnz	r3, 801c226 <__sflush_r+0x7e>
 801c224:	6560      	str	r0, [r4, #84]	; 0x54
 801c226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c228:	602f      	str	r7, [r5, #0]
 801c22a:	2900      	cmp	r1, #0
 801c22c:	d0c9      	beq.n	801c1c2 <__sflush_r+0x1a>
 801c22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c232:	4299      	cmp	r1, r3
 801c234:	d002      	beq.n	801c23c <__sflush_r+0x94>
 801c236:	4628      	mov	r0, r5
 801c238:	f000 f924 	bl	801c484 <_free_r>
 801c23c:	2000      	movs	r0, #0
 801c23e:	6360      	str	r0, [r4, #52]	; 0x34
 801c240:	e7c0      	b.n	801c1c4 <__sflush_r+0x1c>
 801c242:	2301      	movs	r3, #1
 801c244:	4628      	mov	r0, r5
 801c246:	47b0      	blx	r6
 801c248:	1c41      	adds	r1, r0, #1
 801c24a:	d1c8      	bne.n	801c1de <__sflush_r+0x36>
 801c24c:	682b      	ldr	r3, [r5, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d0c5      	beq.n	801c1de <__sflush_r+0x36>
 801c252:	2b1d      	cmp	r3, #29
 801c254:	d001      	beq.n	801c25a <__sflush_r+0xb2>
 801c256:	2b16      	cmp	r3, #22
 801c258:	d101      	bne.n	801c25e <__sflush_r+0xb6>
 801c25a:	602f      	str	r7, [r5, #0]
 801c25c:	e7b1      	b.n	801c1c2 <__sflush_r+0x1a>
 801c25e:	89a3      	ldrh	r3, [r4, #12]
 801c260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c264:	81a3      	strh	r3, [r4, #12]
 801c266:	e7ad      	b.n	801c1c4 <__sflush_r+0x1c>
 801c268:	690f      	ldr	r7, [r1, #16]
 801c26a:	2f00      	cmp	r7, #0
 801c26c:	d0a9      	beq.n	801c1c2 <__sflush_r+0x1a>
 801c26e:	0793      	lsls	r3, r2, #30
 801c270:	680e      	ldr	r6, [r1, #0]
 801c272:	bf08      	it	eq
 801c274:	694b      	ldreq	r3, [r1, #20]
 801c276:	600f      	str	r7, [r1, #0]
 801c278:	bf18      	it	ne
 801c27a:	2300      	movne	r3, #0
 801c27c:	eba6 0807 	sub.w	r8, r6, r7
 801c280:	608b      	str	r3, [r1, #8]
 801c282:	f1b8 0f00 	cmp.w	r8, #0
 801c286:	dd9c      	ble.n	801c1c2 <__sflush_r+0x1a>
 801c288:	6a21      	ldr	r1, [r4, #32]
 801c28a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c28c:	4643      	mov	r3, r8
 801c28e:	463a      	mov	r2, r7
 801c290:	4628      	mov	r0, r5
 801c292:	47b0      	blx	r6
 801c294:	2800      	cmp	r0, #0
 801c296:	dc06      	bgt.n	801c2a6 <__sflush_r+0xfe>
 801c298:	89a3      	ldrh	r3, [r4, #12]
 801c29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c29e:	81a3      	strh	r3, [r4, #12]
 801c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c2a4:	e78e      	b.n	801c1c4 <__sflush_r+0x1c>
 801c2a6:	4407      	add	r7, r0
 801c2a8:	eba8 0800 	sub.w	r8, r8, r0
 801c2ac:	e7e9      	b.n	801c282 <__sflush_r+0xda>
 801c2ae:	bf00      	nop
 801c2b0:	dfbffffe 	.word	0xdfbffffe

0801c2b4 <_fflush_r>:
 801c2b4:	b538      	push	{r3, r4, r5, lr}
 801c2b6:	690b      	ldr	r3, [r1, #16]
 801c2b8:	4605      	mov	r5, r0
 801c2ba:	460c      	mov	r4, r1
 801c2bc:	b913      	cbnz	r3, 801c2c4 <_fflush_r+0x10>
 801c2be:	2500      	movs	r5, #0
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	bd38      	pop	{r3, r4, r5, pc}
 801c2c4:	b118      	cbz	r0, 801c2ce <_fflush_r+0x1a>
 801c2c6:	6a03      	ldr	r3, [r0, #32]
 801c2c8:	b90b      	cbnz	r3, 801c2ce <_fflush_r+0x1a>
 801c2ca:	f7ff faa7 	bl	801b81c <__sinit>
 801c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d0f3      	beq.n	801c2be <_fflush_r+0xa>
 801c2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c2d8:	07d0      	lsls	r0, r2, #31
 801c2da:	d404      	bmi.n	801c2e6 <_fflush_r+0x32>
 801c2dc:	0599      	lsls	r1, r3, #22
 801c2de:	d402      	bmi.n	801c2e6 <_fflush_r+0x32>
 801c2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c2e2:	f7ff fbaa 	bl	801ba3a <__retarget_lock_acquire_recursive>
 801c2e6:	4628      	mov	r0, r5
 801c2e8:	4621      	mov	r1, r4
 801c2ea:	f7ff ff5d 	bl	801c1a8 <__sflush_r>
 801c2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c2f0:	07da      	lsls	r2, r3, #31
 801c2f2:	4605      	mov	r5, r0
 801c2f4:	d4e4      	bmi.n	801c2c0 <_fflush_r+0xc>
 801c2f6:	89a3      	ldrh	r3, [r4, #12]
 801c2f8:	059b      	lsls	r3, r3, #22
 801c2fa:	d4e1      	bmi.n	801c2c0 <_fflush_r+0xc>
 801c2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c2fe:	f7ff fb9d 	bl	801ba3c <__retarget_lock_release_recursive>
 801c302:	e7dd      	b.n	801c2c0 <_fflush_r+0xc>

0801c304 <fiprintf>:
 801c304:	b40e      	push	{r1, r2, r3}
 801c306:	b503      	push	{r0, r1, lr}
 801c308:	4601      	mov	r1, r0
 801c30a:	ab03      	add	r3, sp, #12
 801c30c:	4805      	ldr	r0, [pc, #20]	; (801c324 <fiprintf+0x20>)
 801c30e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c312:	6800      	ldr	r0, [r0, #0]
 801c314:	9301      	str	r3, [sp, #4]
 801c316:	f7ff fc9d 	bl	801bc54 <_vfiprintf_r>
 801c31a:	b002      	add	sp, #8
 801c31c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c320:	b003      	add	sp, #12
 801c322:	4770      	bx	lr
 801c324:	24000090 	.word	0x24000090

0801c328 <__swbuf_r>:
 801c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c32a:	460e      	mov	r6, r1
 801c32c:	4614      	mov	r4, r2
 801c32e:	4605      	mov	r5, r0
 801c330:	b118      	cbz	r0, 801c33a <__swbuf_r+0x12>
 801c332:	6a03      	ldr	r3, [r0, #32]
 801c334:	b90b      	cbnz	r3, 801c33a <__swbuf_r+0x12>
 801c336:	f7ff fa71 	bl	801b81c <__sinit>
 801c33a:	69a3      	ldr	r3, [r4, #24]
 801c33c:	60a3      	str	r3, [r4, #8]
 801c33e:	89a3      	ldrh	r3, [r4, #12]
 801c340:	071a      	lsls	r2, r3, #28
 801c342:	d525      	bpl.n	801c390 <__swbuf_r+0x68>
 801c344:	6923      	ldr	r3, [r4, #16]
 801c346:	b31b      	cbz	r3, 801c390 <__swbuf_r+0x68>
 801c348:	6823      	ldr	r3, [r4, #0]
 801c34a:	6922      	ldr	r2, [r4, #16]
 801c34c:	1a98      	subs	r0, r3, r2
 801c34e:	6963      	ldr	r3, [r4, #20]
 801c350:	b2f6      	uxtb	r6, r6
 801c352:	4283      	cmp	r3, r0
 801c354:	4637      	mov	r7, r6
 801c356:	dc04      	bgt.n	801c362 <__swbuf_r+0x3a>
 801c358:	4621      	mov	r1, r4
 801c35a:	4628      	mov	r0, r5
 801c35c:	f7ff ffaa 	bl	801c2b4 <_fflush_r>
 801c360:	b9e0      	cbnz	r0, 801c39c <__swbuf_r+0x74>
 801c362:	68a3      	ldr	r3, [r4, #8]
 801c364:	3b01      	subs	r3, #1
 801c366:	60a3      	str	r3, [r4, #8]
 801c368:	6823      	ldr	r3, [r4, #0]
 801c36a:	1c5a      	adds	r2, r3, #1
 801c36c:	6022      	str	r2, [r4, #0]
 801c36e:	701e      	strb	r6, [r3, #0]
 801c370:	6962      	ldr	r2, [r4, #20]
 801c372:	1c43      	adds	r3, r0, #1
 801c374:	429a      	cmp	r2, r3
 801c376:	d004      	beq.n	801c382 <__swbuf_r+0x5a>
 801c378:	89a3      	ldrh	r3, [r4, #12]
 801c37a:	07db      	lsls	r3, r3, #31
 801c37c:	d506      	bpl.n	801c38c <__swbuf_r+0x64>
 801c37e:	2e0a      	cmp	r6, #10
 801c380:	d104      	bne.n	801c38c <__swbuf_r+0x64>
 801c382:	4621      	mov	r1, r4
 801c384:	4628      	mov	r0, r5
 801c386:	f7ff ff95 	bl	801c2b4 <_fflush_r>
 801c38a:	b938      	cbnz	r0, 801c39c <__swbuf_r+0x74>
 801c38c:	4638      	mov	r0, r7
 801c38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c390:	4621      	mov	r1, r4
 801c392:	4628      	mov	r0, r5
 801c394:	f000 f806 	bl	801c3a4 <__swsetup_r>
 801c398:	2800      	cmp	r0, #0
 801c39a:	d0d5      	beq.n	801c348 <__swbuf_r+0x20>
 801c39c:	f04f 37ff 	mov.w	r7, #4294967295
 801c3a0:	e7f4      	b.n	801c38c <__swbuf_r+0x64>
	...

0801c3a4 <__swsetup_r>:
 801c3a4:	b538      	push	{r3, r4, r5, lr}
 801c3a6:	4b2a      	ldr	r3, [pc, #168]	; (801c450 <__swsetup_r+0xac>)
 801c3a8:	4605      	mov	r5, r0
 801c3aa:	6818      	ldr	r0, [r3, #0]
 801c3ac:	460c      	mov	r4, r1
 801c3ae:	b118      	cbz	r0, 801c3b8 <__swsetup_r+0x14>
 801c3b0:	6a03      	ldr	r3, [r0, #32]
 801c3b2:	b90b      	cbnz	r3, 801c3b8 <__swsetup_r+0x14>
 801c3b4:	f7ff fa32 	bl	801b81c <__sinit>
 801c3b8:	89a3      	ldrh	r3, [r4, #12]
 801c3ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c3be:	0718      	lsls	r0, r3, #28
 801c3c0:	d422      	bmi.n	801c408 <__swsetup_r+0x64>
 801c3c2:	06d9      	lsls	r1, r3, #27
 801c3c4:	d407      	bmi.n	801c3d6 <__swsetup_r+0x32>
 801c3c6:	2309      	movs	r3, #9
 801c3c8:	602b      	str	r3, [r5, #0]
 801c3ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c3ce:	81a3      	strh	r3, [r4, #12]
 801c3d0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3d4:	e034      	b.n	801c440 <__swsetup_r+0x9c>
 801c3d6:	0758      	lsls	r0, r3, #29
 801c3d8:	d512      	bpl.n	801c400 <__swsetup_r+0x5c>
 801c3da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c3dc:	b141      	cbz	r1, 801c3f0 <__swsetup_r+0x4c>
 801c3de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c3e2:	4299      	cmp	r1, r3
 801c3e4:	d002      	beq.n	801c3ec <__swsetup_r+0x48>
 801c3e6:	4628      	mov	r0, r5
 801c3e8:	f000 f84c 	bl	801c484 <_free_r>
 801c3ec:	2300      	movs	r3, #0
 801c3ee:	6363      	str	r3, [r4, #52]	; 0x34
 801c3f0:	89a3      	ldrh	r3, [r4, #12]
 801c3f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c3f6:	81a3      	strh	r3, [r4, #12]
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	6063      	str	r3, [r4, #4]
 801c3fc:	6923      	ldr	r3, [r4, #16]
 801c3fe:	6023      	str	r3, [r4, #0]
 801c400:	89a3      	ldrh	r3, [r4, #12]
 801c402:	f043 0308 	orr.w	r3, r3, #8
 801c406:	81a3      	strh	r3, [r4, #12]
 801c408:	6923      	ldr	r3, [r4, #16]
 801c40a:	b94b      	cbnz	r3, 801c420 <__swsetup_r+0x7c>
 801c40c:	89a3      	ldrh	r3, [r4, #12]
 801c40e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c416:	d003      	beq.n	801c420 <__swsetup_r+0x7c>
 801c418:	4621      	mov	r1, r4
 801c41a:	4628      	mov	r0, r5
 801c41c:	f000 f8a4 	bl	801c568 <__smakebuf_r>
 801c420:	89a0      	ldrh	r0, [r4, #12]
 801c422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c426:	f010 0301 	ands.w	r3, r0, #1
 801c42a:	d00a      	beq.n	801c442 <__swsetup_r+0x9e>
 801c42c:	2300      	movs	r3, #0
 801c42e:	60a3      	str	r3, [r4, #8]
 801c430:	6963      	ldr	r3, [r4, #20]
 801c432:	425b      	negs	r3, r3
 801c434:	61a3      	str	r3, [r4, #24]
 801c436:	6923      	ldr	r3, [r4, #16]
 801c438:	b943      	cbnz	r3, 801c44c <__swsetup_r+0xa8>
 801c43a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c43e:	d1c4      	bne.n	801c3ca <__swsetup_r+0x26>
 801c440:	bd38      	pop	{r3, r4, r5, pc}
 801c442:	0781      	lsls	r1, r0, #30
 801c444:	bf58      	it	pl
 801c446:	6963      	ldrpl	r3, [r4, #20]
 801c448:	60a3      	str	r3, [r4, #8]
 801c44a:	e7f4      	b.n	801c436 <__swsetup_r+0x92>
 801c44c:	2000      	movs	r0, #0
 801c44e:	e7f7      	b.n	801c440 <__swsetup_r+0x9c>
 801c450:	24000090 	.word	0x24000090

0801c454 <_sbrk_r>:
 801c454:	b538      	push	{r3, r4, r5, lr}
 801c456:	4d06      	ldr	r5, [pc, #24]	; (801c470 <_sbrk_r+0x1c>)
 801c458:	2300      	movs	r3, #0
 801c45a:	4604      	mov	r4, r0
 801c45c:	4608      	mov	r0, r1
 801c45e:	602b      	str	r3, [r5, #0]
 801c460:	f7e4 fdde 	bl	8001020 <_sbrk>
 801c464:	1c43      	adds	r3, r0, #1
 801c466:	d102      	bne.n	801c46e <_sbrk_r+0x1a>
 801c468:	682b      	ldr	r3, [r5, #0]
 801c46a:	b103      	cbz	r3, 801c46e <_sbrk_r+0x1a>
 801c46c:	6023      	str	r3, [r4, #0]
 801c46e:	bd38      	pop	{r3, r4, r5, pc}
 801c470:	2400c974 	.word	0x2400c974

0801c474 <abort>:
 801c474:	b508      	push	{r3, lr}
 801c476:	2006      	movs	r0, #6
 801c478:	f000 f8da 	bl	801c630 <raise>
 801c47c:	2001      	movs	r0, #1
 801c47e:	f7e4 fd57 	bl	8000f30 <_exit>
	...

0801c484 <_free_r>:
 801c484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c486:	2900      	cmp	r1, #0
 801c488:	d044      	beq.n	801c514 <_free_r+0x90>
 801c48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c48e:	9001      	str	r0, [sp, #4]
 801c490:	2b00      	cmp	r3, #0
 801c492:	f1a1 0404 	sub.w	r4, r1, #4
 801c496:	bfb8      	it	lt
 801c498:	18e4      	addlt	r4, r4, r3
 801c49a:	f7ff fba5 	bl	801bbe8 <__malloc_lock>
 801c49e:	4a1e      	ldr	r2, [pc, #120]	; (801c518 <_free_r+0x94>)
 801c4a0:	9801      	ldr	r0, [sp, #4]
 801c4a2:	6813      	ldr	r3, [r2, #0]
 801c4a4:	b933      	cbnz	r3, 801c4b4 <_free_r+0x30>
 801c4a6:	6063      	str	r3, [r4, #4]
 801c4a8:	6014      	str	r4, [r2, #0]
 801c4aa:	b003      	add	sp, #12
 801c4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c4b0:	f7ff bba0 	b.w	801bbf4 <__malloc_unlock>
 801c4b4:	42a3      	cmp	r3, r4
 801c4b6:	d908      	bls.n	801c4ca <_free_r+0x46>
 801c4b8:	6825      	ldr	r5, [r4, #0]
 801c4ba:	1961      	adds	r1, r4, r5
 801c4bc:	428b      	cmp	r3, r1
 801c4be:	bf01      	itttt	eq
 801c4c0:	6819      	ldreq	r1, [r3, #0]
 801c4c2:	685b      	ldreq	r3, [r3, #4]
 801c4c4:	1949      	addeq	r1, r1, r5
 801c4c6:	6021      	streq	r1, [r4, #0]
 801c4c8:	e7ed      	b.n	801c4a6 <_free_r+0x22>
 801c4ca:	461a      	mov	r2, r3
 801c4cc:	685b      	ldr	r3, [r3, #4]
 801c4ce:	b10b      	cbz	r3, 801c4d4 <_free_r+0x50>
 801c4d0:	42a3      	cmp	r3, r4
 801c4d2:	d9fa      	bls.n	801c4ca <_free_r+0x46>
 801c4d4:	6811      	ldr	r1, [r2, #0]
 801c4d6:	1855      	adds	r5, r2, r1
 801c4d8:	42a5      	cmp	r5, r4
 801c4da:	d10b      	bne.n	801c4f4 <_free_r+0x70>
 801c4dc:	6824      	ldr	r4, [r4, #0]
 801c4de:	4421      	add	r1, r4
 801c4e0:	1854      	adds	r4, r2, r1
 801c4e2:	42a3      	cmp	r3, r4
 801c4e4:	6011      	str	r1, [r2, #0]
 801c4e6:	d1e0      	bne.n	801c4aa <_free_r+0x26>
 801c4e8:	681c      	ldr	r4, [r3, #0]
 801c4ea:	685b      	ldr	r3, [r3, #4]
 801c4ec:	6053      	str	r3, [r2, #4]
 801c4ee:	440c      	add	r4, r1
 801c4f0:	6014      	str	r4, [r2, #0]
 801c4f2:	e7da      	b.n	801c4aa <_free_r+0x26>
 801c4f4:	d902      	bls.n	801c4fc <_free_r+0x78>
 801c4f6:	230c      	movs	r3, #12
 801c4f8:	6003      	str	r3, [r0, #0]
 801c4fa:	e7d6      	b.n	801c4aa <_free_r+0x26>
 801c4fc:	6825      	ldr	r5, [r4, #0]
 801c4fe:	1961      	adds	r1, r4, r5
 801c500:	428b      	cmp	r3, r1
 801c502:	bf04      	itt	eq
 801c504:	6819      	ldreq	r1, [r3, #0]
 801c506:	685b      	ldreq	r3, [r3, #4]
 801c508:	6063      	str	r3, [r4, #4]
 801c50a:	bf04      	itt	eq
 801c50c:	1949      	addeq	r1, r1, r5
 801c50e:	6021      	streq	r1, [r4, #0]
 801c510:	6054      	str	r4, [r2, #4]
 801c512:	e7ca      	b.n	801c4aa <_free_r+0x26>
 801c514:	b003      	add	sp, #12
 801c516:	bd30      	pop	{r4, r5, pc}
 801c518:	2400cb2c 	.word	0x2400cb2c

0801c51c <__swhatbuf_r>:
 801c51c:	b570      	push	{r4, r5, r6, lr}
 801c51e:	460c      	mov	r4, r1
 801c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c524:	2900      	cmp	r1, #0
 801c526:	b096      	sub	sp, #88	; 0x58
 801c528:	4615      	mov	r5, r2
 801c52a:	461e      	mov	r6, r3
 801c52c:	da0d      	bge.n	801c54a <__swhatbuf_r+0x2e>
 801c52e:	89a3      	ldrh	r3, [r4, #12]
 801c530:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c534:	f04f 0100 	mov.w	r1, #0
 801c538:	bf0c      	ite	eq
 801c53a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c53e:	2340      	movne	r3, #64	; 0x40
 801c540:	2000      	movs	r0, #0
 801c542:	6031      	str	r1, [r6, #0]
 801c544:	602b      	str	r3, [r5, #0]
 801c546:	b016      	add	sp, #88	; 0x58
 801c548:	bd70      	pop	{r4, r5, r6, pc}
 801c54a:	466a      	mov	r2, sp
 801c54c:	f000 f878 	bl	801c640 <_fstat_r>
 801c550:	2800      	cmp	r0, #0
 801c552:	dbec      	blt.n	801c52e <__swhatbuf_r+0x12>
 801c554:	9901      	ldr	r1, [sp, #4]
 801c556:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c55a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c55e:	4259      	negs	r1, r3
 801c560:	4159      	adcs	r1, r3
 801c562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c566:	e7eb      	b.n	801c540 <__swhatbuf_r+0x24>

0801c568 <__smakebuf_r>:
 801c568:	898b      	ldrh	r3, [r1, #12]
 801c56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c56c:	079d      	lsls	r5, r3, #30
 801c56e:	4606      	mov	r6, r0
 801c570:	460c      	mov	r4, r1
 801c572:	d507      	bpl.n	801c584 <__smakebuf_r+0x1c>
 801c574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c578:	6023      	str	r3, [r4, #0]
 801c57a:	6123      	str	r3, [r4, #16]
 801c57c:	2301      	movs	r3, #1
 801c57e:	6163      	str	r3, [r4, #20]
 801c580:	b002      	add	sp, #8
 801c582:	bd70      	pop	{r4, r5, r6, pc}
 801c584:	ab01      	add	r3, sp, #4
 801c586:	466a      	mov	r2, sp
 801c588:	f7ff ffc8 	bl	801c51c <__swhatbuf_r>
 801c58c:	9900      	ldr	r1, [sp, #0]
 801c58e:	4605      	mov	r5, r0
 801c590:	4630      	mov	r0, r6
 801c592:	f7ff faa9 	bl	801bae8 <_malloc_r>
 801c596:	b948      	cbnz	r0, 801c5ac <__smakebuf_r+0x44>
 801c598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c59c:	059a      	lsls	r2, r3, #22
 801c59e:	d4ef      	bmi.n	801c580 <__smakebuf_r+0x18>
 801c5a0:	f023 0303 	bic.w	r3, r3, #3
 801c5a4:	f043 0302 	orr.w	r3, r3, #2
 801c5a8:	81a3      	strh	r3, [r4, #12]
 801c5aa:	e7e3      	b.n	801c574 <__smakebuf_r+0xc>
 801c5ac:	89a3      	ldrh	r3, [r4, #12]
 801c5ae:	6020      	str	r0, [r4, #0]
 801c5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c5b4:	81a3      	strh	r3, [r4, #12]
 801c5b6:	9b00      	ldr	r3, [sp, #0]
 801c5b8:	6163      	str	r3, [r4, #20]
 801c5ba:	9b01      	ldr	r3, [sp, #4]
 801c5bc:	6120      	str	r0, [r4, #16]
 801c5be:	b15b      	cbz	r3, 801c5d8 <__smakebuf_r+0x70>
 801c5c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5c4:	4630      	mov	r0, r6
 801c5c6:	f000 f84d 	bl	801c664 <_isatty_r>
 801c5ca:	b128      	cbz	r0, 801c5d8 <__smakebuf_r+0x70>
 801c5cc:	89a3      	ldrh	r3, [r4, #12]
 801c5ce:	f023 0303 	bic.w	r3, r3, #3
 801c5d2:	f043 0301 	orr.w	r3, r3, #1
 801c5d6:	81a3      	strh	r3, [r4, #12]
 801c5d8:	89a3      	ldrh	r3, [r4, #12]
 801c5da:	431d      	orrs	r5, r3
 801c5dc:	81a5      	strh	r5, [r4, #12]
 801c5de:	e7cf      	b.n	801c580 <__smakebuf_r+0x18>

0801c5e0 <_raise_r>:
 801c5e0:	291f      	cmp	r1, #31
 801c5e2:	b538      	push	{r3, r4, r5, lr}
 801c5e4:	4604      	mov	r4, r0
 801c5e6:	460d      	mov	r5, r1
 801c5e8:	d904      	bls.n	801c5f4 <_raise_r+0x14>
 801c5ea:	2316      	movs	r3, #22
 801c5ec:	6003      	str	r3, [r0, #0]
 801c5ee:	f04f 30ff 	mov.w	r0, #4294967295
 801c5f2:	bd38      	pop	{r3, r4, r5, pc}
 801c5f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c5f6:	b112      	cbz	r2, 801c5fe <_raise_r+0x1e>
 801c5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c5fc:	b94b      	cbnz	r3, 801c612 <_raise_r+0x32>
 801c5fe:	4620      	mov	r0, r4
 801c600:	f000 f852 	bl	801c6a8 <_getpid_r>
 801c604:	462a      	mov	r2, r5
 801c606:	4601      	mov	r1, r0
 801c608:	4620      	mov	r0, r4
 801c60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c60e:	f000 b839 	b.w	801c684 <_kill_r>
 801c612:	2b01      	cmp	r3, #1
 801c614:	d00a      	beq.n	801c62c <_raise_r+0x4c>
 801c616:	1c59      	adds	r1, r3, #1
 801c618:	d103      	bne.n	801c622 <_raise_r+0x42>
 801c61a:	2316      	movs	r3, #22
 801c61c:	6003      	str	r3, [r0, #0]
 801c61e:	2001      	movs	r0, #1
 801c620:	e7e7      	b.n	801c5f2 <_raise_r+0x12>
 801c622:	2400      	movs	r4, #0
 801c624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c628:	4628      	mov	r0, r5
 801c62a:	4798      	blx	r3
 801c62c:	2000      	movs	r0, #0
 801c62e:	e7e0      	b.n	801c5f2 <_raise_r+0x12>

0801c630 <raise>:
 801c630:	4b02      	ldr	r3, [pc, #8]	; (801c63c <raise+0xc>)
 801c632:	4601      	mov	r1, r0
 801c634:	6818      	ldr	r0, [r3, #0]
 801c636:	f7ff bfd3 	b.w	801c5e0 <_raise_r>
 801c63a:	bf00      	nop
 801c63c:	24000090 	.word	0x24000090

0801c640 <_fstat_r>:
 801c640:	b538      	push	{r3, r4, r5, lr}
 801c642:	4d07      	ldr	r5, [pc, #28]	; (801c660 <_fstat_r+0x20>)
 801c644:	2300      	movs	r3, #0
 801c646:	4604      	mov	r4, r0
 801c648:	4608      	mov	r0, r1
 801c64a:	4611      	mov	r1, r2
 801c64c:	602b      	str	r3, [r5, #0]
 801c64e:	f7e4 fcbe 	bl	8000fce <_fstat>
 801c652:	1c43      	adds	r3, r0, #1
 801c654:	d102      	bne.n	801c65c <_fstat_r+0x1c>
 801c656:	682b      	ldr	r3, [r5, #0]
 801c658:	b103      	cbz	r3, 801c65c <_fstat_r+0x1c>
 801c65a:	6023      	str	r3, [r4, #0]
 801c65c:	bd38      	pop	{r3, r4, r5, pc}
 801c65e:	bf00      	nop
 801c660:	2400c974 	.word	0x2400c974

0801c664 <_isatty_r>:
 801c664:	b538      	push	{r3, r4, r5, lr}
 801c666:	4d06      	ldr	r5, [pc, #24]	; (801c680 <_isatty_r+0x1c>)
 801c668:	2300      	movs	r3, #0
 801c66a:	4604      	mov	r4, r0
 801c66c:	4608      	mov	r0, r1
 801c66e:	602b      	str	r3, [r5, #0]
 801c670:	f7e4 fcbd 	bl	8000fee <_isatty>
 801c674:	1c43      	adds	r3, r0, #1
 801c676:	d102      	bne.n	801c67e <_isatty_r+0x1a>
 801c678:	682b      	ldr	r3, [r5, #0]
 801c67a:	b103      	cbz	r3, 801c67e <_isatty_r+0x1a>
 801c67c:	6023      	str	r3, [r4, #0]
 801c67e:	bd38      	pop	{r3, r4, r5, pc}
 801c680:	2400c974 	.word	0x2400c974

0801c684 <_kill_r>:
 801c684:	b538      	push	{r3, r4, r5, lr}
 801c686:	4d07      	ldr	r5, [pc, #28]	; (801c6a4 <_kill_r+0x20>)
 801c688:	2300      	movs	r3, #0
 801c68a:	4604      	mov	r4, r0
 801c68c:	4608      	mov	r0, r1
 801c68e:	4611      	mov	r1, r2
 801c690:	602b      	str	r3, [r5, #0]
 801c692:	f7e4 fc3b 	bl	8000f0c <_kill>
 801c696:	1c43      	adds	r3, r0, #1
 801c698:	d102      	bne.n	801c6a0 <_kill_r+0x1c>
 801c69a:	682b      	ldr	r3, [r5, #0]
 801c69c:	b103      	cbz	r3, 801c6a0 <_kill_r+0x1c>
 801c69e:	6023      	str	r3, [r4, #0]
 801c6a0:	bd38      	pop	{r3, r4, r5, pc}
 801c6a2:	bf00      	nop
 801c6a4:	2400c974 	.word	0x2400c974

0801c6a8 <_getpid_r>:
 801c6a8:	f7e4 bc28 	b.w	8000efc <_getpid>

0801c6ac <_init>:
 801c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ae:	bf00      	nop
 801c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6b2:	bc08      	pop	{r3}
 801c6b4:	469e      	mov	lr, r3
 801c6b6:	4770      	bx	lr

0801c6b8 <_fini>:
 801c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ba:	bf00      	nop
 801c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6be:	bc08      	pop	{r3}
 801c6c0:	469e      	mov	lr, r3
 801c6c2:	4770      	bx	lr
